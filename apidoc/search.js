window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = {"version": "0.9.5", "fields": ["qualname", "fullname", "annotation", "default_value", "signature", "bases", "doc"], "ref": "fullname", "documentStore": {"docs": {"icepool": {"fullname": "icepool", "modulename": "icepool", "kind": "module", "doc": "<p>Package for computing dice and card probabilities.</p>\n\n<p>See <a href=\"https://highdiceroller.github.io/icepool/notebooks/lab/index.html\">this JupyterLite distribution</a>\nfor examples.</p>\n\n<p><a href=\"https://github.com/HighDiceRoller/icepool\">Visit the project page.</a></p>\n\n<p>General conventions:</p>\n\n<ul>\n<li>Instances are immutable (apart from internal caching). Anything that looks\nlike it mutates an instance actually returns a separate instance with the\nchange.</li>\n<li>Unless explictly specified otherwise, all sorting is in ascending order.</li>\n<li>Unless explictly specified otherwise, elements with zero quantity, rolls, etc.\nare considered.</li>\n<li>The words \"min\" and \"max\" refer to outcomes, and the words \"low\" and \"high\"\nrefer to dice in a pool.</li>\n</ul>\n"}, "icepool.standard": {"fullname": "icepool.standard", "modulename": "icepool", "qualname": "standard", "kind": "function", "doc": "<p>A standard die.</p>\n\n<p>Specifically, the outcomes are <code>int</code>s from <code>1</code> to <code>sides</code> inclusive,\nwith quantity 1 each.</p>\n\n<p>Don't confuse this with <code>icepool.Die()</code>:</p>\n\n<ul>\n<li><code>icepool.Die([6])</code>: A <code>Die</code> that always rolls the integer 6.</li>\n<li><code>icepool.d(6)</code>: A d6.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sides</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.d": {"fullname": "icepool.d", "modulename": "icepool", "qualname": "d", "kind": "function", "doc": "<p>A standard die.</p>\n\n<p>Specifically, the outcomes are <code>int</code>s from <code>1</code> to <code>sides</code> inclusive,\nwith quantity 1 each.</p>\n\n<p>Don't confuse this with <code>icepool.Die()</code>:</p>\n\n<ul>\n<li><code>icepool.Die([6])</code>: A <code>Die</code> that always rolls the integer 6.</li>\n<li><code>icepool.d(6)</code>: A d6.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sides</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.bernoulli": {"fullname": "icepool.bernoulli", "modulename": "icepool", "qualname": "bernoulli", "kind": "function", "doc": "<p>A <code>Die</code> that rolls <code>True</code> with probability <code>n / d</code>, and <code>False</code> otherwise.</p>\n\n<p>If <code>n == 0</code> or <code>n == d</code> the result will have only one outcome.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">d</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.coin": {"fullname": "icepool.coin", "modulename": "icepool", "qualname": "coin", "kind": "function", "doc": "<p>A <code>Die</code> that rolls <code>True</code> with probability <code>n / d</code>, and <code>False</code> otherwise.</p>\n\n<p>If <code>n == 0</code> or <code>n == d</code> the result will have only one outcome.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">d</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.one_hot": {"fullname": "icepool.one_hot", "modulename": "icepool", "qualname": "one_hot", "kind": "function", "doc": "<p>A <code>Die</code> with tuple outcomes with one element set to <code>True</code> uniformly at random and the rest <code>False</code>.</p>\n\n<p>This is an easy (if expensive) way of representing how many dice in a pool\nrolled each number. For example, the outcomes of <code>10 @ one_hot(6)</code> are\nthe <code>(ones, twos, threes, fours, fives, sixes)</code> rolled in 10d6.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sides</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "icepool.cartesian_product": {"fullname": "icepool.cartesian_product", "modulename": "icepool", "qualname": "cartesian_product", "kind": "function", "doc": "<p>Produces a <code>Die</code> whose outcomes are tuples of the outcomes of each of the inputs.</p>\n\n<p>E.g. <code>outer_product(d6, d6)</code> would produce tuples\n<code>(1, 1), (1, 2), ... (6, 6)</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">dice</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span> <span class=\"o\">|</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Outcome</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Outcome": {"fullname": "icepool.Outcome", "modulename": "icepool", "qualname": "Outcome", "kind": "class", "doc": "<p>Protocol to verify that outcomes are hashable and sortable.</p>\n", "bases": "typing.Hashable, typing.Protocol[-T_contra]"}, "icepool.Outcome.__init__": {"fullname": "icepool.Outcome.__init__", "modulename": "icepool", "qualname": "Outcome.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, "icepool.Die": {"fullname": "icepool.Die", "modulename": "icepool", "qualname": "Die", "kind": "class", "doc": "<p>Sampling with replacement. Quantities represent weights.</p>\n\n<p>Dice are immutable. Methods do not modify the <code>Die</code> in-place;\nrather they return a <code>Die</code> representing the result.</p>\n\n<p>It <em>is</em> (mostly) well-defined to have a <code>Die</code> with zero-quantity outcomes.\nThese can be useful in a few cases, such as:</p>\n\n<ul>\n<li><code>OutcomeCountEvaluator</code> will iterate through zero-quantity outcomes,\nrather than possibly skipping that outcome. (Though in most cases it's\nbetter to use <code>OutcomeCountEvaluator.alignment()</code>.)</li>\n<li><code>icepool.align()</code> and the like are convenient for making dice share the\nsame set of outcomes.</li>\n</ul>\n\n<p>However, zero-quantity outcomes have a computational cost like any other\noutcome. Unless you have a specific use case in mind, it's best to leave\nthem out.</p>\n\n<p>Most operators and methods will not introduce zero-quantity outcomes if\ntheir arguments do not have any; nor remove zero-quantity outcomes.</p>\n\n<p>It's also possible to have \"empty\" dice with no outcomes at all,\nthough these have little use other than being sentinel values.</p>\n", "bases": "icepool.population.Population[~T]"}, "icepool.Die.__init__": {"fullname": "icepool.Die.__init__", "modulename": "icepool", "qualname": "Die.__init__", "kind": "function", "doc": "<p>Constructor for a <code>Die</code>.</p>\n\n<p>Don't confuse this with <code>d()</code>:</p>\n\n<ul>\n<li><code>Die([6])</code>: A <code>Die</code> that always rolls the <code>int</code> 6.</li>\n<li><code>d(6)</code>: A d6.</li>\n</ul>\n\n<p>Also, don't confuse this with <code>Pool()</code>:</p>\n\n<ul>\n<li><code>Die([1, 2, 3, 4, 5, 6])</code>: A d6.</li>\n<li><code>Pool([1, 2, 3, 4, 5, 6])</code>: A <code>Pool</code> of six dice that always rolls one\nof each number.</li>\n</ul>\n\n<p>Here are some different ways of constructing a d6:</p>\n\n<ul>\n<li>Just import it: <code>from icepool import d6</code></li>\n<li>Use the <code>d()</code> function: <code>icepool.d(6)</code></li>\n<li>Use a d6 that you already have: <code>Die(d6)</code> or <code>Die([d6])</code></li>\n<li>Mix a d3 and a d3+3: <code>Die([d3, d3+3])</code></li>\n<li>Use a dict: <code>Die({1:1, 2:1, 3:1, 4:1, 5:1, 6:1})</code></li>\n<li>Give the faces as a sequence: <code>Die([1, 2, 3, 4, 5, 6])</code></li>\n</ul>\n\n<p>All quantities must be non-negative, though they can be zero.</p>\n\n<p>Several methods and functions foward **kwargs to this constructor.\nHowever, these only affect the construction of the returned or yielded\ndice. Any other implicit conversions of arguments or operands to dice\nwill be done with the default keyword arguments.</p>\n\n<p>EXPERIMENTAL: Use <code>icepool.Again()</code> to roll the dice again, usually with\nsome modification. For example,</p>\n\n<pre><code>Die([1, 2, 3, 4, 5, 6 + Again()])\n</code></pre>\n\n<p>would be an exploding d6. Use the <code>again_depth</code> parameter to control\nthe maximum depth. <code>again_depth</code> does not apply to <code>Reroll</code>.</p>\n\n<p>If the roll reaches the maximum depth, the <code>again_end</code> is used instead\nof rolling again. Options for <code>again_end</code> include:</p>\n\n<ul>\n<li>No value (<code>None</code>), which will attempt to determine a zero value from\nthe outcomes that don't involve <code>Again</code>.</li>\n<li>A single outcome, or a <code>Die</code>.</li>\n<li><code>Reroll</code>, which will reroll any end roll involving <code>Again</code>.</li>\n<li>You could also consider some sort of placeholder value such as\n<code>math.inf</code>.</li>\n</ul>\n\n<p>Denominator: For a flat set of outcomes, the denominator is just the\nsum of the corresponding quantities. If the outcomes themselves have\nsecondary denominators, then the overall denominator is the primary\ndenominator times the LCM of the outcome denominators.</p>\n\n<p>For example, <code>Die([d3, d4, d6])</code> has a final denominator of 36: 3 for\nthe primary selection between the three secondary dice, times 12 for\nthe LCM of 3, 4, and 6.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><p><strong>outcomes:</strong>  The faces of the <code>Die</code>. This can be one of the following:</p>\n\n<ul>\n<li>A <code>Sequence</code> of outcomes. Duplicates will contribute\nquantity for each appearance.</li>\n<li>A <code>Mapping</code> from outcomes to quantities.</li>\n</ul>\n\n<p>Individual outcomes can each be one of the following:</p>\n\n<ul>\n<li>A simple single outcome, which must be hashable and totally\norderable.</li>\n<li><p>A tuple. The elements must be valid outcomes. In particular,\n<code>Die</code>, <code>Reroll</code>, and <code>Again</code> are not valid inside tuple\noutcomes.</p>\n\n<p>Operators on dice with tuple outcomes are performed\nelement-wise. See <code>Die.unary_op</code> and\n<code>Die.binary_op</code> for details.</p></li>\n<li>A <code>Die</code>, which will be flattened into the result.\nThe relative quantity to a <code>Die</code> input is shared by the\n<code>Die</code> as a whole. The denominator of the resulting <code>Die</code>\nwill be multiplied if necessary.</li>\n<li><code>icepool.Reroll</code>, which will drop itself from consideration.</li>\n<li>EXPERIMENTAL: <code>icepool.Again</code>. See the main text for\nexplanation.</li>\n</ul></li>\n<li><strong>times:</strong>  Multiplies the quantity of each element of <code>outcomes</code>.\n<code>times</code> can either be a sequence of the same length as\n<code>outcomes</code> or a single <code>int</code> to apply to all elements of\n<code>outcomes</code>.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  <code>None</code> is not a valid outcome for a <code>Die</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">outcomes</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">constant</span><span class=\"o\">.</span><span class=\"n\">RerollType</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">again</span><span class=\"o\">.</span><span class=\"n\">Again</span><span class=\"p\">]],</span> <span class=\"n\">Mapping</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">times</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">again_depth</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">again_end</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">constant</span><span class=\"o\">.</span><span class=\"n\">RerollType</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, "icepool.Die.unary_op": {"fullname": "icepool.Die.unary_op", "modulename": "icepool", "qualname": "Die.unary_op", "kind": "function", "doc": "<p>Performs the unary operation on the outcomes.</p>\n\n<p>Operations on tuples are performed elementwise recursively. If you need\nsome other specific behavior, use your own outcome class, or use <code>map()</code>\nrather than an operator.</p>\n\n<p>This is used for the standard unary operators\n<code>-, +, abs, ~, round, trunc, floor, ceil</code>\nas well as the additional methods\n<code>zero, bool</code>.</p>\n\n<p>This is NOT used for the <code>[]</code> operator; when used directly, this is\ninterpreted as a <code>Mapping</code> operation and returns the count corresponding\nto a given outcome. See <code>marginals()</code> for applying the <code>[]</code> operator to\noutcomes.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A <code>Die</code> representing the result.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  If tuples are of mismatched length.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">op</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Die.binary_op": {"fullname": "icepool.Die.binary_op", "modulename": "icepool", "qualname": "Die.binary_op", "kind": "function", "doc": "<p>Performs the operation on pairs of outcomes.</p>\n\n<p>Operations on tuples are performed elementwise recursively. If you need\nsome other specific behavior, use your own outcome class, or use <code>map()</code>\nrather than an operator.</p>\n\n<p>By the time this is called, the other operand has already been\nconverted to a <code>Die</code>.</p>\n\n<p>This is used for the standard binary operators\n<code>+, -, *, /, //, %, **, &lt;&lt;, &gt;&gt;, &amp;, |, ^</code>.\nNote that <code>*</code> multiplies outcomes directly;\nit is not the same as <code>@</code>, which rolls the right side multiple times,\nor <code>d()</code>, which creates a standard die.</p>\n\n<p>The comparators (<code>&lt;, &lt;=, &gt;=, &gt;, ==, !=, cmp</code>) use a linear algorithm\nusing the fact that outcomes are totally ordered.</p>\n\n<p><code>==</code> and <code>!=</code> additionally set the truth value of the <code>Die</code> according to\nwhether the dice themselves are the same or not.</p>\n\n<p>The <code>@</code> operator does NOT use this method directly.\nIt rolls the left <code>Die</code>, which must have integer outcomes,\nthen rolls the right <code>Die</code> that many times and sums the outcomes.\nOnly the sum is performed element-wise.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A <code>Die</code> representing the result.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  If tuples are of mismatched length within one of the\ndice or between the dice.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span>,</span><span class=\"param\">\t<span class=\"n\">op</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Die.keys": {"fullname": "icepool.Die.keys", "modulename": "icepool", "qualname": "Die.keys", "kind": "function", "doc": "<p>The outcomes within the population in sorted order.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">counts</span><span class=\"o\">.</span><span class=\"n\">CountsKeysView</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Die.values": {"fullname": "icepool.Die.values", "modulename": "icepool", "qualname": "Die.values", "kind": "function", "doc": "<p>The quantities within the population in outcome order.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">counts</span><span class=\"o\">.</span><span class=\"n\">CountsValuesView</span>:</span></span>", "funcdef": "def"}, "icepool.Die.items": {"fullname": "icepool.Die.items", "modulename": "icepool", "qualname": "Die.items", "kind": "function", "doc": "<p>The (outcome, quantity)s of the population in sorted order.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">counts</span><span class=\"o\">.</span><span class=\"n\">CountsItemsView</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Die.simplify": {"fullname": "icepool.Die.simplify", "modulename": "icepool", "qualname": "Die.simplify", "kind": "function", "doc": "<p>Divides all quantities by their greatest common denominator.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Die.reroll": {"fullname": "icepool.Die.reroll", "modulename": "icepool", "qualname": "Die.reroll", "kind": "function", "doc": "<p>Rerolls the given outcomes.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>outcomes:</strong>  Selects which outcomes to reroll. Options:\n<ul>\n<li>A single outcome to reroll.</li>\n<li>A collection of outcomes to reroll.</li>\n<li>A callable that takes an outcome and returns <code>True</code> if it\nshould be rerolled.</li>\n<li>If not provided, the min outcome will be rerolled.</li>\n</ul></li>\n<li><strong>star:</strong>  If set to <code>True</code>, outcomes will be unpacked as\n<code>*outcome</code> before giving it to the <code>outcomes</code> function.\nIf <code>outcomes</code> is not a callable, this has no effect.</li>\n<li><strong>depth:</strong>  The maximum number of times to reroll.\nIf omitted, rerolls an unlimited number of times.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A <code>Die</code> representing the reroll.\n  If the reroll would never terminate, the result has no outcomes.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">outcomes</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">],</span> <span class=\"n\">Collection</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">star</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">depth</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Die.filter": {"fullname": "icepool.Die.filter", "modulename": "icepool", "qualname": "Die.filter", "kind": "function", "doc": "<p>Rerolls until getting one of the given outcomes.</p>\n\n<p>Essentially the complement of <code>reroll()</code>.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>outcomes:</strong>  Selects which outcomes to reroll until. Options:\n<ul>\n<li>A callable that takes an outcome and returns <code>True</code> if it\nshould be accepted.</li>\n<li>A collection of outcomes to reroll until.</li>\n</ul></li>\n<li><strong>star:</strong>  If set to <code>True</code>, outcomes will be unpacked as\n<code>*outcome</code> before giving it to the <code>outcomes</code> function.\nIf <code>outcomes</code> is not a callable, this has no effect.</li>\n<li><strong>depth:</strong>  The maximum number of times to reroll.\nIf omitted, rerolls an unlimited number of times.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A <code>Die</code> representing the reroll.\n  If the reroll would never terminate, the result has no outcomes.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">outcomes</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">],</span> <span class=\"n\">Collection</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">star</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">depth</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Die.truncate": {"fullname": "icepool.Die.truncate", "modulename": "icepool", "qualname": "Die.truncate", "kind": "function", "doc": "<p>Truncates the outcomes of this <code>Die</code> to the given range.</p>\n\n<p>The endpoints are included in the result if applicable.\nIf one of the arguments is not provided, that side will not be truncated.</p>\n\n<p>This effectively rerolls outcomes outside the given range.\nIf instead you want to replace those outcomes with the nearest endpoint,\nuse <code>clip()</code>.</p>\n\n<p>Not to be confused with <code>trunc(die)</code>, which performs integer truncation\non each outcome.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">min_outcome</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">max_outcome</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Die.clip": {"fullname": "icepool.Die.clip", "modulename": "icepool", "qualname": "Die.clip", "kind": "function", "doc": "<p>Clips the outcomes of this <code>Die</code> to the given values.</p>\n\n<p>The endpoints are included in the result if applicable.\nIf one of the arguments is not provided, that side will not be clipped.</p>\n\n<p>This is not the same as rerolling outcomes beyond this range;\nthe outcome is simply adjusted to fit within the range.\nThis will typically cause some quantity to bunch up at the endpoint.\nIf you want to reroll outcomes beyond this range, use <code>truncate()</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">min_outcome</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">max_outcome</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Die.set_range": {"fullname": "icepool.Die.set_range", "modulename": "icepool", "qualname": "Die.set_range", "kind": "function", "doc": "<p>Sets the outcomes of this <code>Die</code> to the given <code>int</code> range (inclusive).</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>min_outcome:</strong>  The min outcome of the result.\nIf omitted, the min outcome of this <code>Die</code> will be used.</li>\n<li><strong>max_outcome:</strong>  The max outcome of the result.\nIf omitted, the max outcome of this <code>Die</code> will be used.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">min_outcome</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">max_outcome</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Die.set_outcomes": {"fullname": "icepool.Die.set_outcomes", "modulename": "icepool", "qualname": "Die.set_outcomes", "kind": "function", "doc": "<p>Sets the set of outcomes to the argument.</p>\n\n<p>This may remove outcomes (if they are not present in the argument)\nand/or add zero-quantity outcomes (if they are not present in this <code>Die</code>).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">outcomes</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Die.trim": {"fullname": "icepool.Die.trim", "modulename": "icepool", "qualname": "Die.trim", "kind": "function", "doc": "<p>Removes all zero-quantity outcomes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Die.map": {"fullname": "icepool.Die.map", "modulename": "icepool", "qualname": "Die.map", "kind": "function", "doc": "<p>Maps outcomes of the <code>Die</code> to other outcomes.</p>\n\n<p>This is also useful for representing processes.</p>\n\n<p>EXPERIMENTAL: <code>Again</code>, <code>again_depth</code>, and <code>again_end</code> can be used as the\n<code>Die()</code> constructor. It is not advised to use these with <code>repeat</code> other\nthan 1.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>repl:</strong>  One of the following:\n<ul>\n<li>A callable returning a new outcome for each old outcome.</li>\n<li>A mapping from old outcomes to new outcomes.\nUnmapped old outcomes stay the same.\nThe new outcomes may be dice rather than just single outcomes.\nThe special value <code>icepool.Reroll</code> will reroll that old outcome.</li>\n</ul></li>\n<li><strong>star:</strong>  If set to <code>True</code>, outcomes of <code>self</code> will be unpacked as\n<code>*outcome</code> before giving it to the <code>repl</code> function. <code>extra_dice</code>\nare not unpacked. If <code>repl</code> is not a callable, this has no\neffect.</li>\n<li><p><strong>repeat:</strong>  This will be repeated with the same arguments on the\nresult this many times.</p>\n\n<p>EXPERIMENTAL: If set to <code>None</code>, the result will be as if this\n   were repeated an infinite number of times. In this case, the\n   result will be in simplest form.</p></li>\n<li><strong>again_depth:</strong>  Forwarded to the final die constructor.</li>\n<li><strong>again_end:</strong>  Forwarded to the final die constructor.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The <code>Die</code> after the modification.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">repl</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">],</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">constant</span><span class=\"o\">.</span><span class=\"n\">RerollType</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">again</span><span class=\"o\">.</span><span class=\"n\">Again</span><span class=\"p\">]],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">],</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">constant</span><span class=\"o\">.</span><span class=\"n\">RerollType</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">again</span><span class=\"o\">.</span><span class=\"n\">Again</span><span class=\"p\">]]]</span>,</span><span class=\"param\">\t<span class=\"o\">/</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">star</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">repeat</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">again_depth</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">again_end</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">],</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">constant</span><span class=\"o\">.</span><span class=\"n\">RerollType</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Die.map_and_time": {"fullname": "icepool.Die.map_and_time", "modulename": "icepool", "qualname": "Die.map_and_time", "kind": "function", "doc": "<p>Maps outcomes of the <code>Die</code> to other outcomes, while also counting\ntimesteps.</p>\n\n<p>This is useful for representing processes.</p>\n\n<p>The outcomes of the result are  <code>(outcome, time)</code>, where <code>time</code> is the\nnumber of repeats needed to reach an absorbing outcome (an outcome that\nonly leads to itself), or <code>repeat</code>, whichever is lesser.</p>\n\n<p>This will return early if it reaches a fixed point.\nTherefore, you can set <code>repeat</code> equal to the maximum number of\ntime you could possibly be interested in without worrying about\nit causing extra computations after the fixed point.</p>\n\n<p>EXPERIMENTAL: <code>Again</code>, <code>again_depth</code>, and <code>again_end</code> can be used as the\n<code>Die()</code> constructor. It is not advised to use these with <code>repeat</code> other\nthan 1.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>repl:</strong>  One of the following:\n<ul>\n<li>A callable returning a new outcome for each old outcome.</li>\n<li>A mapping from old outcomes to new outcomes.\nUnmapped old outcomes stay the same.\nThe new outcomes may be dice rather than just single outcomes.\nThe special value <code>icepool.Reroll</code> will reroll that old outcome.</li>\n</ul></li>\n<li><strong>star:</strong>  If set to <code>True</code>, outcomes of <code>self</code> will be unpacked as\n<code>*outcome</code> before giving it to the <code>repl</code> function. <code>extra_dice</code>\nare not unpacked. If <code>repl</code> is not a callable, this has no\neffect.</li>\n<li><strong>repeat:</strong>  This will be repeated with the same arguments on the result\nthis many times.</li>\n<li><strong>again_depth:</strong>  Forwarded to the final die constructor.</li>\n<li><strong>again_end:</strong>  Forwarded to the final die constructor.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The <code>Die</code> after the modification.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">repl</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">],</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">constant</span><span class=\"o\">.</span><span class=\"n\">RerollType</span><span class=\"p\">]],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">],</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">constant</span><span class=\"o\">.</span><span class=\"n\">RerollType</span><span class=\"p\">]]]</span>,</span><span class=\"param\">\t<span class=\"o\">/</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">star</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">repeat</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "icepool.Die.explode": {"fullname": "icepool.Die.explode", "modulename": "icepool", "qualname": "Die.explode", "kind": "function", "doc": "<p>Causes outcomes to be rolled again and added to the total.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>outcomes:</strong>  Which outcomes to explode. Options:\n<ul>\n<li>A single outcome to explode.</li>\n<li>An collection of outcomes to explode.</li>\n<li>A callable that takes an outcome and returns <code>True</code> if it\nshould be exploded.</li>\n<li>If not supplied, the max outcome will explode.</li>\n</ul></li>\n<li><strong>star:</strong>  If set to <code>True</code>, outcomes will be unpacked as\n<code>*outcome</code> before giving it to the <code>outcomes</code> function.\nIf <code>outcomes</code> is not a callable, this has no effect.</li>\n<li><strong>depth:</strong>  The maximum number of additional dice to roll.\nIf not supplied, a default value will be used.</li>\n<li><strong>end:</strong>  Once depth is reached, further explosions will be treated\nas this value. By default, a zero value will be used.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">outcomes</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">],</span> <span class=\"n\">Collection</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">star</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">depth</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">9</span>,</span><span class=\"param\">\t<span class=\"n\">end</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Die.if_else": {"fullname": "icepool.Die.if_else", "modulename": "icepool", "qualname": "Die.if_else", "kind": "function", "doc": "<p>Ternary conditional operator.</p>\n\n<p>This replaces truthy outcomes with the first argument and falsy outcomes\nwith the second argument.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>again_depth:</strong>  Forwarded to the final die constructor.</li>\n<li><strong>again_end:</strong>  Forwarded to the final die constructor.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">outcome_if_true</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">outcome_if_false</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">again_depth</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">again_end</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">],</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">constant</span><span class=\"o\">.</span><span class=\"n\">RerollType</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Die.is_in": {"fullname": "icepool.Die.is_in", "modulename": "icepool", "qualname": "Die.is_in", "kind": "function", "doc": "<p>A die that returns True iff the roll of the die is contained in the target.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"n\">Container</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Die.count": {"fullname": "icepool.Die.count", "modulename": "icepool", "qualname": "Die.count", "kind": "function", "doc": "<p>Roll this dice a number of times and count how many are == the target.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">rolls</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">target</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Die.count_in": {"fullname": "icepool.Die.count_in", "modulename": "icepool", "qualname": "Die.count_in", "kind": "function", "doc": "<p>Roll this dice a number of times and count how many are in the target.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">rolls</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"n\">Container</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Die.pool": {"fullname": "icepool.Die.pool", "modulename": "icepool", "qualname": "Die.pool", "kind": "function", "doc": "<p>Creates a <code>Pool</code> from this <code>Die</code>.</p>\n\n<p>You might subscript the pool immediately afterwards, e.g.\n<code>d6.pool(5)[-1, ..., 1]</code> takes the difference between the highest and\nlowest of 5d6.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>rolls:</strong>  The number of copies of this <code>Die</code> to put in the pool.\nOr, a sequence of one <code>int</code> per die acting as\n<code>sorted_roll_counts</code>. Note that <code>...</code> cannot be used in the\nargument to this method, as the argument determines the size of\nthe pool.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">rolls</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]]</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">pool</span><span class=\"o\">.</span><span class=\"n\">Pool</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Die.keep_lowest": {"fullname": "icepool.Die.keep_lowest", "modulename": "icepool", "qualname": "Die.keep_lowest", "kind": "function", "doc": "<p>Roll several of this <code>Die</code> and sum the sorted results from the lowest.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>rolls:</strong>  The number of dice to roll. All dice will have the same\noutcomes as <code>self</code>.</li>\n<li><strong>keep:</strong>  The number of dice to keep.</li>\n<li><strong>drop:</strong>  If provided, this many lowest dice will be dropped before\nkeeping.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A <code>Die</code> representing the probability distribution of the sum.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">rolls</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">keep</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">drop</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span>:</span></span>", "funcdef": "def"}, "icepool.Die.keep_highest": {"fullname": "icepool.Die.keep_highest", "modulename": "icepool", "qualname": "Die.keep_highest", "kind": "function", "doc": "<p>Roll several of this <code>Die</code> and sum the sorted results from the highest.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>rolls:</strong>  The number of dice to roll.</li>\n<li><strong>keep:</strong>  The number of dice to keep.</li>\n<li><strong>drop:</strong>  If provided, this many highest dice will be dropped before\nkeeping.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A <code>Die</code> representing the probability distribution of the sum.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">rolls</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"o\">/</span>,</span><span class=\"param\">\t<span class=\"n\">keep</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">drop</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Die.abs": {"fullname": "icepool.Die.abs", "modulename": "icepool", "qualname": "Die.abs", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Die.round": {"fullname": "icepool.Die.round", "modulename": "icepool", "qualname": "Die.round", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ndigits</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span>:</span></span>", "funcdef": "def"}, "icepool.Die.trunc": {"fullname": "icepool.Die.trunc", "modulename": "icepool", "qualname": "Die.trunc", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span>:</span></span>", "funcdef": "def"}, "icepool.Die.floor": {"fullname": "icepool.Die.floor", "modulename": "icepool", "qualname": "Die.floor", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span>:</span></span>", "funcdef": "def"}, "icepool.Die.ceil": {"fullname": "icepool.Die.ceil", "modulename": "icepool", "qualname": "Die.ceil", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span>:</span></span>", "funcdef": "def"}, "icepool.Die.zero": {"fullname": "icepool.Die.zero", "modulename": "icepool", "qualname": "Die.zero", "kind": "function", "doc": "<p>Zeros all outcomes of this die.</p>\n\n<p>This is done by calling the constructor for each outcome's type with no\narguments.</p>\n\n<p>The result will have the same denominator as this die.</p>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  If the zeros did not resolve to a single outcome.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Die.zero_outcome": {"fullname": "icepool.Die.zero_outcome", "modulename": "icepool", "qualname": "Die.zero_outcome", "kind": "function", "doc": "<p>A zero-outcome for this die.</p>\n\n<p>E.g. <code>0</code> for a <code>Die</code> whose outcomes are <code>int</code>s.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "icepool.Die.cmp": {"fullname": "icepool.Die.cmp", "modulename": "icepool", "qualname": "Die.cmp", "kind": "function", "doc": "<p>A <code>Die</code> with outcomes 1, -1, and 0.</p>\n\n<p>The quantities are equal to the positive outcome of <code>self &gt; other</code>,\n<code>self &lt; other</code>, and the remainder respectively.</p>\n\n<p>This will include all three outcomes even if they have zero quantity.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Die.sign": {"fullname": "icepool.Die.sign", "modulename": "icepool", "qualname": "Die.sign", "kind": "function", "doc": "<p>Outcomes become 1 if greater than <code>zero()</code>, -1 if less than <code>zero()</code>, and 0 otherwise.</p>\n\n<p>Note that for <code>float</code>s, +0.0, -0.0, and nan all become 0.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Die.key_tuple": {"fullname": "icepool.Die.key_tuple", "modulename": "icepool", "qualname": "Die.key_tuple", "kind": "function", "doc": "<p>A tuple that uniquely (as <code>equals()</code>) identifies this die.</p>\n\n<p>Apart from being hashable and totally orderable, this is not guaranteed\nto be in any particular format or have any other properties.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, "icepool.Die.equals": {"fullname": "icepool.Die.equals", "modulename": "icepool", "qualname": "Die.equals", "kind": "function", "doc": "<p><code>True</code> iff both dice have the same outcomes and quantities.</p>\n\n<p>This is <code>False</code> if <code>other</code> is not a <code>Die</code>, even if it would convert\nto an equal <code>Die</code>.</p>\n\n<p>Truth value does NOT matter.</p>\n\n<p>If one <code>Die</code> has a zero-quantity outcome and the other <code>Die</code> does not\ncontain that outcome, they are treated as unequal by this function.</p>\n\n<p>The <code>==</code> and <code>!=</code> operators have a dual purpose; they return a <code>Die</code>\nwith a truth value determined by this method.\nOnly dice returned by these methods have a truth value. The data of\nthese dice is lazily evaluated since the caller may only be interested\nin the <code>Die</code> value or the truth value.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>simplify:</strong>  If <code>True</code>, the dice will be simplified before comparing.\nOtherwise, e.g. a 2:2 coin is not <code>equals()</code> to a 1:1 coin.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">simplify</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "icepool.Population": {"fullname": "icepool.Population", "modulename": "icepool", "qualname": "Population", "kind": "class", "doc": "<p>A mapping from outcomes to <code>int</code> quantities.</p>\n\n<p>Outcomes with each instance must be hashable and totally orderable.</p>\n\n<p>Subclasses include <code>Die</code> and <code>Deck</code>.</p>\n", "bases": "abc.ABC, typing.Mapping[~T, int]"}, "icepool.Population.keys": {"fullname": "icepool.Population.keys", "modulename": "icepool", "qualname": "Population.keys", "kind": "function", "doc": "<p>The outcomes within the population in sorted order.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">counts</span><span class=\"o\">.</span><span class=\"n\">CountsKeysView</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Population.values": {"fullname": "icepool.Population.values", "modulename": "icepool", "qualname": "Population.values", "kind": "function", "doc": "<p>The quantities within the population in outcome order.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">counts</span><span class=\"o\">.</span><span class=\"n\">CountsValuesView</span>:</span></span>", "funcdef": "def"}, "icepool.Population.items": {"fullname": "icepool.Population.items", "modulename": "icepool", "qualname": "Population.items", "kind": "function", "doc": "<p>The (outcome, quantity)s of the population in sorted order.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">counts</span><span class=\"o\">.</span><span class=\"n\">CountsItemsView</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Population.outcomes": {"fullname": "icepool.Population.outcomes", "modulename": "icepool", "qualname": "Population.outcomes", "kind": "function", "doc": "<p>The sorted outcomes of the mapping.</p>\n\n<p>These are also the <code>keys</code> of the mapping.\nPrefer to use the name <code>outcomes</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">counts</span><span class=\"o\">.</span><span class=\"n\">CountsKeysView</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Population.tuple_len": {"fullname": "icepool.Population.tuple_len", "modulename": "icepool", "qualname": "Population.tuple_len", "kind": "function", "doc": "<p>The common length of tuple outcomes.</p>\n\n<p>This is <code>None</code> if outcomes are not tuples,\nor if there are tuples of different lengths.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "icepool.Population.is_empty": {"fullname": "icepool.Population.is_empty", "modulename": "icepool", "qualname": "Population.is_empty", "kind": "function", "doc": "<p><code>True</code> iff this mapping has no outcomes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "icepool.Population.min_outcome": {"fullname": "icepool.Population.min_outcome", "modulename": "icepool", "qualname": "Population.min_outcome", "kind": "function", "doc": "<p>The least outcome.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "icepool.Population.max_outcome": {"fullname": "icepool.Population.max_outcome", "modulename": "icepool", "qualname": "Population.max_outcome", "kind": "function", "doc": "<p>The greatest outcome.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "icepool.Population.nearest_le": {"fullname": "icepool.Population.nearest_le", "modulename": "icepool", "qualname": "Population.nearest_le", "kind": "function", "doc": "<p>The nearest outcome that is &lt;= the argument.</p>\n\n<p>Returns <code>None</code> if there is no such outcome.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">outcome</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Population.nearest_ge": {"fullname": "icepool.Population.nearest_ge", "modulename": "icepool", "qualname": "Population.nearest_ge", "kind": "function", "doc": "<p>The nearest outcome that is &gt;= the argument.</p>\n\n<p>Returns <code>None</code> if there is no such outcome.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">outcome</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Population.quantities": {"fullname": "icepool.Population.quantities", "modulename": "icepool", "qualname": "Population.quantities", "kind": "function", "doc": "<p>The quantities of the mapping in sorted order.</p>\n\n<p>These are also the <code>values</code> of the mapping.\nPrefer to use the name <code>quantities</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">counts</span><span class=\"o\">.</span><span class=\"n\">CountsValuesView</span>:</span></span>", "funcdef": "def"}, "icepool.Population.denominator": {"fullname": "icepool.Population.denominator", "modulename": "icepool", "qualname": "Population.denominator", "kind": "function", "doc": "<p>The sum of all quantities (e.g. weights or duplicates).</p>\n\n<p>For the number of unique outcomes, including those with zero quantity,\nuse <code>len()</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "icepool.Population.has_zero_quantities": {"fullname": "icepool.Population.has_zero_quantities", "modulename": "icepool", "qualname": "Population.has_zero_quantities", "kind": "function", "doc": "<p><code>True</code> iff <code>self</code> contains at least one outcome with zero quantity.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "icepool.Population.quantities_le": {"fullname": "icepool.Population.quantities_le", "modulename": "icepool", "qualname": "Population.quantities_le", "kind": "function", "doc": "<p>The quantity &lt;= each outcome in order.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Population.quantities_ge": {"fullname": "icepool.Population.quantities_ge", "modulename": "icepool", "qualname": "Population.quantities_ge", "kind": "function", "doc": "<p>The quantity &gt;= each outcome in order.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Population.quantity": {"fullname": "icepool.Population.quantity", "modulename": "icepool", "qualname": "Population.quantity", "kind": "function", "doc": "<p>The quantity of a single outcome, or 0 if not present.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">outcome</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "icepool.Population.quantity_ne": {"fullname": "icepool.Population.quantity_ne", "modulename": "icepool", "qualname": "Population.quantity_ne", "kind": "function", "doc": "<p>The quantity != a single outcome.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">outcome</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "icepool.Population.quantity_le": {"fullname": "icepool.Population.quantity_le", "modulename": "icepool", "qualname": "Population.quantity_le", "kind": "function", "doc": "<p>The quantity &lt;= a single outcome.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">outcome</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "icepool.Population.quantity_lt": {"fullname": "icepool.Population.quantity_lt", "modulename": "icepool", "qualname": "Population.quantity_lt", "kind": "function", "doc": "<p>The quantity &lt; a single outcome.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">outcome</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "icepool.Population.quantity_ge": {"fullname": "icepool.Population.quantity_ge", "modulename": "icepool", "qualname": "Population.quantity_ge", "kind": "function", "doc": "<p>The quantity &gt;= a single outcome.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">outcome</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "icepool.Population.quantity_gt": {"fullname": "icepool.Population.quantity_gt", "modulename": "icepool", "qualname": "Population.quantity_gt", "kind": "function", "doc": "<p>The quantity &gt; a single outcome.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">outcome</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "icepool.Population.probabilities": {"fullname": "icepool.Population.probabilities", "modulename": "icepool", "qualname": "Population.probabilities", "kind": "function", "doc": "<p>The probability of each outcome in order.</p>\n\n<p>Also known as the probability mass function (PMF).</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>percent:</strong>  If set, the results will be in percent (i.e. total of 100.0).\nOtherwise, the total will be 1.0.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">percent</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Population.probabilities_le": {"fullname": "icepool.Population.probabilities_le", "modulename": "icepool", "qualname": "Population.probabilities_le", "kind": "function", "doc": "<p>The probability of rolling &lt;= each outcome in order.</p>\n\n<p>Also known as the cumulative distribution function (CDF),\nthough this term is ambigiuous whether it is &lt; or &lt;=.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>percent:</strong>  If set, the results will be in percent (i.e. total of 100.0).\nOtherwise, the total will be 1.0.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">percent</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Population.probabilities_ge": {"fullname": "icepool.Population.probabilities_ge", "modulename": "icepool", "qualname": "Population.probabilities_ge", "kind": "function", "doc": "<p>The probability of rolling &gt;= each outcome in order.</p>\n\n<p>Also known as the survival function (SF) or\ncomplementary cumulative distribution function (CCDF),\nthough these term are ambigiuous whether they are is &gt; or &gt;=.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>percent:</strong>  If set, the results will be in percent (i.e. total of 100.0).\nOtherwise, the total will be 1.0.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">percent</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Population.probabilities_lt": {"fullname": "icepool.Population.probabilities_lt", "modulename": "icepool", "qualname": "Population.probabilities_lt", "kind": "function", "doc": "<p>The probability of rolling &lt; each outcome in order.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>percent:</strong>  If set, the results will be in percent (i.e. total of 100.0).\nOtherwise, the total will be 1.0.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">percent</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Population.probabilities_gt": {"fullname": "icepool.Population.probabilities_gt", "modulename": "icepool", "qualname": "Population.probabilities_gt", "kind": "function", "doc": "<p>The probability of rolling &gt; each outcome in order.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>percent:</strong>  If set, the results will be in percent (i.e. total of 100.0).\nOtherwise, the total will be 1.0.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">percent</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Population.probability": {"fullname": "icepool.Population.probability", "modulename": "icepool", "qualname": "Population.probability", "kind": "function", "doc": "<p>The probability of a single outcome, or 0.0 if not present.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">outcome</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, "icepool.Population.mode": {"fullname": "icepool.Population.mode", "modulename": "icepool", "qualname": "Population.mode", "kind": "function", "doc": "<p>A tuple containing the most common outcome(s) of the population.</p>\n\n<p>These are sorted from lowest to highest.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, "icepool.Population.modal_quantity": {"fullname": "icepool.Population.modal_quantity", "modulename": "icepool", "qualname": "Population.modal_quantity", "kind": "function", "doc": "<p>The highest quantity of any single outcome.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "icepool.Population.kolmogorov_smirnov": {"fullname": "icepool.Population.kolmogorov_smirnov", "modulename": "icepool", "qualname": "Population.kolmogorov_smirnov", "kind": "function", "doc": "<p>Kolmogorov\u2013Smirnov statistic. The maximum absolute difference between CDFs.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, "icepool.Population.cramer_von_mises": {"fullname": "icepool.Population.cramer_von_mises", "modulename": "icepool", "qualname": "Population.cramer_von_mises", "kind": "function", "doc": "<p>Cram\u00e9r-von Mises statistic. The sum-of-squares difference between CDFs.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, "icepool.Population.median": {"fullname": "icepool.Population.median", "modulename": "icepool", "qualname": "Population.median", "kind": "function", "doc": "<p>The median, taking the mean in case of a tie.</p>\n\n<p>This will fail if the outcomes do not support division;\nin this case, use <code>median_left</code> or <code>median_right</code> instead.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "icepool.Population.median_left": {"fullname": "icepool.Population.median_left", "modulename": "icepool", "qualname": "Population.median_left", "kind": "function", "doc": "<p>The median, taking the lesser in case of a tie.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "icepool.Population.median_right": {"fullname": "icepool.Population.median_right", "modulename": "icepool", "qualname": "Population.median_right", "kind": "function", "doc": "<p>The median, taking the greater in case of a tie.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "icepool.Population.quantile": {"fullname": "icepool.Population.quantile", "modulename": "icepool", "qualname": "Population.quantile", "kind": "function", "doc": "<p>The outcome <code>n / d</code> of the way through the CDF, taking the mean in case of a tie.</p>\n\n<p>This will fail if the outcomes do not support addition and division;\nin this case, use <code>quantile_left</code> or <code>quantile_right</code> instead.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">d</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">100</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "icepool.Population.quantile_left": {"fullname": "icepool.Population.quantile_left", "modulename": "icepool", "qualname": "Population.quantile_left", "kind": "function", "doc": "<p>The outcome <code>n / d</code> of the way through the CDF, taking the lesser in case of a tie.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">d</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">100</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "icepool.Population.quantile_right": {"fullname": "icepool.Population.quantile_right", "modulename": "icepool", "qualname": "Population.quantile_right", "kind": "function", "doc": "<p>The outcome <code>n / d</code> of the way through the CDF, taking the greater in case of a tie.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">d</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">100</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "icepool.Population.mean": {"fullname": "icepool.Population.mean", "modulename": "icepool", "qualname": "Population.mean", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">Population</span><span class=\"p\">[</span><span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Real</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, "icepool.Population.variance": {"fullname": "icepool.Population.variance", "modulename": "icepool", "qualname": "Population.variance", "kind": "function", "doc": "<p>This is the population variance, not the sample variance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">Population</span><span class=\"p\">[</span><span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Real</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, "icepool.Population.standard_deviation": {"fullname": "icepool.Population.standard_deviation", "modulename": "icepool", "qualname": "Population.standard_deviation", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">Population</span><span class=\"p\">[</span><span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Real</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, "icepool.Population.sd": {"fullname": "icepool.Population.sd", "modulename": "icepool", "qualname": "Population.sd", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">Population</span><span class=\"p\">[</span><span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Real</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, "icepool.Population.standardized_moment": {"fullname": "icepool.Population.standardized_moment", "modulename": "icepool", "qualname": "Population.standardized_moment", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">Population</span><span class=\"p\">[</span><span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Real</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">k</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, "icepool.Population.skewness": {"fullname": "icepool.Population.skewness", "modulename": "icepool", "qualname": "Population.skewness", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">Population</span><span class=\"p\">[</span><span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Real</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, "icepool.Population.excess_kurtosis": {"fullname": "icepool.Population.excess_kurtosis", "modulename": "icepool", "qualname": "Population.excess_kurtosis", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">Population</span><span class=\"p\">[</span><span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Real</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, "icepool.Population.marginals": {"fullname": "icepool.Population.marginals", "modulename": "icepool", "qualname": "Population.marginals", "kind": "variable", "doc": "<p>A property that applies the <code>[]</code> operator to outcomes.</p>\n\n<p>This is not performed elementwise on tuples, so that this can be used\nto slice tuple outcomes. For example, <code>population.marginals[:2]</code> will\nmarginalize the first two elements of tuples.</p>\n"}, "icepool.Population.unary_op_non_elementwise": {"fullname": "icepool.Population.unary_op_non_elementwise", "modulename": "icepool", "qualname": "Population.unary_op_non_elementwise", "kind": "function", "doc": "<p>As <code>unary_op()</code>, but not elementwise.</p>\n\n<p>This is used for <code>marginals()</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">C</span>, </span><span class=\"param\"><span class=\"n\">op</span><span class=\"p\">:</span> <span class=\"n\">Callable</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">C</span>:</span></span>", "funcdef": "def"}, "icepool.Population.covariance": {"fullname": "icepool.Population.covariance", "modulename": "icepool", "qualname": "Population.covariance", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">Population</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Real</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">i</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">j</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, "icepool.Population.correlation": {"fullname": "icepool.Population.correlation", "modulename": "icepool", "qualname": "Population.correlation", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">Population</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Real</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">i</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">j</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, "icepool.Population.sample": {"fullname": "icepool.Population.sample", "modulename": "icepool", "qualname": "Population.sample", "kind": "function", "doc": "<p>A single random sample from this population.</p>\n\n<p>Note that this is always \"with replacement\" even for <code>Deck</code> since\ninstances are immutable.</p>\n\n<p>This uses the standard <code>random</code> package and is not cryptographically\nsecure.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "icepool.Population.format": {"fullname": "icepool.Population.format", "modulename": "icepool", "qualname": "Population.format", "kind": "function", "doc": "<p>Formats this mapping as a string.</p>\n\n<p><code>format_spec</code> should start with the output format,\nwhich is either <code>md</code> (Markdown) or <code>csv</code> (comma-separated values),\nfollowed by a ':' character.</p>\n\n<p>After this, zero or more columns should follow. Options are:</p>\n\n<ul>\n<li><code>o</code>: Outcomes.</li>\n<li><code>*o</code>: Outcomes, unpacked if applicable.</li>\n<li><code>q==</code>, <code>q&lt;=</code>, <code>q&gt;=</code>: Quantities ==, &lt;=, or &gt;= each outcome.</li>\n<li><code>p==</code>, <code>p&lt;=</code>, <code>p&gt;=</code>: Probabilities (0-1) ==, &lt;=, or &gt;= each outcome.</li>\n<li><code>%==</code>, <code>%&lt;=</code>, <code>%&gt;=</code>: Probabilities (0%-100%) ==, &lt;=, or &gt;= each outcome.</li>\n</ul>\n\n<p>Columns may optionally be separated using <code></code> (space) or <code>|</code> characters.</p>\n\n<p>The default is <code>'md:*o|q==|%=='</code>, with the quantity column being omitted\nif any quantity exceeds 10**30.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">format_spec</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "icepool.Again": {"fullname": "icepool.Again", "modulename": "icepool", "qualname": "Again", "kind": "class", "doc": "<p>A placeholder value used to indicate that the die should be rolled again.</p>\n\n<p>This is designed to be used with the <code>Die()</code> constructor.\n<code>Again</code> should not be fed to functions or methods other than <code>Die()</code>, but\nit can be used with operators. Examples:</p>\n\n<ul>\n<li><code>Again()</code> + 6: Roll again and add 6.</li>\n<li><code>Again()</code> + <code>Again()</code>: Roll again twice and sum.</li>\n</ul>\n\n<p>The <code>again_depth</code> and <code>again_end</code> arguments to <code>Die()</code> affect how these\narguments are processed.</p>\n\n<p>If you want something more complex, use e.g. <code>Die.map()</code> instead.</p>\n"}, "icepool.Again.__init__": {"fullname": "icepool.Again.__init__", "modulename": "icepool", "qualname": "Again.__init__", "kind": "function", "doc": "<p>Creates an <code>Again</code> placeholder from the given function and args.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, "icepool.CountsKeysView": {"fullname": "icepool.CountsKeysView", "modulename": "icepool", "qualname": "CountsKeysView", "kind": "class", "doc": "<p>This functions as both a <code>KeysView</code> and a <code>Sequence</code>.</p>\n", "bases": "typing.KeysView[~T], typing.Sequence[~T]"}, "icepool.CountsKeysView.__init__": {"fullname": "icepool.CountsKeysView.__init__", "modulename": "icepool", "qualname": "CountsKeysView.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">counts</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">counts</span><span class=\"o\">.</span><span class=\"n\">Counts</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span></span>)</span>"}, "icepool.CountsValuesView": {"fullname": "icepool.CountsValuesView", "modulename": "icepool", "qualname": "CountsValuesView", "kind": "class", "doc": "<p>This functions as both a <code>ValuesView</code> and a <code>Sequence</code>.</p>\n", "bases": "typing.ValuesView[int], typing.Sequence[int]"}, "icepool.CountsValuesView.__init__": {"fullname": "icepool.CountsValuesView.__init__", "modulename": "icepool", "qualname": "CountsValuesView.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">counts</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">counts</span><span class=\"o\">.</span><span class=\"n\">Counts</span></span>)</span>"}, "icepool.CountsItemsView": {"fullname": "icepool.CountsItemsView", "modulename": "icepool", "qualname": "CountsItemsView", "kind": "class", "doc": "<p>This functions as both an <code>ItemsView</code> and a <code>Sequence</code>.</p>\n", "bases": "typing.ItemsView[~T, int], typing.Sequence[tuple[~T, int]]"}, "icepool.CountsItemsView.__init__": {"fullname": "icepool.CountsItemsView.__init__", "modulename": "icepool", "qualname": "CountsItemsView.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">counts</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">counts</span><span class=\"o\">.</span><span class=\"n\">Counts</span></span>)</span>"}, "icepool.from_cumulative_quantities": {"fullname": "icepool.from_cumulative_quantities", "modulename": "icepool", "qualname": "from_cumulative_quantities", "kind": "function", "doc": "<p>Constructs a <code>Die</code> from a sequence of cumulative quantities.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>outcomes:</strong>  The outcomes of the resulting die. Sorted order is recommended\nbut not necessary.</li>\n<li><strong>cumulative_quantities:</strong>  The cumulative quantities (inclusive) of the\noutcomes in the order they are given to this function.</li>\n<li><strong>reverse:</strong>  Iff true, both of the arguments will be reversed. This allows\ne.g. constructing using a survival distribution.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">outcomes</span><span class=\"p\">:</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">cumulative_quantities</span><span class=\"p\">:</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">reverse</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.from_rv": {"fullname": "icepool.from_rv", "modulename": "icepool", "qualname": "from_rv", "kind": "function", "doc": "<p>Constructs a <code>Die</code> from a rv object (as <code>scipy.stats</code>).</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>rv:</strong>  A rv object (as <code>scipy.stats</code>).</li>\n<li><strong>outcomes:</strong>  An iterable of <code>int</code>s or <code>float</code>s that will be the outcomes\nof the resulting <code>Die</code>.\nIf the distribution is discrete, outcomes must be <code>int</code>s.</li>\n<li><strong>denominator:</strong>  The denominator of the resulting <code>Die</code> will be set to this.</li>\n<li><strong>**kwargs:</strong>  These will be forwarded to <code>rv.cdf()</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">rv</span>,</span><span class=\"param\">\t<span class=\"n\">outcomes</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">denominator</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.align": {"fullname": "icepool.align", "modulename": "icepool", "qualname": "align", "kind": "function", "doc": "<p>Pads dice with zero quantities so that all have the same set of outcomes.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>*dice:</strong>  One <code>Die</code> per argument.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A tuple of aligned dice.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">dice</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"o\">...</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.align_range": {"fullname": "icepool.align_range", "modulename": "icepool", "qualname": "align_range", "kind": "function", "doc": "<p>Pads dice with zero quantities so that all have the same set of consecutive <code>int</code> outcomes.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>*dice:</strong>  One <code>Die</code> per argument.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A tuple of aligned dice.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">dice</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"o\">...</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.lowest": {"fullname": "icepool.lowest", "modulename": "icepool", "qualname": "lowest", "kind": "function", "doc": "<p>The lowest outcome or sum of the lowest outcomes among the dice.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>*dice:</strong>  The dice to be considered. At least one <code>Die</code> must be provided.</li>\n<li><strong>keep:</strong>  The number of lowest dice will be summed.</li>\n<li><strong>drop:</strong>  This number of lowest dice will be dropped before keeping dice\nto be summed.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">dice</span>, </span><span class=\"param\"><span class=\"n\">keep</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">drop</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span>:</span></span>", "funcdef": "def"}, "icepool.highest": {"fullname": "icepool.highest", "modulename": "icepool", "qualname": "highest", "kind": "function", "doc": "<p>The highest outcome or sum of the highest outcomes among the dice.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>*dice:</strong>  The dice to be considered. At least one <code>Die</code> must be provided.</li>\n<li><strong>keep:</strong>  The number of highest dice will be summed.</li>\n<li><strong>drop:</strong>  This number of highest dice will be dropped before keeping dice\nto be summed.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">dice</span>, </span><span class=\"param\"><span class=\"n\">keep</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">drop</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span>:</span></span>", "funcdef": "def"}, "icepool.min_outcome": {"fullname": "icepool.min_outcome", "modulename": "icepool", "qualname": "min_outcome", "kind": "function", "doc": "<p>The minimum outcome among the dice.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">dice</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "icepool.max_outcome": {"fullname": "icepool.max_outcome", "modulename": "icepool", "qualname": "max_outcome", "kind": "function", "doc": "<p>The maximum outcome among the dice.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">dice</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "icepool.reduce": {"fullname": "icepool.reduce", "modulename": "icepool", "qualname": "reduce", "kind": "function", "doc": "<p>Applies a function of two arguments cumulatively to a sequence of dice.</p>\n\n<p>Analogous to\n<a href=\"https://docs.python.org/3/library/functools.html#functools.reduce\"><code>functools.reduce()</code></a>.</p>\n\n<p>The function is applied non-elementwise to tuple outcomes.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>func:</strong>  The function to apply. The function should take two arguments,\nwhich are an outcome from each of two dice.</li>\n<li><strong>dice:</strong>  A sequence of dice to apply the function to, from left to right.</li>\n<li><strong>initial:</strong>  If provided, this will be placed at the front of the sequence\nof dice.</li>\n<li><strong>again_depth:</strong>  Forwarded to the final die constructor.</li>\n<li><strong>again_end:</strong>  Forwarded to the final die constructor.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">dice</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]]]</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">initial</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.accumulate": {"fullname": "icepool.accumulate", "modulename": "icepool", "qualname": "accumulate", "kind": "function", "doc": "<p>Applies a function of two arguments cumulatively to a sequence of dice, yielding each result in turn.</p>\n\n<p>Analogous to\n<a href=\"https://docs.python.org/3/library/itertools.html#itertools.accumulate\"><code>itertools.accumulate()</code></a>\n, though with no default function and\nthe same parameter order as <code>reduce()</code>.</p>\n\n<p>The number of results is equal to the number of elements of <code>dice</code>, with\none additional element if <code>initial</code> is provided.</p>\n\n<p>The function is applied non-elementwise to tuple outcomes.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>func:</strong>  The function to apply. The function should take two arguments,\nwhich are an outcome from each of two dice.</li>\n<li><strong>dice:</strong>  A sequence of dice to apply the function to, from left to right.</li>\n<li><strong>initial:</strong>  If provided, this will be placed at the front of the sequence\nof dice.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">dice</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]]]</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">initial</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "icepool.apply": {"fullname": "icepool.apply", "modulename": "icepool", "qualname": "apply", "kind": "function", "doc": "<p>Applies <code>func(outcome_of_die_0, outcome_of_die_1, ...)</code> for all outcomes of the dice.</p>\n\n<p>Example: <code>apply(lambda a, b: a + b, d6, d6)</code> is the same as d6 + d6.</p>\n\n<p><code>apply()</code> is flexible but not very efficient for more than a few dice.\nInstead of using several arguments:</p>\n\n<ul>\n<li>If the problem is easy to solve by considering how many dice rolled each\noutcome, one outcome at a time, try using\n<code>icepool.Pool</code> and <code>icepool.OutcomeCountEvaluator</code>.</li>\n<li>If the problem is easy to solve by considering one additional <code>Die</code> at a\ntime, try using <code>reduce()</code> instead.</li>\n<li>If the order in which the dice are rolled is not important, you can use\n<code>apply_sorted()</code>. This is less efficient than either of the above two,\nbut is still more efficient than <code>apply()</code>.</li>\n</ul>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>func:</strong>  A function that takes one argument per input <code>Die</code> and returns an\nargument to <code>Die()</code>.</li>\n<li><strong>*dice:</strong>  Any number of dice. <code>func</code> will be called with all joint outcomes\nof <code>dice</code>, with one argument per <code>Die</code>.\nNon-dice will be left as-is.</li>\n<li><strong>again_depth:</strong>  Forwarded to the final die constructor.</li>\n<li><strong>again_end:</strong>  Forwarded to the final die constructor.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A <code>Die</code> constructed from the outputs of <code>func</code> and the product of the\n  quantities of the dice.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">constant</span><span class=\"o\">.</span><span class=\"n\">RerollType</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">again</span><span class=\"o\">.</span><span class=\"n\">Again</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">dice</span>,</span><span class=\"param\">\t<span class=\"n\">again_depth</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">again_end</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">constant</span><span class=\"o\">.</span><span class=\"n\">RerollType</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.apply_sorted": {"fullname": "icepool.apply_sorted", "modulename": "icepool", "qualname": "apply_sorted", "kind": "class", "doc": "<p>This is really a function implemented as a class.</p>\n\n<p>See the \"constructor\" for details.</p>\n"}, "icepool.apply_sorted.__init__": {"fullname": "icepool.apply_sorted.__init__", "modulename": "icepool", "qualname": "apply_sorted.__init__", "kind": "function", "doc": "<p>Applies <code>func(lowest_outcome, next_lowest_outcome...)</code> for all sorted joint outcomes of the dice.</p>\n\n<p>Treat this as an ordinary function, not a constructor.</p>\n\n<p><code>apply_sorted()</code> is more efficient than <code>apply()</code> but still not very\nefficient. Use <code>OutcomeCountEvaluator</code> instead if at all possible.</p>\n\n<p>You can use <code>apply_sorted[]</code> to only see outcomes at particular sorted indexes.\nFor example, <code>apply_sorted[-2:](func, *dice)</code> would give the two highest\noutcomes to <code>func()</code>. This is more efficient than selecting outcomes inside\n<code>func</code>.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>func:</strong>  A function that takes one argument per input <code>Die</code> and returns an\nargument to <code>Die()</code>.</li>\n<li><strong>*dice:</strong>  Any number of dice (or objects convertible to dice).\n<code>func</code> will be called with all sorted joint outcomes of <code>dice</code>,\nwith one argument per die. All outcomes must be totally orderable.</li>\n<li><strong>again_depth:</strong>  Forwarded to the final die constructor.</li>\n<li><strong>again_end:</strong>  Forwarded to the final die constructor.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A <code>Die</code> constructed from the outputs of <code>func</code> and the weight of rolling\n  the corresponding sorted outcomes.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">constant</span><span class=\"o\">.</span><span class=\"n\">RerollType</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">again</span><span class=\"o\">.</span><span class=\"n\">Again</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">dice</span>,</span><span class=\"param\">\t<span class=\"n\">again_depth</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">again_end</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">constant</span><span class=\"o\">.</span><span class=\"n\">RerollType</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, "icepool.Reroll": {"fullname": "icepool.Reroll", "modulename": "icepool", "qualname": "Reroll", "kind": "variable", "doc": "<p>Indicates that an outcome should be rerolled (with unlimited depth).</p>\n\n<p>This can be used in place of outcomes in many places. See individual function\nand method descriptions for details.</p>\n\n<p>This effectively removes the outcome from the probability space, along with its\ncontribution to the denominator.</p>\n\n<p>This can be used for conditional probability by removing all outcomes not\nconsistent with the given observations.</p>\n\n<p>Operation in specific cases:</p>\n\n<ul>\n<li>When used with <code>Again</code>, only that stage is rerolled, not the entire <code>Again</code>\ntree.</li>\n<li>To reroll with limited depth, use <code>Die.reroll()</code>, or <code>Again()</code> with no\nmodification.</li>\n<li>When used with <code>OutcomeCountEvaluator</code>, the entire evaluation is rerolled.</li>\n</ul>\n", "annotation": ": Final", "default_value": " = &lt;RerollType.Reroll: &#x27;Reroll&#x27;&gt;"}, "icepool.OutcomeCountGenerator": {"fullname": "icepool.OutcomeCountGenerator", "modulename": "icepool", "qualname": "OutcomeCountGenerator", "kind": "class", "doc": "<p>Abstract base class for incrementally generating <code>(outcome, counts, weight)</code>s.</p>\n\n<p>These include dice pools (<code>Pool</code>) and card deals (<code>Deal</code>). Most likely you\nwill be using one of these two rather than writing your own subclass of\n<code>OutcomeCountGenerator</code>.</p>\n\n<p>These generators can be evaluated by an <code>OutcomeCountEvaluator</code>, which you\n<em>are</em> likely to write your own concrete subclass of.</p>\n", "bases": "abc.ABC, typing.Generic[+T_co]"}, "icepool.OutcomeCountGenerator.outcomes": {"fullname": "icepool.OutcomeCountGenerator.outcomes", "modulename": "icepool", "qualname": "OutcomeCountGenerator.outcomes", "kind": "function", "doc": "<p>The set of outcomes, in sorted order.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.OutcomeCountGenerator.counts_len": {"fullname": "icepool.OutcomeCountGenerator.counts_len", "modulename": "icepool", "qualname": "OutcomeCountGenerator.counts_len", "kind": "function", "doc": "<p>The number of counts generated. Must be constant.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "icepool.OutcomeCountGenerator.denominator": {"fullname": "icepool.OutcomeCountGenerator.denominator", "modulename": "icepool", "qualname": "OutcomeCountGenerator.denominator", "kind": "function", "doc": "<p>The total weight of all paths through this generator.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "icepool.OutcomeCountGenerator.evaluate": {"fullname": "icepool.OutcomeCountGenerator.evaluate", "modulename": "icepool", "qualname": "OutcomeCountGenerator.evaluate", "kind": "function", "doc": "<p>Evaluates this generator using the given <code>OutcomeCountEvaluator</code> or function.</p>\n\n<p>Note that each <code>OutcomeCountEvaluator</code> instance carries its own cache;\nif you plan to use an evaluation multiple times,\nyou may want to explicitly create an <code>OutcomeCountEvaluator</code> instance\nrather than passing a function to this method directly.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>func:</strong>  This can be an <code>OutcomeCountEvaluator</code>, in which case it evaluates\nthe generator directly.\nOr it can be a <code>OutcomeCountEvaluator.next_state()</code>-like\nfunction, taking in <code>state, outcome, *counts</code> and returning the\nnext state. In this case a temporary <code>WrapFuncEvaluator</code>\nis constructed and used to evaluate this generator.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">evaluator_or_func</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">outcome_count_evaluator</span><span class=\"o\">.</span><span class=\"n\">OutcomeCountEvaluator</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">],</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.OutcomeCountGenerator.min_outcome": {"fullname": "icepool.OutcomeCountGenerator.min_outcome", "modulename": "icepool", "qualname": "OutcomeCountGenerator.min_outcome", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"o\">+</span><span class=\"n\">T_co</span>:</span></span>", "funcdef": "def"}, "icepool.OutcomeCountGenerator.max_outcome": {"fullname": "icepool.OutcomeCountGenerator.max_outcome", "modulename": "icepool", "qualname": "OutcomeCountGenerator.max_outcome", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"o\">+</span><span class=\"n\">T_co</span>:</span></span>", "funcdef": "def"}, "icepool.OutcomeCountGenerator.expand": {"fullname": "icepool.OutcomeCountGenerator.expand", "modulename": "icepool", "qualname": "OutcomeCountGenerator.expand", "kind": "function", "doc": "<p>All possible (unordered) tuples of outcomes.</p>\n\n<p>This is expensive and not recommended unless there are few possibilities.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>unique:</strong>  If set, at most one of each outcome will be produced.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">unique</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "icepool.OutcomeCountGenerator.sum": {"fullname": "icepool.OutcomeCountGenerator.sum", "modulename": "icepool", "qualname": "OutcomeCountGenerator.sum", "kind": "function", "doc": "<p>The sum of the outcomes.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>map:</strong>  If provided, the outcomes will be mapped according to this\nbefore summing.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"nb\">map</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.OutcomeCountGenerator.count": {"fullname": "icepool.OutcomeCountGenerator.count", "modulename": "icepool", "qualname": "OutcomeCountGenerator.count", "kind": "function", "doc": "<p>The number of outcomes that are == the target.</p>\n\n<p>If no target is provided, all outcomes will be counted.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">target</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.OutcomeCountGenerator.count_in": {"fullname": "icepool.OutcomeCountGenerator.count_in", "modulename": "icepool", "qualname": "OutcomeCountGenerator.count_in", "kind": "function", "doc": "<p>The number of outcomes that are in the target.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"n\">Container</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.OutcomeCountGenerator.count_unique": {"fullname": "icepool.OutcomeCountGenerator.count_unique", "modulename": "icepool", "qualname": "OutcomeCountGenerator.count_unique", "kind": "function", "doc": "<p>The number of outcomes with count greater than zero.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.OutcomeCountGenerator.contains_subset": {"fullname": "icepool.OutcomeCountGenerator.contains_subset", "modulename": "icepool", "qualname": "OutcomeCountGenerator.contains_subset", "kind": "function", "doc": "<p>Whether the outcomes contain all of the targets.</p>\n\n<p>The targets may contain duplicate elements.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>targets:</strong>  Either a collection of outcomes, counting once per appearance.\nOr a mapping from outcomes to target counts.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">targets</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Collection</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.OutcomeCountGenerator.intersection_size": {"fullname": "icepool.OutcomeCountGenerator.intersection_size", "modulename": "icepool", "qualname": "OutcomeCountGenerator.intersection_size", "kind": "function", "doc": "<p>The size of the intersection of the outcomes and the targets.</p>\n\n<p>The targets may contain duplicate elements.</p>\n\n<p>E.g. a roll of 1, 2, 2 and a target of 1, 1, 2, 3 would result in 2.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>targets:</strong>  Either a collection of outcomes, counting once per appearance.\nOr a mapping from outcomes to target counts.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">targets</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Collection</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.OutcomeCountGenerator.largest_matching_set": {"fullname": "icepool.OutcomeCountGenerator.largest_matching_set", "modulename": "icepool", "qualname": "OutcomeCountGenerator.largest_matching_set", "kind": "function", "doc": "<p>The largest matching set among the outcomes.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A <code>Die</code> with outcomes set_size.\n  The greatest single such set is returned.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.OutcomeCountGenerator.largest_matching_set_and_outcome": {"fullname": "icepool.OutcomeCountGenerator.largest_matching_set_and_outcome", "modulename": "icepool", "qualname": "OutcomeCountGenerator.largest_matching_set_and_outcome", "kind": "function", "doc": "<p>The largest matching set among the outcomes.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A <code>Die</code> with outcomes (set_size, outcome).\n  The greatest single such set is returned.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "icepool.OutcomeCountGenerator.largest_straight": {"fullname": "icepool.OutcomeCountGenerator.largest_straight", "modulename": "icepool", "qualname": "OutcomeCountGenerator.largest_straight", "kind": "function", "doc": "<p>The best straight among the outcomes.</p>\n\n<p>Outcomes must be <code>int</code>s.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A <code>Die</code> with outcomes straight_size.\n  The greatest single such straight is returned.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">outcome_count_generator</span><span class=\"o\">.</span><span class=\"n\">OutcomeCountGenerator</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.OutcomeCountGenerator.largest_straight_and_outcome": {"fullname": "icepool.OutcomeCountGenerator.largest_straight_and_outcome", "modulename": "icepool", "qualname": "OutcomeCountGenerator.largest_straight_and_outcome", "kind": "function", "doc": "<p>The best straight among the outcomes.</p>\n\n<p>Outcomes must be <code>int</code>s.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A <code>Die</code> with outcomes (straight_size, outcome).\n  The greatest single such straight is returned.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">outcome_count_generator</span><span class=\"o\">.</span><span class=\"n\">OutcomeCountGenerator</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "icepool.OutcomeCountGenerator.sample": {"fullname": "icepool.OutcomeCountGenerator.sample", "modulename": "icepool", "qualname": "OutcomeCountGenerator.sample", "kind": "function", "doc": "<p>EXPERIMENTAL: A single random sample from this generator.</p>\n\n<p>This uses the standard <code>random</code> package and is not cryptographically\nsecure.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A sorted tuple of outcomes for each output of this generator.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Pool": {"fullname": "icepool.Pool", "modulename": "icepool", "qualname": "Pool", "kind": "class", "doc": "<p>Represents a set of sorted/unordered dice, only distinguished by the outcomes they roll.</p>\n\n<p>This should be used in conjunction with <code>OutcomeCountEvaluator</code> to generate a result.</p>\n", "bases": "icepool.outcome_count_generator.OutcomeCountGenerator[+T_co]"}, "icepool.Pool.__init__": {"fullname": "icepool.Pool.__init__", "modulename": "icepool", "qualname": "Pool.__init__", "kind": "function", "doc": "<p>Public constructor for a pool.</p>\n\n<p>Evaulation is most efficient when the dice are the same or same-side\ntruncations of each other. For example, d4, d6, d8, d10, d12 are all\nsame-side truncations of d12.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><p><strong>dice:</strong>  The dice to put in the <code>Pool</code>. This can be one of the following:</p>\n\n<ul>\n<li>A <code>Sequence</code> of <code>Die</code> or outcomes.</li>\n<li>A <code>Mapping</code> of <code>Die</code> or outcomes to how many of that <code>Die</code> or\noutcome to put in the <code>Pool</code>.</li>\n</ul>\n\n<p><p>All outcomes within a <code>Pool</code> must be totally orderable.</p></li>\n<li><strong>times:</strong>  Multiplies the number of times each element of <code>dice</code> will\nbe put into the pool.\n<code>times</code> can either be a sequence of the same length as\n<code>outcomes</code> or a single <code>int</code> to apply to all elements of\n<code>outcomes</code>.</li>\n</ul></p>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  If a bare <code>Deck</code> or <code>Die</code> argument is provided.\nA <code>Pool</code> of a single <code>Die</code> should constructed as <code>Pool([die])</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">dice</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">],</span> <span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">]],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">],</span> <span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">],</span> <span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">],</span> <span class=\"nb\">int</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">times</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span>)</span>"}, "icepool.Pool.size": {"fullname": "icepool.Pool.size", "modulename": "icepool", "qualname": "Pool.size", "kind": "function", "doc": "<p>The number of dice in this pool, counting multiples of the same <code>Die</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "icepool.Pool.denominator": {"fullname": "icepool.Pool.denominator", "modulename": "icepool", "qualname": "Pool.denominator", "kind": "function", "doc": "<p>The total weight of all paths through this generator.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "icepool.Pool.unique_dice": {"fullname": "icepool.Pool.unique_dice", "modulename": "icepool", "qualname": "Pool.unique_dice", "kind": "function", "doc": "<p>The collection of unique dice in this pool.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Collection</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "icepool.Pool.outcomes": {"fullname": "icepool.Pool.outcomes", "modulename": "icepool", "qualname": "Pool.outcomes", "kind": "function", "doc": "<p>The union of outcomes among all dice in this pool.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Pool.counts_len": {"fullname": "icepool.Pool.counts_len", "modulename": "icepool", "qualname": "Pool.counts_len", "kind": "function", "doc": "<p>The number of counts generated. Must be constant.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "icepool.Pool.sorted_roll_counts": {"fullname": "icepool.Pool.sorted_roll_counts", "modulename": "icepool", "qualname": "Pool.sorted_roll_counts", "kind": "function", "doc": "<p>The tuple indicating which dice in the pool will be counted.</p>\n\n<p>The tuple has one element per <code>Die</code> in the pool, from lowest roll to\nhighest roll. The <code>Die</code> in the corresponding sorted position will be\ncounted that many times.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Pool.set_sorted_roll_counts": {"fullname": "icepool.Pool.set_sorted_roll_counts", "modulename": "icepool", "qualname": "Pool.set_sorted_roll_counts", "kind": "function", "doc": "<p>A <code>Pool</code> with the selected dice counted after rolling and sorting.</p>\n\n<p>Use <code>pool[sorted_roll_counts]</code> for the same effect as this method.</p>\n\n<p>The dice are sorted in ascending order for this purpose,\nregardless of which order the outcomes are evaluated in.</p>\n\n<p>This is always an absolute selection on all <code>size</code> dice,\nnot a relative selection on already-selected dice,\nwhich would be ambiguous in the presence of multiple or negative counts.</p>\n\n<p>For example, here are some ways of selecting the two highest dice out of 5:</p>\n\n<ul>\n<li><code>pool[3:5]</code></li>\n<li><code>pool[3:]</code></li>\n<li><code>pool[-2:]</code></li>\n<li><code>pool[..., 1, 1]</code></li>\n<li><code>pool[0, 0, 0, 1, 1]</code></li>\n</ul>\n\n<p>These will count the highest as a positive and the lowest as a negative:</p>\n\n<ul>\n<li><code>pool[-1, 0, 0, 0, 1]</code></li>\n<li><code>pool[-1, ..., 1]</code></li>\n</ul>\n\n<p>Args: One of the following:\n    * An <code>int</code>. This will count only the <code>Die</code> at the specified index\n        (once). In this case, the result will be a <code>Die</code>, not a <code>Pool</code>.\n    * A <code>slice</code>. The selected dice are counted once each.\n    * A sequence of one <code>int</code> for each <code>Die</code>.\n        Each <code>Die</code> is counted that many times, which could be multiple or\n        negative times.</p>\n\n<pre><code>    Up to one `...` (`Ellipsis`) may be used.\n    `...` will be replaced with a number of zero\n    counts depending on the size of the pool.\n    This number may be \"negative\" if more `int`s are provided than\n    the size of the `Pool`. Specifically:\n\n    * If `sorted_roll_counts` is shorter than `size`, `...`\n        acts as enough zero counts to make up the difference.\n        E.g. `pool[1, ..., 1]` on five dice would act as `pool[1, 0, 0, 0, 1]`.\n    * If `sorted_roll_counts` has length equal to `size`, `...` has no effect.\n        E.g. `pool[1, ..., 1]` on two dice would act as `pool[1, 1]`.\n    * If `sorted_roll_counts` is longer than `size` and `...` is on one side,\n        elements will be dropped from `sorted_roll_counts` on the side with `...`.\n        E.g. `pool[..., 1, 2, 3]` on two dice would act as `pool[2, 3]`.\n    * If `sorted_roll_counts` is longer than `size` and `...`\n        is in the middle, the counts will be as the sum of two\n        one-sided `...`.\n        E.g. `pool[-1, ..., 1]` acts like `[-1, ...]` plus `[..., 1]`.\n        On a `Pool` consisting of a single `Die` this would have\n        the -1 and 1 cancel each other out.\n</code></pre>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  If more than one <code>...</code> is used.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">sorted_roll_counts</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">slice</span><span class=\"p\">,</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">pool</span><span class=\"o\">.</span><span class=\"n\">Pool</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">],</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "icepool.Pool.min_outcome": {"fullname": "icepool.Pool.min_outcome", "modulename": "icepool", "qualname": "Pool.min_outcome", "kind": "function", "doc": "<p>The min outcome among all dice in this pool.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"o\">+</span><span class=\"n\">T_co</span>:</span></span>", "funcdef": "def"}, "icepool.Pool.max_outcome": {"fullname": "icepool.Pool.max_outcome", "modulename": "icepool", "qualname": "Pool.max_outcome", "kind": "function", "doc": "<p>The max outcome among all dice in this pool.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"o\">+</span><span class=\"n\">T_co</span>:</span></span>", "funcdef": "def"}, "icepool.Pool.lowest": {"fullname": "icepool.Pool.lowest", "modulename": "icepool", "qualname": "Pool.lowest", "kind": "function", "doc": "<p>The sum of the lowest outcomes in the pool.</p>\n\n<p>The args override any <code>sorted_roll_counts</code> of this pool.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>keep:</strong>  The number of lowest dice will be summed.</li>\n<li><strong>drop:</strong>  This number of lowest dice will be dropped before keeping\ndice to be summed.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">keep</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">drop</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span>:</span></span>", "funcdef": "def"}, "icepool.Pool.highest": {"fullname": "icepool.Pool.highest", "modulename": "icepool", "qualname": "Pool.highest", "kind": "function", "doc": "<p>The sum of the highest outcomes in the pool.</p>\n\n<p>The args override any <code>sorted_roll_counts</code> of this pool.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>keep:</strong>  The number of highest dice will be summed.</li>\n<li><strong>drop:</strong>  This number of highest dice will be dropped before keeping\ndice to be summed.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">keep</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">drop</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span>:</span></span>", "funcdef": "def"}, "icepool.standard_pool": {"fullname": "icepool.standard_pool", "modulename": "icepool", "qualname": "standard_pool", "kind": "function", "doc": "<p>A <code>Pool</code> of standard dice (e.g. d6, d8...).</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>die_sizes:</strong>  A collection of die sizes, which will put one die of that\nsizes in the pool for each element.\nOr, a mapping of die sizes to how many dice of that size to put\ninto the pool.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">die_sizes</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Collection</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">pool</span><span class=\"o\">.</span><span class=\"n\">Pool</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.OutcomeCountEvaluator": {"fullname": "icepool.OutcomeCountEvaluator", "modulename": "icepool", "qualname": "OutcomeCountEvaluator", "kind": "class", "doc": "<p>An abstract, immutable, callable class for evaulating one or more <code>OutcomeCountGenerator</code>s.</p>\n\n<p>There is one abstract method to implement: <code>next_state()</code>.\nThis should incrementally calculate the result given one outcome at a time\nalong with how many of that outcome were produced.</p>\n\n<p>An example sequence of calls, as far as <code>next_state()</code> is concerned, is:</p>\n\n<ol>\n<li><code>state = next_state(state=None, outcome=1, count_of_1s)</code></li>\n<li><code>state = next_state(state, 2, count_of_2s)</code></li>\n<li><code>state = next_state(state, 3, count_of_3s)</code></li>\n<li><code>state = next_state(state, 4, count_of_4s)</code></li>\n<li><code>state = next_state(state, 5, count_of_5s)</code></li>\n<li><code>state = next_state(state, 6, count_of_6s)</code></li>\n<li><code>outcome = final_outcome(state, *generators)</code></li>\n</ol>\n\n<p>A few other methods can optionally be overridden to further customize behavior.</p>\n\n<p>It is not expected that subclasses of <code>OutcomeCountEvaluator</code>\nbe able to handle arbitrary types or numbers of generators.\nIndeed, most are expected to handle only a fixed number of generators,\nand often even only generators with a particular type of <code>Die</code>.</p>\n\n<p>Instances cache all intermediate state distributions.\nYou should therefore reuse instances when possible.</p>\n\n<p>Instances should not be modified after construction\nin any way that affects the return values of these methods.\nOtherwise, values in the cache may be incorrect.</p>\n", "bases": "abc.ABC, typing.Generic[-T_contra, +U_co]"}, "icepool.OutcomeCountEvaluator.next_state": {"fullname": "icepool.OutcomeCountEvaluator.next_state", "modulename": "icepool", "qualname": "OutcomeCountEvaluator.next_state", "kind": "function", "doc": "<p>State transition function.</p>\n\n<p>This should produce a state given the previous state, an outcome,\nand the number that outcome produced by each generator.</p>\n\n<p><code>evaluate()</code> will always call this using only positional arguments.\nFurthermore, there is no expectation that a subclass be able to handle\nan arbitrary number of counts. Thus, you are free to rename any of\nthe parameters in a subclass, or to replace <code>*counts</code> with a fixed set\nof parameters.</p>\n\n<p>Make sure to handle the base case where <code>state is None</code>.</p>\n\n<p>States must be hashable. At current, they do not have to be orderable.\nHowever, this may change in the future, and if they are not totally\norderable, you must override <code>final_outcome</code> to create totally orderable\nfinal outcomes.</p>\n\n<p>The behavior of returning a <code>Die</code> from <code>next_state</code> is currently\nundefined.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>state:</strong>  A hashable object indicating the state before rolling the\ncurrent outcome. If this is the first outcome being considered,\n<code>state</code> will be <code>None</code>.</li>\n<li><strong>outcome:</strong>  The current outcome.\n<code>next_state</code> will see all rolled outcomes in monotonic order;\neither ascending or descending depending on <code>order()</code>.\nIf there are multiple generators, the set of outcomes is the\nunion of the outcomes of the invididual generators. All outcomes\nwith nonzero count will be seen. Outcomes with zero count\nmay or may not be seen. If you need to enforce that certain\noutcomes are seen even if they have zero count, see\n<code>alignment()</code>.</li>\n<li><strong>*counts:</strong>  One value (usually an <code>int</code>) for each generator output\nindicating how many of the current outcome were produced.\nAll outcomes with nonzero count are guaranteed to be seen.\nTo guarantee that outcomes are seen even if they have zero\ncount, override <code>alignment()</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A hashable object indicating the next state.\n  The special value <code>icepool.Reroll</code> can be used to immediately remove\n  the state from consideration, effectively performing a full reroll.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"n\">Hashable</span>, </span><span class=\"param\"><span class=\"n\">outcome</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"n\">T_contra</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">counts</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Hashable</span>:</span></span>", "funcdef": "def"}, "icepool.OutcomeCountEvaluator.final_outcome": {"fullname": "icepool.OutcomeCountEvaluator.final_outcome", "modulename": "icepool", "qualname": "OutcomeCountEvaluator.final_outcome", "kind": "function", "doc": "<p>Optional function to generate a final outcome from a final state.</p>\n\n<p>Tthere is no expectation that a subclass be able to handle\nan arbitrary number of generators. Thus, you are free to rename any of\nthe parameters in a subclass, or to replace <code>*generators</code> with a fixed\nset of parameters.</p>\n\n<p>By default, the final outcome is equal to the final state.\nNote that <code>None</code> is not a valid outcome for a <code>Die</code>,\nand if there are no outcomes, the final state will be <code>None</code>.\nSubclasses that want to handle this case should explicitly define what\nhappens.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>final_state:</strong>  A state after all outcomes have been processed.</li>\n<li><strong>*generators:</strong>  One or more <code>OutcomeCountGenerator</code>s being evaluated.\nMost subclasses will expect a fixed number of generators and\ncan replace this variadic parameter with a fixed number of named\nparameters.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A final outcome that will be used as part of constructing the result <code>Die</code>.\n  As usual for <code>Die()</code>, this could itself be a <code>Die</code> or <code>icepool.Reroll</code>.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">final_state</span><span class=\"p\">:</span> <span class=\"n\">Hashable</span>,</span><span class=\"param\">\t<span class=\"o\">/</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">generators</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">outcome_count_generator</span><span class=\"o\">.</span><span class=\"n\">OutcomeCountGenerator</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"o\">+</span><span class=\"n\">U_co</span>:</span></span>", "funcdef": "def"}, "icepool.OutcomeCountEvaluator.order": {"fullname": "icepool.OutcomeCountEvaluator.order", "modulename": "icepool", "qualname": "OutcomeCountEvaluator.order", "kind": "function", "doc": "<p>Optional function to determine the order in which <code>next_state()</code> will see outcomes.</p>\n\n<p>There is no expectation that a subclass be able to handle\nan arbitrary number of generators. Thus, you are free to rename any of\nthe parameters in a subclass, or to replace <code>*generators</code> with a fixed\nset of parameters.</p>\n\n<p>The default is ascending order. This works well with mixed standard dice,\nand other dice that differ only by right-truncation.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>*generators:</strong>  One or more <code>OutcomeCountGenerator</code>s being evaluated.\nMost subclasses will expect a fixed number of generators and\ncan replace this variadic parameter with a fixed number of named\nparameters.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <ul>\n  <li>Order.Ascending (= 1)\n  if <code>next_state()</code> should always see the outcomes in ascending order.</li>\n  <li>Order.Descending (= -1)\n  if <code>next_state()</code> should always see the outcomes in descending order.</li>\n  <li>Order.Any (= 0)\n  if the result of the evaluation is order-independent.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">generators</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">outcome_count_generator</span><span class=\"o\">.</span><span class=\"n\">OutcomeCountGenerator</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">outcome_count_evaluator</span><span class=\"o\">.</span><span class=\"n\">Order</span>:</span></span>", "funcdef": "def"}, "icepool.OutcomeCountEvaluator.alignment": {"fullname": "icepool.OutcomeCountEvaluator.alignment", "modulename": "icepool", "qualname": "OutcomeCountEvaluator.alignment", "kind": "function", "doc": "<p>Optional method to specify an collection of outcomes that should always be given to <code>next_state()</code> even if they have zero count.</p>\n\n<p>There is no expectation that a subclass be able to handle\nan arbitrary number of generators. Thus, you are free to rename any of\nthe parameters in a subclass, or to replace <code>*generators</code> with a fixed\nset of parameters.</p>\n\n<p>The default implementation returns <code>()</code>; this means outcomes with zero\ncount may or may not be seen by <code>next_state</code>.</p>\n\n<p>If you want the outcomes seen by <code>next_state</code> to be consecutive\n<code>int</code>s, you can set <code>alignment = icepool.OutcomeCountEvaluator.range_alignment</code>.\nSee <code>range_alignment()</code> below.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">generators</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">outcome_count_generator</span><span class=\"o\">.</span><span class=\"n\">OutcomeCountGenerator</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Collection</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.OutcomeCountEvaluator.range_alignment": {"fullname": "icepool.OutcomeCountEvaluator.range_alignment", "modulename": "icepool", "qualname": "OutcomeCountEvaluator.range_alignment", "kind": "function", "doc": "<p>Example implementation of <code>alignment()</code> that produces consecutive <code>int</code> outcomes.</p>\n\n<p>There is no expectation that a subclass be able to handle\nan arbitrary number of generators. Thus, you are free to rename any of\nthe parameters in a subclass, or to replace <code>*generators</code> with a fixed\nset of parameters.</p>\n\n<p>Set <code>alignment = icepool.OutcomeCountEvaluator.range_alignment</code> to use this.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>All <code>int</code>s from the min outcome to the max outcome among the generators,\n  inclusive.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TypeError:</strong>  if any generator has any non-<code>int</code> outcome.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">generators</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">outcome_count_generator</span><span class=\"o\">.</span><span class=\"n\">OutcomeCountGenerator</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Collection</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.OutcomeCountEvaluator.evaluate": {"fullname": "icepool.OutcomeCountEvaluator.evaluate", "modulename": "icepool", "qualname": "OutcomeCountEvaluator.evaluate", "kind": "function", "doc": "<p>Evaluates generator(s).</p>\n\n<p>You can call the <code>OutcomeCountEvaluator</code> object directly for the same effect,\ne.g. <code>sum_evaluator(generator)</code> is an alias for <code>sum_evaluator.evaluate(generator)</code>.</p>\n\n<p>Most evaluators will expect a fixed number of generators.\nThe union of the outcomes of the generator(s) must be totally orderable.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>*generators:</strong>  Each element may be one of the following:\n<ul>\n<li>A <code>OutcomeCountGenerator</code>.</li>\n<li>A mappable mapping dice to the number of those dice.</li>\n<li>A sequence of arguments to create a <code>Pool</code>.</li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A <code>Die</code> representing the distribution of the final score.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">generators</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">outcome_count_generator</span><span class=\"o\">.</span><span class=\"n\">OutcomeCountGenerator</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">Sequence</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">U_co</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.OutcomeCountEvaluator.sample": {"fullname": "icepool.OutcomeCountEvaluator.sample", "modulename": "icepool", "qualname": "OutcomeCountEvaluator.sample", "kind": "function", "doc": "<p>EXPERIMENTAL: Samples one result from the generator(s) and evaluates the result.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">generators</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">outcome_count_generator</span><span class=\"o\">.</span><span class=\"n\">OutcomeCountGenerator</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "icepool.Order": {"fullname": "icepool.Order", "modulename": "icepool", "qualname": "Order", "kind": "class", "doc": "<p>Can be used to define what order outcomes are seen in by OutcomeCountEvaluators.</p>\n", "bases": "enum.IntEnum"}, "icepool.Order.Ascending": {"fullname": "icepool.Order.Ascending", "modulename": "icepool", "qualname": "Order.Ascending", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;Order.Ascending: 1&gt;"}, "icepool.Order.Descending": {"fullname": "icepool.Order.Descending", "modulename": "icepool", "qualname": "Order.Descending", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;Order.Descending: -1&gt;"}, "icepool.Order.Any": {"fullname": "icepool.Order.Any", "modulename": "icepool", "qualname": "Order.Any", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;Order.Any: 0&gt;"}, "icepool.JointEvaluator": {"fullname": "icepool.JointEvaluator", "modulename": "icepool", "qualname": "JointEvaluator", "kind": "class", "doc": "<p>An <code>OutcomeCountEvaluator</code> that jointly evaluates sub-evaluators on the same roll(s) of a generator.</p>\n", "bases": "icepool.outcome_count_evaluator.OutcomeCountEvaluator[-T_contra, tuple]"}, "icepool.JointEvaluator.__init__": {"fullname": "icepool.JointEvaluator.__init__", "modulename": "icepool", "qualname": "JointEvaluator.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">sub_evaluators</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">outcome_count_evaluator</span><span class=\"o\">.</span><span class=\"n\">OutcomeCountEvaluator</span></span>)</span>"}, "icepool.JointEvaluator.next_state": {"fullname": "icepool.JointEvaluator.next_state", "modulename": "icepool", "qualname": "JointEvaluator.next_state", "kind": "function", "doc": "<p>Runs <code>next_state</code> for all subevals.</p>\n\n<p>The state is a tuple of the substates.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">state</span>, </span><span class=\"param\"><span class=\"n\">outcome</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">counts</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "icepool.JointEvaluator.final_outcome": {"fullname": "icepool.JointEvaluator.final_outcome", "modulename": "icepool", "qualname": "JointEvaluator.final_outcome", "kind": "function", "doc": "<p>Runs <code>final_state</code> for all subevals.</p>\n\n<p>The final outcome is a tuple of the final suboutcomes.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">final_state</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">generators</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">outcome_count_generator</span><span class=\"o\">.</span><span class=\"n\">OutcomeCountGenerator</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "icepool.JointEvaluator.order": {"fullname": "icepool.JointEvaluator.order", "modulename": "icepool", "qualname": "JointEvaluator.order", "kind": "function", "doc": "<p>Determines the common order of the subevals.</p>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  If subevals have conflicting orders, i.e. some are\nascending and others are descending.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">generators</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">outcome_count_generator</span><span class=\"o\">.</span><span class=\"n\">OutcomeCountGenerator</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "icepool.SumEvaluator": {"fullname": "icepool.SumEvaluator", "modulename": "icepool", "qualname": "SumEvaluator", "kind": "class", "doc": "<p>Sums all outcomes.</p>\n", "bases": "abc.ABC, typing.Generic[-T_contra, +U_co]"}, "icepool.SumEvaluator.__init__": {"fullname": "icepool.SumEvaluator.__init__", "modulename": "icepool", "qualname": "SumEvaluator.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"nb\">map</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, "icepool.SumEvaluator.next_state": {"fullname": "icepool.SumEvaluator.next_state", "modulename": "icepool", "qualname": "SumEvaluator.next_state", "kind": "function", "doc": "<p>Add the outcomes to the running total.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">state</span>, </span><span class=\"param\"><span class=\"n\">outcome</span>, </span><span class=\"param\"><span class=\"n\">count</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "icepool.SumEvaluator.final_outcome": {"fullname": "icepool.SumEvaluator.final_outcome", "modulename": "icepool", "qualname": "SumEvaluator.final_outcome", "kind": "function", "doc": "<p>Optional function to generate a final outcome from a final state.</p>\n\n<p>Tthere is no expectation that a subclass be able to handle\nan arbitrary number of generators. Thus, you are free to rename any of\nthe parameters in a subclass, or to replace <code>*generators</code> with a fixed\nset of parameters.</p>\n\n<p>By default, the final outcome is equal to the final state.\nNote that <code>None</code> is not a valid outcome for a <code>Die</code>,\nand if there are no outcomes, the final state will be <code>None</code>.\nSubclasses that want to handle this case should explicitly define what\nhappens.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>final_state:</strong>  A state after all outcomes have been processed.</li>\n<li><strong>*generators:</strong>  One or more <code>OutcomeCountGenerator</code>s being evaluated.\nMost subclasses will expect a fixed number of generators and\ncan replace this variadic parameter with a fixed number of named\nparameters.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A final outcome that will be used as part of constructing the result <code>Die</code>.\n  As usual for <code>Die()</code>, this could itself be a <code>Die</code> or <code>icepool.Reroll</code>.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">final_state</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">_</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "icepool.SumEvaluator.order": {"fullname": "icepool.SumEvaluator.order", "modulename": "icepool", "qualname": "SumEvaluator.order", "kind": "function", "doc": "<p>Optional function to determine the order in which <code>next_state()</code> will see outcomes.</p>\n\n<p>There is no expectation that a subclass be able to handle\nan arbitrary number of generators. Thus, you are free to rename any of\nthe parameters in a subclass, or to replace <code>*generators</code> with a fixed\nset of parameters.</p>\n\n<p>The default is ascending order. This works well with mixed standard dice,\nand other dice that differ only by right-truncation.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>*generators:</strong>  One or more <code>OutcomeCountGenerator</code>s being evaluated.\nMost subclasses will expect a fixed number of generators and\ncan replace this variadic parameter with a fixed number of named\nparameters.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <ul>\n  <li>Order.Ascending (= 1)\n  if <code>next_state()</code> should always see the outcomes in ascending order.</li>\n  <li>Order.Descending (= -1)\n  if <code>next_state()</code> should always see the outcomes in descending order.</li>\n  <li>Order.Any (= 0)\n  if the result of the evaluation is order-independent.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">_</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "icepool.ExpandEvaluator": {"fullname": "icepool.ExpandEvaluator", "modulename": "icepool", "qualname": "ExpandEvaluator", "kind": "class", "doc": "<p>Expands all results of a generator.</p>\n\n<p>This is expensive and not recommended unless there are few possibilities.</p>\n", "bases": "icepool.outcome_count_evaluator.OutcomeCountEvaluator[typing.Any, tuple]"}, "icepool.ExpandEvaluator.__init__": {"fullname": "icepool.ExpandEvaluator.__init__", "modulename": "icepool", "qualname": "ExpandEvaluator.__init__", "kind": "function", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>unique:</strong>  Iff <code>True</code>, duplicate outcomes count only as one.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">unique</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, "icepool.ExpandEvaluator.next_state": {"fullname": "icepool.ExpandEvaluator.next_state", "modulename": "icepool", "qualname": "ExpandEvaluator.next_state", "kind": "function", "doc": "<p>State transition function.</p>\n\n<p>This should produce a state given the previous state, an outcome,\nand the number that outcome produced by each generator.</p>\n\n<p><code>evaluate()</code> will always call this using only positional arguments.\nFurthermore, there is no expectation that a subclass be able to handle\nan arbitrary number of counts. Thus, you are free to rename any of\nthe parameters in a subclass, or to replace <code>*counts</code> with a fixed set\nof parameters.</p>\n\n<p>Make sure to handle the base case where <code>state is None</code>.</p>\n\n<p>States must be hashable. At current, they do not have to be orderable.\nHowever, this may change in the future, and if they are not totally\norderable, you must override <code>final_outcome</code> to create totally orderable\nfinal outcomes.</p>\n\n<p>The behavior of returning a <code>Die</code> from <code>next_state</code> is currently\nundefined.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>state:</strong>  A hashable object indicating the state before rolling the\ncurrent outcome. If this is the first outcome being considered,\n<code>state</code> will be <code>None</code>.</li>\n<li><strong>outcome:</strong>  The current outcome.\n<code>next_state</code> will see all rolled outcomes in monotonic order;\neither ascending or descending depending on <code>order()</code>.\nIf there are multiple generators, the set of outcomes is the\nunion of the outcomes of the invididual generators. All outcomes\nwith nonzero count will be seen. Outcomes with zero count\nmay or may not be seen. If you need to enforce that certain\noutcomes are seen even if they have zero count, see\n<code>alignment()</code>.</li>\n<li><strong>*counts:</strong>  One value (usually an <code>int</code>) for each generator output\nindicating how many of the current outcome were produced.\nAll outcomes with nonzero count are guaranteed to be seen.\nTo guarantee that outcomes are seen even if they have zero\ncount, override <code>alignment()</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A hashable object indicating the next state.\n  The special value <code>icepool.Reroll</code> can be used to immediately remove\n  the state from consideration, effectively performing a full reroll.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">state</span>, </span><span class=\"param\"><span class=\"n\">outcome</span>, </span><span class=\"param\"><span class=\"n\">count</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "icepool.ExpandEvaluator.order": {"fullname": "icepool.ExpandEvaluator.order", "modulename": "icepool", "qualname": "ExpandEvaluator.order", "kind": "function", "doc": "<p>Optional function to determine the order in which <code>next_state()</code> will see outcomes.</p>\n\n<p>There is no expectation that a subclass be able to handle\nan arbitrary number of generators. Thus, you are free to rename any of\nthe parameters in a subclass, or to replace <code>*generators</code> with a fixed\nset of parameters.</p>\n\n<p>The default is ascending order. This works well with mixed standard dice,\nand other dice that differ only by right-truncation.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>*generators:</strong>  One or more <code>OutcomeCountGenerator</code>s being evaluated.\nMost subclasses will expect a fixed number of generators and\ncan replace this variadic parameter with a fixed number of named\nparameters.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <ul>\n  <li>Order.Ascending (= 1)\n  if <code>next_state()</code> should always see the outcomes in ascending order.</li>\n  <li>Order.Descending (= -1)\n  if <code>next_state()</code> should always see the outcomes in descending order.</li>\n  <li>Order.Any (= 0)\n  if the result of the evaluation is order-independent.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">_</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "icepool.ExpandEvaluator.final_outcome": {"fullname": "icepool.ExpandEvaluator.final_outcome", "modulename": "icepool", "qualname": "ExpandEvaluator.final_outcome", "kind": "function", "doc": "<p>Optional function to generate a final outcome from a final state.</p>\n\n<p>Tthere is no expectation that a subclass be able to handle\nan arbitrary number of generators. Thus, you are free to rename any of\nthe parameters in a subclass, or to replace <code>*generators</code> with a fixed\nset of parameters.</p>\n\n<p>By default, the final outcome is equal to the final state.\nNote that <code>None</code> is not a valid outcome for a <code>Die</code>,\nand if there are no outcomes, the final state will be <code>None</code>.\nSubclasses that want to handle this case should explicitly define what\nhappens.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>final_state:</strong>  A state after all outcomes have been processed.</li>\n<li><strong>*generators:</strong>  One or more <code>OutcomeCountGenerator</code>s being evaluated.\nMost subclasses will expect a fixed number of generators and\ncan replace this variadic parameter with a fixed number of named\nparameters.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A final outcome that will be used as part of constructing the result <code>Die</code>.\n  As usual for <code>Die()</code>, this could itself be a <code>Die</code> or <code>icepool.Reroll</code>.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">final_state</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">_</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "icepool.Deck": {"fullname": "icepool.Deck", "modulename": "icepool", "qualname": "Deck", "kind": "class", "doc": "<p>Sampling without replacement (within a single evaluation).</p>\n\n<p>Quantities represent duplicates.</p>\n", "bases": "icepool.population.Population[~T]"}, "icepool.Deck.__init__": {"fullname": "icepool.Deck.__init__", "modulename": "icepool", "qualname": "Deck.__init__", "kind": "function", "doc": "<p>Constructor for a <code>Deck</code>.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><p><strong>outcomes:</strong>  The cards of the <code>Deck</code>. This can be one of the following:</p>\n\n<ul>\n<li>A <code>Sequence</code> of outcomes. Duplicates will contribute\nquantity for each appearance.</li>\n<li>A <code>Mapping</code> from outcomes to quantities.</li>\n</ul>\n\n<p>Each outcome may be one of the following:</p>\n\n<ul>\n<li>A simple single outcome, which must be hashable and totally\norderable.</li>\n<li>A tuple. The elements must be valid outcomes.  In particular,\n<code>Deck</code>, <code>Reroll</code>, and <code>Again</code> are not valid inside tuple\noutcomes.</li>\n<li>A <code>Deck</code>, which will be flattened into the result. If a\n<code>times</code> is assigned to the <code>Deck</code>, the entire <code>Deck</code> will\nbe duplicated that many times.</li>\n</ul></li>\n<li><strong>times:</strong>  Multiplies the number of times each element of <code>outcomes</code>\nwill be put into the <code>Deck</code>.\n<code>times</code> can either be a sequence of the same length as\n<code>outcomes</code> or a single <code>int</code> to apply to all elements of\n<code>outcomes</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">outcomes</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">Deck</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">constant</span><span class=\"o\">.</span><span class=\"n\">RerollType</span><span class=\"p\">]],</span> <span class=\"n\">Mapping</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">times</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span>)</span>"}, "icepool.Deck.keys": {"fullname": "icepool.Deck.keys", "modulename": "icepool", "qualname": "Deck.keys", "kind": "function", "doc": "<p>The outcomes within the population in sorted order.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">counts</span><span class=\"o\">.</span><span class=\"n\">CountsKeysView</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Deck.values": {"fullname": "icepool.Deck.values", "modulename": "icepool", "qualname": "Deck.values", "kind": "function", "doc": "<p>The quantities within the population in outcome order.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">counts</span><span class=\"o\">.</span><span class=\"n\">CountsValuesView</span>:</span></span>", "funcdef": "def"}, "icepool.Deck.items": {"fullname": "icepool.Deck.items", "modulename": "icepool", "qualname": "Deck.items", "kind": "function", "doc": "<p>The (outcome, quantity)s of the population in sorted order.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">counts</span><span class=\"o\">.</span><span class=\"n\">CountsItemsView</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Deck.size": {"fullname": "icepool.Deck.size", "modulename": "icepool", "qualname": "Deck.size", "kind": "function", "doc": "<p>The sum of all quantities (e.g. weights or duplicates).</p>\n\n<p>For the number of unique outcomes, including those with zero quantity,\nuse <code>len()</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "icepool.Deck.deal": {"fullname": "icepool.Deck.deal", "modulename": "icepool", "qualname": "Deck.deal", "kind": "function", "doc": "<p>Creates a <code>Deal</code> object from this deck.</p>\n\n<p>See <code>Deal()</code> for details.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">hand_sizes</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">deal</span><span class=\"o\">.</span><span class=\"n\">Deal</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Deck.map": {"fullname": "icepool.Deck.map", "modulename": "icepool", "qualname": "Deck.map", "kind": "function", "doc": "<p>Maps outcomes of this <code>Deck</code> to other outcomes.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>repl:</strong>  One of the following:\n<ul>\n<li>A callable returning a new outcome for each old outcome.</li>\n<li>A map from old outcomes to new outcomes.\nUnmapped old outcomes stay the same.\nThe new outcomes may be <code>Deck</code>s, in which case one card is\nreplaced with several. This is not recommended.</li>\n</ul></li>\n<li><strong>star:</strong>  If set to <code>True</code>, outcomes of <code>self</code> will be unpacked as\n<code>*outcome</code> before giving it to the <code>repl</code> function. <code>extra_dice</code>\nare not unpacked. If <code>repl</code> is not a callable, this has no\neffect.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">repl</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">Deck</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">],</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">constant</span><span class=\"o\">.</span><span class=\"n\">RerollType</span><span class=\"p\">]],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">Deck</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">],</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">constant</span><span class=\"o\">.</span><span class=\"n\">RerollType</span><span class=\"p\">]]]</span>,</span><span class=\"param\">\t<span class=\"o\">/</span>,</span><span class=\"param\">\t<span class=\"n\">star</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">Deck</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Deal": {"fullname": "icepool.Deal", "modulename": "icepool", "qualname": "Deal", "kind": "class", "doc": "<p>EXPERIMENTAL: Represents an sorted/unordered deal of cards from a <code>Deck</code>.</p>\n", "bases": "icepool.outcome_count_generator.OutcomeCountGenerator[+T_co]"}, "icepool.Deal.__init__": {"fullname": "icepool.Deal.__init__", "modulename": "icepool", "qualname": "Deal.__init__", "kind": "function", "doc": "<p>Constructor.</p>\n\n<p>For algorithmic reasons, you must pre-commit to the number of cards to\ndeal for each hand.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>deck:</strong>  The <code>Deck</code> to deal from.</li>\n<li><strong>*hand_sizes:</strong>  How many cards to deal. If multiple <code>hand_sizes</code> are\nprovided, <code>OutcomeCountEvaluator.next_state</code> will recieve one count\nper hand in order. Try to keep the number of hands to a minimum\nas this can be computationally intensive.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">deck</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">Deck</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">hand_sizes</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span>)</span>"}, "icepool.Deal.deck": {"fullname": "icepool.Deal.deck", "modulename": "icepool", "qualname": "Deal.deck", "kind": "function", "doc": "<p>The <code>Deck</code> the cards are dealt from.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">Deck</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Deal.hand_sizes": {"fullname": "icepool.Deal.hand_sizes", "modulename": "icepool", "qualname": "Deal.hand_sizes", "kind": "function", "doc": "<p>The number of cards dealt to each hand as a tuple.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Deal.total_cards_dealt": {"fullname": "icepool.Deal.total_cards_dealt", "modulename": "icepool", "qualname": "Deal.total_cards_dealt", "kind": "function", "doc": "<p>The total number of cards dealt.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "icepool.Deal.outcomes": {"fullname": "icepool.Deal.outcomes", "modulename": "icepool", "qualname": "Deal.outcomes", "kind": "function", "doc": "<p>The outcomes of the <code>Deck</code> in sorted order.</p>\n\n<p>These are also the <code>keys</code> of the <code>Deck</code> as a <code>Mapping</code>.\nPrefer to use the name <code>outcomes</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">counts</span><span class=\"o\">.</span><span class=\"n\">CountsKeysView</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Deal.counts_len": {"fullname": "icepool.Deal.counts_len", "modulename": "icepool", "qualname": "Deal.counts_len", "kind": "function", "doc": "<p>The number of counts generated. Must be constant.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "icepool.Deal.denominator": {"fullname": "icepool.Deal.denominator", "modulename": "icepool", "qualname": "Deal.denominator", "kind": "function", "doc": "<p>The total weight of all paths through this generator.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "icepool.SuitGenerator": {"fullname": "icepool.SuitGenerator", "modulename": "icepool", "qualname": "SuitGenerator", "kind": "class", "doc": "<p>EXPERIMENTAL: A meta-generator that groups 2-tuple outcomes from a source generator.</p>\n\n<p>This wraps a generator whose outcomes are of the form <code>(face, suit)</code>,\nand yields <code>outcomes</code> equal to <code>face</code> and <code>counts</code> that are mappings\nfrom <code>suit</code> to the count of that face and suit.</p>\n", "bases": "abc.ABC, typing.Generic[+T_co]"}, "icepool.SuitGenerator.__init__": {"fullname": "icepool.SuitGenerator.__init__", "modulename": "icepool", "qualname": "SuitGenerator.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">src</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">outcome_count_generator</span><span class=\"o\">.</span><span class=\"n\">OutcomeCountGenerator</span>, </span><span class=\"param\"><span class=\"o\">/</span></span>)</span>"}, "icepool.SuitGenerator.outcomes": {"fullname": "icepool.SuitGenerator.outcomes", "modulename": "icepool", "qualname": "SuitGenerator.outcomes", "kind": "function", "doc": "<p>The set of outcomes, in sorted order.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Sequence</span>:</span></span>", "funcdef": "def"}, "icepool.SuitGenerator.counts_len": {"fullname": "icepool.SuitGenerator.counts_len", "modulename": "icepool", "qualname": "SuitGenerator.counts_len", "kind": "function", "doc": "<p>The number of counts generated. Must be constant.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "icepool.SuitGenerator.denominator": {"fullname": "icepool.SuitGenerator.denominator", "modulename": "icepool", "qualname": "SuitGenerator.denominator", "kind": "function", "doc": "<p>The total weight of all paths through this generator.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "icepool.clear_pool_cache": {"fullname": "icepool.clear_pool_cache", "modulename": "icepool", "qualname": "clear_pool_cache", "kind": "function", "doc": "<p>Clears the global pool cache.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}}, "docInfo": {"icepool": {"qualname": 0, "fullname": 1, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 115}, "icepool.standard": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 45, "bases": 0, "doc": 75}, "icepool.d": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 45, "bases": 0, "doc": 75}, "icepool.bernoulli": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 55, "bases": 0, "doc": 44}, "icepool.coin": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 55, "bases": 0, "doc": 44}, "icepool.one_hot": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 56, "bases": 0, "doc": 76}, "icepool.cartesian_product": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 74, "bases": 0, "doc": 45}, "icepool.Outcome": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 6, "doc": 12}, "icepool.Outcome.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 18, "bases": 0, "doc": 3}, "icepool.Die": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 204}, "icepool.Die.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 231, "bases": 0, "doc": 817}, "icepool.Die.unary_op": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 76, "bases": 0, "doc": 157}, "icepool.Die.binary_op": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 106, "bases": 0, "doc": 274}, "icepool.Die.keys": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 11}, "icepool.Die.values": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 11}, "icepool.Die.items": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 13}, "icepool.Die.simplify": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 37, "bases": 0, "doc": 11}, "icepool.Die.reroll": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 139, "bases": 0, "doc": 167}, "icepool.Die.filter": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 126, "bases": 0, "doc": 164}, "icepool.Die.truncate": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 59, "bases": 0, "doc": 89}, "icepool.Die.clip": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 59, "bases": 0, "doc": 91}, "icepool.Die.set_range": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 112, "bases": 0, "doc": 78}, "icepool.Die.set_outcomes": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 55, "bases": 0, "doc": 41}, "icepool.Die.trim": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 37, "bases": 0, "doc": 8}, "icepool.Die.map": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 363, "bases": 0, "doc": 287}, "icepool.Die.map_and_time": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 233, "bases": 0, "doc": 342}, "icepool.Die.explode": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 144, "bases": 0, "doc": 172}, "icepool.Die.if_else": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 235, "bases": 0, "doc": 57}, "icepool.Die.is_in": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 58, "bases": 0, "doc": 19}, "icepool.Die.count": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 55, "bases": 0, "doc": 17}, "icepool.Die.count_in": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 68, "bases": 0, "doc": 18}, "icepool.Die.pool": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 63, "bases": 0, "doc": 111}, "icepool.Die.keep_lowest": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 78, "bases": 0, "doc": 98}, "icepool.Die.keep_highest": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 91, "bases": 0, "doc": 87}, "icepool.Die.abs": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 37, "bases": 0, "doc": 3}, "icepool.Die.round": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 52, "bases": 0, "doc": 3}, "icepool.Die.trunc": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 29, "bases": 0, "doc": 3}, "icepool.Die.floor": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 29, "bases": 0, "doc": 3}, "icepool.Die.ceil": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 29, "bases": 0, "doc": 3}, "icepool.Die.zero": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 37, "bases": 0, "doc": 63}, "icepool.Die.zero_outcome": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 28}, "icepool.Die.cmp": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 40, "bases": 0, "doc": 54}, "icepool.Die.sign": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 35, "bases": 0, "doc": 42}, "icepool.Die.key_tuple": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 40}, "icepool.Die.equals": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 41, "bases": 0, "doc": 191}, "icepool.Population": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 37}, "icepool.Population.keys": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 11}, "icepool.Population.values": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 11}, "icepool.Population.items": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 13}, "icepool.Population.outcomes": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 30}, "icepool.Population.tuple_len": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 20, "bases": 0, "doc": 30}, "icepool.Population.is_empty": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 12}, "icepool.Population.min_outcome": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 6}, "icepool.Population.max_outcome": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 6}, "icepool.Population.nearest_le": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 27, "bases": 0, "doc": 24}, "icepool.Population.nearest_ge": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 27, "bases": 0, "doc": 24}, "icepool.Population.quantities": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 32}, "icepool.Population.denominator": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 32}, "icepool.Population.has_zero_quantities": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 18}, "icepool.Population.quantities_le": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 20, "bases": 0, "doc": 10}, "icepool.Population.quantities_ge": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 20, "bases": 0, "doc": 10}, "icepool.Population.quantity": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 19, "bases": 0, "doc": 14}, "icepool.Population.quantity_ne": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 19, "bases": 0, "doc": 9}, "icepool.Population.quantity_le": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 19, "bases": 0, "doc": 9}, "icepool.Population.quantity_lt": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 19, "bases": 0, "doc": 9}, "icepool.Population.quantity_ge": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 19, "bases": 0, "doc": 9}, "icepool.Population.quantity_gt": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 19, "bases": 0, "doc": 9}, "icepool.Population.probabilities": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 37, "bases": 0, "doc": 55}, "icepool.Population.probabilities_le": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 37, "bases": 0, "doc": 68}, "icepool.Population.probabilities_ge": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 37, "bases": 0, "doc": 74}, "icepool.Population.probabilities_lt": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 37, "bases": 0, "doc": 46}, "icepool.Population.probabilities_gt": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 37, "bases": 0, "doc": 46}, "icepool.Population.probability": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 19, "bases": 0, "doc": 15}, "icepool.Population.mode": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 24}, "icepool.Population.modal_quantity": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 10}, "icepool.Population.kolmogorov_smirnov": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 19, "bases": 0, "doc": 11}, "icepool.Population.cramer_von_mises": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 19, "bases": 0, "doc": 14}, "icepool.Population.median": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 40}, "icepool.Population.median_left": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 13}, "icepool.Population.median_right": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 13}, "icepool.Population.quantile": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 38, "bases": 0, "doc": 53}, "icepool.Population.quantile_left": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 43, "bases": 0, "doc": 24}, "icepool.Population.quantile_right": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 43, "bases": 0, "doc": 24}, "icepool.Population.mean": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 40, "bases": 0, "doc": 3}, "icepool.Population.variance": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 40, "bases": 0, "doc": 12}, "icepool.Population.standard_deviation": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 40, "bases": 0, "doc": 3}, "icepool.Population.sd": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 40, "bases": 0, "doc": 3}, "icepool.Population.standardized_moment": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 50, "bases": 0, "doc": 3}, "icepool.Population.skewness": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 40, "bases": 0, "doc": 3}, "icepool.Population.excess_kurtosis": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 40, "bases": 0, "doc": 3}, "icepool.Population.marginals": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 48}, "icepool.Population.unary_op_non_elementwise": {"qualname": 5, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 47, "bases": 0, "doc": 23}, "icepool.Population.covariance": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 74, "bases": 0, "doc": 3}, "icepool.Population.correlation": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 74, "bases": 0, "doc": 3}, "icepool.Population.sample": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 45}, "icepool.Population.format": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 188}, "icepool.Again": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 134}, "icepool.Again.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 4, "bases": 0, "doc": 15}, "icepool.CountsKeysView": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 16}, "icepool.CountsKeysView.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 3}, "icepool.CountsValuesView": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 16}, "icepool.CountsValuesView.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 3}, "icepool.CountsItemsView": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 6, "doc": 16}, "icepool.CountsItemsView.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 3}, "icepool.from_cumulative_quantities": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 93, "bases": 0, "doc": 87}, "icepool.from_rv": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 113, "bases": 0, "doc": 111}, "icepool.align": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 91, "bases": 0, "doc": 51}, "icepool.align_range": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 81, "bases": 0, "doc": 55}, "icepool.lowest": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 65, "bases": 0, "doc": 76}, "icepool.highest": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 65, "bases": 0, "doc": 76}, "icepool.min_outcome": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 58, "bases": 0, "doc": 9}, "icepool.max_outcome": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 58, "bases": 0, "doc": 9}, "icepool.reduce": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 182, "bases": 0, "doc": 136}, "icepool.accumulate": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 186, "bases": 0, "doc": 158}, "icepool.apply": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 224, "bases": 0, "doc": 304}, "icepool.apply_sorted": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 20}, "icepool.apply_sorted.__init__": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 196, "bases": 0, "doc": 244}, "icepool.Reroll": {"qualname": 1, "fullname": 2, "annotation": 2, "default_value": 9, "signature": 0, "bases": 0, "doc": 141}, "icepool.OutcomeCountGenerator": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 78}, "icepool.OutcomeCountGenerator.outcomes": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 23, "bases": 0, "doc": 10}, "icepool.OutcomeCountGenerator.counts_len": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 11}, "icepool.OutcomeCountGenerator.denominator": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 12}, "icepool.OutcomeCountGenerator.evaluate": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 109, "bases": 0, "doc": 126}, "icepool.OutcomeCountGenerator.min_outcome": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 17, "bases": 0, "doc": 3}, "icepool.OutcomeCountGenerator.max_outcome": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 17, "bases": 0, "doc": 3}, "icepool.OutcomeCountGenerator.expand": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 66, "bases": 0, "doc": 47}, "icepool.OutcomeCountGenerator.sum": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 110, "bases": 0, "doc": 33}, "icepool.OutcomeCountGenerator.count": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 45, "bases": 0, "doc": 24}, "icepool.OutcomeCountGenerator.count_in": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 59, "bases": 0, "doc": 12}, "icepool.OutcomeCountGenerator.count_unique": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 35, "bases": 0, "doc": 12}, "icepool.OutcomeCountGenerator.contains_subset": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 85, "bases": 0, "doc": 50}, "icepool.OutcomeCountGenerator.intersection_size": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 85, "bases": 0, "doc": 76}, "icepool.OutcomeCountGenerator.largest_matching_set": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 35, "bases": 0, "doc": 35}, "icepool.OutcomeCountGenerator.largest_matching_set_and_outcome": {"qualname": 6, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 48, "bases": 0, "doc": 36}, "icepool.OutcomeCountGenerator.largest_straight": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 59, "bases": 0, "doc": 43}, "icepool.OutcomeCountGenerator.largest_straight_and_outcome": {"qualname": 5, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 69, "bases": 0, "doc": 44}, "icepool.OutcomeCountGenerator.sample": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 27, "bases": 0, "doc": 48}, "icepool.Pool": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 6, "doc": 33}, "icepool.Pool.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 202, "bases": 0, "doc": 233}, "icepool.Pool.size": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 18}, "icepool.Pool.denominator": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 12}, "icepool.Pool.unique_dice": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 42, "bases": 0, "doc": 11}, "icepool.Pool.outcomes": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 23, "bases": 0, "doc": 13}, "icepool.Pool.counts_len": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 11}, "icepool.Pool.sorted_roll_counts": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 27, "bases": 0, "doc": 50}, "icepool.Pool.set_sorted_roll_counts": {"qualname": 5, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 101, "bases": 0, "doc": 503}, "icepool.Pool.min_outcome": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 17, "bases": 0, "doc": 12}, "icepool.Pool.max_outcome": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 17, "bases": 0, "doc": 12}, "icepool.Pool.lowest": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 63, "bases": 0, "doc": 68}, "icepool.Pool.highest": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 63, "bases": 0, "doc": 68}, "icepool.standard_pool": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 63, "bases": 0, "doc": 65}, "icepool.OutcomeCountEvaluator": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 8, "doc": 272}, "icepool.OutcomeCountEvaluator.next_state": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 50, "bases": 0, "doc": 385}, "icepool.OutcomeCountEvaluator.final_outcome": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 71, "bases": 0, "doc": 217}, "icepool.OutcomeCountEvaluator.order": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 62, "bases": 0, "doc": 196}, "icepool.OutcomeCountEvaluator.alignment": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 60, "bases": 0, "doc": 137}, "icepool.OutcomeCountEvaluator.range_alignment": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 52, "bases": 0, "doc": 124}, "icepool.OutcomeCountEvaluator.evaluate": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 104, "bases": 0, "doc": 144}, "icepool.OutcomeCountEvaluator.sample": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 85, "bases": 0, "doc": 15}, "icepool.Order": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 16}, "icepool.Order.Ascending": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 7, "signature": 0, "bases": 0, "doc": 3}, "icepool.Order.Descending": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 7, "signature": 0, "bases": 0, "doc": 3}, "icepool.Order.Any": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 7, "signature": 0, "bases": 0, "doc": 3}, "icepool.JointEvaluator": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 8, "doc": 20}, "icepool.JointEvaluator.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 30, "bases": 0, "doc": 3}, "icepool.JointEvaluator.next_state": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 33, "bases": 0, "doc": 22}, "icepool.JointEvaluator.final_outcome": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 44, "bases": 0, "doc": 24}, "icepool.JointEvaluator.order": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 37, "bases": 0, "doc": 37}, "icepool.SumEvaluator": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 8, "doc": 6}, "icepool.SumEvaluator.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 66, "bases": 0, "doc": 3}, "icepool.SumEvaluator.next_state": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 10}, "icepool.SumEvaluator.final_outcome": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 25, "bases": 0, "doc": 217}, "icepool.SumEvaluator.order": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 19, "bases": 0, "doc": 196}, "icepool.ExpandEvaluator": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 7, "doc": 23}, "icepool.ExpandEvaluator.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 23}, "icepool.ExpandEvaluator.next_state": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 385}, "icepool.ExpandEvaluator.order": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 19, "bases": 0, "doc": 196}, "icepool.ExpandEvaluator.final_outcome": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 25, "bases": 0, "doc": 217}, "icepool.Deck": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 16}, "icepool.Deck.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 109, "bases": 0, "doc": 218}, "icepool.Deck.keys": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 11}, "icepool.Deck.values": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 11}, "icepool.Deck.items": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 13}, "icepool.Deck.size": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 32}, "icepool.Deck.deal": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 45, "bases": 0, "doc": 22}, "icepool.Deck.map": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 191, "bases": 0, "doc": 136}, "icepool.Deal": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 6, "doc": 15}, "icepool.Deal.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 46, "bases": 0, "doc": 93}, "icepool.Deal.deck": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 33, "bases": 0, "doc": 12}, "icepool.Deal.hand_sizes": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 27, "bases": 0, "doc": 14}, "icepool.Deal.total_cards_dealt": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 9}, "icepool.Deal.outcomes": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 33, "bases": 0, "doc": 41}, "icepool.Deal.counts_len": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 11}, "icepool.Deal.denominator": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 12}, "icepool.SuitGenerator": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 64}, "icepool.SuitGenerator.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 3}, "icepool.SuitGenerator.outcomes": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 10}, "icepool.SuitGenerator.counts_len": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 11}, "icepool.SuitGenerator.denominator": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 12}, "icepool.clear_pool_cache": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 7, "bases": 0, "doc": 8}}, "length": 200, "save": true}, "index": {"qualname": {"root": {"docs": {"icepool.Outcome.__init__": {"tf": 1}, "icepool.Die.__init__": {"tf": 1}, "icepool.Again.__init__": {"tf": 1}, "icepool.CountsKeysView.__init__": {"tf": 1}, "icepool.CountsValuesView.__init__": {"tf": 1}, "icepool.CountsItemsView.__init__": {"tf": 1}, "icepool.apply_sorted.__init__": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.JointEvaluator.__init__": {"tf": 1}, "icepool.SumEvaluator.__init__": {"tf": 1}, "icepool.ExpandEvaluator.__init__": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1}, "icepool.SuitGenerator.__init__": {"tf": 1}}, "df": 14, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"icepool.standard": {"tf": 1}, "icepool.Population.standard_deviation": {"tf": 1}, "icepool.standard_pool": {"tf": 1}}, "df": 3, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Population.standardized_moment": {"tf": 1}}, "df": 1}}}}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {"icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.JointEvaluator.next_state": {"tf": 1}, "icepool.SumEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}}, "df": 4}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"icepool.OutcomeCountGenerator.largest_straight": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_straight_and_outcome": {"tf": 1}}, "df": 2}}}}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die.simplify": {"tf": 1}}, "df": 1}}}}}}, "g": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Die.sign": {"tf": 1}}, "df": 1}}, "z": {"docs": {}, "df": 0, "e": {"docs": {"icepool.OutcomeCountGenerator.intersection_size": {"tf": 1}, "icepool.Pool.size": {"tf": 1}, "icepool.Deck.size": {"tf": 1}}, "df": 3, "s": {"docs": {"icepool.Deal.hand_sizes": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.set_range": {"tf": 1}, "icepool.Die.set_outcomes": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_matching_set": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_matching_set_and_outcome": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1}}, "df": 5}}, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {"icepool.Population.kolmogorov_smirnov": {"tf": 1}}, "df": 1}}}}}}, "d": {"docs": {"icepool.Population.sd": {"tf": 1}}, "df": 1}, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Population.skewness": {"tf": 1}}, "df": 1}}}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Population.sample": {"tf": 1}, "icepool.OutcomeCountGenerator.sample": {"tf": 1}, "icepool.OutcomeCountEvaluator.sample": {"tf": 1}}, "df": 3}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.apply_sorted": {"tf": 1}, "icepool.apply_sorted.__init__": {"tf": 1}, "icepool.Pool.sorted_roll_counts": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1}}, "df": 4}}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {"icepool.OutcomeCountGenerator.sum": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.SumEvaluator": {"tf": 1}, "icepool.SumEvaluator.__init__": {"tf": 1}, "icepool.SumEvaluator.next_state": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1}, "icepool.SumEvaluator.order": {"tf": 1}}, "df": 5}}}}}}}}}}, "b": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"icepool.OutcomeCountGenerator.contains_subset": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.SuitGenerator": {"tf": 1}, "icepool.SuitGenerator.__init__": {"tf": 1}, "icepool.SuitGenerator.outcomes": {"tf": 1}, "icepool.SuitGenerator.counts_len": {"tf": 1}, "icepool.SuitGenerator.denominator": {"tf": 1}}, "df": 5}}}}}}}}}}}}}, "d": {"docs": {"icepool.d": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die": {"tf": 1}, "icepool.Die.__init__": {"tf": 1}, "icepool.Die.unary_op": {"tf": 1}, "icepool.Die.binary_op": {"tf": 1}, "icepool.Die.keys": {"tf": 1}, "icepool.Die.values": {"tf": 1}, "icepool.Die.items": {"tf": 1}, "icepool.Die.simplify": {"tf": 1}, "icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.truncate": {"tf": 1}, "icepool.Die.clip": {"tf": 1}, "icepool.Die.set_range": {"tf": 1}, "icepool.Die.set_outcomes": {"tf": 1}, "icepool.Die.trim": {"tf": 1}, "icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.if_else": {"tf": 1}, "icepool.Die.is_in": {"tf": 1}, "icepool.Die.count": {"tf": 1}, "icepool.Die.count_in": {"tf": 1}, "icepool.Die.pool": {"tf": 1}, "icepool.Die.keep_lowest": {"tf": 1}, "icepool.Die.keep_highest": {"tf": 1}, "icepool.Die.abs": {"tf": 1}, "icepool.Die.round": {"tf": 1}, "icepool.Die.trunc": {"tf": 1}, "icepool.Die.floor": {"tf": 1}, "icepool.Die.ceil": {"tf": 1}, "icepool.Die.zero": {"tf": 1}, "icepool.Die.zero_outcome": {"tf": 1}, "icepool.Die.cmp": {"tf": 1}, "icepool.Die.sign": {"tf": 1}, "icepool.Die.key_tuple": {"tf": 1}, "icepool.Die.equals": {"tf": 1}}, "df": 36}, "c": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Pool.unique_dice": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Population.denominator": {"tf": 1}, "icepool.OutcomeCountGenerator.denominator": {"tf": 1}, "icepool.Pool.denominator": {"tf": 1}, "icepool.Deal.denominator": {"tf": 1}, "icepool.SuitGenerator.denominator": {"tf": 1}}, "df": 5}}}}}}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Population.standard_deviation": {"tf": 1}}, "df": 1}}}}}}}, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Order.Descending": {"tf": 1}}, "df": 1}}}}}}}}, "c": {"docs": {}, "df": 0, "k": {"docs": {"icepool.Deck": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}, "icepool.Deck.keys": {"tf": 1}, "icepool.Deck.values": {"tf": 1}, "icepool.Deck.items": {"tf": 1}, "icepool.Deck.size": {"tf": 1}, "icepool.Deck.deal": {"tf": 1}, "icepool.Deck.map": {"tf": 1}, "icepool.Deal.deck": {"tf": 1}}, "df": 9}}, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Deck.deal": {"tf": 1}, "icepool.Deal": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1}, "icepool.Deal.deck": {"tf": 1}, "icepool.Deal.hand_sizes": {"tf": 1}, "icepool.Deal.total_cards_dealt": {"tf": 1}, "icepool.Deal.outcomes": {"tf": 1}, "icepool.Deal.counts_len": {"tf": 1}, "icepool.Deal.denominator": {"tf": 1}}, "df": 9, "t": {"docs": {"icepool.Deal.total_cards_dealt": {"tf": 1}}, "df": 1}}}}}, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {"icepool.bernoulli": {"tf": 1}}, "df": 1}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die.binary_op": {"tf": 1}}, "df": 1}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"icepool.coin": {"tf": 1}}, "df": 1}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.count": {"tf": 1}, "icepool.Die.count_in": {"tf": 1}, "icepool.OutcomeCountGenerator.count": {"tf": 1}, "icepool.OutcomeCountGenerator.count_in": {"tf": 1}, "icepool.OutcomeCountGenerator.count_unique": {"tf": 1}}, "df": 5, "s": {"docs": {"icepool.OutcomeCountGenerator.counts_len": {"tf": 1}, "icepool.Pool.counts_len": {"tf": 1}, "icepool.Pool.sorted_roll_counts": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1}, "icepool.Deal.counts_len": {"tf": 1}, "icepool.SuitGenerator.counts_len": {"tf": 1}}, "df": 6, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {"icepool.CountsKeysView": {"tf": 1}, "icepool.CountsKeysView.__init__": {"tf": 1}}, "df": 2}}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {"icepool.CountsValuesView": {"tf": 1}, "icepool.CountsValuesView.__init__": {"tf": 1}}, "df": 2}}}}}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {"icepool.CountsItemsView": {"tf": 1}, "icepool.CountsItemsView.__init__": {"tf": 1}}, "df": 2}}}}}}}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Population.covariance": {"tf": 1}}, "df": 1}}}}}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Population.correlation": {"tf": 1}}, "df": 1}}}}}}}}}, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"icepool.OutcomeCountGenerator.contains_subset": {"tf": 1}}, "df": 1}}}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"icepool.cartesian_product": {"tf": 1}}, "df": 1}}}}}}, "d": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Deal.total_cards_dealt": {"tf": 1}}, "df": 1}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {"icepool.clear_pool_cache": {"tf": 1}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {"icepool.Die.clip": {"tf": 1}}, "df": 1}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"icepool.clear_pool_cache": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Die.ceil": {"tf": 1}}, "df": 1}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {"icepool.Die.cmp": {"tf": 1}}, "df": 1}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Population.cramer_von_mises": {"tf": 1}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"icepool.from_cumulative_quantities": {"tf": 1}}, "df": 1}}}}}}}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"icepool.one_hot": {"tf": 1}}, "df": 1}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Outcome": {"tf": 1}, "icepool.Outcome.__init__": {"tf": 1}, "icepool.Die.zero_outcome": {"tf": 1}, "icepool.Population.min_outcome": {"tf": 1}, "icepool.Population.max_outcome": {"tf": 1}, "icepool.min_outcome": {"tf": 1}, "icepool.max_outcome": {"tf": 1}, "icepool.OutcomeCountGenerator.min_outcome": {"tf": 1}, "icepool.OutcomeCountGenerator.max_outcome": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_matching_set_and_outcome": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_straight_and_outcome": {"tf": 1}, "icepool.Pool.min_outcome": {"tf": 1}, "icepool.Pool.max_outcome": {"tf": 1}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.JointEvaluator.final_outcome": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1}}, "df": 17, "s": {"docs": {"icepool.Die.set_outcomes": {"tf": 1}, "icepool.Population.outcomes": {"tf": 1}, "icepool.OutcomeCountGenerator.outcomes": {"tf": 1}, "icepool.Pool.outcomes": {"tf": 1}, "icepool.Deal.outcomes": {"tf": 1}, "icepool.SuitGenerator.outcomes": {"tf": 1}}, "df": 6}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.OutcomeCountGenerator": {"tf": 1}, "icepool.OutcomeCountGenerator.outcomes": {"tf": 1}, "icepool.OutcomeCountGenerator.counts_len": {"tf": 1}, "icepool.OutcomeCountGenerator.denominator": {"tf": 1}, "icepool.OutcomeCountGenerator.evaluate": {"tf": 1}, "icepool.OutcomeCountGenerator.min_outcome": {"tf": 1}, "icepool.OutcomeCountGenerator.max_outcome": {"tf": 1}, "icepool.OutcomeCountGenerator.expand": {"tf": 1}, "icepool.OutcomeCountGenerator.sum": {"tf": 1}, "icepool.OutcomeCountGenerator.count": {"tf": 1}, "icepool.OutcomeCountGenerator.count_in": {"tf": 1}, "icepool.OutcomeCountGenerator.count_unique": {"tf": 1}, "icepool.OutcomeCountGenerator.contains_subset": {"tf": 1}, "icepool.OutcomeCountGenerator.intersection_size": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_matching_set": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_matching_set_and_outcome": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_straight": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_straight_and_outcome": {"tf": 1}, "icepool.OutcomeCountGenerator.sample": {"tf": 1}}, "df": 19}}}}}}}}}, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.OutcomeCountEvaluator": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.OutcomeCountEvaluator.order": {"tf": 1}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 1}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 1}, "icepool.OutcomeCountEvaluator.sample": {"tf": 1}}, "df": 8}}}}}}}}}}}}}}}}}}}}, "p": {"docs": {"icepool.Die.unary_op": {"tf": 1}, "icepool.Die.binary_op": {"tf": 1}, "icepool.Population.unary_op_non_elementwise": {"tf": 1}}, "df": 3}, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.OutcomeCountEvaluator.order": {"tf": 1}, "icepool.Order": {"tf": 1}, "icepool.Order.Ascending": {"tf": 1}, "icepool.Order.Descending": {"tf": 1}, "icepool.Order.Any": {"tf": 1}, "icepool.JointEvaluator.order": {"tf": 1}, "icepool.SumEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.order": {"tf": 1}}, "df": 8}}}}}, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"icepool.one_hot": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.keep_highest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.Pool.highest": {"tf": 1}}, "df": 3}}}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Population.has_zero_quantities": {"tf": 1}}, "df": 1}, "n": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Deal.hand_sizes": {"tf": 1}}, "df": 1}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"icepool.cartesian_product": {"tf": 1}}, "df": 1}}}}, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Population.probabilities": {"tf": 1}, "icepool.Population.probabilities_le": {"tf": 1}, "icepool.Population.probabilities_ge": {"tf": 1}, "icepool.Population.probabilities_lt": {"tf": 1}, "icepool.Population.probabilities_gt": {"tf": 1}}, "df": 5}}}, "y": {"docs": {"icepool.Population.probability": {"tf": 1}}, "df": 1}}}}}}}}}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Die.pool": {"tf": 1}, "icepool.Pool": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.Pool.size": {"tf": 1}, "icepool.Pool.denominator": {"tf": 1}, "icepool.Pool.unique_dice": {"tf": 1}, "icepool.Pool.outcomes": {"tf": 1}, "icepool.Pool.counts_len": {"tf": 1}, "icepool.Pool.sorted_roll_counts": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1}, "icepool.Pool.min_outcome": {"tf": 1}, "icepool.Pool.max_outcome": {"tf": 1}, "icepool.Pool.lowest": {"tf": 1}, "icepool.Pool.highest": {"tf": 1}, "icepool.standard_pool": {"tf": 1}, "icepool.clear_pool_cache": {"tf": 1}}, "df": 16}}, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Population": {"tf": 1}, "icepool.Population.keys": {"tf": 1}, "icepool.Population.values": {"tf": 1}, "icepool.Population.items": {"tf": 1}, "icepool.Population.outcomes": {"tf": 1}, "icepool.Population.tuple_len": {"tf": 1}, "icepool.Population.is_empty": {"tf": 1}, "icepool.Population.min_outcome": {"tf": 1}, "icepool.Population.max_outcome": {"tf": 1}, "icepool.Population.nearest_le": {"tf": 1}, "icepool.Population.nearest_ge": {"tf": 1}, "icepool.Population.quantities": {"tf": 1}, "icepool.Population.denominator": {"tf": 1}, "icepool.Population.has_zero_quantities": {"tf": 1}, "icepool.Population.quantities_le": {"tf": 1}, "icepool.Population.quantities_ge": {"tf": 1}, "icepool.Population.quantity": {"tf": 1}, "icepool.Population.quantity_ne": {"tf": 1}, "icepool.Population.quantity_le": {"tf": 1}, "icepool.Population.quantity_lt": {"tf": 1}, "icepool.Population.quantity_ge": {"tf": 1}, "icepool.Population.quantity_gt": {"tf": 1}, "icepool.Population.probabilities": {"tf": 1}, "icepool.Population.probabilities_le": {"tf": 1}, "icepool.Population.probabilities_ge": {"tf": 1}, "icepool.Population.probabilities_lt": {"tf": 1}, "icepool.Population.probabilities_gt": {"tf": 1}, "icepool.Population.probability": {"tf": 1}, "icepool.Population.mode": {"tf": 1}, "icepool.Population.modal_quantity": {"tf": 1}, "icepool.Population.kolmogorov_smirnov": {"tf": 1}, "icepool.Population.cramer_von_mises": {"tf": 1}, "icepool.Population.median": {"tf": 1}, "icepool.Population.median_left": {"tf": 1}, "icepool.Population.median_right": {"tf": 1}, "icepool.Population.quantile": {"tf": 1}, "icepool.Population.quantile_left": {"tf": 1}, "icepool.Population.quantile_right": {"tf": 1}, "icepool.Population.mean": {"tf": 1}, "icepool.Population.variance": {"tf": 1}, "icepool.Population.standard_deviation": {"tf": 1}, "icepool.Population.sd": {"tf": 1}, "icepool.Population.standardized_moment": {"tf": 1}, "icepool.Population.skewness": {"tf": 1}, "icepool.Population.excess_kurtosis": {"tf": 1}, "icepool.Population.marginals": {"tf": 1}, "icepool.Population.unary_op_non_elementwise": {"tf": 1}, "icepool.Population.covariance": {"tf": 1}, "icepool.Population.correlation": {"tf": 1}, "icepool.Population.sample": {"tf": 1}, "icepool.Population.format": {"tf": 1}}, "df": 51}}}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Die.is_in": {"tf": 1}, "icepool.Die.count_in": {"tf": 1}, "icepool.OutcomeCountGenerator.count_in": {"tf": 1}}, "df": 3, "i": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Outcome.__init__": {"tf": 1}, "icepool.Die.__init__": {"tf": 1}, "icepool.Again.__init__": {"tf": 1}, "icepool.CountsKeysView.__init__": {"tf": 1}, "icepool.CountsValuesView.__init__": {"tf": 1}, "icepool.CountsItemsView.__init__": {"tf": 1}, "icepool.apply_sorted.__init__": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.JointEvaluator.__init__": {"tf": 1}, "icepool.SumEvaluator.__init__": {"tf": 1}, "icepool.ExpandEvaluator.__init__": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1}, "icepool.SuitGenerator.__init__": {"tf": 1}}, "df": 14}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.OutcomeCountGenerator.intersection_size": {"tf": 1}}, "df": 1}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die.items": {"tf": 1}, "icepool.Population.items": {"tf": 1}, "icepool.Deck.items": {"tf": 1}}, "df": 3}}}}, "f": {"docs": {"icepool.Die.if_else": {"tf": 1}}, "df": 1}, "s": {"docs": {"icepool.Die.is_in": {"tf": 1}, "icepool.Population.is_empty": {"tf": 1}}, "df": 2}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die.unary_op": {"tf": 1}, "icepool.Population.unary_op_non_elementwise": {"tf": 1}}, "df": 2}}}, "i": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"icepool.OutcomeCountGenerator.count_unique": {"tf": 1}, "icepool.Pool.unique_dice": {"tf": 1}}, "df": 2}}}}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die.key_tuple": {"tf": 1}}, "df": 1, "s": {"docs": {"icepool.Die.keys": {"tf": 1}, "icepool.Population.keys": {"tf": 1}, "icepool.Deck.keys": {"tf": 1}}, "df": 3}}, "e": {"docs": {}, "df": 0, "p": {"docs": {"icepool.Die.keep_lowest": {"tf": 1}, "icepool.Die.keep_highest": {"tf": 1}}, "df": 2}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {"icepool.Population.kolmogorov_smirnov": {"tf": 1}}, "df": 1}}}}}}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Population.excess_kurtosis": {"tf": 1}}, "df": 1}}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die.values": {"tf": 1}, "icepool.Population.values": {"tf": 1}, "icepool.Deck.values": {"tf": 1}}, "df": 3}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Population.variance": {"tf": 1}}, "df": 1}}}}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Population.cramer_von_mises": {"tf": 1}}, "df": 1}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Die.reroll": {"tf": 1}, "icepool.Reroll": {"tf": 1}}, "df": 2}}}}, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"icepool.reduce": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.set_range": {"tf": 1}, "icepool.align_range": {"tf": 1}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 1}}, "df": 3}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.round": {"tf": 1}}, "df": 1}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Pool.sorted_roll_counts": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1}}, "df": 2}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Population.median_right": {"tf": 1}, "icepool.Population.quantile_right": {"tf": 1}}, "df": 2}}}}, "v": {"docs": {"icepool.from_rv": {"tf": 1}}, "df": 1}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die.filter": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.JointEvaluator.final_outcome": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1}}, "df": 4}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die.floor": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Population.format": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"icepool.from_cumulative_quantities": {"tf": 1}, "icepool.from_rv": {"tf": 1}}, "df": 2}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"icepool.Die.trunc": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.truncate": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {"icepool.Die.trim": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.map_and_time": {"tf": 1}}, "df": 1}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.key_tuple": {"tf": 1}, "icepool.Population.tuple_len": {"tf": 1}}, "df": 2}}}}, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Deal.total_cards_dealt": {"tf": 1}}, "df": 1}}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {"icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Deck.map": {"tf": 1}}, "df": 3}, "x": {"docs": {"icepool.Population.max_outcome": {"tf": 1}, "icepool.max_outcome": {"tf": 1}, "icepool.OutcomeCountGenerator.max_outcome": {"tf": 1}, "icepool.Pool.max_outcome": {"tf": 1}}, "df": 4}, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Population.marginals": {"tf": 1}}, "df": 1}}}}}}}, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.OutcomeCountGenerator.largest_matching_set": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_matching_set_and_outcome": {"tf": 1}}, "df": 2}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Population.min_outcome": {"tf": 1}, "icepool.min_outcome": {"tf": 1}, "icepool.OutcomeCountGenerator.min_outcome": {"tf": 1}, "icepool.Pool.min_outcome": {"tf": 1}}, "df": 4}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Population.cramer_von_mises": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Population.mode": {"tf": 1}}, "df": 1}, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Population.modal_quantity": {"tf": 1}}, "df": 1}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Population.standardized_moment": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Population.median": {"tf": 1}, "icepool.Population.median_left": {"tf": 1}, "icepool.Population.median_right": {"tf": 1}}, "df": 3}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Population.mean": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.map_and_time": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_matching_set_and_outcome": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_straight_and_outcome": {"tf": 1}}, "df": 3}, "y": {"docs": {"icepool.Order.Any": {"tf": 1}}, "df": 1}}, "b": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die.abs": {"tf": 1}}, "df": 1}}, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Again": {"tf": 1}, "icepool.Again.__init__": {"tf": 1}}, "df": 2}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {"icepool.align": {"tf": 1}, "icepool.align_range": {"tf": 1}}, "df": 2, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.OutcomeCountEvaluator.alignment": {"tf": 1}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 1}}, "df": 2}}}}}}}}, "c": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"icepool.accumulate": {"tf": 1}}, "df": 1}}}}}}}}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.apply": {"tf": 1}, "icepool.apply_sorted": {"tf": 1}, "icepool.apply_sorted.__init__": {"tf": 1}}, "df": 3}}}}, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Order.Ascending": {"tf": 1}}, "df": 1}}}}}}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.explode": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"icepool.OutcomeCountGenerator.expand": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.ExpandEvaluator": {"tf": 1}, "icepool.ExpandEvaluator.__init__": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1}}, "df": 5}}}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Population.excess_kurtosis": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.if_else": {"tf": 1}}, "df": 1}}, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Population.unary_op_non_elementwise": {"tf": 1}}, "df": 1}}}}}}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die.equals": {"tf": 1}}, "df": 1}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Population.is_empty": {"tf": 1}}, "df": 1}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"icepool.OutcomeCountGenerator.evaluate": {"tf": 1}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 1}}, "df": 2}}}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.keep_lowest": {"tf": 1}, "icepool.lowest": {"tf": 1}, "icepool.Pool.lowest": {"tf": 1}}, "df": 3}}}}}, "e": {"docs": {"icepool.Population.nearest_le": {"tf": 1}, "icepool.Population.quantities_le": {"tf": 1}, "icepool.Population.quantity_le": {"tf": 1}, "icepool.Population.probabilities_le": {"tf": 1}}, "df": 4, "n": {"docs": {"icepool.Population.tuple_len": {"tf": 1}, "icepool.OutcomeCountGenerator.counts_len": {"tf": 1}, "icepool.Pool.counts_len": {"tf": 1}, "icepool.Deal.counts_len": {"tf": 1}, "icepool.SuitGenerator.counts_len": {"tf": 1}}, "df": 5}, "f": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Population.median_left": {"tf": 1}, "icepool.Population.quantile_left": {"tf": 1}}, "df": 2}}}, "t": {"docs": {"icepool.Population.quantity_lt": {"tf": 1}, "icepool.Population.probabilities_lt": {"tf": 1}}, "df": 2}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"icepool.OutcomeCountGenerator.largest_matching_set": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_matching_set_and_outcome": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_straight": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_straight_and_outcome": {"tf": 1}}, "df": 4}}}}}}}, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {"icepool.Die.zero": {"tf": 1}, "icepool.Die.zero_outcome": {"tf": 1}, "icepool.Population.has_zero_quantities": {"tf": 1}}, "df": 3}}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Population.quantity_ne": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Population.nearest_le": {"tf": 1}, "icepool.Population.nearest_ge": {"tf": 1}}, "df": 2}}}}}, "x": {"docs": {}, "df": 0, "t": {"docs": {"icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.JointEvaluator.next_state": {"tf": 1}, "icepool.SumEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}}, "df": 4}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Population.unary_op_non_elementwise": {"tf": 1}}, "df": 1}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Population.nearest_ge": {"tf": 1}, "icepool.Population.quantities_ge": {"tf": 1}, "icepool.Population.quantity_ge": {"tf": 1}, "icepool.Population.probabilities_ge": {"tf": 1}}, "df": 4}, "t": {"docs": {"icepool.Population.quantity_gt": {"tf": 1}, "icepool.Population.probabilities_gt": {"tf": 1}}, "df": 2}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Population.quantities": {"tf": 1}, "icepool.Population.has_zero_quantities": {"tf": 1}, "icepool.Population.quantities_le": {"tf": 1}, "icepool.Population.quantities_ge": {"tf": 1}, "icepool.from_cumulative_quantities": {"tf": 1}}, "df": 5}}}, "y": {"docs": {"icepool.Population.quantity": {"tf": 1}, "icepool.Population.quantity_ne": {"tf": 1}, "icepool.Population.quantity_le": {"tf": 1}, "icepool.Population.quantity_lt": {"tf": 1}, "icepool.Population.quantity_ge": {"tf": 1}, "icepool.Population.quantity_gt": {"tf": 1}, "icepool.Population.modal_quantity": {"tf": 1}}, "df": 7}}, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Population.quantile": {"tf": 1}, "icepool.Population.quantile_left": {"tf": 1}, "icepool.Population.quantile_right": {"tf": 1}}, "df": 3}}}}}}}}, "j": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.JointEvaluator": {"tf": 1}, "icepool.JointEvaluator.__init__": {"tf": 1}, "icepool.JointEvaluator.next_state": {"tf": 1}, "icepool.JointEvaluator.final_outcome": {"tf": 1}, "icepool.JointEvaluator.order": {"tf": 1}}, "df": 5}}}}}}}}}}}}}}}}, "fullname": {"root": {"docs": {"icepool.Outcome.__init__": {"tf": 1}, "icepool.Die.__init__": {"tf": 1}, "icepool.Again.__init__": {"tf": 1}, "icepool.CountsKeysView.__init__": {"tf": 1}, "icepool.CountsValuesView.__init__": {"tf": 1}, "icepool.CountsItemsView.__init__": {"tf": 1}, "icepool.apply_sorted.__init__": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.JointEvaluator.__init__": {"tf": 1}, "icepool.SumEvaluator.__init__": {"tf": 1}, "icepool.ExpandEvaluator.__init__": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1}, "icepool.SuitGenerator.__init__": {"tf": 1}}, "df": 14, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"icepool": {"tf": 1}, "icepool.standard": {"tf": 1}, "icepool.d": {"tf": 1}, "icepool.bernoulli": {"tf": 1}, "icepool.coin": {"tf": 1}, "icepool.one_hot": {"tf": 1}, "icepool.cartesian_product": {"tf": 1}, "icepool.Outcome": {"tf": 1}, "icepool.Outcome.__init__": {"tf": 1}, "icepool.Die": {"tf": 1}, "icepool.Die.__init__": {"tf": 1}, "icepool.Die.unary_op": {"tf": 1}, "icepool.Die.binary_op": {"tf": 1}, "icepool.Die.keys": {"tf": 1}, "icepool.Die.values": {"tf": 1}, "icepool.Die.items": {"tf": 1}, "icepool.Die.simplify": {"tf": 1}, "icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.truncate": {"tf": 1}, "icepool.Die.clip": {"tf": 1}, "icepool.Die.set_range": {"tf": 1}, "icepool.Die.set_outcomes": {"tf": 1}, "icepool.Die.trim": {"tf": 1}, "icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.if_else": {"tf": 1}, "icepool.Die.is_in": {"tf": 1}, "icepool.Die.count": {"tf": 1}, "icepool.Die.count_in": {"tf": 1}, "icepool.Die.pool": {"tf": 1}, "icepool.Die.keep_lowest": {"tf": 1}, "icepool.Die.keep_highest": {"tf": 1}, "icepool.Die.abs": {"tf": 1}, "icepool.Die.round": {"tf": 1}, "icepool.Die.trunc": {"tf": 1}, "icepool.Die.floor": {"tf": 1}, "icepool.Die.ceil": {"tf": 1}, "icepool.Die.zero": {"tf": 1}, "icepool.Die.zero_outcome": {"tf": 1}, "icepool.Die.cmp": {"tf": 1}, "icepool.Die.sign": {"tf": 1}, "icepool.Die.key_tuple": {"tf": 1}, "icepool.Die.equals": {"tf": 1}, "icepool.Population": {"tf": 1}, "icepool.Population.keys": {"tf": 1}, "icepool.Population.values": {"tf": 1}, "icepool.Population.items": {"tf": 1}, "icepool.Population.outcomes": {"tf": 1}, "icepool.Population.tuple_len": {"tf": 1}, "icepool.Population.is_empty": {"tf": 1}, "icepool.Population.min_outcome": {"tf": 1}, "icepool.Population.max_outcome": {"tf": 1}, "icepool.Population.nearest_le": {"tf": 1}, "icepool.Population.nearest_ge": {"tf": 1}, "icepool.Population.quantities": {"tf": 1}, "icepool.Population.denominator": {"tf": 1}, "icepool.Population.has_zero_quantities": {"tf": 1}, "icepool.Population.quantities_le": {"tf": 1}, "icepool.Population.quantities_ge": {"tf": 1}, "icepool.Population.quantity": {"tf": 1}, "icepool.Population.quantity_ne": {"tf": 1}, "icepool.Population.quantity_le": {"tf": 1}, "icepool.Population.quantity_lt": {"tf": 1}, "icepool.Population.quantity_ge": {"tf": 1}, "icepool.Population.quantity_gt": {"tf": 1}, "icepool.Population.probabilities": {"tf": 1}, "icepool.Population.probabilities_le": {"tf": 1}, "icepool.Population.probabilities_ge": {"tf": 1}, "icepool.Population.probabilities_lt": {"tf": 1}, "icepool.Population.probabilities_gt": {"tf": 1}, "icepool.Population.probability": {"tf": 1}, "icepool.Population.mode": {"tf": 1}, "icepool.Population.modal_quantity": {"tf": 1}, "icepool.Population.kolmogorov_smirnov": {"tf": 1}, "icepool.Population.cramer_von_mises": {"tf": 1}, "icepool.Population.median": {"tf": 1}, "icepool.Population.median_left": {"tf": 1}, "icepool.Population.median_right": {"tf": 1}, "icepool.Population.quantile": {"tf": 1}, "icepool.Population.quantile_left": {"tf": 1}, "icepool.Population.quantile_right": {"tf": 1}, "icepool.Population.mean": {"tf": 1}, "icepool.Population.variance": {"tf": 1}, "icepool.Population.standard_deviation": {"tf": 1}, "icepool.Population.sd": {"tf": 1}, "icepool.Population.standardized_moment": {"tf": 1}, "icepool.Population.skewness": {"tf": 1}, "icepool.Population.excess_kurtosis": {"tf": 1}, "icepool.Population.marginals": {"tf": 1}, "icepool.Population.unary_op_non_elementwise": {"tf": 1}, "icepool.Population.covariance": {"tf": 1}, "icepool.Population.correlation": {"tf": 1}, "icepool.Population.sample": {"tf": 1}, "icepool.Population.format": {"tf": 1}, "icepool.Again": {"tf": 1}, "icepool.Again.__init__": {"tf": 1}, "icepool.CountsKeysView": {"tf": 1}, "icepool.CountsKeysView.__init__": {"tf": 1}, "icepool.CountsValuesView": {"tf": 1}, "icepool.CountsValuesView.__init__": {"tf": 1}, "icepool.CountsItemsView": {"tf": 1}, "icepool.CountsItemsView.__init__": {"tf": 1}, "icepool.from_cumulative_quantities": {"tf": 1}, "icepool.from_rv": {"tf": 1}, "icepool.align": {"tf": 1}, "icepool.align_range": {"tf": 1}, "icepool.lowest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.min_outcome": {"tf": 1}, "icepool.max_outcome": {"tf": 1}, "icepool.reduce": {"tf": 1}, "icepool.accumulate": {"tf": 1}, "icepool.apply": {"tf": 1}, "icepool.apply_sorted": {"tf": 1}, "icepool.apply_sorted.__init__": {"tf": 1}, "icepool.Reroll": {"tf": 1}, "icepool.OutcomeCountGenerator": {"tf": 1}, "icepool.OutcomeCountGenerator.outcomes": {"tf": 1}, "icepool.OutcomeCountGenerator.counts_len": {"tf": 1}, "icepool.OutcomeCountGenerator.denominator": {"tf": 1}, "icepool.OutcomeCountGenerator.evaluate": {"tf": 1}, "icepool.OutcomeCountGenerator.min_outcome": {"tf": 1}, "icepool.OutcomeCountGenerator.max_outcome": {"tf": 1}, "icepool.OutcomeCountGenerator.expand": {"tf": 1}, "icepool.OutcomeCountGenerator.sum": {"tf": 1}, "icepool.OutcomeCountGenerator.count": {"tf": 1}, "icepool.OutcomeCountGenerator.count_in": {"tf": 1}, "icepool.OutcomeCountGenerator.count_unique": {"tf": 1}, "icepool.OutcomeCountGenerator.contains_subset": {"tf": 1}, "icepool.OutcomeCountGenerator.intersection_size": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_matching_set": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_matching_set_and_outcome": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_straight": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_straight_and_outcome": {"tf": 1}, "icepool.OutcomeCountGenerator.sample": {"tf": 1}, "icepool.Pool": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.Pool.size": {"tf": 1}, "icepool.Pool.denominator": {"tf": 1}, "icepool.Pool.unique_dice": {"tf": 1}, "icepool.Pool.outcomes": {"tf": 1}, "icepool.Pool.counts_len": {"tf": 1}, "icepool.Pool.sorted_roll_counts": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1}, "icepool.Pool.min_outcome": {"tf": 1}, "icepool.Pool.max_outcome": {"tf": 1}, "icepool.Pool.lowest": {"tf": 1}, "icepool.Pool.highest": {"tf": 1}, "icepool.standard_pool": {"tf": 1}, "icepool.OutcomeCountEvaluator": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.OutcomeCountEvaluator.order": {"tf": 1}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 1}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 1}, "icepool.OutcomeCountEvaluator.sample": {"tf": 1}, "icepool.Order": {"tf": 1}, "icepool.Order.Ascending": {"tf": 1}, "icepool.Order.Descending": {"tf": 1}, "icepool.Order.Any": {"tf": 1}, "icepool.JointEvaluator": {"tf": 1}, "icepool.JointEvaluator.__init__": {"tf": 1}, "icepool.JointEvaluator.next_state": {"tf": 1}, "icepool.JointEvaluator.final_outcome": {"tf": 1}, "icepool.JointEvaluator.order": {"tf": 1}, "icepool.SumEvaluator": {"tf": 1}, "icepool.SumEvaluator.__init__": {"tf": 1}, "icepool.SumEvaluator.next_state": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1}, "icepool.SumEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator": {"tf": 1}, "icepool.ExpandEvaluator.__init__": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1}, "icepool.Deck": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}, "icepool.Deck.keys": {"tf": 1}, "icepool.Deck.values": {"tf": 1}, "icepool.Deck.items": {"tf": 1}, "icepool.Deck.size": {"tf": 1}, "icepool.Deck.deal": {"tf": 1}, "icepool.Deck.map": {"tf": 1}, "icepool.Deal": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1}, "icepool.Deal.deck": {"tf": 1}, "icepool.Deal.hand_sizes": {"tf": 1}, "icepool.Deal.total_cards_dealt": {"tf": 1}, "icepool.Deal.outcomes": {"tf": 1}, "icepool.Deal.counts_len": {"tf": 1}, "icepool.Deal.denominator": {"tf": 1}, "icepool.SuitGenerator": {"tf": 1}, "icepool.SuitGenerator.__init__": {"tf": 1}, "icepool.SuitGenerator.outcomes": {"tf": 1}, "icepool.SuitGenerator.counts_len": {"tf": 1}, "icepool.SuitGenerator.denominator": {"tf": 1}, "icepool.clear_pool_cache": {"tf": 1}}, "df": 200}}}}}}, "n": {"docs": {"icepool.Die.is_in": {"tf": 1}, "icepool.Die.count_in": {"tf": 1}, "icepool.OutcomeCountGenerator.count_in": {"tf": 1}}, "df": 3, "i": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Outcome.__init__": {"tf": 1}, "icepool.Die.__init__": {"tf": 1}, "icepool.Again.__init__": {"tf": 1}, "icepool.CountsKeysView.__init__": {"tf": 1}, "icepool.CountsValuesView.__init__": {"tf": 1}, "icepool.CountsItemsView.__init__": {"tf": 1}, "icepool.apply_sorted.__init__": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.JointEvaluator.__init__": {"tf": 1}, "icepool.SumEvaluator.__init__": {"tf": 1}, "icepool.ExpandEvaluator.__init__": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1}, "icepool.SuitGenerator.__init__": {"tf": 1}}, "df": 14}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.OutcomeCountGenerator.intersection_size": {"tf": 1}}, "df": 1}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die.items": {"tf": 1}, "icepool.Population.items": {"tf": 1}, "icepool.Deck.items": {"tf": 1}}, "df": 3}}}}, "f": {"docs": {"icepool.Die.if_else": {"tf": 1}}, "df": 1}, "s": {"docs": {"icepool.Die.is_in": {"tf": 1}, "icepool.Population.is_empty": {"tf": 1}}, "df": 2}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"icepool.standard": {"tf": 1}, "icepool.Population.standard_deviation": {"tf": 1}, "icepool.standard_pool": {"tf": 1}}, "df": 3, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Population.standardized_moment": {"tf": 1}}, "df": 1}}}}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {"icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.JointEvaluator.next_state": {"tf": 1}, "icepool.SumEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}}, "df": 4}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"icepool.OutcomeCountGenerator.largest_straight": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_straight_and_outcome": {"tf": 1}}, "df": 2}}}}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die.simplify": {"tf": 1}}, "df": 1}}}}}}, "g": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Die.sign": {"tf": 1}}, "df": 1}}, "z": {"docs": {}, "df": 0, "e": {"docs": {"icepool.OutcomeCountGenerator.intersection_size": {"tf": 1}, "icepool.Pool.size": {"tf": 1}, "icepool.Deck.size": {"tf": 1}}, "df": 3, "s": {"docs": {"icepool.Deal.hand_sizes": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.set_range": {"tf": 1}, "icepool.Die.set_outcomes": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_matching_set": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_matching_set_and_outcome": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1}}, "df": 5}}, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {"icepool.Population.kolmogorov_smirnov": {"tf": 1}}, "df": 1}}}}}}, "d": {"docs": {"icepool.Population.sd": {"tf": 1}}, "df": 1}, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Population.skewness": {"tf": 1}}, "df": 1}}}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Population.sample": {"tf": 1}, "icepool.OutcomeCountGenerator.sample": {"tf": 1}, "icepool.OutcomeCountEvaluator.sample": {"tf": 1}}, "df": 3}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.apply_sorted": {"tf": 1}, "icepool.apply_sorted.__init__": {"tf": 1}, "icepool.Pool.sorted_roll_counts": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1}}, "df": 4}}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {"icepool.OutcomeCountGenerator.sum": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.SumEvaluator": {"tf": 1}, "icepool.SumEvaluator.__init__": {"tf": 1}, "icepool.SumEvaluator.next_state": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1}, "icepool.SumEvaluator.order": {"tf": 1}}, "df": 5}}}}}}}}}}, "b": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"icepool.OutcomeCountGenerator.contains_subset": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.SuitGenerator": {"tf": 1}, "icepool.SuitGenerator.__init__": {"tf": 1}, "icepool.SuitGenerator.outcomes": {"tf": 1}, "icepool.SuitGenerator.counts_len": {"tf": 1}, "icepool.SuitGenerator.denominator": {"tf": 1}}, "df": 5}}}}}}}}}}}}}, "d": {"docs": {"icepool.d": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die": {"tf": 1}, "icepool.Die.__init__": {"tf": 1}, "icepool.Die.unary_op": {"tf": 1}, "icepool.Die.binary_op": {"tf": 1}, "icepool.Die.keys": {"tf": 1}, "icepool.Die.values": {"tf": 1}, "icepool.Die.items": {"tf": 1}, "icepool.Die.simplify": {"tf": 1}, "icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.truncate": {"tf": 1}, "icepool.Die.clip": {"tf": 1}, "icepool.Die.set_range": {"tf": 1}, "icepool.Die.set_outcomes": {"tf": 1}, "icepool.Die.trim": {"tf": 1}, "icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.if_else": {"tf": 1}, "icepool.Die.is_in": {"tf": 1}, "icepool.Die.count": {"tf": 1}, "icepool.Die.count_in": {"tf": 1}, "icepool.Die.pool": {"tf": 1}, "icepool.Die.keep_lowest": {"tf": 1}, "icepool.Die.keep_highest": {"tf": 1}, "icepool.Die.abs": {"tf": 1}, "icepool.Die.round": {"tf": 1}, "icepool.Die.trunc": {"tf": 1}, "icepool.Die.floor": {"tf": 1}, "icepool.Die.ceil": {"tf": 1}, "icepool.Die.zero": {"tf": 1}, "icepool.Die.zero_outcome": {"tf": 1}, "icepool.Die.cmp": {"tf": 1}, "icepool.Die.sign": {"tf": 1}, "icepool.Die.key_tuple": {"tf": 1}, "icepool.Die.equals": {"tf": 1}}, "df": 36}, "c": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Pool.unique_dice": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Population.denominator": {"tf": 1}, "icepool.OutcomeCountGenerator.denominator": {"tf": 1}, "icepool.Pool.denominator": {"tf": 1}, "icepool.Deal.denominator": {"tf": 1}, "icepool.SuitGenerator.denominator": {"tf": 1}}, "df": 5}}}}}}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Population.standard_deviation": {"tf": 1}}, "df": 1}}}}}}}, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Order.Descending": {"tf": 1}}, "df": 1}}}}}}}}, "c": {"docs": {}, "df": 0, "k": {"docs": {"icepool.Deck": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}, "icepool.Deck.keys": {"tf": 1}, "icepool.Deck.values": {"tf": 1}, "icepool.Deck.items": {"tf": 1}, "icepool.Deck.size": {"tf": 1}, "icepool.Deck.deal": {"tf": 1}, "icepool.Deck.map": {"tf": 1}, "icepool.Deal.deck": {"tf": 1}}, "df": 9}}, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Deck.deal": {"tf": 1}, "icepool.Deal": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1}, "icepool.Deal.deck": {"tf": 1}, "icepool.Deal.hand_sizes": {"tf": 1}, "icepool.Deal.total_cards_dealt": {"tf": 1}, "icepool.Deal.outcomes": {"tf": 1}, "icepool.Deal.counts_len": {"tf": 1}, "icepool.Deal.denominator": {"tf": 1}}, "df": 9, "t": {"docs": {"icepool.Deal.total_cards_dealt": {"tf": 1}}, "df": 1}}}}}, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {"icepool.bernoulli": {"tf": 1}}, "df": 1}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die.binary_op": {"tf": 1}}, "df": 1}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"icepool.coin": {"tf": 1}}, "df": 1}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.count": {"tf": 1}, "icepool.Die.count_in": {"tf": 1}, "icepool.OutcomeCountGenerator.count": {"tf": 1}, "icepool.OutcomeCountGenerator.count_in": {"tf": 1}, "icepool.OutcomeCountGenerator.count_unique": {"tf": 1}}, "df": 5, "s": {"docs": {"icepool.OutcomeCountGenerator.counts_len": {"tf": 1}, "icepool.Pool.counts_len": {"tf": 1}, "icepool.Pool.sorted_roll_counts": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1}, "icepool.Deal.counts_len": {"tf": 1}, "icepool.SuitGenerator.counts_len": {"tf": 1}}, "df": 6, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {"icepool.CountsKeysView": {"tf": 1}, "icepool.CountsKeysView.__init__": {"tf": 1}}, "df": 2}}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {"icepool.CountsValuesView": {"tf": 1}, "icepool.CountsValuesView.__init__": {"tf": 1}}, "df": 2}}}}}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {"icepool.CountsItemsView": {"tf": 1}, "icepool.CountsItemsView.__init__": {"tf": 1}}, "df": 2}}}}}}}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Population.covariance": {"tf": 1}}, "df": 1}}}}}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Population.correlation": {"tf": 1}}, "df": 1}}}}}}}}}, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"icepool.OutcomeCountGenerator.contains_subset": {"tf": 1}}, "df": 1}}}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"icepool.cartesian_product": {"tf": 1}}, "df": 1}}}}}}, "d": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Deal.total_cards_dealt": {"tf": 1}}, "df": 1}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {"icepool.clear_pool_cache": {"tf": 1}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {"icepool.Die.clip": {"tf": 1}}, "df": 1}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"icepool.clear_pool_cache": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Die.ceil": {"tf": 1}}, "df": 1}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {"icepool.Die.cmp": {"tf": 1}}, "df": 1}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Population.cramer_von_mises": {"tf": 1}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"icepool.from_cumulative_quantities": {"tf": 1}}, "df": 1}}}}}}}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"icepool.one_hot": {"tf": 1}}, "df": 1}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Outcome": {"tf": 1}, "icepool.Outcome.__init__": {"tf": 1}, "icepool.Die.zero_outcome": {"tf": 1}, "icepool.Population.min_outcome": {"tf": 1}, "icepool.Population.max_outcome": {"tf": 1}, "icepool.min_outcome": {"tf": 1}, "icepool.max_outcome": {"tf": 1}, "icepool.OutcomeCountGenerator.min_outcome": {"tf": 1}, "icepool.OutcomeCountGenerator.max_outcome": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_matching_set_and_outcome": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_straight_and_outcome": {"tf": 1}, "icepool.Pool.min_outcome": {"tf": 1}, "icepool.Pool.max_outcome": {"tf": 1}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.JointEvaluator.final_outcome": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1}}, "df": 17, "s": {"docs": {"icepool.Die.set_outcomes": {"tf": 1}, "icepool.Population.outcomes": {"tf": 1}, "icepool.OutcomeCountGenerator.outcomes": {"tf": 1}, "icepool.Pool.outcomes": {"tf": 1}, "icepool.Deal.outcomes": {"tf": 1}, "icepool.SuitGenerator.outcomes": {"tf": 1}}, "df": 6}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.OutcomeCountGenerator": {"tf": 1}, "icepool.OutcomeCountGenerator.outcomes": {"tf": 1}, "icepool.OutcomeCountGenerator.counts_len": {"tf": 1}, "icepool.OutcomeCountGenerator.denominator": {"tf": 1}, "icepool.OutcomeCountGenerator.evaluate": {"tf": 1}, "icepool.OutcomeCountGenerator.min_outcome": {"tf": 1}, "icepool.OutcomeCountGenerator.max_outcome": {"tf": 1}, "icepool.OutcomeCountGenerator.expand": {"tf": 1}, "icepool.OutcomeCountGenerator.sum": {"tf": 1}, "icepool.OutcomeCountGenerator.count": {"tf": 1}, "icepool.OutcomeCountGenerator.count_in": {"tf": 1}, "icepool.OutcomeCountGenerator.count_unique": {"tf": 1}, "icepool.OutcomeCountGenerator.contains_subset": {"tf": 1}, "icepool.OutcomeCountGenerator.intersection_size": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_matching_set": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_matching_set_and_outcome": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_straight": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_straight_and_outcome": {"tf": 1}, "icepool.OutcomeCountGenerator.sample": {"tf": 1}}, "df": 19}}}}}}}}}, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.OutcomeCountEvaluator": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.OutcomeCountEvaluator.order": {"tf": 1}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 1}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 1}, "icepool.OutcomeCountEvaluator.sample": {"tf": 1}}, "df": 8}}}}}}}}}}}}}}}}}}}}, "p": {"docs": {"icepool.Die.unary_op": {"tf": 1}, "icepool.Die.binary_op": {"tf": 1}, "icepool.Population.unary_op_non_elementwise": {"tf": 1}}, "df": 3}, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.OutcomeCountEvaluator.order": {"tf": 1}, "icepool.Order": {"tf": 1}, "icepool.Order.Ascending": {"tf": 1}, "icepool.Order.Descending": {"tf": 1}, "icepool.Order.Any": {"tf": 1}, "icepool.JointEvaluator.order": {"tf": 1}, "icepool.SumEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.order": {"tf": 1}}, "df": 8}}}}}, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"icepool.one_hot": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.keep_highest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.Pool.highest": {"tf": 1}}, "df": 3}}}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Population.has_zero_quantities": {"tf": 1}}, "df": 1}, "n": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Deal.hand_sizes": {"tf": 1}}, "df": 1}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"icepool.cartesian_product": {"tf": 1}}, "df": 1}}}}, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Population.probabilities": {"tf": 1}, "icepool.Population.probabilities_le": {"tf": 1}, "icepool.Population.probabilities_ge": {"tf": 1}, "icepool.Population.probabilities_lt": {"tf": 1}, "icepool.Population.probabilities_gt": {"tf": 1}}, "df": 5}}}, "y": {"docs": {"icepool.Population.probability": {"tf": 1}}, "df": 1}}}}}}}}}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Die.pool": {"tf": 1}, "icepool.Pool": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.Pool.size": {"tf": 1}, "icepool.Pool.denominator": {"tf": 1}, "icepool.Pool.unique_dice": {"tf": 1}, "icepool.Pool.outcomes": {"tf": 1}, "icepool.Pool.counts_len": {"tf": 1}, "icepool.Pool.sorted_roll_counts": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1}, "icepool.Pool.min_outcome": {"tf": 1}, "icepool.Pool.max_outcome": {"tf": 1}, "icepool.Pool.lowest": {"tf": 1}, "icepool.Pool.highest": {"tf": 1}, "icepool.standard_pool": {"tf": 1}, "icepool.clear_pool_cache": {"tf": 1}}, "df": 16}}, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Population": {"tf": 1}, "icepool.Population.keys": {"tf": 1}, "icepool.Population.values": {"tf": 1}, "icepool.Population.items": {"tf": 1}, "icepool.Population.outcomes": {"tf": 1}, "icepool.Population.tuple_len": {"tf": 1}, "icepool.Population.is_empty": {"tf": 1}, "icepool.Population.min_outcome": {"tf": 1}, "icepool.Population.max_outcome": {"tf": 1}, "icepool.Population.nearest_le": {"tf": 1}, "icepool.Population.nearest_ge": {"tf": 1}, "icepool.Population.quantities": {"tf": 1}, "icepool.Population.denominator": {"tf": 1}, "icepool.Population.has_zero_quantities": {"tf": 1}, "icepool.Population.quantities_le": {"tf": 1}, "icepool.Population.quantities_ge": {"tf": 1}, "icepool.Population.quantity": {"tf": 1}, "icepool.Population.quantity_ne": {"tf": 1}, "icepool.Population.quantity_le": {"tf": 1}, "icepool.Population.quantity_lt": {"tf": 1}, "icepool.Population.quantity_ge": {"tf": 1}, "icepool.Population.quantity_gt": {"tf": 1}, "icepool.Population.probabilities": {"tf": 1}, "icepool.Population.probabilities_le": {"tf": 1}, "icepool.Population.probabilities_ge": {"tf": 1}, "icepool.Population.probabilities_lt": {"tf": 1}, "icepool.Population.probabilities_gt": {"tf": 1}, "icepool.Population.probability": {"tf": 1}, "icepool.Population.mode": {"tf": 1}, "icepool.Population.modal_quantity": {"tf": 1}, "icepool.Population.kolmogorov_smirnov": {"tf": 1}, "icepool.Population.cramer_von_mises": {"tf": 1}, "icepool.Population.median": {"tf": 1}, "icepool.Population.median_left": {"tf": 1}, "icepool.Population.median_right": {"tf": 1}, "icepool.Population.quantile": {"tf": 1}, "icepool.Population.quantile_left": {"tf": 1}, "icepool.Population.quantile_right": {"tf": 1}, "icepool.Population.mean": {"tf": 1}, "icepool.Population.variance": {"tf": 1}, "icepool.Population.standard_deviation": {"tf": 1}, "icepool.Population.sd": {"tf": 1}, "icepool.Population.standardized_moment": {"tf": 1}, "icepool.Population.skewness": {"tf": 1}, "icepool.Population.excess_kurtosis": {"tf": 1}, "icepool.Population.marginals": {"tf": 1}, "icepool.Population.unary_op_non_elementwise": {"tf": 1}, "icepool.Population.covariance": {"tf": 1}, "icepool.Population.correlation": {"tf": 1}, "icepool.Population.sample": {"tf": 1}, "icepool.Population.format": {"tf": 1}}, "df": 51}}}}}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die.unary_op": {"tf": 1}, "icepool.Population.unary_op_non_elementwise": {"tf": 1}}, "df": 2}}}, "i": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"icepool.OutcomeCountGenerator.count_unique": {"tf": 1}, "icepool.Pool.unique_dice": {"tf": 1}}, "df": 2}}}}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die.key_tuple": {"tf": 1}}, "df": 1, "s": {"docs": {"icepool.Die.keys": {"tf": 1}, "icepool.Population.keys": {"tf": 1}, "icepool.Deck.keys": {"tf": 1}}, "df": 3}}, "e": {"docs": {}, "df": 0, "p": {"docs": {"icepool.Die.keep_lowest": {"tf": 1}, "icepool.Die.keep_highest": {"tf": 1}}, "df": 2}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {"icepool.Population.kolmogorov_smirnov": {"tf": 1}}, "df": 1}}}}}}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Population.excess_kurtosis": {"tf": 1}}, "df": 1}}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die.values": {"tf": 1}, "icepool.Population.values": {"tf": 1}, "icepool.Deck.values": {"tf": 1}}, "df": 3}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Population.variance": {"tf": 1}}, "df": 1}}}}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Population.cramer_von_mises": {"tf": 1}}, "df": 1}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Die.reroll": {"tf": 1}, "icepool.Reroll": {"tf": 1}}, "df": 2}}}}, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"icepool.reduce": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.set_range": {"tf": 1}, "icepool.align_range": {"tf": 1}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 1}}, "df": 3}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.round": {"tf": 1}}, "df": 1}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Pool.sorted_roll_counts": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1}}, "df": 2}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Population.median_right": {"tf": 1}, "icepool.Population.quantile_right": {"tf": 1}}, "df": 2}}}}, "v": {"docs": {"icepool.from_rv": {"tf": 1}}, "df": 1}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die.filter": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.JointEvaluator.final_outcome": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1}}, "df": 4}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die.floor": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Population.format": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"icepool.from_cumulative_quantities": {"tf": 1}, "icepool.from_rv": {"tf": 1}}, "df": 2}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"icepool.Die.trunc": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.truncate": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {"icepool.Die.trim": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.map_and_time": {"tf": 1}}, "df": 1}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.key_tuple": {"tf": 1}, "icepool.Population.tuple_len": {"tf": 1}}, "df": 2}}}}, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Deal.total_cards_dealt": {"tf": 1}}, "df": 1}}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {"icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Deck.map": {"tf": 1}}, "df": 3}, "x": {"docs": {"icepool.Population.max_outcome": {"tf": 1}, "icepool.max_outcome": {"tf": 1}, "icepool.OutcomeCountGenerator.max_outcome": {"tf": 1}, "icepool.Pool.max_outcome": {"tf": 1}}, "df": 4}, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Population.marginals": {"tf": 1}}, "df": 1}}}}}}}, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.OutcomeCountGenerator.largest_matching_set": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_matching_set_and_outcome": {"tf": 1}}, "df": 2}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Population.min_outcome": {"tf": 1}, "icepool.min_outcome": {"tf": 1}, "icepool.OutcomeCountGenerator.min_outcome": {"tf": 1}, "icepool.Pool.min_outcome": {"tf": 1}}, "df": 4}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Population.cramer_von_mises": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Population.mode": {"tf": 1}}, "df": 1}, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Population.modal_quantity": {"tf": 1}}, "df": 1}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Population.standardized_moment": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Population.median": {"tf": 1}, "icepool.Population.median_left": {"tf": 1}, "icepool.Population.median_right": {"tf": 1}}, "df": 3}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Population.mean": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.map_and_time": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_matching_set_and_outcome": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_straight_and_outcome": {"tf": 1}}, "df": 3}, "y": {"docs": {"icepool.Order.Any": {"tf": 1}}, "df": 1}}, "b": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die.abs": {"tf": 1}}, "df": 1}}, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Again": {"tf": 1}, "icepool.Again.__init__": {"tf": 1}}, "df": 2}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {"icepool.align": {"tf": 1}, "icepool.align_range": {"tf": 1}}, "df": 2, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.OutcomeCountEvaluator.alignment": {"tf": 1}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 1}}, "df": 2}}}}}}}}, "c": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"icepool.accumulate": {"tf": 1}}, "df": 1}}}}}}}}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.apply": {"tf": 1}, "icepool.apply_sorted": {"tf": 1}, "icepool.apply_sorted.__init__": {"tf": 1}}, "df": 3}}}}, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Order.Ascending": {"tf": 1}}, "df": 1}}}}}}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.explode": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"icepool.OutcomeCountGenerator.expand": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.ExpandEvaluator": {"tf": 1}, "icepool.ExpandEvaluator.__init__": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1}}, "df": 5}}}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Population.excess_kurtosis": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.if_else": {"tf": 1}}, "df": 1}}, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Population.unary_op_non_elementwise": {"tf": 1}}, "df": 1}}}}}}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die.equals": {"tf": 1}}, "df": 1}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Population.is_empty": {"tf": 1}}, "df": 1}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"icepool.OutcomeCountGenerator.evaluate": {"tf": 1}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 1}}, "df": 2}}}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.keep_lowest": {"tf": 1}, "icepool.lowest": {"tf": 1}, "icepool.Pool.lowest": {"tf": 1}}, "df": 3}}}}}, "e": {"docs": {"icepool.Population.nearest_le": {"tf": 1}, "icepool.Population.quantities_le": {"tf": 1}, "icepool.Population.quantity_le": {"tf": 1}, "icepool.Population.probabilities_le": {"tf": 1}}, "df": 4, "n": {"docs": {"icepool.Population.tuple_len": {"tf": 1}, "icepool.OutcomeCountGenerator.counts_len": {"tf": 1}, "icepool.Pool.counts_len": {"tf": 1}, "icepool.Deal.counts_len": {"tf": 1}, "icepool.SuitGenerator.counts_len": {"tf": 1}}, "df": 5}, "f": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Population.median_left": {"tf": 1}, "icepool.Population.quantile_left": {"tf": 1}}, "df": 2}}}, "t": {"docs": {"icepool.Population.quantity_lt": {"tf": 1}, "icepool.Population.probabilities_lt": {"tf": 1}}, "df": 2}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"icepool.OutcomeCountGenerator.largest_matching_set": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_matching_set_and_outcome": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_straight": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_straight_and_outcome": {"tf": 1}}, "df": 4}}}}}}}, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {"icepool.Die.zero": {"tf": 1}, "icepool.Die.zero_outcome": {"tf": 1}, "icepool.Population.has_zero_quantities": {"tf": 1}}, "df": 3}}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Population.quantity_ne": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Population.nearest_le": {"tf": 1}, "icepool.Population.nearest_ge": {"tf": 1}}, "df": 2}}}}}, "x": {"docs": {}, "df": 0, "t": {"docs": {"icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.JointEvaluator.next_state": {"tf": 1}, "icepool.SumEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}}, "df": 4}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Population.unary_op_non_elementwise": {"tf": 1}}, "df": 1}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Population.nearest_ge": {"tf": 1}, "icepool.Population.quantities_ge": {"tf": 1}, "icepool.Population.quantity_ge": {"tf": 1}, "icepool.Population.probabilities_ge": {"tf": 1}}, "df": 4}, "t": {"docs": {"icepool.Population.quantity_gt": {"tf": 1}, "icepool.Population.probabilities_gt": {"tf": 1}}, "df": 2}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Population.quantities": {"tf": 1}, "icepool.Population.has_zero_quantities": {"tf": 1}, "icepool.Population.quantities_le": {"tf": 1}, "icepool.Population.quantities_ge": {"tf": 1}, "icepool.from_cumulative_quantities": {"tf": 1}}, "df": 5}}}, "y": {"docs": {"icepool.Population.quantity": {"tf": 1}, "icepool.Population.quantity_ne": {"tf": 1}, "icepool.Population.quantity_le": {"tf": 1}, "icepool.Population.quantity_lt": {"tf": 1}, "icepool.Population.quantity_ge": {"tf": 1}, "icepool.Population.quantity_gt": {"tf": 1}, "icepool.Population.modal_quantity": {"tf": 1}}, "df": 7}}, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Population.quantile": {"tf": 1}, "icepool.Population.quantile_left": {"tf": 1}, "icepool.Population.quantile_right": {"tf": 1}}, "df": 3}}}}}}}}, "j": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.JointEvaluator": {"tf": 1}, "icepool.JointEvaluator.__init__": {"tf": 1}, "icepool.JointEvaluator.next_state": {"tf": 1}, "icepool.JointEvaluator.final_outcome": {"tf": 1}, "icepool.JointEvaluator.order": {"tf": 1}}, "df": 5}}}}}}}}}}}}}}}}, "annotation": {"root": {"docs": {"icepool.Reroll": {"tf": 1}}, "df": 1, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Reroll": {"tf": 1}}, "df": 1}}}}}}}, "default_value": {"root": {"0": {"docs": {"icepool.Order.Any": {"tf": 1}}, "df": 1}, "1": {"docs": {"icepool.Order.Ascending": {"tf": 1}, "icepool.Order.Descending": {"tf": 1}}, "df": 2}, "docs": {"icepool.Reroll": {"tf": 1.4142135623730951}, "icepool.Order.Ascending": {"tf": 1.4142135623730951}, "icepool.Order.Descending": {"tf": 1.4142135623730951}, "icepool.Order.Any": {"tf": 1.4142135623730951}}, "df": 4, "l": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Reroll": {"tf": 1}, "icepool.Order.Ascending": {"tf": 1}, "icepool.Order.Descending": {"tf": 1}, "icepool.Order.Any": {"tf": 1}}, "df": 4}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Reroll": {"tf": 1.4142135623730951}}, "df": 1, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Reroll": {"tf": 1}}, "df": 1}}}}}}}}}}, "x": {"2": {"7": {"docs": {"icepool.Reroll": {"tf": 1.4142135623730951}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "g": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Reroll": {"tf": 1}, "icepool.Order.Ascending": {"tf": 1}, "icepool.Order.Descending": {"tf": 1}, "icepool.Order.Any": {"tf": 1}}, "df": 4}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Order.Ascending": {"tf": 1}, "icepool.Order.Descending": {"tf": 1}, "icepool.Order.Any": {"tf": 1}}, "df": 3}}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Order.Ascending": {"tf": 1}}, "df": 1}}}}}}}}, "n": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Order.Any": {"tf": 1}}, "df": 1}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Order.Descending": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "signature": {"root": {"0": {"docs": {"icepool.Die.keep_lowest": {"tf": 1}, "icepool.Die.keep_highest": {"tf": 1}, "icepool.lowest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.Pool.lowest": {"tf": 1}, "icepool.Pool.highest": {"tf": 1}}, "df": 6}, "1": {"0": {"0": {"docs": {"icepool.Population.quantile": {"tf": 1}, "icepool.Population.quantile_left": {"tf": 1}, "icepool.Population.quantile_right": {"tf": 1}}, "df": 3}, "docs": {}, "df": 0}, "docs": {"icepool.Die.__init__": {"tf": 1.4142135623730951}, "icepool.Die.map": {"tf": 1.4142135623730951}, "icepool.Die.if_else": {"tf": 1}, "icepool.Die.keep_lowest": {"tf": 1}, "icepool.Die.keep_highest": {"tf": 1}, "icepool.lowest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.apply": {"tf": 1}, "icepool.apply_sorted.__init__": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.Pool.lowest": {"tf": 1}, "icepool.Pool.highest": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}}, "df": 13}, "9": {"docs": {"icepool.Die.explode": {"tf": 1}}, "df": 1}, "docs": {"icepool.standard": {"tf": 6.164414002968976}, "icepool.d": {"tf": 6.164414002968976}, "icepool.bernoulli": {"tf": 6.782329983125268}, "icepool.coin": {"tf": 6.782329983125268}, "icepool.one_hot": {"tf": 6.928203230275509}, "icepool.cartesian_product": {"tf": 7.810249675906654}, "icepool.Outcome.__init__": {"tf": 4}, "icepool.Die.__init__": {"tf": 13.784048752090222}, "icepool.Die.unary_op": {"tf": 8.06225774829855}, "icepool.Die.binary_op": {"tf": 9.486832980505138}, "icepool.Die.keys": {"tf": 5.196152422706632}, "icepool.Die.values": {"tf": 4.47213595499958}, "icepool.Die.items": {"tf": 5.196152422706632}, "icepool.Die.simplify": {"tf": 5.5677643628300215}, "icepool.Die.reroll": {"tf": 10.862780491200215}, "icepool.Die.filter": {"tf": 10.344080432788601}, "icepool.Die.truncate": {"tf": 6.855654600401044}, "icepool.Die.clip": {"tf": 6.855654600401044}, "icepool.Die.set_range": {"tf": 9.539392014169456}, "icepool.Die.set_outcomes": {"tf": 6.782329983125268}, "icepool.Die.trim": {"tf": 5.5677643628300215}, "icepool.Die.map": {"tf": 17.349351572897472}, "icepool.Die.map_and_time": {"tf": 13.96424004376894}, "icepool.Die.explode": {"tf": 11.045361017187261}, "icepool.Die.if_else": {"tf": 13.820274961085254}, "icepool.Die.is_in": {"tf": 7}, "icepool.Die.count": {"tf": 6.782329983125268}, "icepool.Die.count_in": {"tf": 7.54983443527075}, "icepool.Die.pool": {"tf": 7.280109889280518}, "icepool.Die.keep_lowest": {"tf": 8.06225774829855}, "icepool.Die.keep_highest": {"tf": 8.774964387392123}, "icepool.Die.abs": {"tf": 5.5677643628300215}, "icepool.Die.round": {"tf": 6.557438524302}, "icepool.Die.trunc": {"tf": 4.898979485566356}, "icepool.Die.floor": {"tf": 4.898979485566356}, "icepool.Die.ceil": {"tf": 4.898979485566356}, "icepool.Die.zero": {"tf": 5.5677643628300215}, "icepool.Die.zero_outcome": {"tf": 3.7416573867739413}, "icepool.Die.cmp": {"tf": 5.744562646538029}, "icepool.Die.sign": {"tf": 5.385164807134504}, "icepool.Die.key_tuple": {"tf": 3.4641016151377544}, "icepool.Die.equals": {"tf": 5.916079783099616}, "icepool.Population.keys": {"tf": 5.196152422706632}, "icepool.Population.values": {"tf": 4.47213595499958}, "icepool.Population.items": {"tf": 5.196152422706632}, "icepool.Population.outcomes": {"tf": 5.196152422706632}, "icepool.Population.tuple_len": {"tf": 4.123105625617661}, "icepool.Population.is_empty": {"tf": 3.4641016151377544}, "icepool.Population.min_outcome": {"tf": 3.7416573867739413}, "icepool.Population.max_outcome": {"tf": 3.7416573867739413}, "icepool.Population.nearest_le": {"tf": 4.795831523312719}, "icepool.Population.nearest_ge": {"tf": 4.795831523312719}, "icepool.Population.quantities": {"tf": 4.47213595499958}, "icepool.Population.denominator": {"tf": 3.4641016151377544}, "icepool.Population.has_zero_quantities": {"tf": 3.4641016151377544}, "icepool.Population.quantities_le": {"tf": 4.123105625617661}, "icepool.Population.quantities_ge": {"tf": 4.123105625617661}, "icepool.Population.quantity": {"tf": 4}, "icepool.Population.quantity_ne": {"tf": 4}, "icepool.Population.quantity_le": {"tf": 4}, "icepool.Population.quantity_lt": {"tf": 4}, "icepool.Population.quantity_ge": {"tf": 4}, "icepool.Population.quantity_gt": {"tf": 4}, "icepool.Population.probabilities": {"tf": 5.5677643628300215}, "icepool.Population.probabilities_le": {"tf": 5.5677643628300215}, "icepool.Population.probabilities_ge": {"tf": 5.5677643628300215}, "icepool.Population.probabilities_lt": {"tf": 5.5677643628300215}, "icepool.Population.probabilities_gt": {"tf": 5.5677643628300215}, "icepool.Population.probability": {"tf": 4}, "icepool.Population.mode": {"tf": 3.4641016151377544}, "icepool.Population.modal_quantity": {"tf": 3.4641016151377544}, "icepool.Population.kolmogorov_smirnov": {"tf": 4}, "icepool.Population.cramer_von_mises": {"tf": 4}, "icepool.Population.median": {"tf": 3.1622776601683795}, "icepool.Population.median_left": {"tf": 3.7416573867739413}, "icepool.Population.median_right": {"tf": 3.7416573867739413}, "icepool.Population.quantile": {"tf": 5.656854249492381}, "icepool.Population.quantile_left": {"tf": 6}, "icepool.Population.quantile_right": {"tf": 6}, "icepool.Population.mean": {"tf": 5.744562646538029}, "icepool.Population.variance": {"tf": 5.744562646538029}, "icepool.Population.standard_deviation": {"tf": 5.744562646538029}, "icepool.Population.sd": {"tf": 5.744562646538029}, "icepool.Population.standardized_moment": {"tf": 6.4031242374328485}, "icepool.Population.skewness": {"tf": 5.744562646538029}, "icepool.Population.excess_kurtosis": {"tf": 5.744562646538029}, "icepool.Population.unary_op_non_elementwise": {"tf": 6.324555320336759}, "icepool.Population.covariance": {"tf": 7.874007874011811}, "icepool.Population.correlation": {"tf": 7.874007874011811}, "icepool.Population.sample": {"tf": 3.7416573867739413}, "icepool.Population.format": {"tf": 5.0990195135927845}, "icepool.Again.__init__": {"tf": 2}, "icepool.CountsKeysView.__init__": {"tf": 5.196152422706632}, "icepool.CountsValuesView.__init__": {"tf": 4.47213595499958}, "icepool.CountsItemsView.__init__": {"tf": 4.47213595499958}, "icepool.from_cumulative_quantities": {"tf": 8.831760866327848}, "icepool.from_rv": {"tf": 9.643650760992955}, "icepool.align": {"tf": 8.774964387392123}, "icepool.align_range": {"tf": 8.246211251235321}, "icepool.lowest": {"tf": 7.3484692283495345}, "icepool.highest": {"tf": 7.3484692283495345}, "icepool.min_outcome": {"tf": 7}, "icepool.max_outcome": {"tf": 7}, "icepool.reduce": {"tf": 12.36931687685298}, "icepool.accumulate": {"tf": 12.489995996796797}, "icepool.apply": {"tf": 13.601470508735444}, "icepool.apply_sorted.__init__": {"tf": 12.727922061357855}, "icepool.OutcomeCountGenerator.outcomes": {"tf": 4.358898943540674}, "icepool.OutcomeCountGenerator.counts_len": {"tf": 3.4641016151377544}, "icepool.OutcomeCountGenerator.denominator": {"tf": 3.4641016151377544}, "icepool.OutcomeCountGenerator.evaluate": {"tf": 9.433981132056603}, "icepool.OutcomeCountGenerator.min_outcome": {"tf": 3.7416573867739413}, "icepool.OutcomeCountGenerator.max_outcome": {"tf": 3.7416573867739413}, "icepool.OutcomeCountGenerator.expand": {"tf": 7.416198487095663}, "icepool.OutcomeCountGenerator.sum": {"tf": 9.591663046625438}, "icepool.OutcomeCountGenerator.count": {"tf": 6.164414002968976}, "icepool.OutcomeCountGenerator.count_in": {"tf": 7}, "icepool.OutcomeCountGenerator.count_unique": {"tf": 5.385164807134504}, "icepool.OutcomeCountGenerator.contains_subset": {"tf": 8.366600265340756}, "icepool.OutcomeCountGenerator.intersection_size": {"tf": 8.366600265340756}, "icepool.OutcomeCountGenerator.largest_matching_set": {"tf": 5.385164807134504}, "icepool.OutcomeCountGenerator.largest_matching_set_and_outcome": {"tf": 6.244997998398398}, "icepool.OutcomeCountGenerator.largest_straight": {"tf": 6.855654600401044}, "icepool.OutcomeCountGenerator.largest_straight_and_outcome": {"tf": 7.416198487095663}, "icepool.OutcomeCountGenerator.sample": {"tf": 4.898979485566356}, "icepool.Pool.__init__": {"tf": 12.68857754044952}, "icepool.Pool.size": {"tf": 3.4641016151377544}, "icepool.Pool.denominator": {"tf": 3.4641016151377544}, "icepool.Pool.unique_dice": {"tf": 5.830951894845301}, "icepool.Pool.outcomes": {"tf": 4.358898943540674}, "icepool.Pool.counts_len": {"tf": 3.4641016151377544}, "icepool.Pool.sorted_roll_counts": {"tf": 4.898979485566356}, "icepool.Pool.set_sorted_roll_counts": {"tf": 8.94427190999916}, "icepool.Pool.min_outcome": {"tf": 3.7416573867739413}, "icepool.Pool.max_outcome": {"tf": 3.7416573867739413}, "icepool.Pool.lowest": {"tf": 7.211102550927978}, "icepool.Pool.highest": {"tf": 7.211102550927978}, "icepool.standard_pool": {"tf": 7.14142842854285}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 6.48074069840786}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 7.54983443527075}, "icepool.OutcomeCountEvaluator.order": {"tf": 6.928203230275509}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 6.928203230275509}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 6.48074069840786}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 9.1104335791443}, "icepool.OutcomeCountEvaluator.sample": {"tf": 8.246211251235321}, "icepool.JointEvaluator.__init__": {"tf": 4.795831523312719}, "icepool.JointEvaluator.next_state": {"tf": 5.291502622129181}, "icepool.JointEvaluator.final_outcome": {"tf": 5.916079783099616}, "icepool.JointEvaluator.order": {"tf": 5.477225575051661}, "icepool.SumEvaluator.__init__": {"tf": 7.483314773547883}, "icepool.SumEvaluator.next_state": {"tf": 4.69041575982343}, "icepool.SumEvaluator.final_outcome": {"tf": 4.69041575982343}, "icepool.SumEvaluator.order": {"tf": 4.242640687119285}, "icepool.ExpandEvaluator.__init__": {"tf": 4.795831523312719}, "icepool.ExpandEvaluator.next_state": {"tf": 4.69041575982343}, "icepool.ExpandEvaluator.order": {"tf": 4.242640687119285}, "icepool.ExpandEvaluator.final_outcome": {"tf": 4.69041575982343}, "icepool.Deck.__init__": {"tf": 9.486832980505138}, "icepool.Deck.keys": {"tf": 5.196152422706632}, "icepool.Deck.values": {"tf": 4.47213595499958}, "icepool.Deck.items": {"tf": 5.196152422706632}, "icepool.Deck.size": {"tf": 3.4641016151377544}, "icepool.Deck.deal": {"tf": 6.082762530298219}, "icepool.Deck.map": {"tf": 12.649110640673518}, "icepool.Deal.__init__": {"tf": 6.082762530298219}, "icepool.Deal.deck": {"tf": 5.196152422706632}, "icepool.Deal.hand_sizes": {"tf": 4.898979485566356}, "icepool.Deal.total_cards_dealt": {"tf": 3.4641016151377544}, "icepool.Deal.outcomes": {"tf": 5.196152422706632}, "icepool.Deal.counts_len": {"tf": 3.4641016151377544}, "icepool.Deal.denominator": {"tf": 3.4641016151377544}, "icepool.SuitGenerator.__init__": {"tf": 5}, "icepool.SuitGenerator.outcomes": {"tf": 3.4641016151377544}, "icepool.SuitGenerator.counts_len": {"tf": 3.4641016151377544}, "icepool.SuitGenerator.denominator": {"tf": 3.4641016151377544}, "icepool.clear_pool_cache": {"tf": 2.6457513110645907}}, "df": 176, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool.standard": {"tf": 1}, "icepool.d": {"tf": 1}, "icepool.one_hot": {"tf": 1}}, "df": 3}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die.equals": {"tf": 1}}, "df": 1}}}}}}, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool.standard_pool": {"tf": 1}, "icepool.Deck.deal": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1}}, "df": 3}}}}, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.__init__": {"tf": 1.4142135623730951}, "icepool.Die.pool": {"tf": 1}, "icepool.Population.quantities_le": {"tf": 1}, "icepool.Population.quantities_ge": {"tf": 1}, "icepool.Population.probabilities": {"tf": 1}, "icepool.Population.probabilities_le": {"tf": 1}, "icepool.Population.probabilities_ge": {"tf": 1}, "icepool.Population.probabilities_lt": {"tf": 1}, "icepool.Population.probabilities_gt": {"tf": 1}, "icepool.from_cumulative_quantities": {"tf": 1.4142135623730951}, "icepool.from_rv": {"tf": 1.4142135623730951}, "icepool.OutcomeCountGenerator.outcomes": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1.4142135623730951}, "icepool.Pool.outcomes": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 1}, "icepool.OutcomeCountEvaluator.sample": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1.4142135623730951}, "icepool.SuitGenerator.outcomes": {"tf": 1}}, "df": 19}}}}}}, "l": {"docs": {}, "df": 0, "f": {"docs": {"icepool.Die.unary_op": {"tf": 1}, "icepool.Die.binary_op": {"tf": 1}, "icepool.Die.keys": {"tf": 1}, "icepool.Die.values": {"tf": 1}, "icepool.Die.items": {"tf": 1}, "icepool.Die.simplify": {"tf": 1}, "icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.truncate": {"tf": 1}, "icepool.Die.clip": {"tf": 1}, "icepool.Die.set_range": {"tf": 1}, "icepool.Die.set_outcomes": {"tf": 1}, "icepool.Die.trim": {"tf": 1}, "icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.if_else": {"tf": 1}, "icepool.Die.is_in": {"tf": 1}, "icepool.Die.count": {"tf": 1}, "icepool.Die.count_in": {"tf": 1}, "icepool.Die.pool": {"tf": 1}, "icepool.Die.keep_lowest": {"tf": 1}, "icepool.Die.keep_highest": {"tf": 1}, "icepool.Die.abs": {"tf": 1}, "icepool.Die.round": {"tf": 1}, "icepool.Die.trunc": {"tf": 1}, "icepool.Die.floor": {"tf": 1}, "icepool.Die.ceil": {"tf": 1}, "icepool.Die.zero": {"tf": 1}, "icepool.Die.zero_outcome": {"tf": 1}, "icepool.Die.cmp": {"tf": 1}, "icepool.Die.sign": {"tf": 1}, "icepool.Die.key_tuple": {"tf": 1}, "icepool.Die.equals": {"tf": 1}, "icepool.Population.keys": {"tf": 1}, "icepool.Population.values": {"tf": 1}, "icepool.Population.items": {"tf": 1}, "icepool.Population.outcomes": {"tf": 1}, "icepool.Population.tuple_len": {"tf": 1}, "icepool.Population.is_empty": {"tf": 1}, "icepool.Population.min_outcome": {"tf": 1}, "icepool.Population.max_outcome": {"tf": 1}, "icepool.Population.nearest_le": {"tf": 1}, "icepool.Population.nearest_ge": {"tf": 1}, "icepool.Population.quantities": {"tf": 1}, "icepool.Population.denominator": {"tf": 1}, "icepool.Population.has_zero_quantities": {"tf": 1}, "icepool.Population.quantities_le": {"tf": 1}, "icepool.Population.quantities_ge": {"tf": 1}, "icepool.Population.quantity": {"tf": 1}, "icepool.Population.quantity_ne": {"tf": 1}, "icepool.Population.quantity_le": {"tf": 1}, "icepool.Population.quantity_lt": {"tf": 1}, "icepool.Population.quantity_ge": {"tf": 1}, "icepool.Population.quantity_gt": {"tf": 1}, "icepool.Population.probabilities": {"tf": 1}, "icepool.Population.probabilities_le": {"tf": 1}, "icepool.Population.probabilities_ge": {"tf": 1}, "icepool.Population.probabilities_lt": {"tf": 1}, "icepool.Population.probabilities_gt": {"tf": 1}, "icepool.Population.probability": {"tf": 1}, "icepool.Population.mode": {"tf": 1}, "icepool.Population.modal_quantity": {"tf": 1}, "icepool.Population.kolmogorov_smirnov": {"tf": 1}, "icepool.Population.cramer_von_mises": {"tf": 1}, "icepool.Population.median": {"tf": 1}, "icepool.Population.median_left": {"tf": 1}, "icepool.Population.median_right": {"tf": 1}, "icepool.Population.quantile": {"tf": 1}, "icepool.Population.quantile_left": {"tf": 1}, "icepool.Population.quantile_right": {"tf": 1}, "icepool.Population.mean": {"tf": 1}, "icepool.Population.variance": {"tf": 1}, "icepool.Population.standard_deviation": {"tf": 1}, "icepool.Population.sd": {"tf": 1}, "icepool.Population.standardized_moment": {"tf": 1}, "icepool.Population.skewness": {"tf": 1}, "icepool.Population.excess_kurtosis": {"tf": 1}, "icepool.Population.unary_op_non_elementwise": {"tf": 1}, "icepool.Population.covariance": {"tf": 1}, "icepool.Population.correlation": {"tf": 1}, "icepool.Population.sample": {"tf": 1}, "icepool.Population.format": {"tf": 1}, "icepool.OutcomeCountGenerator.outcomes": {"tf": 1}, "icepool.OutcomeCountGenerator.counts_len": {"tf": 1}, "icepool.OutcomeCountGenerator.denominator": {"tf": 1}, "icepool.OutcomeCountGenerator.evaluate": {"tf": 1}, "icepool.OutcomeCountGenerator.min_outcome": {"tf": 1}, "icepool.OutcomeCountGenerator.max_outcome": {"tf": 1}, "icepool.OutcomeCountGenerator.expand": {"tf": 1}, "icepool.OutcomeCountGenerator.sum": {"tf": 1}, "icepool.OutcomeCountGenerator.count": {"tf": 1}, "icepool.OutcomeCountGenerator.count_in": {"tf": 1}, "icepool.OutcomeCountGenerator.count_unique": {"tf": 1}, "icepool.OutcomeCountGenerator.contains_subset": {"tf": 1}, "icepool.OutcomeCountGenerator.intersection_size": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_matching_set": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_matching_set_and_outcome": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_straight": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_straight_and_outcome": {"tf": 1}, "icepool.OutcomeCountGenerator.sample": {"tf": 1}, "icepool.Pool.size": {"tf": 1}, "icepool.Pool.denominator": {"tf": 1}, "icepool.Pool.unique_dice": {"tf": 1}, "icepool.Pool.outcomes": {"tf": 1}, "icepool.Pool.counts_len": {"tf": 1}, "icepool.Pool.sorted_roll_counts": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1}, "icepool.Pool.min_outcome": {"tf": 1}, "icepool.Pool.max_outcome": {"tf": 1}, "icepool.Pool.lowest": {"tf": 1}, "icepool.Pool.highest": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.OutcomeCountEvaluator.order": {"tf": 1}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 1}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 1}, "icepool.OutcomeCountEvaluator.sample": {"tf": 1}, "icepool.JointEvaluator.next_state": {"tf": 1}, "icepool.JointEvaluator.final_outcome": {"tf": 1}, "icepool.JointEvaluator.order": {"tf": 1}, "icepool.SumEvaluator.next_state": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1}, "icepool.SumEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1}, "icepool.Deck.keys": {"tf": 1}, "icepool.Deck.values": {"tf": 1}, "icepool.Deck.items": {"tf": 1}, "icepool.Deck.size": {"tf": 1}, "icepool.Deck.deal": {"tf": 1}, "icepool.Deck.map": {"tf": 1}, "icepool.Deal.deck": {"tf": 1}, "icepool.Deal.hand_sizes": {"tf": 1}, "icepool.Deal.total_cards_dealt": {"tf": 1}, "icepool.Deal.outcomes": {"tf": 1}, "icepool.Deal.counts_len": {"tf": 1}, "icepool.Deal.denominator": {"tf": 1}, "icepool.SuitGenerator.outcomes": {"tf": 1}, "icepool.SuitGenerator.counts_len": {"tf": 1}, "icepool.SuitGenerator.denominator": {"tf": 1}}, "df": 143}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Deck.map": {"tf": 1}}, "df": 6}, "t": {"docs": {}, "df": 0, "e": {"docs": {"icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.JointEvaluator.next_state": {"tf": 1}, "icepool.JointEvaluator.final_outcome": {"tf": 1}, "icepool.SumEvaluator.next_state": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1}}, "df": 8}}}, "r": {"docs": {"icepool.Population.format": {"tf": 1.4142135623730951}}, "df": 1}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {"icepool.Population.format": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Pool.set_sorted_roll_counts": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Pool.set_sorted_roll_counts": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "b": {"docs": {"icepool.JointEvaluator.__init__": {"tf": 1}}, "df": 1}}, "r": {"docs": {}, "df": 0, "c": {"docs": {"icepool.SuitGenerator.__init__": {"tf": 1}}, "df": 1}}}, "i": {"docs": {"icepool.Population.covariance": {"tf": 1}, "icepool.Population.correlation": {"tf": 1}}, "df": 2, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.standard": {"tf": 1.4142135623730951}, "icepool.d": {"tf": 1.4142135623730951}, "icepool.bernoulli": {"tf": 1.4142135623730951}, "icepool.coin": {"tf": 1.4142135623730951}, "icepool.one_hot": {"tf": 1}, "icepool.Die.__init__": {"tf": 1.7320508075688772}, "icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.set_range": {"tf": 2}, "icepool.Die.map": {"tf": 1.4142135623730951}, "icepool.Die.map_and_time": {"tf": 1.4142135623730951}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.if_else": {"tf": 1}, "icepool.Die.count": {"tf": 1.4142135623730951}, "icepool.Die.count_in": {"tf": 1.4142135623730951}, "icepool.Die.pool": {"tf": 1.4142135623730951}, "icepool.Die.keep_lowest": {"tf": 1.7320508075688772}, "icepool.Die.keep_highest": {"tf": 1.7320508075688772}, "icepool.Die.round": {"tf": 1}, "icepool.Die.cmp": {"tf": 1}, "icepool.Die.sign": {"tf": 1}, "icepool.Population.tuple_len": {"tf": 1}, "icepool.Population.denominator": {"tf": 1}, "icepool.Population.quantities_le": {"tf": 1}, "icepool.Population.quantities_ge": {"tf": 1}, "icepool.Population.quantity": {"tf": 1}, "icepool.Population.quantity_ne": {"tf": 1}, "icepool.Population.quantity_le": {"tf": 1}, "icepool.Population.quantity_lt": {"tf": 1}, "icepool.Population.quantity_ge": {"tf": 1}, "icepool.Population.quantity_gt": {"tf": 1}, "icepool.Population.modal_quantity": {"tf": 1}, "icepool.Population.quantile": {"tf": 1.4142135623730951}, "icepool.Population.quantile_left": {"tf": 1.4142135623730951}, "icepool.Population.quantile_right": {"tf": 1.4142135623730951}, "icepool.Population.standardized_moment": {"tf": 1}, "icepool.Population.covariance": {"tf": 1.4142135623730951}, "icepool.Population.correlation": {"tf": 1.4142135623730951}, "icepool.from_cumulative_quantities": {"tf": 1}, "icepool.from_rv": {"tf": 1.7320508075688772}, "icepool.align_range": {"tf": 1.7320508075688772}, "icepool.lowest": {"tf": 1.4142135623730951}, "icepool.highest": {"tf": 1.4142135623730951}, "icepool.apply": {"tf": 1}, "icepool.apply_sorted.__init__": {"tf": 1}, "icepool.OutcomeCountGenerator.counts_len": {"tf": 1}, "icepool.OutcomeCountGenerator.denominator": {"tf": 1}, "icepool.OutcomeCountGenerator.count": {"tf": 1}, "icepool.OutcomeCountGenerator.count_in": {"tf": 1}, "icepool.OutcomeCountGenerator.count_unique": {"tf": 1}, "icepool.OutcomeCountGenerator.contains_subset": {"tf": 1}, "icepool.OutcomeCountGenerator.intersection_size": {"tf": 1.4142135623730951}, "icepool.OutcomeCountGenerator.largest_matching_set": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_matching_set_and_outcome": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_straight": {"tf": 1.4142135623730951}, "icepool.OutcomeCountGenerator.largest_straight_and_outcome": {"tf": 1.7320508075688772}, "icepool.Pool.__init__": {"tf": 2.23606797749979}, "icepool.Pool.size": {"tf": 1}, "icepool.Pool.denominator": {"tf": 1}, "icepool.Pool.counts_len": {"tf": 1}, "icepool.Pool.sorted_roll_counts": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1.4142135623730951}, "icepool.Pool.lowest": {"tf": 1.4142135623730951}, "icepool.Pool.highest": {"tf": 1.4142135623730951}, "icepool.standard_pool": {"tf": 2}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 1}, "icepool.OutcomeCountEvaluator.sample": {"tf": 1}, "icepool.JointEvaluator.next_state": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1.4142135623730951}, "icepool.Deck.size": {"tf": 1}, "icepool.Deck.deal": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1}, "icepool.Deal.hand_sizes": {"tf": 1}, "icepool.Deal.total_cards_dealt": {"tf": 1}, "icepool.Deal.counts_len": {"tf": 1}, "icepool.Deal.denominator": {"tf": 1}, "icepool.SuitGenerator.counts_len": {"tf": 1}, "icepool.SuitGenerator.denominator": {"tf": 1}}, "df": 79}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.reduce": {"tf": 1}, "icepool.accumulate": {"tf": 1}}, "df": 2}}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"icepool.standard": {"tf": 1}, "icepool.d": {"tf": 1}, "icepool.bernoulli": {"tf": 1}, "icepool.coin": {"tf": 1}, "icepool.one_hot": {"tf": 1}, "icepool.cartesian_product": {"tf": 1.7320508075688772}, "icepool.Die.__init__": {"tf": 2.23606797749979}, "icepool.Die.unary_op": {"tf": 1}, "icepool.Die.binary_op": {"tf": 1.4142135623730951}, "icepool.Die.keys": {"tf": 1}, "icepool.Die.values": {"tf": 1}, "icepool.Die.items": {"tf": 1}, "icepool.Die.simplify": {"tf": 1}, "icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.truncate": {"tf": 1}, "icepool.Die.clip": {"tf": 1}, "icepool.Die.set_range": {"tf": 1.4142135623730951}, "icepool.Die.set_outcomes": {"tf": 1}, "icepool.Die.trim": {"tf": 1}, "icepool.Die.map": {"tf": 3}, "icepool.Die.map_and_time": {"tf": 2.23606797749979}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.if_else": {"tf": 2.23606797749979}, "icepool.Die.is_in": {"tf": 1}, "icepool.Die.count": {"tf": 1}, "icepool.Die.count_in": {"tf": 1}, "icepool.Die.pool": {"tf": 1}, "icepool.Die.keep_lowest": {"tf": 1}, "icepool.Die.keep_highest": {"tf": 1}, "icepool.Die.abs": {"tf": 1}, "icepool.Die.round": {"tf": 1}, "icepool.Die.trunc": {"tf": 1}, "icepool.Die.floor": {"tf": 1}, "icepool.Die.ceil": {"tf": 1}, "icepool.Die.zero": {"tf": 1}, "icepool.Die.cmp": {"tf": 1}, "icepool.Die.sign": {"tf": 1}, "icepool.Population.keys": {"tf": 1}, "icepool.Population.values": {"tf": 1}, "icepool.Population.items": {"tf": 1}, "icepool.Population.outcomes": {"tf": 1}, "icepool.Population.quantities": {"tf": 1}, "icepool.Population.mean": {"tf": 1}, "icepool.Population.variance": {"tf": 1}, "icepool.Population.standard_deviation": {"tf": 1}, "icepool.Population.sd": {"tf": 1}, "icepool.Population.standardized_moment": {"tf": 1}, "icepool.Population.skewness": {"tf": 1}, "icepool.Population.excess_kurtosis": {"tf": 1}, "icepool.Population.covariance": {"tf": 1}, "icepool.Population.correlation": {"tf": 1}, "icepool.CountsKeysView.__init__": {"tf": 1}, "icepool.CountsValuesView.__init__": {"tf": 1}, "icepool.CountsItemsView.__init__": {"tf": 1}, "icepool.from_cumulative_quantities": {"tf": 1}, "icepool.from_rv": {"tf": 1.4142135623730951}, "icepool.align": {"tf": 1.4142135623730951}, "icepool.align_range": {"tf": 1.4142135623730951}, "icepool.lowest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.min_outcome": {"tf": 1}, "icepool.max_outcome": {"tf": 1}, "icepool.reduce": {"tf": 1.7320508075688772}, "icepool.accumulate": {"tf": 1.7320508075688772}, "icepool.apply": {"tf": 2.449489742783178}, "icepool.apply_sorted.__init__": {"tf": 2.23606797749979}, "icepool.OutcomeCountGenerator.evaluate": {"tf": 1.4142135623730951}, "icepool.OutcomeCountGenerator.expand": {"tf": 1}, "icepool.OutcomeCountGenerator.sum": {"tf": 1}, "icepool.OutcomeCountGenerator.count": {"tf": 1}, "icepool.OutcomeCountGenerator.count_in": {"tf": 1}, "icepool.OutcomeCountGenerator.count_unique": {"tf": 1}, "icepool.OutcomeCountGenerator.contains_subset": {"tf": 1}, "icepool.OutcomeCountGenerator.intersection_size": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_matching_set": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_matching_set_and_outcome": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_straight": {"tf": 1.4142135623730951}, "icepool.OutcomeCountGenerator.largest_straight_and_outcome": {"tf": 1.4142135623730951}, "icepool.Pool.__init__": {"tf": 1.7320508075688772}, "icepool.Pool.unique_dice": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1.4142135623730951}, "icepool.Pool.lowest": {"tf": 1}, "icepool.Pool.highest": {"tf": 1}, "icepool.standard_pool": {"tf": 1}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.OutcomeCountEvaluator.order": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 1}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.sample": {"tf": 1}, "icepool.JointEvaluator.__init__": {"tf": 1}, "icepool.JointEvaluator.final_outcome": {"tf": 1}, "icepool.JointEvaluator.order": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1.4142135623730951}, "icepool.Deck.keys": {"tf": 1}, "icepool.Deck.values": {"tf": 1}, "icepool.Deck.items": {"tf": 1}, "icepool.Deck.deal": {"tf": 1}, "icepool.Deck.map": {"tf": 2.23606797749979}, "icepool.Deal.__init__": {"tf": 1}, "icepool.Deal.deck": {"tf": 1}, "icepool.Deal.outcomes": {"tf": 1}, "icepool.SuitGenerator.__init__": {"tf": 1}}, "df": 104}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.set_outcomes": {"tf": 1}, "icepool.reduce": {"tf": 1}, "icepool.accumulate": {"tf": 1}}, "df": 3}}}, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.accumulate": {"tf": 1}}, "df": 1}}}}}}}, "f": {"docs": {"icepool.Die.if_else": {"tf": 1.4142135623730951}}, "df": 1}}, "d": {"docs": {"icepool.bernoulli": {"tf": 1}, "icepool.coin": {"tf": 1}, "icepool.Population.quantile": {"tf": 1}, "icepool.Population.quantile_left": {"tf": 1}, "icepool.Population.quantile_right": {"tf": 1}}, "df": 5, "i": {"docs": {}, "df": 0, "e": {"docs": {"icepool.standard": {"tf": 1.7320508075688772}, "icepool.d": {"tf": 1.7320508075688772}, "icepool.bernoulli": {"tf": 1.7320508075688772}, "icepool.coin": {"tf": 1.7320508075688772}, "icepool.one_hot": {"tf": 1.7320508075688772}, "icepool.cartesian_product": {"tf": 2.449489742783178}, "icepool.Die.__init__": {"tf": 2.449489742783178}, "icepool.Die.unary_op": {"tf": 1.7320508075688772}, "icepool.Die.binary_op": {"tf": 2.449489742783178}, "icepool.Die.simplify": {"tf": 1.7320508075688772}, "icepool.Die.reroll": {"tf": 1.7320508075688772}, "icepool.Die.filter": {"tf": 1.7320508075688772}, "icepool.Die.truncate": {"tf": 1.7320508075688772}, "icepool.Die.clip": {"tf": 1.7320508075688772}, "icepool.Die.set_range": {"tf": 2.449489742783178}, "icepool.Die.set_outcomes": {"tf": 1.7320508075688772}, "icepool.Die.trim": {"tf": 1.7320508075688772}, "icepool.Die.map": {"tf": 3.4641016151377544}, "icepool.Die.map_and_time": {"tf": 3}, "icepool.Die.explode": {"tf": 1.7320508075688772}, "icepool.Die.if_else": {"tf": 3.4641016151377544}, "icepool.Die.is_in": {"tf": 1.7320508075688772}, "icepool.Die.count": {"tf": 1.7320508075688772}, "icepool.Die.count_in": {"tf": 1.7320508075688772}, "icepool.Die.keep_lowest": {"tf": 1.7320508075688772}, "icepool.Die.keep_highest": {"tf": 1.7320508075688772}, "icepool.Die.abs": {"tf": 1.7320508075688772}, "icepool.Die.round": {"tf": 1.7320508075688772}, "icepool.Die.trunc": {"tf": 1.7320508075688772}, "icepool.Die.floor": {"tf": 1.7320508075688772}, "icepool.Die.ceil": {"tf": 1.7320508075688772}, "icepool.Die.zero": {"tf": 1.7320508075688772}, "icepool.Die.cmp": {"tf": 1.7320508075688772}, "icepool.Die.sign": {"tf": 1.7320508075688772}, "icepool.from_cumulative_quantities": {"tf": 1.7320508075688772}, "icepool.from_rv": {"tf": 2.449489742783178}, "icepool.align": {"tf": 2.449489742783178}, "icepool.align_range": {"tf": 2.449489742783178}, "icepool.lowest": {"tf": 1.7320508075688772}, "icepool.highest": {"tf": 1.7320508075688772}, "icepool.min_outcome": {"tf": 1.7320508075688772}, "icepool.max_outcome": {"tf": 1.7320508075688772}, "icepool.reduce": {"tf": 3}, "icepool.accumulate": {"tf": 3}, "icepool.apply": {"tf": 3}, "icepool.apply_sorted.__init__": {"tf": 2.449489742783178}, "icepool.OutcomeCountGenerator.evaluate": {"tf": 1.7320508075688772}, "icepool.OutcomeCountGenerator.expand": {"tf": 1.7320508075688772}, "icepool.OutcomeCountGenerator.sum": {"tf": 1.7320508075688772}, "icepool.OutcomeCountGenerator.count": {"tf": 1.7320508075688772}, "icepool.OutcomeCountGenerator.count_in": {"tf": 1.7320508075688772}, "icepool.OutcomeCountGenerator.count_unique": {"tf": 1.7320508075688772}, "icepool.OutcomeCountGenerator.contains_subset": {"tf": 1.7320508075688772}, "icepool.OutcomeCountGenerator.intersection_size": {"tf": 1.7320508075688772}, "icepool.OutcomeCountGenerator.largest_matching_set": {"tf": 1.7320508075688772}, "icepool.OutcomeCountGenerator.largest_matching_set_and_outcome": {"tf": 1.7320508075688772}, "icepool.OutcomeCountGenerator.largest_straight": {"tf": 1.7320508075688772}, "icepool.OutcomeCountGenerator.largest_straight_and_outcome": {"tf": 1.7320508075688772}, "icepool.Pool.__init__": {"tf": 3}, "icepool.Pool.unique_dice": {"tf": 1.7320508075688772}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1.7320508075688772}, "icepool.Pool.lowest": {"tf": 1.7320508075688772}, "icepool.Pool.highest": {"tf": 1.7320508075688772}, "icepool.standard_pool": {"tf": 1}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 1.7320508075688772}}, "df": 65}, "c": {"docs": {}, "df": 0, "e": {"docs": {"icepool.cartesian_product": {"tf": 1}, "icepool.align": {"tf": 1}, "icepool.align_range": {"tf": 1}, "icepool.lowest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.min_outcome": {"tf": 1}, "icepool.max_outcome": {"tf": 1}, "icepool.reduce": {"tf": 1}, "icepool.accumulate": {"tf": 1}, "icepool.apply": {"tf": 1}, "icepool.apply_sorted.__init__": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}}, "df": 12}}}, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.map": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.if_else": {"tf": 1}, "icepool.apply": {"tf": 1}, "icepool.apply_sorted.__init__": {"tf": 1}}, "df": 8}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.from_rv": {"tf": 1}}, "df": 1}}}}}}}}}, "c": {"docs": {}, "df": 0, "k": {"docs": {"icepool.Deck.__init__": {"tf": 1.4142135623730951}, "icepool.Deck.map": {"tf": 2.449489742783178}, "icepool.Deal.__init__": {"tf": 1.7320508075688772}, "icepool.Deal.deck": {"tf": 1.4142135623730951}}, "df": 4}}, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Deck.deal": {"tf": 1.4142135623730951}}, "df": 1}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {"icepool.Die.keep_lowest": {"tf": 1}, "icepool.Die.keep_highest": {"tf": 1}, "icepool.lowest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.Pool.lowest": {"tf": 1}, "icepool.Pool.highest": {"tf": 1}}, "df": 6}}}}, "n": {"docs": {"icepool.bernoulli": {"tf": 1}, "icepool.coin": {"tf": 1}, "icepool.Population.quantile": {"tf": 1}, "icepool.Population.quantile_left": {"tf": 1}, "icepool.Population.quantile_right": {"tf": 1}}, "df": 5, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.reroll": {"tf": 1.7320508075688772}, "icepool.Die.filter": {"tf": 1.4142135623730951}, "icepool.Die.truncate": {"tf": 1.4142135623730951}, "icepool.Die.clip": {"tf": 1.4142135623730951}, "icepool.Die.set_range": {"tf": 2}, "icepool.Die.map": {"tf": 1.4142135623730951}, "icepool.Die.explode": {"tf": 1.4142135623730951}, "icepool.Die.if_else": {"tf": 1}, "icepool.Die.round": {"tf": 1.4142135623730951}, "icepool.Population.tuple_len": {"tf": 1}, "icepool.reduce": {"tf": 1}, "icepool.accumulate": {"tf": 1}, "icepool.apply": {"tf": 1}, "icepool.apply_sorted.__init__": {"tf": 1}, "icepool.OutcomeCountGenerator.sum": {"tf": 1}, "icepool.SumEvaluator.__init__": {"tf": 1}}, "df": 17, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.reroll": {"tf": 1}, "icepool.Die.map": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.if_else": {"tf": 1}, "icepool.reduce": {"tf": 1}, "icepool.accumulate": {"tf": 1}, "icepool.apply": {"tf": 1}, "icepool.apply_sorted.__init__": {"tf": 1}, "icepool.OutcomeCountGenerator.sum": {"tf": 1}, "icepool.SumEvaluator.__init__": {"tf": 1}}, "df": 11}}}}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die.round": {"tf": 1}}, "df": 1}}}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Population.mean": {"tf": 1}, "icepool.Population.variance": {"tf": 1}, "icepool.Population.standard_deviation": {"tf": 1}, "icepool.Population.sd": {"tf": 1}, "icepool.Population.standardized_moment": {"tf": 1}, "icepool.Population.skewness": {"tf": 1}, "icepool.Population.excess_kurtosis": {"tf": 1}, "icepool.Population.covariance": {"tf": 1}, "icepool.Population.correlation": {"tf": 1}}, "df": 9}}}}}}}, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"icepool.bernoulli": {"tf": 1}, "icepool.coin": {"tf": 1}, "icepool.one_hot": {"tf": 1}, "icepool.Die.reroll": {"tf": 1.4142135623730951}, "icepool.Die.filter": {"tf": 1.4142135623730951}, "icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Die.explode": {"tf": 1.4142135623730951}, "icepool.Die.is_in": {"tf": 1}, "icepool.Die.equals": {"tf": 1.4142135623730951}, "icepool.Population.is_empty": {"tf": 1}, "icepool.Population.has_zero_quantities": {"tf": 1}, "icepool.Population.probabilities": {"tf": 1}, "icepool.Population.probabilities_le": {"tf": 1}, "icepool.Population.probabilities_ge": {"tf": 1}, "icepool.Population.probabilities_lt": {"tf": 1}, "icepool.Population.probabilities_gt": {"tf": 1}, "icepool.from_cumulative_quantities": {"tf": 1}, "icepool.OutcomeCountGenerator.expand": {"tf": 1}, "icepool.OutcomeCountGenerator.contains_subset": {"tf": 1}, "icepool.ExpandEvaluator.__init__": {"tf": 1}, "icepool.Deck.map": {"tf": 1}}, "df": 22}}}}, "t": {"docs": {"icepool.Die.__init__": {"tf": 2}, "icepool.Die.keys": {"tf": 1}, "icepool.Die.items": {"tf": 1}, "icepool.Die.simplify": {"tf": 1}, "icepool.Die.reroll": {"tf": 1.4142135623730951}, "icepool.Die.filter": {"tf": 1.4142135623730951}, "icepool.Die.truncate": {"tf": 1}, "icepool.Die.clip": {"tf": 1}, "icepool.Die.set_outcomes": {"tf": 1.4142135623730951}, "icepool.Die.trim": {"tf": 1}, "icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Die.explode": {"tf": 1.4142135623730951}, "icepool.Die.is_in": {"tf": 1}, "icepool.Die.count_in": {"tf": 1}, "icepool.Die.pool": {"tf": 1}, "icepool.Die.keep_highest": {"tf": 1}, "icepool.Die.abs": {"tf": 1}, "icepool.Die.zero": {"tf": 1}, "icepool.Die.zero_outcome": {"tf": 1}, "icepool.Population.keys": {"tf": 1}, "icepool.Population.items": {"tf": 1}, "icepool.Population.outcomes": {"tf": 1}, "icepool.Population.min_outcome": {"tf": 1}, "icepool.Population.max_outcome": {"tf": 1}, "icepool.Population.nearest_le": {"tf": 1}, "icepool.Population.nearest_ge": {"tf": 1}, "icepool.Population.median_left": {"tf": 1}, "icepool.Population.median_right": {"tf": 1}, "icepool.Population.quantile_left": {"tf": 1}, "icepool.Population.quantile_right": {"tf": 1}, "icepool.Population.sample": {"tf": 1}, "icepool.CountsKeysView.__init__": {"tf": 1}, "icepool.from_cumulative_quantities": {"tf": 1.4142135623730951}, "icepool.align": {"tf": 1.7320508075688772}, "icepool.min_outcome": {"tf": 1.7320508075688772}, "icepool.max_outcome": {"tf": 1.7320508075688772}, "icepool.reduce": {"tf": 2.8284271247461903}, "icepool.accumulate": {"tf": 2.8284271247461903}, "icepool.apply": {"tf": 2.23606797749979}, "icepool.apply_sorted.__init__": {"tf": 2}, "icepool.OutcomeCountGenerator.outcomes": {"tf": 1}, "icepool.OutcomeCountGenerator.evaluate": {"tf": 1}, "icepool.OutcomeCountGenerator.min_outcome": {"tf": 1}, "icepool.OutcomeCountGenerator.max_outcome": {"tf": 1}, "icepool.OutcomeCountGenerator.expand": {"tf": 1}, "icepool.OutcomeCountGenerator.sum": {"tf": 1.4142135623730951}, "icepool.OutcomeCountGenerator.count_in": {"tf": 1}, "icepool.OutcomeCountGenerator.contains_subset": {"tf": 1.4142135623730951}, "icepool.OutcomeCountGenerator.intersection_size": {"tf": 1.4142135623730951}, "icepool.OutcomeCountGenerator.largest_matching_set_and_outcome": {"tf": 1}, "icepool.Pool.__init__": {"tf": 2.449489742783178}, "icepool.Pool.unique_dice": {"tf": 1}, "icepool.Pool.outcomes": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1.4142135623730951}, "icepool.Pool.min_outcome": {"tf": 1}, "icepool.Pool.max_outcome": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.OutcomeCountEvaluator.order": {"tf": 1}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.sample": {"tf": 1.7320508075688772}, "icepool.Deck.__init__": {"tf": 1.4142135623730951}, "icepool.Deck.keys": {"tf": 1}, "icepool.Deck.items": {"tf": 1}, "icepool.Deck.deal": {"tf": 1}, "icepool.Deck.map": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1}, "icepool.Deal.deck": {"tf": 1}, "icepool.Deal.outcomes": {"tf": 1}}, "df": 71, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.one_hot": {"tf": 1}, "icepool.cartesian_product": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Die.key_tuple": {"tf": 1}, "icepool.Population.mode": {"tf": 1}, "icepool.Population.covariance": {"tf": 1}, "icepool.Population.correlation": {"tf": 1}, "icepool.align": {"tf": 1}, "icepool.align_range": {"tf": 1}, "icepool.OutcomeCountGenerator.expand": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_matching_set_and_outcome": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_straight_and_outcome": {"tf": 1}, "icepool.OutcomeCountGenerator.sample": {"tf": 1.4142135623730951}, "icepool.Pool.sorted_roll_counts": {"tf": 1}, "icepool.Deal.hand_sizes": {"tf": 1}}, "df": 15}}}}, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.cartesian_product": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}}, "df": 3}}}}, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.if_else": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.is_in": {"tf": 1}, "icepool.Die.count": {"tf": 1}, "icepool.Die.count_in": {"tf": 1}, "icepool.OutcomeCountGenerator.count": {"tf": 1}, "icepool.OutcomeCountGenerator.count_in": {"tf": 1}}, "df": 5, "s": {"docs": {"icepool.OutcomeCountGenerator.contains_subset": {"tf": 1}, "icepool.OutcomeCountGenerator.intersection_size": {"tf": 1}}, "df": 2}}}}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"icepool.cartesian_product": {"tf": 1}, "icepool.Die.truncate": {"tf": 1.4142135623730951}, "icepool.Die.clip": {"tf": 1.4142135623730951}, "icepool.Die.set_range": {"tf": 1.4142135623730951}, "icepool.Die.if_else": {"tf": 1.4142135623730951}, "icepool.Population.nearest_le": {"tf": 1}, "icepool.Population.nearest_ge": {"tf": 1}, "icepool.Population.quantity": {"tf": 1}, "icepool.Population.quantity_ne": {"tf": 1}, "icepool.Population.quantity_le": {"tf": 1}, "icepool.Population.quantity_lt": {"tf": 1}, "icepool.Population.quantity_ge": {"tf": 1}, "icepool.Population.quantity_gt": {"tf": 1}, "icepool.Population.probability": {"tf": 1}, "icepool.OutcomeCountGenerator.evaluate": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_straight": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_straight_and_outcome": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.OutcomeCountEvaluator.order": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 1}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 1}, "icepool.OutcomeCountEvaluator.sample": {"tf": 1}, "icepool.JointEvaluator.__init__": {"tf": 1}, "icepool.JointEvaluator.next_state": {"tf": 1}, "icepool.JointEvaluator.final_outcome": {"tf": 1}, "icepool.JointEvaluator.order": {"tf": 1}, "icepool.SumEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}, "icepool.SuitGenerator.__init__": {"tf": 1}}, "df": 31, "s": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.set_outcomes": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.from_cumulative_quantities": {"tf": 1}, "icepool.from_rv": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}}, "df": 8}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.OutcomeCountGenerator.evaluate": {"tf": 1}, "icepool.JointEvaluator.__init__": {"tf": 1}}, "df": 2}}}}}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.OutcomeCountGenerator.largest_straight": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_straight_and_outcome": {"tf": 1}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.OutcomeCountEvaluator.order": {"tf": 1}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 1}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 1}, "icepool.OutcomeCountEvaluator.sample": {"tf": 1}, "icepool.JointEvaluator.final_outcome": {"tf": 1}, "icepool.JointEvaluator.order": {"tf": 1}, "icepool.SuitGenerator.__init__": {"tf": 1}}, "df": 11}}}}}}}}}}}}}}}}}}}}, "p": {"docs": {"icepool.Die.unary_op": {"tf": 1}, "icepool.Die.binary_op": {"tf": 1}, "icepool.Population.unary_op_non_elementwise": {"tf": 1}}, "df": 3, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Population.nearest_le": {"tf": 1}, "icepool.Population.nearest_ge": {"tf": 1}}, "df": 2}}}}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die.binary_op": {"tf": 1}, "icepool.Die.cmp": {"tf": 1}, "icepool.Die.equals": {"tf": 1}, "icepool.Population.kolmogorov_smirnov": {"tf": 1}, "icepool.Population.cramer_von_mises": {"tf": 1}}, "df": 5}}}}, "r": {"docs": {"icepool.OutcomeCountGenerator.evaluate": {"tf": 1}}, "df": 1, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.OutcomeCountEvaluator.order": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Outcome.__init__": {"tf": 1}, "icepool.Die.unary_op": {"tf": 1}, "icepool.Die.binary_op": {"tf": 1}, "icepool.Population.unary_op_non_elementwise": {"tf": 1}}, "df": 4}}}, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Die.__init__": {"tf": 2}, "icepool.Die.map": {"tf": 2.449489742783178}, "icepool.Die.if_else": {"tf": 1.4142135623730951}, "icepool.apply": {"tf": 2}, "icepool.apply_sorted.__init__": {"tf": 2}}, "df": 5}}}}, "n": {"docs": {}, "df": 0, "y": {"docs": {"icepool.SumEvaluator.__init__": {"tf": 2}}, "df": 1}}}, "k": {"docs": {"icepool.Population.standardized_moment": {"tf": 1}}, "df": 1, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Outcome.__init__": {"tf": 1}, "icepool.Die.unary_op": {"tf": 1}, "icepool.Die.binary_op": {"tf": 1}, "icepool.Population.unary_op_non_elementwise": {"tf": 1}, "icepool.Population.format": {"tf": 1}, "icepool.from_rv": {"tf": 1}}, "df": 6}}}}}, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {"icepool.Die.keep_lowest": {"tf": 1}, "icepool.Die.keep_highest": {"tf": 1}, "icepool.lowest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.Pool.lowest": {"tf": 1}, "icepool.Pool.highest": {"tf": 1}}, "df": 6}}}}, "u": {"docs": {"icepool.Die.unary_op": {"tf": 1.4142135623730951}, "icepool.Die.binary_op": {"tf": 1.4142135623730951}, "icepool.Die.map": {"tf": 2.6457513110645907}, "icepool.Die.map_and_time": {"tf": 2.23606797749979}, "icepool.Die.if_else": {"tf": 2.6457513110645907}, "icepool.OutcomeCountGenerator.evaluate": {"tf": 1.7320508075688772}, "icepool.OutcomeCountGenerator.sum": {"tf": 1.7320508075688772}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 1}, "icepool.Deck.map": {"tf": 2.23606797749979}}, "df": 10, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Die.__init__": {"tf": 2}, "icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.map": {"tf": 2}, "icepool.Die.map_and_time": {"tf": 1.7320508075688772}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.if_else": {"tf": 1.7320508075688772}, "icepool.Die.pool": {"tf": 1}, "icepool.from_rv": {"tf": 1}, "icepool.align": {"tf": 1}, "icepool.min_outcome": {"tf": 1}, "icepool.max_outcome": {"tf": 1}, "icepool.reduce": {"tf": 1.4142135623730951}, "icepool.accumulate": {"tf": 1.4142135623730951}, "icepool.apply": {"tf": 1.4142135623730951}, "icepool.apply_sorted.__init__": {"tf": 1.4142135623730951}, "icepool.OutcomeCountGenerator.evaluate": {"tf": 1}, "icepool.OutcomeCountGenerator.sum": {"tf": 1}, "icepool.OutcomeCountGenerator.contains_subset": {"tf": 1}, "icepool.OutcomeCountGenerator.intersection_size": {"tf": 1}, "icepool.Pool.__init__": {"tf": 2}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1.4142135623730951}, "icepool.standard_pool": {"tf": 1}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 1}, "icepool.OutcomeCountEvaluator.sample": {"tf": 1}, "icepool.SumEvaluator.__init__": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1.7320508075688772}, "icepool.Deck.map": {"tf": 1.7320508075688772}}, "df": 28}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"icepool.OutcomeCountGenerator.expand": {"tf": 1}, "icepool.ExpandEvaluator.__init__": {"tf": 1}}, "df": 2}}}}}}, "c": {"docs": {"icepool.Population.unary_op_non_elementwise": {"tf": 1.4142135623730951}}, "df": 1, "o": {"docs": {"icepool.OutcomeCountGenerator.outcomes": {"tf": 1}, "icepool.OutcomeCountGenerator.evaluate": {"tf": 1}, "icepool.OutcomeCountGenerator.min_outcome": {"tf": 1}, "icepool.OutcomeCountGenerator.max_outcome": {"tf": 1}, "icepool.OutcomeCountGenerator.expand": {"tf": 1}, "icepool.OutcomeCountGenerator.sum": {"tf": 1.4142135623730951}, "icepool.OutcomeCountGenerator.count_in": {"tf": 1}, "icepool.OutcomeCountGenerator.contains_subset": {"tf": 1.4142135623730951}, "icepool.OutcomeCountGenerator.intersection_size": {"tf": 1.4142135623730951}, "icepool.OutcomeCountGenerator.largest_matching_set_and_outcome": {"tf": 1}, "icepool.Pool.__init__": {"tf": 2.449489742783178}, "icepool.Pool.unique_dice": {"tf": 1}, "icepool.Pool.outcomes": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1.4142135623730951}, "icepool.Pool.min_outcome": {"tf": 1}, "icepool.Pool.max_outcome": {"tf": 1}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1}, "icepool.Deal.deck": {"tf": 1}, "icepool.Deal.outcomes": {"tf": 1}}, "df": 21, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.__init__": {"tf": 1.4142135623730951}, "icepool.Die.map": {"tf": 1.7320508075688772}, "icepool.Die.map_and_time": {"tf": 1.4142135623730951}, "icepool.Die.if_else": {"tf": 1}, "icepool.apply": {"tf": 1.4142135623730951}, "icepool.apply_sorted.__init__": {"tf": 1.4142135623730951}, "icepool.Deck.__init__": {"tf": 1}, "icepool.Deck.map": {"tf": 1.4142135623730951}}, "df": 8}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die.is_in": {"tf": 1}, "icepool.Die.count_in": {"tf": 1}, "icepool.OutcomeCountGenerator.count_in": {"tf": 1}}, "df": 3}}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {"icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.OutcomeCountEvaluator.order": {"tf": 1}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.sample": {"tf": 1.7320508075688772}}, "df": 6}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.OutcomeCountGenerator.evaluate": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_straight": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_straight_and_outcome": {"tf": 1}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.OutcomeCountEvaluator.order": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 1}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 1}, "icepool.OutcomeCountEvaluator.sample": {"tf": 1}, "icepool.JointEvaluator.__init__": {"tf": 1}, "icepool.JointEvaluator.final_outcome": {"tf": 1}, "icepool.JointEvaluator.order": {"tf": 1}, "icepool.SumEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}, "icepool.SuitGenerator.__init__": {"tf": 1}}, "df": 15, "s": {"docs": {"icepool.Die.keys": {"tf": 1}, "icepool.Die.values": {"tf": 1}, "icepool.Die.items": {"tf": 1}, "icepool.Population.keys": {"tf": 1}, "icepool.Population.values": {"tf": 1}, "icepool.Population.items": {"tf": 1}, "icepool.Population.outcomes": {"tf": 1}, "icepool.Population.quantities": {"tf": 1}, "icepool.CountsKeysView.__init__": {"tf": 1.7320508075688772}, "icepool.CountsValuesView.__init__": {"tf": 1.7320508075688772}, "icepool.CountsItemsView.__init__": {"tf": 1.7320508075688772}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.JointEvaluator.next_state": {"tf": 1}, "icepool.Deck.keys": {"tf": 1}, "icepool.Deck.values": {"tf": 1}, "icepool.Deck.items": {"tf": 1}, "icepool.Deal.outcomes": {"tf": 1}}, "df": 18, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {"icepool.Die.keys": {"tf": 1}, "icepool.Population.keys": {"tf": 1}, "icepool.Population.outcomes": {"tf": 1}, "icepool.Deck.keys": {"tf": 1}, "icepool.Deal.outcomes": {"tf": 1}}, "df": 5}}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {"icepool.Die.values": {"tf": 1}, "icepool.Population.values": {"tf": 1}, "icepool.Population.quantities": {"tf": 1}, "icepool.Deck.values": {"tf": 1}}, "df": 4}}}}}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {"icepool.Die.items": {"tf": 1}, "icepool.Population.items": {"tf": 1}, "icepool.Deck.items": {"tf": 1}}, "df": 3}}}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.OutcomeCountGenerator.contains_subset": {"tf": 1}, "icepool.OutcomeCountGenerator.intersection_size": {"tf": 1}, "icepool.Pool.unique_dice": {"tf": 1}, "icepool.standard_pool": {"tf": 1}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 1}}, "df": 9}}}}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.unary_op": {"tf": 1}, "icepool.Die.binary_op": {"tf": 1}, "icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Population.unary_op_non_elementwise": {"tf": 1}, "icepool.reduce": {"tf": 1}, "icepool.accumulate": {"tf": 1}, "icepool.apply": {"tf": 1}, "icepool.apply_sorted.__init__": {"tf": 1}, "icepool.OutcomeCountGenerator.evaluate": {"tf": 1}, "icepool.OutcomeCountGenerator.sum": {"tf": 1}, "icepool.SumEvaluator.__init__": {"tf": 1}, "icepool.Deck.map": {"tf": 1}}, "df": 16}}}}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"icepool.from_cumulative_quantities": {"tf": 1}}, "df": 1}}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.__init__": {"tf": 1.4142135623730951}, "icepool.Die.map": {"tf": 1.7320508075688772}, "icepool.Die.map_and_time": {"tf": 1.4142135623730951}, "icepool.Die.if_else": {"tf": 1}, "icepool.apply": {"tf": 1.4142135623730951}, "icepool.apply_sorted.__init__": {"tf": 1.4142135623730951}, "icepool.Deck.__init__": {"tf": 1}, "icepool.Deck.map": {"tf": 1.4142135623730951}}, "df": 8}}}}}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Deck.map": {"tf": 1}}, "df": 3}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}}, "df": 2}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Population.mean": {"tf": 1}, "icepool.Population.variance": {"tf": 1}, "icepool.Population.standard_deviation": {"tf": 1}, "icepool.Population.sd": {"tf": 1}, "icepool.Population.standardized_moment": {"tf": 1}, "icepool.Population.skewness": {"tf": 1}, "icepool.Population.excess_kurtosis": {"tf": 1}, "icepool.Population.covariance": {"tf": 1}, "icepool.Population.correlation": {"tf": 1}}, "df": 9}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"icepool.from_cumulative_quantities": {"tf": 1}}, "df": 1}}}}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Pool.set_sorted_roll_counts": {"tf": 1}}, "df": 1, "s": {"docs": {"icepool.Die.count": {"tf": 1}, "icepool.Die.count_in": {"tf": 1}, "icepool.Die.pool": {"tf": 1}, "icepool.Die.keep_lowest": {"tf": 1}, "icepool.Die.keep_highest": {"tf": 1}}, "df": 5}}}}, "v": {"docs": {"icepool.from_rv": {"tf": 1}}, "df": 1}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {"icepool.OutcomeCountGenerator.sum": {"tf": 1}, "icepool.SumEvaluator.__init__": {"tf": 1}}, "df": 2, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.OutcomeCountGenerator.sum": {"tf": 1}, "icepool.OutcomeCountGenerator.contains_subset": {"tf": 1}, "icepool.OutcomeCountGenerator.intersection_size": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1.7320508075688772}, "icepool.standard_pool": {"tf": 1}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 1}, "icepool.OutcomeCountEvaluator.sample": {"tf": 1}, "icepool.SumEvaluator.__init__": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}, "icepool.Deck.map": {"tf": 1}}, "df": 13}}}}}, "x": {"docs": {"icepool.Die.truncate": {"tf": 1}, "icepool.Die.clip": {"tf": 1}, "icepool.Die.set_range": {"tf": 1}}, "df": 3}}, "i": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Die.truncate": {"tf": 1}, "icepool.Die.clip": {"tf": 1}, "icepool.Die.set_range": {"tf": 1}}, "df": 3}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.map": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.if_else": {"tf": 1}, "icepool.apply": {"tf": 1}, "icepool.apply_sorted.__init__": {"tf": 1}}, "df": 6}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.OutcomeCountGenerator.evaluate": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.order": {"tf": 1}, "icepool.JointEvaluator.__init__": {"tf": 1}}, "df": 3, "s": {"docs": {"icepool.JointEvaluator.__init__": {"tf": 1}}, "df": 1}}}}}}}}}}, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.if_else": {"tf": 1}, "icepool.Die.equals": {"tf": 1}, "icepool.Population.probabilities": {"tf": 1}, "icepool.Population.probabilities_le": {"tf": 1}, "icepool.Population.probabilities_ge": {"tf": 1}, "icepool.Population.probabilities_lt": {"tf": 1}, "icepool.Population.probabilities_gt": {"tf": 1}, "icepool.from_cumulative_quantities": {"tf": 1}, "icepool.OutcomeCountGenerator.expand": {"tf": 1}, "icepool.ExpandEvaluator.__init__": {"tf": 1}, "icepool.Deck.map": {"tf": 1}}, "df": 16}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Population.probabilities": {"tf": 1}, "icepool.Population.probabilities_le": {"tf": 1}, "icepool.Population.probabilities_ge": {"tf": 1}, "icepool.Population.probabilities_lt": {"tf": 1}, "icepool.Population.probabilities_gt": {"tf": 1}, "icepool.Population.probability": {"tf": 1}, "icepool.Population.kolmogorov_smirnov": {"tf": 1}, "icepool.Population.cramer_von_mises": {"tf": 1}, "icepool.Population.mean": {"tf": 1}, "icepool.Population.variance": {"tf": 1}, "icepool.Population.standard_deviation": {"tf": 1}, "icepool.Population.sd": {"tf": 1}, "icepool.Population.standardized_moment": {"tf": 1}, "icepool.Population.skewness": {"tf": 1}, "icepool.Population.excess_kurtosis": {"tf": 1}, "icepool.Population.covariance": {"tf": 1}, "icepool.Population.correlation": {"tf": 1}, "icepool.from_rv": {"tf": 1.4142135623730951}}, "df": 18}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Population.format": {"tf": 1}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"icepool.reduce": {"tf": 1}, "icepool.accumulate": {"tf": 1}, "icepool.apply": {"tf": 1}, "icepool.apply_sorted.__init__": {"tf": 1}, "icepool.OutcomeCountGenerator.evaluate": {"tf": 1}}, "df": 5}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.JointEvaluator.final_outcome": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1}}, "df": 4}}}}}, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Die.pool": {"tf": 1.4142135623730951}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1.4142135623730951}, "icepool.standard_pool": {"tf": 1.4142135623730951}}, "df": 3}}, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Population.mean": {"tf": 1.4142135623730951}, "icepool.Population.variance": {"tf": 1.4142135623730951}, "icepool.Population.standard_deviation": {"tf": 1.4142135623730951}, "icepool.Population.sd": {"tf": 1.4142135623730951}, "icepool.Population.standardized_moment": {"tf": 1.4142135623730951}, "icepool.Population.skewness": {"tf": 1.4142135623730951}, "icepool.Population.excess_kurtosis": {"tf": 1.4142135623730951}, "icepool.Population.covariance": {"tf": 1.4142135623730951}, "icepool.Population.correlation": {"tf": 1.4142135623730951}}, "df": 9}}}}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Population.probabilities": {"tf": 1}, "icepool.Population.probabilities_le": {"tf": 1}, "icepool.Population.probabilities_ge": {"tf": 1}, "icepool.Population.probabilities_lt": {"tf": 1}, "icepool.Population.probabilities_gt": {"tf": 1}}, "df": 5}}}}}}}, "j": {"docs": {"icepool.Population.covariance": {"tf": 1}, "icepool.Population.correlation": {"tf": 1}}, "df": 2}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool.from_cumulative_quantities": {"tf": 1}}, "df": 1}}}}}}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.OutcomeCountGenerator.largest_straight": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_straight_and_outcome": {"tf": 1}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.OutcomeCountEvaluator.order": {"tf": 1}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 1}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 1}, "icepool.OutcomeCountEvaluator.sample": {"tf": 1}, "icepool.JointEvaluator.final_outcome": {"tf": 1}, "icepool.JointEvaluator.order": {"tf": 1}, "icepool.SuitGenerator.__init__": {"tf": 1}}, "df": 11, "s": {"docs": {"icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.OutcomeCountEvaluator.order": {"tf": 1}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 1}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 1}, "icepool.OutcomeCountEvaluator.sample": {"tf": 1}, "icepool.JointEvaluator.final_outcome": {"tf": 1}, "icepool.JointEvaluator.order": {"tf": 1}}, "df": 8}}}}}}}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.OutcomeCountEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}}, "df": 2}}}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Deck.deal": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1}}, "df": 2}}}}}}, "bases": {"root": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Outcome": {"tf": 1}, "icepool.OutcomeCountEvaluator": {"tf": 1}, "icepool.JointEvaluator": {"tf": 1}, "icepool.SumEvaluator": {"tf": 1}}, "df": 4, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Outcome": {"tf": 1.4142135623730951}, "icepool.Population": {"tf": 1}, "icepool.CountsKeysView": {"tf": 1.4142135623730951}, "icepool.CountsValuesView": {"tf": 1.4142135623730951}, "icepool.CountsItemsView": {"tf": 1.4142135623730951}, "icepool.OutcomeCountGenerator": {"tf": 1}, "icepool.OutcomeCountEvaluator": {"tf": 1}, "icepool.SumEvaluator": {"tf": 1}, "icepool.SuitGenerator": {"tf": 1}}, "df": 9}}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.JointEvaluator": {"tf": 1}, "icepool.ExpandEvaluator": {"tf": 1}}, "df": 2}}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Outcome": {"tf": 1}}, "df": 1}}}}}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Outcome": {"tf": 1}}, "df": 1}}}}}}}, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Die": {"tf": 1}, "icepool.Deck": {"tf": 1}}, "df": 2, "[": {"docs": {}, "df": 0, "~": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die": {"tf": 1}, "icepool.Deck": {"tf": 1}}, "df": 2}}}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {"icepool.OutcomeCountGenerator": {"tf": 1}, "icepool.Pool": {"tf": 1}, "icepool.OutcomeCountEvaluator": {"tf": 1}, "icepool.SumEvaluator": {"tf": 1}, "icepool.Deal": {"tf": 1}, "icepool.SuitGenerator": {"tf": 1}}, "df": 6, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {"icepool.Outcome": {"tf": 1}, "icepool.OutcomeCountEvaluator": {"tf": 1}, "icepool.JointEvaluator": {"tf": 1}, "icepool.SumEvaluator": {"tf": 1}}, "df": 4}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Pool": {"tf": 1}, "icepool.JointEvaluator": {"tf": 1}, "icepool.ExpandEvaluator": {"tf": 1}, "icepool.Deal": {"tf": 1}}, "df": 4}}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Die": {"tf": 1}, "icepool.Pool": {"tf": 1}, "icepool.JointEvaluator": {"tf": 1}, "icepool.ExpandEvaluator": {"tf": 1}, "icepool.Deck": {"tf": 1}, "icepool.Deal": {"tf": 1}}, "df": 6}}}}}}, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Population": {"tf": 1}, "icepool.CountsItemsView": {"tf": 1.4142135623730951}}, "df": 2, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {"icepool.Order": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "~": {"docs": {}, "df": 0, "t": {"docs": {"icepool.CountsItemsView": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "c": {"docs": {"icepool.Population": {"tf": 1.4142135623730951}, "icepool.OutcomeCountGenerator": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator": {"tf": 1.4142135623730951}, "icepool.SumEvaluator": {"tf": 1.4142135623730951}, "icepool.SuitGenerator": {"tf": 1.4142135623730951}}, "df": 5}}, "n": {"docs": {}, "df": 0, "y": {"docs": {"icepool.ExpandEvaluator": {"tf": 1}}, "df": 1}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "~": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Population": {"tf": 1}}, "df": 1}}}}}}}}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "~": {"docs": {}, "df": 0, "t": {"docs": {"icepool.CountsKeysView": {"tf": 1}}, "df": 1}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "~": {"docs": {}, "df": 0, "t": {"docs": {"icepool.CountsKeysView": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.CountsValuesView": {"tf": 1}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "~": {"docs": {}, "df": 0, "t": {"docs": {"icepool.CountsItemsView": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.CountsValuesView": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"icepool.OutcomeCountEvaluator": {"tf": 1}, "icepool.SumEvaluator": {"tf": 1}}, "df": 2, "[": {"docs": {}, "df": 0, "+": {"docs": {}, "df": 0, "t": {"docs": {"icepool.OutcomeCountGenerator": {"tf": 1}, "icepool.SuitGenerator": {"tf": 1}}, "df": 2}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Pool": {"tf": 1}, "icepool.Deal": {"tf": 1}}, "df": 2}}}}}}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Pool": {"tf": 1}, "icepool.JointEvaluator": {"tf": 1}, "icepool.ExpandEvaluator": {"tf": 1}, "icepool.Deal": {"tf": 1}}, "df": 4, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "+": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Pool": {"tf": 1}, "icepool.Deal": {"tf": 1}}, "df": 2}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.JointEvaluator": {"tf": 1}}, "df": 1, "[": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.ExpandEvaluator": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}}}}}}}}}}, "u": {"docs": {"icepool.OutcomeCountEvaluator": {"tf": 1}, "icepool.SumEvaluator": {"tf": 1}}, "df": 2}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {"icepool.Order": {"tf": 1}}, "df": 1}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.JointEvaluator": {"tf": 1}, "icepool.ExpandEvaluator": {"tf": 1}}, "df": 2}}}}}}}}}}}, "doc": {"root": {"0": {"docs": {"icepool.bernoulli": {"tf": 1}, "icepool.coin": {"tf": 1}, "icepool.Die.zero_outcome": {"tf": 1}, "icepool.Die.cmp": {"tf": 1}, "icepool.Die.sign": {"tf": 2.449489742783178}, "icepool.Population.quantity": {"tf": 1}, "icepool.Population.probabilities": {"tf": 1.4142135623730951}, "icepool.Population.probabilities_le": {"tf": 1.4142135623730951}, "icepool.Population.probabilities_ge": {"tf": 1.4142135623730951}, "icepool.Population.probabilities_lt": {"tf": 1.4142135623730951}, "icepool.Population.probabilities_gt": {"tf": 1.4142135623730951}, "icepool.Population.probability": {"tf": 1.4142135623730951}, "icepool.Population.format": {"tf": 1.4142135623730951}, "icepool.apply": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 2.8284271247461903}, "icepool.OutcomeCountEvaluator.order": {"tf": 1}, "icepool.SumEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.order": {"tf": 1}}, "df": 18}, "1": {"0": {"0": {"docs": {"icepool.Population.probabilities": {"tf": 1}, "icepool.Population.probabilities_le": {"tf": 1}, "icepool.Population.probabilities_ge": {"tf": 1}, "icepool.Population.probabilities_lt": {"tf": 1}, "icepool.Population.probabilities_gt": {"tf": 1}, "icepool.Population.format": {"tf": 1}}, "df": 6}, "docs": {"icepool.one_hot": {"tf": 1}}, "df": 1, "d": {"6": {"docs": {"icepool.one_hot": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "*": {"docs": {}, "df": 0, "*": {"3": {"0": {"docs": {"icepool.Population.format": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}}, "2": {"docs": {"icepool.Die.__init__": {"tf": 1}}, "df": 1}, "docs": {"icepool.standard": {"tf": 1.4142135623730951}, "icepool.d": {"tf": 1.4142135623730951}, "icepool.cartesian_product": {"tf": 1.7320508075688772}, "icepool.Die.__init__": {"tf": 2}, "icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Die.pool": {"tf": 1.4142135623730951}, "icepool.Die.cmp": {"tf": 1.4142135623730951}, "icepool.Die.sign": {"tf": 1.4142135623730951}, "icepool.Population.probabilities": {"tf": 1}, "icepool.Population.probabilities_le": {"tf": 1}, "icepool.Population.probabilities_ge": {"tf": 1}, "icepool.Population.probabilities_lt": {"tf": 1}, "icepool.Population.probabilities_gt": {"tf": 1}, "icepool.Population.format": {"tf": 1}, "icepool.apply": {"tf": 1}, "icepool.OutcomeCountGenerator.intersection_size": {"tf": 1.7320508075688772}, "icepool.Pool.set_sorted_roll_counts": {"tf": 4.358898943540674}, "icepool.OutcomeCountEvaluator": {"tf": 1}, "icepool.OutcomeCountEvaluator.order": {"tf": 1.4142135623730951}, "icepool.SumEvaluator.order": {"tf": 1.4142135623730951}, "icepool.ExpandEvaluator.order": {"tf": 1.4142135623730951}}, "df": 22, ":": {"1": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.equals": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0}, "s": {"docs": {"icepool.OutcomeCountEvaluator": {"tf": 1}}, "df": 1}}, "2": {"docs": {"icepool.cartesian_product": {"tf": 1}, "icepool.Die.__init__": {"tf": 2}, "icepool.apply_sorted.__init__": {"tf": 1}, "icepool.OutcomeCountGenerator.intersection_size": {"tf": 2}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator": {"tf": 1}, "icepool.SuitGenerator": {"tf": 1}}, "df": 7, ":": {"1": {"docs": {"icepool.Die.__init__": {"tf": 1}}, "df": 1}, "2": {"docs": {"icepool.Die.equals": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "s": {"docs": {"icepool.OutcomeCountEvaluator": {"tf": 1}}, "df": 1}}, "3": {"6": {"docs": {"icepool.Die.__init__": {"tf": 1}}, "df": 1}, "docs": {"icepool.Die.__init__": {"tf": 2.449489742783178}, "icepool.OutcomeCountGenerator.intersection_size": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator": {"tf": 1}}, "df": 4, ":": {"1": {"docs": {"icepool.Die.__init__": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "s": {"docs": {"icepool.OutcomeCountEvaluator": {"tf": 1}}, "df": 1}}, "4": {"docs": {"icepool.Die.__init__": {"tf": 2.23606797749979}, "icepool.OutcomeCountEvaluator": {"tf": 1}}, "df": 2, ":": {"1": {"docs": {"icepool.Die.__init__": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "s": {"docs": {"icepool.OutcomeCountEvaluator": {"tf": 1}}, "df": 1}}, "5": {"docs": {"icepool.Die.__init__": {"tf": 2}, "icepool.Die.pool": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1}, "icepool.OutcomeCountEvaluator": {"tf": 1}}, "df": 4, ":": {"1": {"docs": {"icepool.Die.__init__": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "d": {"6": {"docs": {"icepool.Die.pool": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "s": {"docs": {"icepool.OutcomeCountEvaluator": {"tf": 1}}, "df": 1}}, "6": {"docs": {"icepool.standard": {"tf": 1.7320508075688772}, "icepool.d": {"tf": 1.7320508075688772}, "icepool.one_hot": {"tf": 1}, "icepool.cartesian_product": {"tf": 1.4142135623730951}, "icepool.Die.__init__": {"tf": 3}, "icepool.Again": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator": {"tf": 1}}, "df": 7, ":": {"1": {"docs": {"icepool.Die.__init__": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "s": {"docs": {"icepool.OutcomeCountEvaluator": {"tf": 1}}, "df": 1}}, "docs": {"icepool": {"tf": 5.5677643628300215}, "icepool.standard": {"tf": 5.830951894845301}, "icepool.d": {"tf": 5.830951894845301}, "icepool.bernoulli": {"tf": 4.358898943540674}, "icepool.coin": {"tf": 4.358898943540674}, "icepool.one_hot": {"tf": 4.47213595499958}, "icepool.cartesian_product": {"tf": 3.872983346207417}, "icepool.Outcome": {"tf": 1.7320508075688772}, "icepool.Outcome.__init__": {"tf": 1.7320508075688772}, "icepool.Die": {"tf": 6.557438524302}, "icepool.Die.__init__": {"tf": 16.46207763315433}, "icepool.Die.unary_op": {"tf": 7.416198487095663}, "icepool.Die.binary_op": {"tf": 9.38083151964686}, "icepool.Die.keys": {"tf": 1.7320508075688772}, "icepool.Die.values": {"tf": 1.7320508075688772}, "icepool.Die.items": {"tf": 1.7320508075688772}, "icepool.Die.simplify": {"tf": 1.7320508075688772}, "icepool.Die.reroll": {"tf": 7.745966692414834}, "icepool.Die.filter": {"tf": 7.745966692414834}, "icepool.Die.truncate": {"tf": 4.47213595499958}, "icepool.Die.clip": {"tf": 3.7416573867739413}, "icepool.Die.set_range": {"tf": 5.196152422706632}, "icepool.Die.set_outcomes": {"tf": 2.8284271247461903}, "icepool.Die.trim": {"tf": 1.7320508075688772}, "icepool.Die.map": {"tf": 9.695359714832659}, "icepool.Die.map_and_time": {"tf": 10.14889156509222}, "icepool.Die.explode": {"tf": 7.3484692283495345}, "icepool.Die.if_else": {"tf": 4.69041575982343}, "icepool.Die.is_in": {"tf": 1.7320508075688772}, "icepool.Die.count": {"tf": 1.7320508075688772}, "icepool.Die.count_in": {"tf": 1.7320508075688772}, "icepool.Die.pool": {"tf": 5.830951894845301}, "icepool.Die.keep_lowest": {"tf": 6.244997998398398}, "icepool.Die.keep_highest": {"tf": 6.082762530298219}, "icepool.Die.abs": {"tf": 1.7320508075688772}, "icepool.Die.round": {"tf": 1.7320508075688772}, "icepool.Die.trunc": {"tf": 1.7320508075688772}, "icepool.Die.floor": {"tf": 1.7320508075688772}, "icepool.Die.ceil": {"tf": 1.7320508075688772}, "icepool.Die.zero": {"tf": 4.47213595499958}, "icepool.Die.zero_outcome": {"tf": 3.3166247903554}, "icepool.Die.cmp": {"tf": 3.872983346207417}, "icepool.Die.sign": {"tf": 3.605551275463989}, "icepool.Die.key_tuple": {"tf": 3}, "icepool.Die.equals": {"tf": 7.54983443527075}, "icepool.Population": {"tf": 3.872983346207417}, "icepool.Population.keys": {"tf": 1.7320508075688772}, "icepool.Population.values": {"tf": 1.7320508075688772}, "icepool.Population.items": {"tf": 1.7320508075688772}, "icepool.Population.outcomes": {"tf": 3.1622776601683795}, "icepool.Population.tuple_len": {"tf": 2.8284271247461903}, "icepool.Population.is_empty": {"tf": 2.23606797749979}, "icepool.Population.min_outcome": {"tf": 1.7320508075688772}, "icepool.Population.max_outcome": {"tf": 1.7320508075688772}, "icepool.Population.nearest_le": {"tf": 2.8284271247461903}, "icepool.Population.nearest_ge": {"tf": 2.8284271247461903}, "icepool.Population.quantities": {"tf": 3.1622776601683795}, "icepool.Population.denominator": {"tf": 3}, "icepool.Population.has_zero_quantities": {"tf": 2.6457513110645907}, "icepool.Population.quantities_le": {"tf": 1.7320508075688772}, "icepool.Population.quantities_ge": {"tf": 1.7320508075688772}, "icepool.Population.quantity": {"tf": 1.7320508075688772}, "icepool.Population.quantity_ne": {"tf": 2}, "icepool.Population.quantity_le": {"tf": 1.7320508075688772}, "icepool.Population.quantity_lt": {"tf": 1.7320508075688772}, "icepool.Population.quantity_ge": {"tf": 1.7320508075688772}, "icepool.Population.quantity_gt": {"tf": 1.7320508075688772}, "icepool.Population.probabilities": {"tf": 4.123105625617661}, "icepool.Population.probabilities_le": {"tf": 4.123105625617661}, "icepool.Population.probabilities_ge": {"tf": 4.123105625617661}, "icepool.Population.probabilities_lt": {"tf": 3.7416573867739413}, "icepool.Population.probabilities_gt": {"tf": 3.7416573867739413}, "icepool.Population.probability": {"tf": 1.7320508075688772}, "icepool.Population.mode": {"tf": 2.449489742783178}, "icepool.Population.modal_quantity": {"tf": 1.7320508075688772}, "icepool.Population.kolmogorov_smirnov": {"tf": 1.7320508075688772}, "icepool.Population.cramer_von_mises": {"tf": 1.7320508075688772}, "icepool.Population.median": {"tf": 3.1622776601683795}, "icepool.Population.median_left": {"tf": 1.7320508075688772}, "icepool.Population.median_right": {"tf": 1.7320508075688772}, "icepool.Population.quantile": {"tf": 3.605551275463989}, "icepool.Population.quantile_left": {"tf": 2.449489742783178}, "icepool.Population.quantile_right": {"tf": 2.449489742783178}, "icepool.Population.mean": {"tf": 1.7320508075688772}, "icepool.Population.variance": {"tf": 1.7320508075688772}, "icepool.Population.standard_deviation": {"tf": 1.7320508075688772}, "icepool.Population.sd": {"tf": 1.7320508075688772}, "icepool.Population.standardized_moment": {"tf": 1.7320508075688772}, "icepool.Population.skewness": {"tf": 1.7320508075688772}, "icepool.Population.excess_kurtosis": {"tf": 1.7320508075688772}, "icepool.Population.marginals": {"tf": 3.3166247903554}, "icepool.Population.unary_op_non_elementwise": {"tf": 3.4641016151377544}, "icepool.Population.covariance": {"tf": 1.7320508075688772}, "icepool.Population.correlation": {"tf": 1.7320508075688772}, "icepool.Population.sample": {"tf": 3.605551275463989}, "icepool.Population.format": {"tf": 9.219544457292887}, "icepool.Again": {"tf": 7.0710678118654755}, "icepool.Again.__init__": {"tf": 2.23606797749979}, "icepool.CountsKeysView": {"tf": 2.6457513110645907}, "icepool.CountsKeysView.__init__": {"tf": 1.7320508075688772}, "icepool.CountsValuesView": {"tf": 2.6457513110645907}, "icepool.CountsValuesView.__init__": {"tf": 1.7320508075688772}, "icepool.CountsItemsView": {"tf": 2.6457513110645907}, "icepool.CountsItemsView.__init__": {"tf": 1.7320508075688772}, "icepool.from_cumulative_quantities": {"tf": 5.0990195135927845}, "icepool.from_rv": {"tf": 6.708203932499369}, "icepool.align": {"tf": 5}, "icepool.align_range": {"tf": 5.196152422706632}, "icepool.lowest": {"tf": 5.0990195135927845}, "icepool.highest": {"tf": 5.0990195135927845}, "icepool.min_outcome": {"tf": 1.7320508075688772}, "icepool.max_outcome": {"tf": 1.7320508075688772}, "icepool.reduce": {"tf": 6.708203932499369}, "icepool.accumulate": {"tf": 6.708203932499369}, "icepool.apply": {"tf": 9.848857801796104}, "icepool.apply_sorted": {"tf": 2.449489742783178}, "icepool.apply_sorted.__init__": {"tf": 9}, "icepool.Reroll": {"tf": 6.244997998398398}, "icepool.OutcomeCountGenerator": {"tf": 4.69041575982343}, "icepool.OutcomeCountGenerator.outcomes": {"tf": 1.7320508075688772}, "icepool.OutcomeCountGenerator.counts_len": {"tf": 1.7320508075688772}, "icepool.OutcomeCountGenerator.denominator": {"tf": 1.7320508075688772}, "icepool.OutcomeCountGenerator.evaluate": {"tf": 5.656854249492381}, "icepool.OutcomeCountGenerator.min_outcome": {"tf": 1.7320508075688772}, "icepool.OutcomeCountGenerator.max_outcome": {"tf": 1.7320508075688772}, "icepool.OutcomeCountGenerator.expand": {"tf": 4.123105625617661}, "icepool.OutcomeCountGenerator.sum": {"tf": 3.7416573867739413}, "icepool.OutcomeCountGenerator.count": {"tf": 2.449489742783178}, "icepool.OutcomeCountGenerator.count_in": {"tf": 1.7320508075688772}, "icepool.OutcomeCountGenerator.count_unique": {"tf": 1.7320508075688772}, "icepool.OutcomeCountGenerator.contains_subset": {"tf": 4.123105625617661}, "icepool.OutcomeCountGenerator.intersection_size": {"tf": 4.47213595499958}, "icepool.OutcomeCountGenerator.largest_matching_set": {"tf": 3.7416573867739413}, "icepool.OutcomeCountGenerator.largest_matching_set_and_outcome": {"tf": 3.7416573867739413}, "icepool.OutcomeCountGenerator.largest_straight": {"tf": 4.242640687119285}, "icepool.OutcomeCountGenerator.largest_straight_and_outcome": {"tf": 4.242640687119285}, "icepool.OutcomeCountGenerator.sample": {"tf": 4.123105625617661}, "icepool.Pool": {"tf": 2.8284271247461903}, "icepool.Pool.__init__": {"tf": 9.273618495495704}, "icepool.Pool.size": {"tf": 2.23606797749979}, "icepool.Pool.denominator": {"tf": 1.7320508075688772}, "icepool.Pool.unique_dice": {"tf": 1.7320508075688772}, "icepool.Pool.outcomes": {"tf": 1.7320508075688772}, "icepool.Pool.counts_len": {"tf": 1.7320508075688772}, "icepool.Pool.sorted_roll_counts": {"tf": 3.1622776601683795}, "icepool.Pool.set_sorted_roll_counts": {"tf": 11.135528725660043}, "icepool.Pool.min_outcome": {"tf": 1.7320508075688772}, "icepool.Pool.max_outcome": {"tf": 1.7320508075688772}, "icepool.Pool.lowest": {"tf": 4.898979485566356}, "icepool.Pool.highest": {"tf": 4.898979485566356}, "icepool.standard_pool": {"tf": 4}, "icepool.OutcomeCountEvaluator": {"tf": 8.366600265340756}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 8.94427190999916}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 7.211102550927978}, "icepool.OutcomeCountEvaluator.order": {"tf": 7.14142842854285}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 5.5677643628300215}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 6.4031242374328485}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 7.416198487095663}, "icepool.OutcomeCountEvaluator.sample": {"tf": 1.7320508075688772}, "icepool.Order": {"tf": 1.7320508075688772}, "icepool.Order.Ascending": {"tf": 1.7320508075688772}, "icepool.Order.Descending": {"tf": 1.7320508075688772}, "icepool.Order.Any": {"tf": 1.7320508075688772}, "icepool.JointEvaluator": {"tf": 2.23606797749979}, "icepool.JointEvaluator.__init__": {"tf": 1.7320508075688772}, "icepool.JointEvaluator.next_state": {"tf": 2.8284271247461903}, "icepool.JointEvaluator.final_outcome": {"tf": 2.8284271247461903}, "icepool.JointEvaluator.order": {"tf": 3.7416573867739413}, "icepool.SumEvaluator": {"tf": 1.7320508075688772}, "icepool.SumEvaluator.__init__": {"tf": 1.7320508075688772}, "icepool.SumEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.SumEvaluator.final_outcome": {"tf": 7.211102550927978}, "icepool.SumEvaluator.order": {"tf": 7.14142842854285}, "icepool.ExpandEvaluator": {"tf": 2.449489742783178}, "icepool.ExpandEvaluator.__init__": {"tf": 3.605551275463989}, "icepool.ExpandEvaluator.next_state": {"tf": 8.94427190999916}, "icepool.ExpandEvaluator.order": {"tf": 7.14142842854285}, "icepool.ExpandEvaluator.final_outcome": {"tf": 7.211102550927978}, "icepool.Deck": {"tf": 2.449489742783178}, "icepool.Deck.__init__": {"tf": 8.888194417315589}, "icepool.Deck.keys": {"tf": 1.7320508075688772}, "icepool.Deck.values": {"tf": 1.7320508075688772}, "icepool.Deck.items": {"tf": 1.7320508075688772}, "icepool.Deck.size": {"tf": 3}, "icepool.Deck.deal": {"tf": 3.3166247903554}, "icepool.Deck.map": {"tf": 6.557438524302}, "icepool.Deal": {"tf": 2.23606797749979}, "icepool.Deal.__init__": {"tf": 5.291502622129181}, "icepool.Deal.deck": {"tf": 2.23606797749979}, "icepool.Deal.hand_sizes": {"tf": 1.7320508075688772}, "icepool.Deal.total_cards_dealt": {"tf": 1.7320508075688772}, "icepool.Deal.outcomes": {"tf": 4}, "icepool.Deal.counts_len": {"tf": 1.7320508075688772}, "icepool.Deal.denominator": {"tf": 1.7320508075688772}, "icepool.SuitGenerator": {"tf": 4.242640687119285}, "icepool.SuitGenerator.__init__": {"tf": 1.7320508075688772}, "icepool.SuitGenerator.outcomes": {"tf": 1.7320508075688772}, "icepool.SuitGenerator.counts_len": {"tf": 1.7320508075688772}, "icepool.SuitGenerator.denominator": {"tf": 1.7320508075688772}, "icepool.clear_pool_cache": {"tf": 1.7320508075688772}}, "df": 200, "p": {"docs": {"icepool.Population.format": {"tf": 1.7320508075688772}}, "df": 1, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"icepool": {"tf": 1}, "icepool.Population.sample": {"tf": 1}, "icepool.OutcomeCountGenerator.sample": {"tf": 1}}, "df": 3}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {"icepool": {"tf": 1}}, "df": 1}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.accumulate": {"tf": 1}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.OutcomeCountEvaluator.order": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1}, "icepool.SumEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1}}, "df": 8, "s": {"docs": {"icepool.OutcomeCountEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1.7320508075688772}, "icepool.OutcomeCountEvaluator.order": {"tf": 1.7320508075688772}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 1.4142135623730951}, "icepool.SumEvaluator.final_outcome": {"tf": 1.7320508075688772}, "icepool.SumEvaluator.order": {"tf": 1.7320508075688772}, "icepool.ExpandEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.ExpandEvaluator.order": {"tf": 1.7320508075688772}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1.7320508075688772}}, "df": 10}}}}}}}, "t": {"docs": {"icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1}}, "df": 3, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.key_tuple": {"tf": 1}, "icepool.apply_sorted.__init__": {"tf": 1}, "icepool.OutcomeCountEvaluator": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}}, "df": 5}}}}}}}}, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die.binary_op": {"tf": 1}}, "df": 1}}}, "d": {"docs": {}, "df": 0, "s": {"docs": {"icepool.align": {"tf": 1}, "icepool.align_range": {"tf": 1}}, "df": 2}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "s": {"docs": {"icepool.OutcomeCountGenerator.denominator": {"tf": 1}, "icepool.Pool.denominator": {"tf": 1}, "icepool.Deal.denominator": {"tf": 1}, "icepool.SuitGenerator.denominator": {"tf": 1}}, "df": 4}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.OutcomeCountGenerator.evaluate": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool": {"tf": 1}, "icepool.Population.format": {"tf": 1.4142135623730951}}, "df": 2}}}, "y": {"docs": {"icepool.bernoulli": {"tf": 1}, "icepool.coin": {"tf": 1}, "icepool.Die.keep_lowest": {"tf": 1}, "icepool.Die.keep_highest": {"tf": 1}, "icepool.Population.probabilities": {"tf": 1.4142135623730951}, "icepool.Population.probabilities_le": {"tf": 1}, "icepool.Population.probabilities_ge": {"tf": 1}, "icepool.Population.probabilities_lt": {"tf": 1}, "icepool.Population.probabilities_gt": {"tf": 1}, "icepool.Population.probability": {"tf": 1}, "icepool.Reroll": {"tf": 1.4142135623730951}}, "df": 11}}}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {"icepool.apply": {"tf": 1.4142135623730951}}, "df": 1}}}}, "j": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"icepool": {"tf": 1}}, "df": 1}}}}, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"icepool.cartesian_product": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}}, "df": 3, "s": {"docs": {"icepool.cartesian_product": {"tf": 1}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 1}}, "df": 2}, "d": {"docs": {"icepool.OutcomeCountGenerator.expand": {"tf": 1}, "icepool.OutcomeCountEvaluator": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.ExpandEvaluator.next_state": {"tf": 1.4142135623730951}}, "df": 4}}, "t": {"docs": {"icepool.cartesian_product": {"tf": 1}, "icepool.apply": {"tf": 1}}, "df": 2}}}}, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Outcome": {"tf": 1}}, "df": 1}}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.reroll": {"tf": 1}, "icepool.Die.truncate": {"tf": 1}, "icepool.Die.clip": {"tf": 1}, "icepool.Die.keep_lowest": {"tf": 1}, "icepool.Die.keep_highest": {"tf": 1}, "icepool.lowest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.reduce": {"tf": 1}, "icepool.accumulate": {"tf": 1.4142135623730951}, "icepool.OutcomeCountGenerator.sum": {"tf": 1}, "icepool.OutcomeCountGenerator.count": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1}}, "df": 14}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}}, "df": 2}, "d": {"docs": {"icepool.Again": {"tf": 1}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1}}, "df": 4}}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die.key_tuple": {"tf": 1}}, "df": 1}}}, "y": {"docs": {"icepool.Population.marginals": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die.__init__": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "e": {"docs": {"icepool.Deal.__init__": {"tf": 1}}, "df": 1, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.set_outcomes": {"tf": 1.4142135623730951}, "icepool.Population.quantity": {"tf": 1}, "icepool.Population.probability": {"tf": 1}}, "df": 3}, "c": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Pool.set_sorted_roll_counts": {"tf": 1}}, "df": 1}}}}}, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Population.outcomes": {"tf": 1}, "icepool.Population.quantities": {"tf": 1}, "icepool.Deal.outcomes": {"tf": 1}}, "df": 3}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {"icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}}, "df": 2}}}}}}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"icepool": {"tf": 1}, "icepool.one_hot": {"tf": 1}, "icepool.Die.__init__": {"tf": 1.7320508075688772}, "icepool.Die.pool": {"tf": 2.23606797749979}, "icepool.apply": {"tf": 1}, "icepool.OutcomeCountGenerator": {"tf": 1}, "icepool.Pool.__init__": {"tf": 2.6457513110645907}, "icepool.Pool.size": {"tf": 1}, "icepool.Pool.unique_dice": {"tf": 1}, "icepool.Pool.outcomes": {"tf": 1}, "icepool.Pool.sorted_roll_counts": {"tf": 1.4142135623730951}, "icepool.Pool.set_sorted_roll_counts": {"tf": 3.3166247903554}, "icepool.Pool.min_outcome": {"tf": 1}, "icepool.Pool.max_outcome": {"tf": 1}, "icepool.Pool.lowest": {"tf": 1.4142135623730951}, "icepool.Pool.highest": {"tf": 1.4142135623730951}, "icepool.standard_pool": {"tf": 1.7320508075688772}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 1}, "icepool.clear_pool_cache": {"tf": 1}}, "df": 19, "s": {"docs": {"icepool.OutcomeCountGenerator": {"tf": 1}}, "df": 1}, "[": {"0": {"docs": {"icepool.Pool.set_sorted_roll_counts": {"tf": 1}}, "df": 1}, "1": {"docs": {"icepool.Pool.set_sorted_roll_counts": {"tf": 2}}, "df": 1}, "2": {"docs": {"icepool.Pool.set_sorted_roll_counts": {"tf": 1}}, "df": 1}, "3": {"docs": {"icepool.Pool.set_sorted_roll_counts": {"tf": 1}}, "df": 1, ":": {"5": {"docs": {"icepool.Pool.set_sorted_roll_counts": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}}, "docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Pool.set_sorted_roll_counts": {"tf": 1}}, "df": 1}}}}}}}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}}, "df": 2}, "e": {"docs": {"icepool.Die": {"tf": 1}, "icepool.apply_sorted.__init__": {"tf": 1}, "icepool.OutcomeCountGenerator.expand": {"tf": 1}, "icepool.OutcomeCountEvaluator": {"tf": 1}}, "df": 4}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool.OutcomeCountGenerator.expand": {"tf": 1}, "icepool.ExpandEvaluator": {"tf": 1}}, "df": 2}}}}}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.cmp": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1}}, "df": 2}}, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Pool.sorted_roll_counts": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}}, "df": 2}}}}}}}}, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Die.keys": {"tf": 1}, "icepool.Die.values": {"tf": 1}, "icepool.Die.items": {"tf": 1}, "icepool.Population.keys": {"tf": 1}, "icepool.Population.values": {"tf": 1}, "icepool.Population.items": {"tf": 1}, "icepool.Population.mode": {"tf": 1}, "icepool.Population.variance": {"tf": 1}, "icepool.Population.marginals": {"tf": 1}, "icepool.Population.sample": {"tf": 1}, "icepool.Deck.keys": {"tf": 1}, "icepool.Deck.values": {"tf": 1}, "icepool.Deck.items": {"tf": 1}}, "df": 13}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.map_and_time": {"tf": 1.4142135623730951}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die": {"tf": 1}, "icepool.Reroll": {"tf": 1}}, "df": 2, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Again": {"tf": 1}, "icepool.Again.__init__": {"tf": 1}}, "df": 3}}}}}}, "d": {"docs": {"icepool.reduce": {"tf": 1}, "icepool.accumulate": {"tf": 1}}, "df": 2}, "s": {"docs": {"icepool.Reroll": {"tf": 1}}, "df": 1}}}, "n": {"docs": {"icepool.OutcomeCountGenerator.evaluate": {"tf": 1}}, "df": 1}}, "u": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Pool.set_sorted_roll_counts": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die.pool": {"tf": 1}, "icepool.align": {"tf": 1}, "icepool.align_range": {"tf": 1}, "icepool.apply": {"tf": 1.4142135623730951}, "icepool.apply_sorted.__init__": {"tf": 1.4142135623730951}, "icepool.OutcomeCountGenerator.contains_subset": {"tf": 1}, "icepool.OutcomeCountGenerator.intersection_size": {"tf": 1}, "icepool.Pool.sorted_roll_counts": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1}}, "df": 9, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.unary_op": {"tf": 1}, "icepool.Die.binary_op": {"tf": 1.4142135623730951}, "icepool.Population.marginals": {"tf": 1}}, "df": 4}}, "s": {"docs": {"icepool.Die.unary_op": {"tf": 1}, "icepool.Die.binary_op": {"tf": 1}, "icepool.Die.truncate": {"tf": 1}}, "df": 3}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}}, "df": 2}}}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Population.probabilities": {"tf": 1.4142135623730951}, "icepool.Population.probabilities_le": {"tf": 1.4142135623730951}, "icepool.Population.probabilities_ge": {"tf": 1.4142135623730951}, "icepool.Population.probabilities_lt": {"tf": 1.4142135623730951}, "icepool.Population.probabilities_gt": {"tf": 1.4142135623730951}}, "df": 5}}}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.pool": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1.7320508075688772}, "icepool.standard_pool": {"tf": 1.4142135623730951}, "icepool.Deck.__init__": {"tf": 1}}, "df": 4}, "r": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.equals": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1}}, "df": 2}}}}}, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"icepool.Pool.__init__": {"tf": 1}}, "df": 1}}}}}, "m": {"docs": {}, "df": 0, "f": {"docs": {"icepool.Population.probabilities": {"tf": 1}}, "df": 1}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool": {"tf": 1.4142135623730951}, "icepool.one_hot": {"tf": 1}, "icepool.Die": {"tf": 1}, "icepool.Die.__init__": {"tf": 3.3166247903554}, "icepool.Die.unary_op": {"tf": 1.7320508075688772}, "icepool.Die.binary_op": {"tf": 1}, "icepool.Die.map": {"tf": 1.4142135623730951}, "icepool.Die.map_and_time": {"tf": 1.4142135623730951}, "icepool.Die.zero": {"tf": 1}, "icepool.Die.zero_outcome": {"tf": 1.4142135623730951}, "icepool.Die.sign": {"tf": 1}, "icepool.Population.denominator": {"tf": 1}, "icepool.Population.marginals": {"tf": 1}, "icepool.Population.unary_op_non_elementwise": {"tf": 1}, "icepool.Population.sample": {"tf": 1}, "icepool.apply": {"tf": 1.4142135623730951}, "icepool.apply_sorted": {"tf": 1}, "icepool.apply_sorted.__init__": {"tf": 1.4142135623730951}, "icepool.Reroll": {"tf": 1.4142135623730951}, "icepool.OutcomeCountGenerator": {"tf": 1}, "icepool.OutcomeCountGenerator.sample": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1.4142135623730951}, "icepool.Pool.set_sorted_roll_counts": {"tf": 2}, "icepool.standard_pool": {"tf": 1}, "icepool.OutcomeCountEvaluator": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 1.4142135623730951}, "icepool.JointEvaluator.next_state": {"tf": 1}, "icepool.JointEvaluator.final_outcome": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.ExpandEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.Deck.__init__": {"tf": 1.4142135623730951}, "icepool.Deck.size": {"tf": 1}, "icepool.Deck.deal": {"tf": 1}, "icepool.Deck.map": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1.4142135623730951}}, "df": 38, "m": {"docs": {"icepool.Die.map": {"tf": 1}, "icepool.SuitGenerator": {"tf": 1}}, "df": 2, "a": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.key_tuple": {"tf": 1}, "icepool.Population.format": {"tf": 1.4142135623730951}}, "df": 2, "s": {"docs": {"icepool.Population.format": {"tf": 1}}, "df": 1}}}}, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.map": {"tf": 1.4142135623730951}, "icepool.Die.map_and_time": {"tf": 1.4142135623730951}, "icepool.Die.if_else": {"tf": 1.4142135623730951}, "icepool.from_rv": {"tf": 1}, "icepool.reduce": {"tf": 1.4142135623730951}, "icepool.apply": {"tf": 1.4142135623730951}, "icepool.apply_sorted.__init__": {"tf": 1.4142135623730951}}, "df": 7}}}}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"icepool.one_hot": {"tf": 1}}, "df": 1}}}, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.__init__": {"tf": 1}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {"icepool.Population.format": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Die.__init__": {"tf": 1.4142135623730951}, "icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1.4142135623730951}, "icepool.Deck.map": {"tf": 1}}, "df": 8}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Population.format": {"tf": 1}}, "df": 1}}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"icepool": {"tf": 1}, "icepool.standard": {"tf": 1}, "icepool.d": {"tf": 1}, "icepool.Die.__init__": {"tf": 2}, "icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Die.pool": {"tf": 1}, "icepool.Die.keep_lowest": {"tf": 1}, "icepool.Die.keep_highest": {"tf": 1}, "icepool.Die.key_tuple": {"tf": 1}, "icepool.Population": {"tf": 1}, "icepool.Population.mode": {"tf": 1}, "icepool.Population.sample": {"tf": 1}, "icepool.Again.__init__": {"tf": 1}, "icepool.from_cumulative_quantities": {"tf": 1}, "icepool.from_rv": {"tf": 1}, "icepool.reduce": {"tf": 1.4142135623730951}, "icepool.accumulate": {"tf": 1.4142135623730951}, "icepool.apply": {"tf": 1}, "icepool.apply_sorted.__init__": {"tf": 1}, "icepool.Reroll": {"tf": 1}, "icepool.OutcomeCountGenerator.contains_subset": {"tf": 1}, "icepool.OutcomeCountGenerator.intersection_size": {"tf": 1}, "icepool.OutcomeCountGenerator.sample": {"tf": 1}, "icepool.Pool.sorted_roll_counts": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 1}, "icepool.OutcomeCountEvaluator.sample": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}, "icepool.Deck.deal": {"tf": 1}, "icepool.Deck.map": {"tf": 1}, "icepool.Deal": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1}, "icepool.Deal.deck": {"tf": 1}, "icepool.SuitGenerator": {"tf": 1.4142135623730951}}, "df": 40}, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.reduce": {"tf": 1}, "icepool.accumulate": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "e": {"docs": {"icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.OutcomeCountEvaluator.order": {"tf": 1}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1}, "icepool.SumEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1}}, "df": 10}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"icepool.bernoulli": {"tf": 1}, "icepool.coin": {"tf": 1}, "icepool.one_hot": {"tf": 1}, "icepool.Die.equals": {"tf": 1}}, "df": 4}, "y": {"docs": {"icepool.Die.if_else": {"tf": 1}}, "df": 1}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {"icepool.SuitGenerator": {"tf": 1.7320508075688772}}, "df": 1, "s": {"docs": {"icepool.Die.__init__": {"tf": 1.4142135623730951}}, "df": 1}}, "t": {"docs": {"icepool.Die.binary_op": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Population.median": {"tf": 1}, "icepool.Population.quantile": {"tf": 1}}, "df": 2}}, "r": {"docs": {"icepool.OutcomeCountEvaluator": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Pool.set_sorted_roll_counts": {"tf": 1}}, "df": 1, "s": {"docs": {"icepool.one_hot": {"tf": 1}}, "df": 1}}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.map": {"tf": 1.4142135623730951}, "icepool.Die.map_and_time": {"tf": 1.4142135623730951}, "icepool.Die.if_else": {"tf": 1.4142135623730951}, "icepool.reduce": {"tf": 1.4142135623730951}, "icepool.apply": {"tf": 1.4142135623730951}, "icepool.apply_sorted.__init__": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 2.6457513110645907}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 1}, "icepool.JointEvaluator.final_outcome": {"tf": 1.7320508075688772}, "icepool.SumEvaluator.final_outcome": {"tf": 2.6457513110645907}, "icepool.ExpandEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.ExpandEvaluator.final_outcome": {"tf": 2.6457513110645907}}, "df": 15}}}, "t": {"docs": {"icepool.Die.clip": {"tf": 1}}, "df": 1}, "x": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.map_and_time": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1.7320508075688772}, "icepool.OutcomeCountEvaluator.order": {"tf": 1.7320508075688772}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 1}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1.7320508075688772}, "icepool.SumEvaluator.order": {"tf": 1.7320508075688772}, "icepool.ExpandEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.order": {"tf": 1.7320508075688772}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1.7320508075688772}}, "df": 13}}}, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.if_else": {"tf": 1}, "icepool.Population.marginals": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}}, "df": 4}}}}, "e": {"docs": {}, "df": 0, "w": {"docs": {"icepool.Die": {"tf": 1}, "icepool.apply": {"tf": 1}, "icepool.OutcomeCountGenerator.expand": {"tf": 1}, "icepool.OutcomeCountEvaluator": {"tf": 1}, "icepool.ExpandEvaluator": {"tf": 1}}, "df": 5}, "d": {"docs": {"icepool.Again": {"tf": 1}}, "df": 1}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"icepool.reduce": {"tf": 1}, "icepool.accumulate": {"tf": 1}, "icepool.apply": {"tf": 2}, "icepool.apply_sorted.__init__": {"tf": 2.6457513110645907}, "icepool.OutcomeCountGenerator.evaluate": {"tf": 1}}, "df": 5, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.equals": {"tf": 1}, "icepool.Population.probabilities": {"tf": 1}, "icepool.Population.probabilities_le": {"tf": 1}, "icepool.Population.probabilities_ge": {"tf": 1.4142135623730951}, "icepool.Again.__init__": {"tf": 1}, "icepool.from_cumulative_quantities": {"tf": 1}, "icepool.reduce": {"tf": 2.23606797749979}, "icepool.accumulate": {"tf": 2.449489742783178}, "icepool.apply": {"tf": 1}, "icepool.apply_sorted": {"tf": 1}, "icepool.apply_sorted.__init__": {"tf": 1.4142135623730951}, "icepool.Reroll": {"tf": 1}, "icepool.OutcomeCountGenerator.evaluate": {"tf": 1.7320508075688772}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.OutcomeCountEvaluator.order": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1}, "icepool.SumEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1}, "icepool.Deck.map": {"tf": 1}}, "df": 28, "s": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Again": {"tf": 1}, "icepool.CountsKeysView": {"tf": 1}, "icepool.CountsValuesView": {"tf": 1}, "icepool.CountsItemsView": {"tf": 1}}, "df": 5}}}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"icepool.reduce": {"tf": 1}}, "df": 1}}}}}}}, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die.explode": {"tf": 1}, "icepool.OutcomeCountEvaluator": {"tf": 1}}, "df": 2, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}}, "df": 2}}}}}}}}}, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}}, "df": 2}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}}, "df": 2}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.__init__": {"tf": 1}}, "df": 1, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}}, "df": 2}}}}}}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die.unary_op": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.sign": {"tf": 1}, "icepool.from_rv": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.apply": {"tf": 1}}, "df": 1}}}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Die": {"tf": 1}}, "df": 1, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Deal.__init__": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {"icepool.Die.map_and_time": {"tf": 1}}, "df": 1}}}}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die.binary_op": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Die.equals": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.filter": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Population.probabilities_ge": {"tf": 1}}, "df": 1}}}}}}}, "x": {"docs": {"icepool.Again": {"tf": 1}}, "df": 1}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Die.simplify": {"tf": 1}, "icepool.Population.tuple_len": {"tf": 1}, "icepool.Population.mode": {"tf": 1}, "icepool.JointEvaluator.order": {"tf": 1}}, "df": 4}}, "a": {"docs": {"icepool.Population.format": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Deal.__init__": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"icepool": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die.__init__": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {"icepool.Die.equals": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.binary_op": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.apply_sorted.__init__": {"tf": 1}}, "df": 1}}}}}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die.__init__": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool": {"tf": 1}, "icepool.lowest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}}, "df": 5}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}}, "df": 3}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.apply": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Reroll": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Pool.set_sorted_roll_counts": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die.__init__": {"tf": null}, "icepool.Die.map": {"tf": null}, "icepool.Die.map_and_time": {"tf": null}, "icepool.Die.if_else": {"tf": null}, "icepool.Die.zero": {"tf": null}, "icepool.Again": {"tf": null}, "icepool.reduce": {"tf": null}, "icepool.apply": {"tf": null}, "icepool.apply_sorted": {"tf": null}, "icepool.apply_sorted.__init__": {"tf": null}, "icepool.Pool.__init__": {"tf": null}, "icepool.Deck.__init__": {"tf": null}, "icepool.Deal.__init__": {"tf": null}}, "df": 13}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.from_cumulative_quantities": {"tf": 1}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1}}, "df": 5}}, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.OutcomeCountEvaluator": {"tf": 1}}, "df": 2}}}, "s": {"docs": {"icepool.from_cumulative_quantities": {"tf": 1}, "icepool.from_rv": {"tf": 1}}, "df": 2}, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.apply": {"tf": 1}, "icepool.apply_sorted.__init__": {"tf": 1}, "icepool.OutcomeCountGenerator.evaluate": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}}, "df": 4}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.OutcomeCountGenerator.counts_len": {"tf": 1}, "icepool.Pool.counts_len": {"tf": 1}, "icepool.Deal.counts_len": {"tf": 1}, "icepool.SuitGenerator.counts_len": {"tf": 1}}, "df": 4}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"icepool.align_range": {"tf": 1}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 1}}, "df": 3}}}}}}}}, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"icepool.standard": {"tf": 1}, "icepool.d": {"tf": 1}, "icepool.Die.__init__": {"tf": 1.4142135623730951}}, "df": 3, "d": {"docs": {"icepool.Die.truncate": {"tf": 1}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.JointEvaluator.order": {"tf": 1}}, "df": 1}}}}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Die.__init__": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}}, "df": 2}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Reroll": {"tf": 1}}, "df": 1}}}}}}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Die.equals": {"tf": 1}, "icepool.OutcomeCountGenerator.contains_subset": {"tf": 1.4142135623730951}, "icepool.OutcomeCountGenerator.intersection_size": {"tf": 1}}, "df": 3, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.is_in": {"tf": 1}}, "df": 1}}, "s": {"docs": {"icepool.Population.has_zero_quantities": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Population.mode": {"tf": 1}}, "df": 1}}}}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Die.if_else": {"tf": 1}, "icepool.Reroll": {"tf": 1}}, "df": 2}}}}}}}}, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"icepool.OutcomeCountGenerator": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.OutcomeCountEvaluator": {"tf": 1}}, "df": 1}}}}}}, "j": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Pool": {"tf": 1}}, "df": 1}}}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die": {"tf": 1}}, "df": 1}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1}}, "df": 6}}, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.unary_op": {"tf": 1}, "icepool.Die.count": {"tf": 1}, "icepool.Die.count_in": {"tf": 1}, "icepool.OutcomeCountGenerator.count_unique": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator": {"tf": 2.449489742783178}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 2.23606797749979}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1.4142135623730951}, "icepool.ExpandEvaluator.__init__": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 2.23606797749979}, "icepool.Deal.__init__": {"tf": 1}, "icepool.SuitGenerator": {"tf": 1}}, "df": 12, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Die.map_and_time": {"tf": 1}, "icepool.OutcomeCountGenerator.contains_subset": {"tf": 1}, "icepool.OutcomeCountGenerator.intersection_size": {"tf": 1}, "icepool.Pool.size": {"tf": 1}}, "df": 4}}}, "s": {"docs": {"icepool.Die.pool": {"tf": 1}, "icepool.OutcomeCountGenerator": {"tf": 1}, "icepool.OutcomeCountGenerator.counts_len": {"tf": 1}, "icepool.OutcomeCountGenerator.evaluate": {"tf": 1}, "icepool.OutcomeCountGenerator.contains_subset": {"tf": 1}, "icepool.OutcomeCountGenerator.intersection_size": {"tf": 1}, "icepool.Pool.counts_len": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 3.1622776601683795}, "icepool.Pool.lowest": {"tf": 1}, "icepool.Pool.highest": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.ExpandEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.Deal.counts_len": {"tf": 1}, "icepool.SuitGenerator": {"tf": 1}, "icepool.SuitGenerator.counts_len": {"tf": 1}}, "df": 15}, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.OutcomeCountGenerator.count": {"tf": 1}, "icepool.Pool.sorted_roll_counts": {"tf": 1.4142135623730951}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1.7320508075688772}}, "df": 3}}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.unary_op": {"tf": 1}, "icepool.apply_sorted.__init__": {"tf": 1}, "icepool.Pool.sorted_roll_counts": {"tf": 1}}, "df": 4}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.OutcomeCountGenerator.contains_subset": {"tf": 1}, "icepool.OutcomeCountGenerator.intersection_size": {"tf": 1}, "icepool.Pool.unique_dice": {"tf": 1}, "icepool.standard_pool": {"tf": 1}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1}}, "df": 8}}}}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Population.format": {"tf": 1}}, "df": 1, "s": {"docs": {"icepool.Population.format": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die.pool": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Die.equals": {"tf": 1.4142135623730951}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"icepool": {"tf": 1}, "icepool.OutcomeCountGenerator": {"tf": 1}, "icepool.Deck.map": {"tf": 1}}, "df": 3, "s": {"docs": {"icepool.Deck.__init__": {"tf": 1}, "icepool.Deal": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1.4142135623730951}, "icepool.Deal.deck": {"tf": 1}, "icepool.Deal.hand_sizes": {"tf": 1}, "icepool.Deal.total_cards_dealt": {"tf": 1}}, "df": 6}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool.OutcomeCountGenerator.evaluate": {"tf": 1}}, "df": 1}}}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool": {"tf": 1}}, "df": 1}}}, "e": {"docs": {"icepool.OutcomeCountGenerator.evaluate": {"tf": 1}, "icepool.OutcomeCountEvaluator": {"tf": 1.4142135623730951}, "icepool.clear_pool_cache": {"tf": 1}}, "df": 3}}}, "n": {"docs": {"icepool.Die": {"tf": 1}, "icepool.Die.__init__": {"tf": 2}, "icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1.4142135623730951}, "icepool.Population.marginals": {"tf": 1}, "icepool.Again": {"tf": 1}, "icepool.apply": {"tf": 1}, "icepool.apply_sorted.__init__": {"tf": 1}, "icepool.Reroll": {"tf": 1.4142135623730951}, "icepool.OutcomeCountGenerator": {"tf": 1}, "icepool.OutcomeCountGenerator.evaluate": {"tf": 1.4142135623730951}, "icepool.Pool.__init__": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.OutcomeCountEvaluator.order": {"tf": 1}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 1}, "icepool.Order": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1}, "icepool.SumEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1.4142135623730951}, "icepool.Deal.__init__": {"tf": 1}}, "df": 26, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.pool": {"tf": 1}}, "df": 1}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Pool.set_sorted_roll_counts": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die": {"tf": 1}, "icepool.Die.map": {"tf": 1}, "icepool.Population.median": {"tf": 1.4142135623730951}, "icepool.Population.median_left": {"tf": 1}, "icepool.Population.median_right": {"tf": 1}, "icepool.Population.quantile": {"tf": 1.4142135623730951}, "icepool.Population.quantile_left": {"tf": 1}, "icepool.Population.quantile_right": {"tf": 1}, "icepool.OutcomeCountGenerator.evaluate": {"tf": 1.4142135623730951}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1}, "icepool.Deck.map": {"tf": 1}}, "df": 16, "s": {"docs": {"icepool.Die": {"tf": 1.4142135623730951}, "icepool.Reroll": {"tf": 1}}, "df": 2}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}}, "df": 3, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.binary_op": {"tf": 1}, "icepool.apply": {"tf": 1}, "icepool.apply_sorted.__init__": {"tf": 1}}, "df": 3}, "r": {"docs": {"icepool.Die.equals": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.reroll": {"tf": 1.4142135623730951}, "icepool.Die.filter": {"tf": 1.4142135623730951}, "icepool.Die.map": {"tf": 1.4142135623730951}, "icepool.Die.map_and_time": {"tf": 1.4142135623730951}, "icepool.Die.explode": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator": {"tf": 1}, "icepool.Deck.map": {"tf": 1.4142135623730951}}, "df": 7}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Die.zero": {"tf": 1}}, "df": 1}}}, "s": {"docs": {"icepool.OutcomeCountEvaluator": {"tf": 1}}, "df": 1}}, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"icepool.OutcomeCountEvaluator": {"tf": 1}}, "df": 1}}}}}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.clip": {"tf": 1}}, "df": 1, "s": {"docs": {"icepool.Die.explode": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Die.map_and_time": {"tf": 1}}, "df": 1}}}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"icepool": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}}, "df": 3}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Population.format": {"tf": 1}}, "df": 1, "s": {"docs": {"icepool.Population.format": {"tf": 1}}, "df": 1}}}}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die.unary_op": {"tf": 1}, "icepool.Die.binary_op": {"tf": 1}, "icepool.apply_sorted": {"tf": 1}, "icepool.OutcomeCountGenerator": {"tf": 1}, "icepool.OutcomeCountEvaluator": {"tf": 1}}, "df": 5}}}, "i": {"docs": {}, "df": 0, "p": {"docs": {"icepool.Die.truncate": {"tf": 1}}, "df": 1, "s": {"docs": {"icepool.Die.clip": {"tf": 1}}, "df": 1}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.clip": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"icepool.clear_pool_cache": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Die.unary_op": {"tf": 1}}, "df": 1}}, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}}, "df": 2}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"icepool.OutcomeCountGenerator.evaluate": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}}, "df": 4, "s": {"docs": {"icepool.Die.binary_op": {"tf": 1}, "icepool.Die.pool": {"tf": 1}, "icepool.Again.__init__": {"tf": 1}, "icepool.Deck.deal": {"tf": 1}}, "df": 4}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "\u00e9": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Population.cramer_von_mises": {"tf": 1}}, "df": 1}}}}, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Population.sample": {"tf": 1}, "icepool.OutcomeCountGenerator.sample": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {"icepool.Die.binary_op": {"tf": 1}}, "df": 1}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Population.probabilities_le": {"tf": 1}, "icepool.Population.probabilities_ge": {"tf": 1}, "icepool.from_cumulative_quantities": {"tf": 1.7320508075688772}}, "df": 3, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.reduce": {"tf": 1}, "icepool.accumulate": {"tf": 1}}, "df": 2}}}}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"icepool.OutcomeCountEvaluator": {"tf": 1}}, "df": 1}}}}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.OutcomeCountEvaluator.next_state": {"tf": 2}, "icepool.ExpandEvaluator.next_state": {"tf": 2}}, "df": 2, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}}, "df": 2}}}}}}}}, "d": {"docs": {}, "df": 0, "f": {"docs": {"icepool.Population.probabilities_le": {"tf": 1}, "icepool.Population.quantile": {"tf": 1}, "icepool.Population.quantile_left": {"tf": 1}, "icepool.Population.quantile_right": {"tf": 1}, "icepool.from_rv": {"tf": 1}}, "df": 5, "s": {"docs": {"icepool.Population.kolmogorov_smirnov": {"tf": 1}, "icepool.Population.cramer_von_mises": {"tf": 1}}, "df": 2}}}, "c": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "f": {"docs": {"icepool.Population.probabilities_ge": {"tf": 1}}, "df": 1}}}, "s": {"docs": {}, "df": 0, "v": {"docs": {"icepool.Population.format": {"tf": 1}}, "df": 1}}}, "d": {"1": {"0": {"docs": {"icepool.Pool.__init__": {"tf": 1}}, "df": 1}, "2": {"docs": {"icepool.Pool.__init__": {"tf": 1.4142135623730951}}, "df": 1}, "docs": {}, "df": 0}, "3": {"docs": {"icepool.Die.__init__": {"tf": 1.7320508075688772}}, "df": 1, "+": {"3": {"docs": {"icepool.Die.__init__": {"tf": 1.4142135623730951}}, "df": 1}, "docs": {}, "df": 0}}, "4": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}}, "df": 2}, "6": {"docs": {"icepool.standard": {"tf": 1}, "icepool.d": {"tf": 1}, "icepool.cartesian_product": {"tf": 1.4142135623730951}, "icepool.Die.__init__": {"tf": 3}, "icepool.Die.pool": {"tf": 1}, "icepool.apply": {"tf": 2}, "icepool.Pool.__init__": {"tf": 1}, "icepool.standard_pool": {"tf": 1}}, "df": 8}, "8": {"docs": {"icepool.Pool.__init__": {"tf": 1}, "icepool.standard_pool": {"tf": 1}}, "df": 2}, "docs": {"icepool.standard": {"tf": 1}, "icepool.d": {"tf": 1}, "icepool.bernoulli": {"tf": 1.4142135623730951}, "icepool.coin": {"tf": 1.4142135623730951}, "icepool.Die.__init__": {"tf": 2}, "icepool.Die.binary_op": {"tf": 1}, "icepool.Population.quantile": {"tf": 1}, "icepool.Population.quantile_left": {"tf": 1}, "icepool.Population.quantile_right": {"tf": 1}}, "df": 9, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"icepool": {"tf": 1.4142135623730951}, "icepool.one_hot": {"tf": 1}, "icepool.Die": {"tf": 1.7320508075688772}, "icepool.Die.__init__": {"tf": 2.449489742783178}, "icepool.Die.binary_op": {"tf": 1.7320508075688772}, "icepool.Die.map": {"tf": 1.4142135623730951}, "icepool.Die.map_and_time": {"tf": 1.4142135623730951}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.count": {"tf": 1}, "icepool.Die.count_in": {"tf": 1}, "icepool.Die.keep_lowest": {"tf": 2}, "icepool.Die.keep_highest": {"tf": 1.7320508075688772}, "icepool.Die.equals": {"tf": 2}, "icepool.align": {"tf": 1.7320508075688772}, "icepool.align_range": {"tf": 1.7320508075688772}, "icepool.lowest": {"tf": 2.449489742783178}, "icepool.highest": {"tf": 2.449489742783178}, "icepool.min_outcome": {"tf": 1}, "icepool.max_outcome": {"tf": 1}, "icepool.reduce": {"tf": 2.23606797749979}, "icepool.accumulate": {"tf": 2.449489742783178}, "icepool.apply": {"tf": 3}, "icepool.apply_sorted.__init__": {"tf": 2.449489742783178}, "icepool.OutcomeCountGenerator": {"tf": 1}, "icepool.Pool": {"tf": 1}, "icepool.Pool.__init__": {"tf": 2}, "icepool.Pool.size": {"tf": 1}, "icepool.Pool.unique_dice": {"tf": 1}, "icepool.Pool.outcomes": {"tf": 1}, "icepool.Pool.sorted_roll_counts": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 3}, "icepool.Pool.min_outcome": {"tf": 1}, "icepool.Pool.max_outcome": {"tf": 1}, "icepool.Pool.lowest": {"tf": 1.7320508075688772}, "icepool.Pool.highest": {"tf": 1.7320508075688772}, "icepool.standard_pool": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.order": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 1.4142135623730951}, "icepool.SumEvaluator.order": {"tf": 1.4142135623730951}, "icepool.ExpandEvaluator.order": {"tf": 1.4142135623730951}, "icepool.Deck.map": {"tf": 1}}, "df": 41}, "t": {"docs": {"icepool.Die.__init__": {"tf": 1}}, "df": 1}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool": {"tf": 1}, "icepool.Die.keep_lowest": {"tf": 1}, "icepool.Die.keep_highest": {"tf": 1}, "icepool.Population.probabilities_le": {"tf": 1}, "icepool.Population.probabilities_ge": {"tf": 1}, "icepool.from_cumulative_quantities": {"tf": 1}, "icepool.from_rv": {"tf": 1}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 1}}, "df": 8, "s": {"docs": {"icepool.OutcomeCountEvaluator": {"tf": 1}}, "df": 1}}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Pool": {"tf": 1}}, "df": 1}}}}}}}}}}, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"icepool.from_rv": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {"icepool.standard": {"tf": 2}, "icepool.d": {"tf": 2}, "icepool.bernoulli": {"tf": 1}, "icepool.coin": {"tf": 1}, "icepool.one_hot": {"tf": 1}, "icepool.cartesian_product": {"tf": 1}, "icepool.Die": {"tf": 1.7320508075688772}, "icepool.Die.__init__": {"tf": 4.58257569495584}, "icepool.Die.unary_op": {"tf": 1}, "icepool.Die.binary_op": {"tf": 2.449489742783178}, "icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.truncate": {"tf": 1.4142135623730951}, "icepool.Die.clip": {"tf": 1}, "icepool.Die.set_range": {"tf": 1.7320508075688772}, "icepool.Die.set_outcomes": {"tf": 1}, "icepool.Die.map": {"tf": 2.23606797749979}, "icepool.Die.map_and_time": {"tf": 2.23606797749979}, "icepool.Die.if_else": {"tf": 1.4142135623730951}, "icepool.Die.is_in": {"tf": 1.4142135623730951}, "icepool.Die.pool": {"tf": 1.7320508075688772}, "icepool.Die.keep_lowest": {"tf": 1.4142135623730951}, "icepool.Die.keep_highest": {"tf": 1.4142135623730951}, "icepool.Die.zero": {"tf": 1.4142135623730951}, "icepool.Die.zero_outcome": {"tf": 1.4142135623730951}, "icepool.Die.cmp": {"tf": 1}, "icepool.Die.key_tuple": {"tf": 1}, "icepool.Die.equals": {"tf": 2.449489742783178}, "icepool.Population": {"tf": 1}, "icepool.Again": {"tf": 2.23606797749979}, "icepool.from_cumulative_quantities": {"tf": 1.4142135623730951}, "icepool.from_rv": {"tf": 1.7320508075688772}, "icepool.align": {"tf": 1}, "icepool.align_range": {"tf": 1}, "icepool.lowest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.reduce": {"tf": 1.4142135623730951}, "icepool.apply": {"tf": 3}, "icepool.apply_sorted.__init__": {"tf": 2.449489742783178}, "icepool.Reroll": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_matching_set": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_matching_set_and_outcome": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_straight": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_straight_and_outcome": {"tf": 1}, "icepool.Pool.__init__": {"tf": 2.449489742783178}, "icepool.Pool.size": {"tf": 1}, "icepool.Pool.sorted_roll_counts": {"tf": 1.4142135623730951}, "icepool.Pool.set_sorted_roll_counts": {"tf": 2.23606797749979}, "icepool.standard_pool": {"tf": 2}, "icepool.OutcomeCountEvaluator": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 2}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 2}, "icepool.ExpandEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.final_outcome": {"tf": 2}}, "df": 56}, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.OutcomeCountEvaluator.order": {"tf": 1}, "icepool.SumEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.order": {"tf": 1}}, "df": 3, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Population.tuple_len": {"tf": 1}}, "df": 2}, "c": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.pool": {"tf": 1}, "icepool.Population.kolmogorov_smirnov": {"tf": 1}, "icepool.Population.cramer_von_mises": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1}}, "df": 4}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die.unary_op": {"tf": 1}, "icepool.Die.binary_op": {"tf": 1.4142135623730951}, "icepool.OutcomeCountGenerator.evaluate": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 1}}, "df": 4}}}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die.simplify": {"tf": 1}}, "df": 1}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Population.median": {"tf": 1}, "icepool.Population.quantile": {"tf": 1}}, "df": 2}}}}}}, "d": {"docs": {"icepool.Die.zero": {"tf": 1}}, "df": 1}}, "o": {"docs": {"icepool.Die": {"tf": 1.4142135623730951}, "icepool.Population.median": {"tf": 1}, "icepool.Population.quantile": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}}, "df": 5, "n": {"docs": {"icepool.standard": {"tf": 1}, "icepool.d": {"tf": 1}, "icepool.Die.__init__": {"tf": 1.7320508075688772}}, "df": 3, "e": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.zero": {"tf": 1}}, "df": 2}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.binary_op": {"tf": 1}, "icepool.Die.equals": {"tf": 1.4142135623730951}}, "df": 3}}}, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.Order": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1}}, "df": 4, "d": {"docs": {"icepool.Die": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.explode": {"tf": 1.4142135623730951}, "icepool.Population.format": {"tf": 1}, "icepool.accumulate": {"tf": 1}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.OutcomeCountEvaluator.order": {"tf": 1}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1}, "icepool.SumEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1}}, "df": 11}}}}}, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"icepool.Die.__init__": {"tf": 2}, "icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.map": {"tf": 1.4142135623730951}, "icepool.Die.map_and_time": {"tf": 1.4142135623730951}, "icepool.Die.explode": {"tf": 1.4142135623730951}, "icepool.Die.if_else": {"tf": 1}, "icepool.Again": {"tf": 1}, "icepool.reduce": {"tf": 1}, "icepool.apply": {"tf": 1}, "icepool.apply_sorted.__init__": {"tf": 1}, "icepool.Reroll": {"tf": 1.4142135623730951}}, "df": 12}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Pool.set_sorted_roll_counts": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}}, "df": 3}}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.OutcomeCountEvaluator.order": {"tf": 1}, "icepool.SumEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.order": {"tf": 1}}, "df": 4, "s": {"docs": {"icepool.Die.pool": {"tf": 1}, "icepool.JointEvaluator.order": {"tf": 1}}, "df": 2}, "d": {"docs": {"icepool.Die.equals": {"tf": 1}}, "df": 1}}}}}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.apply_sorted": {"tf": 1}, "icepool.Reroll": {"tf": 1}, "icepool.Deck.deal": {"tf": 1}}, "df": 4}}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die.__init__": {"tf": 2.449489742783178}, "icepool.Die.simplify": {"tf": 1}, "icepool.Die.zero": {"tf": 1}, "icepool.from_rv": {"tf": 1.4142135623730951}, "icepool.Reroll": {"tf": 1}}, "df": 5, "s": {"docs": {"icepool.Die.__init__": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}, "c": {"docs": {}, "df": 0, "k": {"docs": {"icepool.Population": {"tf": 1}, "icepool.Population.sample": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.Deck.__init__": {"tf": 2.6457513110645907}, "icepool.Deck.deal": {"tf": 1}, "icepool.Deck.map": {"tf": 1.4142135623730951}, "icepool.Deal": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1.4142135623730951}, "icepool.Deal.deck": {"tf": 1}, "icepool.Deal.outcomes": {"tf": 1.4142135623730951}}, "df": 10}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Again": {"tf": 1}}, "df": 1}}}}}, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Reroll": {"tf": 1}}, "df": 1}}}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.OutcomeCountEvaluator.order": {"tf": 1.4142135623730951}, "icepool.JointEvaluator.order": {"tf": 1}, "icepool.SumEvaluator.order": {"tf": 1.4142135623730951}, "icepool.ExpandEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.order": {"tf": 1.4142135623730951}}, "df": 6}}}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.OutcomeCountGenerator": {"tf": 1}, "icepool.Deck.deal": {"tf": 1.4142135623730951}, "icepool.Deal": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1.7320508075688772}}, "df": 4, "s": {"docs": {"icepool.OutcomeCountGenerator": {"tf": 1}}, "df": 1}, "t": {"docs": {"icepool.Deal.deck": {"tf": 1}, "icepool.Deal.hand_sizes": {"tf": 1}, "icepool.Deal.total_cards_dealt": {"tf": 1}}, "df": 3}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"icepool.OutcomeCountGenerator.contains_subset": {"tf": 1}, "icepool.OutcomeCountGenerator.intersection_size": {"tf": 1}, "icepool.ExpandEvaluator.__init__": {"tf": 1}}, "df": 3, "s": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Population.denominator": {"tf": 1}, "icepool.Deck": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}, "icepool.Deck.size": {"tf": 1}}, "df": 5}, "d": {"docs": {"icepool.Deck.__init__": {"tf": 1}}, "df": 1}}}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Die.equals": {"tf": 1}}, "df": 1}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.keep_lowest": {"tf": 1}, "icepool.Die.keep_highest": {"tf": 1}, "icepool.lowest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.Pool.lowest": {"tf": 1}, "icepool.Pool.highest": {"tf": 1}}, "df": 7, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.keep_lowest": {"tf": 1}, "icepool.Die.keep_highest": {"tf": 1}, "icepool.lowest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1}, "icepool.Pool.lowest": {"tf": 1}, "icepool.Pool.highest": {"tf": 1}}, "df": 7}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"icepool.Die.equals": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {"icepool": {"tf": 1.4142135623730951}, "icepool.standard": {"tf": 1.7320508075688772}, "icepool.d": {"tf": 1.7320508075688772}, "icepool.bernoulli": {"tf": 1}, "icepool.coin": {"tf": 1}, "icepool.one_hot": {"tf": 1.4142135623730951}, "icepool.cartesian_product": {"tf": 1}, "icepool.Die": {"tf": 2.23606797749979}, "icepool.Die.__init__": {"tf": 5.196152422706632}, "icepool.Die.unary_op": {"tf": 1.7320508075688772}, "icepool.Die.binary_op": {"tf": 2}, "icepool.Die.reroll": {"tf": 2.23606797749979}, "icepool.Die.filter": {"tf": 2}, "icepool.Die.map": {"tf": 2}, "icepool.Die.map_and_time": {"tf": 2.23606797749979}, "icepool.Die.explode": {"tf": 2.23606797749979}, "icepool.Die.is_in": {"tf": 1}, "icepool.Die.count": {"tf": 1}, "icepool.Die.count_in": {"tf": 1}, "icepool.Die.pool": {"tf": 1.4142135623730951}, "icepool.Die.keep_lowest": {"tf": 1}, "icepool.Die.keep_highest": {"tf": 1}, "icepool.Die.zero": {"tf": 1}, "icepool.Die.zero_outcome": {"tf": 1.4142135623730951}, "icepool.Die.cmp": {"tf": 1}, "icepool.Die.key_tuple": {"tf": 1}, "icepool.Die.equals": {"tf": 2.8284271247461903}, "icepool.Population": {"tf": 1}, "icepool.Population.quantity": {"tf": 1}, "icepool.Population.quantity_ne": {"tf": 1}, "icepool.Population.quantity_le": {"tf": 1}, "icepool.Population.quantity_lt": {"tf": 1}, "icepool.Population.quantity_ge": {"tf": 1}, "icepool.Population.quantity_gt": {"tf": 1}, "icepool.Population.probability": {"tf": 1}, "icepool.Population.mode": {"tf": 1}, "icepool.Population.median": {"tf": 1}, "icepool.Population.median_left": {"tf": 1}, "icepool.Population.median_right": {"tf": 1}, "icepool.Population.quantile": {"tf": 1}, "icepool.Population.quantile_left": {"tf": 1}, "icepool.Population.quantile_right": {"tf": 1}, "icepool.Population.marginals": {"tf": 1}, "icepool.Population.sample": {"tf": 1}, "icepool.Population.format": {"tf": 1.4142135623730951}, "icepool.Again": {"tf": 1}, "icepool.CountsKeysView": {"tf": 1.4142135623730951}, "icepool.CountsValuesView": {"tf": 1.4142135623730951}, "icepool.CountsItemsView": {"tf": 1}, "icepool.from_cumulative_quantities": {"tf": 1.7320508075688772}, "icepool.from_rv": {"tf": 1.7320508075688772}, "icepool.align": {"tf": 1}, "icepool.align_range": {"tf": 1}, "icepool.reduce": {"tf": 1.7320508075688772}, "icepool.accumulate": {"tf": 1.7320508075688772}, "icepool.apply": {"tf": 2.6457513110645907}, "icepool.apply_sorted": {"tf": 1.4142135623730951}, "icepool.apply_sorted.__init__": {"tf": 1.7320508075688772}, "icepool.OutcomeCountGenerator.evaluate": {"tf": 1.7320508075688772}, "icepool.OutcomeCountGenerator.contains_subset": {"tf": 1.4142135623730951}, "icepool.OutcomeCountGenerator.intersection_size": {"tf": 2}, "icepool.OutcomeCountGenerator.largest_matching_set": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_matching_set_and_outcome": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_straight": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_straight_and_outcome": {"tf": 1}, "icepool.OutcomeCountGenerator.sample": {"tf": 1.4142135623730951}, "icepool.Pool": {"tf": 1.4142135623730951}, "icepool.Pool.__init__": {"tf": 3}, "icepool.Pool.set_sorted_roll_counts": {"tf": 3.3166247903554}, "icepool.standard_pool": {"tf": 1.7320508075688772}, "icepool.OutcomeCountEvaluator": {"tf": 2}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 2.8284271247461903}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 3.4641016151377544}, "icepool.OutcomeCountEvaluator.order": {"tf": 2.23606797749979}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1.7320508075688772}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 1.7320508075688772}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 2.449489742783178}, "icepool.JointEvaluator": {"tf": 1}, "icepool.JointEvaluator.next_state": {"tf": 1}, "icepool.JointEvaluator.final_outcome": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 3.4641016151377544}, "icepool.SumEvaluator.order": {"tf": 2.23606797749979}, "icepool.ExpandEvaluator": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 2.8284271247461903}, "icepool.ExpandEvaluator.order": {"tf": 2.23606797749979}, "icepool.ExpandEvaluator.final_outcome": {"tf": 3.4641016151377544}, "icepool.Deck": {"tf": 1}, "icepool.Deck.__init__": {"tf": 3}, "icepool.Deck.deal": {"tf": 1}, "icepool.Deck.map": {"tf": 2}, "icepool.Deal": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1}, "icepool.Deal.hand_sizes": {"tf": 1}, "icepool.Deal.outcomes": {"tf": 1}, "icepool.SuitGenerator": {"tf": 1.7320508075688772}}, "df": 95, "n": {"docs": {"icepool": {"tf": 1}, "icepool.one_hot": {"tf": 1}, "icepool.Die.__init__": {"tf": 1}, "icepool.Die.unary_op": {"tf": 1}, "icepool.Die.binary_op": {"tf": 1}, "icepool.Die.reroll": {"tf": 1.4142135623730951}, "icepool.Die.filter": {"tf": 1.4142135623730951}, "icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1.4142135623730951}, "icepool.Die.explode": {"tf": 1.4142135623730951}, "icepool.Die.equals": {"tf": 1}, "icepool.Again.__init__": {"tf": 1}, "icepool.CountsItemsView": {"tf": 1}, "icepool.from_rv": {"tf": 1}, "icepool.reduce": {"tf": 1}, "icepool.accumulate": {"tf": 1}, "icepool.apply": {"tf": 1}, "icepool.apply_sorted.__init__": {"tf": 1.4142135623730951}, "icepool.Reroll": {"tf": 1}, "icepool.OutcomeCountGenerator": {"tf": 1}, "icepool.OutcomeCountGenerator.evaluate": {"tf": 1.7320508075688772}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.OutcomeCountEvaluator.order": {"tf": 1}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 1}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 1}, "icepool.JointEvaluator": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1}, "icepool.SumEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.ExpandEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1}, "icepool.Deal": {"tf": 1}}, "df": 36, "d": {"docs": {"icepool": {"tf": 2}, "icepool.bernoulli": {"tf": 1}, "icepool.coin": {"tf": 1}, "icepool.one_hot": {"tf": 1}, "icepool.Outcome": {"tf": 1}, "icepool.Die": {"tf": 1.4142135623730951}, "icepool.Die.__init__": {"tf": 2.449489742783178}, "icepool.Die.unary_op": {"tf": 1}, "icepool.Die.binary_op": {"tf": 1.4142135623730951}, "icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Die.explode": {"tf": 1.4142135623730951}, "icepool.Die.if_else": {"tf": 1}, "icepool.Die.count": {"tf": 1}, "icepool.Die.count_in": {"tf": 1}, "icepool.Die.pool": {"tf": 1}, "icepool.Die.keep_lowest": {"tf": 1}, "icepool.Die.keep_highest": {"tf": 1}, "icepool.Die.cmp": {"tf": 1.4142135623730951}, "icepool.Die.sign": {"tf": 1.4142135623730951}, "icepool.Die.key_tuple": {"tf": 1}, "icepool.Die.equals": {"tf": 1.7320508075688772}, "icepool.Population": {"tf": 1.4142135623730951}, "icepool.Population.quantile": {"tf": 1}, "icepool.Population.sample": {"tf": 1}, "icepool.Again": {"tf": 1.7320508075688772}, "icepool.Again.__init__": {"tf": 1}, "icepool.CountsKeysView": {"tf": 1}, "icepool.CountsValuesView": {"tf": 1}, "icepool.CountsItemsView": {"tf": 1}, "icepool.accumulate": {"tf": 1}, "icepool.apply": {"tf": 1.7320508075688772}, "icepool.apply_sorted.__init__": {"tf": 1.4142135623730951}, "icepool.Reroll": {"tf": 1}, "icepool.OutcomeCountGenerator": {"tf": 1}, "icepool.OutcomeCountGenerator.evaluate": {"tf": 1.4142135623730951}, "icepool.OutcomeCountGenerator.expand": {"tf": 1}, "icepool.OutcomeCountGenerator.intersection_size": {"tf": 1.4142135623730951}, "icepool.OutcomeCountGenerator.sample": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 2.23606797749979}, "icepool.OutcomeCountEvaluator": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.order": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.sample": {"tf": 1}, "icepool.JointEvaluator.order": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.SumEvaluator.order": {"tf": 1.4142135623730951}, "icepool.ExpandEvaluator": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.ExpandEvaluator.order": {"tf": 1.4142135623730951}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.Deck.__init__": {"tf": 1.4142135623730951}, "icepool.SuitGenerator": {"tf": 1.7320508075688772}}, "df": 56, "/": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die.set_outcomes": {"tf": 1}}, "df": 1}}}}, "y": {"docs": {"icepool.Die": {"tf": 1.4142135623730951}, "icepool.Die.__init__": {"tf": 1.4142135623730951}, "icepool.Die.key_tuple": {"tf": 1.4142135623730951}, "icepool.Population.modal_quantity": {"tf": 1}, "icepool.Population.format": {"tf": 1}, "icepool.apply": {"tf": 1}, "icepool.apply_sorted.__init__": {"tf": 1}, "icepool.Pool.lowest": {"tf": 1}, "icepool.Pool.highest": {"tf": 1}, "icepool.OutcomeCountEvaluator": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.OutcomeCountEvaluator.order": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 1.7320508075688772}, "icepool.SumEvaluator.final_outcome": {"tf": 1}, "icepool.SumEvaluator.order": {"tf": 1.4142135623730951}, "icepool.ExpandEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.order": {"tf": 1.4142135623730951}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1}}, "df": 20, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {"icepool.reduce": {"tf": 1}, "icepool.accumulate": {"tf": 1}}, "df": 2}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"icepool": {"tf": 1.4142135623730951}, "icepool.standard": {"tf": 1}, "icepool.d": {"tf": 1}, "icepool.one_hot": {"tf": 1}, "icepool.cartesian_product": {"tf": 1}, "icepool.Outcome": {"tf": 1}, "icepool.Die": {"tf": 1.4142135623730951}, "icepool.Die.__init__": {"tf": 1.7320508075688772}, "icepool.Die.unary_op": {"tf": 1.4142135623730951}, "icepool.Die.binary_op": {"tf": 2}, "icepool.Die.truncate": {"tf": 1}, "icepool.Die.clip": {"tf": 1}, "icepool.Die.set_outcomes": {"tf": 1.4142135623730951}, "icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1.4142135623730951}, "icepool.Die.count": {"tf": 1}, "icepool.Die.count_in": {"tf": 1}, "icepool.Die.zero_outcome": {"tf": 1}, "icepool.Die.cmp": {"tf": 1}, "icepool.Die.equals": {"tf": 1}, "icepool.Population.outcomes": {"tf": 1}, "icepool.Population.tuple_len": {"tf": 1.4142135623730951}, "icepool.Population.quantities": {"tf": 1}, "icepool.Population.probabilities_ge": {"tf": 1.4142135623730951}, "icepool.Population.mode": {"tf": 1}, "icepool.Population.sample": {"tf": 1}, "icepool.Population.format": {"tf": 1}, "icepool.Again": {"tf": 1}, "icepool.from_cumulative_quantities": {"tf": 1}, "icepool.reduce": {"tf": 1}, "icepool.accumulate": {"tf": 1}, "icepool.apply": {"tf": 1}, "icepool.OutcomeCountGenerator": {"tf": 1}, "icepool.OutcomeCountGenerator.expand": {"tf": 1}, "icepool.OutcomeCountGenerator.count": {"tf": 1}, "icepool.OutcomeCountGenerator.count_in": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1.4142135623730951}, "icepool.Pool.set_sorted_roll_counts": {"tf": 2.23606797749979}, "icepool.OutcomeCountEvaluator": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 2.449489742783178}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.order": {"tf": 1}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 1}, "icepool.Order": {"tf": 1}, "icepool.JointEvaluator.order": {"tf": 1.4142135623730951}, "icepool.SumEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.SumEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 2.449489742783178}, "icepool.ExpandEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.Deck.__init__": {"tf": 1}, "icepool.Deck.map": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1}, "icepool.Deal.deck": {"tf": 1}, "icepool.Deal.outcomes": {"tf": 1}, "icepool.SuitGenerator": {"tf": 1.4142135623730951}}, "df": 58}, "g": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.set_outcomes": {"tf": 1.4142135623730951}, "icepool.Die.if_else": {"tf": 1.4142135623730951}, "icepool.Die.pool": {"tf": 1.4142135623730951}, "icepool.Population.nearest_le": {"tf": 1}, "icepool.Population.nearest_ge": {"tf": 1}, "icepool.align": {"tf": 1}, "icepool.align_range": {"tf": 1}, "icepool.apply": {"tf": 1.7320508075688772}, "icepool.apply_sorted.__init__": {"tf": 1.7320508075688772}, "icepool.Pool.__init__": {"tf": 1}}, "df": 10, "s": {"docs": {"icepool.Die": {"tf": 1}, "icepool.Die.__init__": {"tf": 1.7320508075688772}, "icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.truncate": {"tf": 1}, "icepool.Die.clip": {"tf": 1}, "icepool.Die.set_range": {"tf": 1}, "icepool.Die.map": {"tf": 1.4142135623730951}, "icepool.Die.map_and_time": {"tf": 1.4142135623730951}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.if_else": {"tf": 1}, "icepool.Die.pool": {"tf": 1}, "icepool.Die.keep_lowest": {"tf": 1}, "icepool.Die.keep_highest": {"tf": 1}, "icepool.Die.zero": {"tf": 1}, "icepool.Die.equals": {"tf": 1}, "icepool.Population.probabilities": {"tf": 1}, "icepool.Population.probabilities_le": {"tf": 1}, "icepool.Population.probabilities_ge": {"tf": 1}, "icepool.Population.probabilities_lt": {"tf": 1}, "icepool.Population.probabilities_gt": {"tf": 1}, "icepool.Again": {"tf": 1.4142135623730951}, "icepool.from_cumulative_quantities": {"tf": 1.4142135623730951}, "icepool.from_rv": {"tf": 1}, "icepool.align": {"tf": 1}, "icepool.align_range": {"tf": 1}, "icepool.lowest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.reduce": {"tf": 1.7320508075688772}, "icepool.accumulate": {"tf": 1.7320508075688772}, "icepool.apply": {"tf": 1.4142135623730951}, "icepool.apply_sorted.__init__": {"tf": 1}, "icepool.OutcomeCountGenerator.evaluate": {"tf": 1}, "icepool.OutcomeCountGenerator.expand": {"tf": 1}, "icepool.OutcomeCountGenerator.sum": {"tf": 1}, "icepool.OutcomeCountGenerator.contains_subset": {"tf": 1}, "icepool.OutcomeCountGenerator.intersection_size": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.Pool.lowest": {"tf": 1}, "icepool.Pool.highest": {"tf": 1}, "icepool.standard_pool": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.OutcomeCountEvaluator.order": {"tf": 1}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 1.4142135623730951}, "icepool.SumEvaluator.final_outcome": {"tf": 1}, "icepool.SumEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.__init__": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.ExpandEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}, "icepool.Deck.map": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1}}, "df": 54}}}}}}, "s": {"docs": {"icepool.Again.__init__": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1}, "icepool.Pool.lowest": {"tf": 1}, "icepool.Pool.highest": {"tf": 1}}, "df": 4}}, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"icepool.OutcomeCountEvaluator": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.OutcomeCountEvaluator.order": {"tf": 1}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1}, "icepool.SumEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1}}, "df": 11}}}}}}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"icepool": {"tf": 1}, "icepool.Die.key_tuple": {"tf": 1}}, "df": 2}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die.__init__": {"tf": 1.4142135623730951}, "icepool.reduce": {"tf": 1.4142135623730951}, "icepool.accumulate": {"tf": 1.4142135623730951}, "icepool.apply": {"tf": 2}, "icepool.apply_sorted.__init__": {"tf": 2}, "icepool.Pool.__init__": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}}, "df": 7, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Die.unary_op": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.truncate": {"tf": 1}, "icepool.Die.clip": {"tf": 1}, "icepool.Population.format": {"tf": 1}}, "df": 3}}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Population.marginals": {"tf": 1}, "icepool.reduce": {"tf": 1}, "icepool.accumulate": {"tf": 1}, "icepool.apply": {"tf": 1}, "icepool.apply_sorted.__init__": {"tf": 1}}, "df": 5}, "d": {"docs": {"icepool.reduce": {"tf": 1}, "icepool.accumulate": {"tf": 1}}, "df": 2}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.OutcomeCountGenerator.contains_subset": {"tf": 1}, "icepool.OutcomeCountGenerator.intersection_size": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}}, "df": 4}}}}}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Pool.set_sorted_roll_counts": {"tf": 1.7320508075688772}}, "df": 1, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Die.pool": {"tf": 1}}, "df": 1}}}, "s": {"docs": {"icepool.Pool.set_sorted_roll_counts": {"tf": 1.4142135623730951}}, "df": 1}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Die.binary_op": {"tf": 1}, "icepool.OutcomeCountGenerator.sum": {"tf": 1}}, "df": 2}}}}}}, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.filter": {"tf": 1}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"icepool.accumulate": {"tf": 1}}, "df": 1}}}}}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"icepool": {"tf": 1}, "icepool.Die": {"tf": 1}, "icepool.Die.__init__": {"tf": 1.4142135623730951}, "icepool.Die.simplify": {"tf": 1}, "icepool.Die.trim": {"tf": 1}, "icepool.Die.keep_lowest": {"tf": 1}, "icepool.Die.zero": {"tf": 1}, "icepool.Die.cmp": {"tf": 1}, "icepool.Die.sign": {"tf": 1}, "icepool.Population.denominator": {"tf": 1}, "icepool.align": {"tf": 1}, "icepool.align_range": {"tf": 1}, "icepool.apply": {"tf": 1.4142135623730951}, "icepool.apply_sorted.__init__": {"tf": 2}, "icepool.Reroll": {"tf": 1}, "icepool.OutcomeCountGenerator.denominator": {"tf": 1}, "icepool.OutcomeCountGenerator.expand": {"tf": 1}, "icepool.OutcomeCountGenerator.count": {"tf": 1}, "icepool.OutcomeCountGenerator.contains_subset": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1.7320508075688772}, "icepool.Pool.denominator": {"tf": 1}, "icepool.Pool.outcomes": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1}, "icepool.Pool.min_outcome": {"tf": 1}, "icepool.Pool.max_outcome": {"tf": 1}, "icepool.OutcomeCountEvaluator": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 1}, "icepool.JointEvaluator.next_state": {"tf": 1}, "icepool.JointEvaluator.final_outcome": {"tf": 1}, "icepool.SumEvaluator": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1}, "icepool.ExpandEvaluator": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}, "icepool.Deck.size": {"tf": 1}, "icepool.Deal.denominator": {"tf": 1}, "icepool.SuitGenerator.denominator": {"tf": 1}}, "df": 40, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "s": {"docs": {"icepool.from_cumulative_quantities": {"tf": 1}}, "df": 1}}}}, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "s": {"docs": {"icepool.standard": {"tf": 1}, "icepool.d": {"tf": 1}, "icepool.Die.__init__": {"tf": 1.4142135623730951}, "icepool.Population.sample": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.OutcomeCountEvaluator.order": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1}, "icepool.SumEvaluator.order": {"tf": 1.4142135623730951}, "icepool.ExpandEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.order": {"tf": 1.4142135623730951}}, "df": 11}}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Die": {"tf": 1}}, "df": 1, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1.7320508075688772}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 1.7320508075688772}, "icepool.ExpandEvaluator.next_state": {"tf": 1.4142135623730951}}, "df": 5}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.align": {"tf": 1}, "icepool.align_range": {"tf": 1}}, "df": 2}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {"icepool.OutcomeCountEvaluator.evaluate": {"tf": 1}}, "df": 1}}}, "s": {"docs": {}, "df": 0, "o": {"docs": {"icepool.Die": {"tf": 1}, "icepool.Die.__init__": {"tf": 1.4142135623730951}, "icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Population.outcomes": {"tf": 1}, "icepool.Population.quantities": {"tf": 1}, "icepool.Population.probabilities": {"tf": 1}, "icepool.Population.probabilities_le": {"tf": 1}, "icepool.Population.probabilities_ge": {"tf": 1}, "icepool.Deal.outcomes": {"tf": 1}}, "df": 10}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.binary_op": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1}}, "df": 3}}}}}, "g": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "m": {"docs": {"icepool.Die.binary_op": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "c": {"docs": {"icepool.Deal.__init__": {"tf": 1}}, "df": 1}}}}}}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Reroll": {"tf": 1}, "icepool.OutcomeCountEvaluator": {"tf": 1}}, "df": 2}}}}, "s": {"docs": {"icepool.Die": {"tf": 1}, "icepool.Die.__init__": {"tf": 2}, "icepool.Die.unary_op": {"tf": 1.7320508075688772}, "icepool.Die.binary_op": {"tf": 1}, "icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.clip": {"tf": 1}, "icepool.Die.map": {"tf": 1.7320508075688772}, "icepool.Die.map_and_time": {"tf": 1.4142135623730951}, "icepool.Die.explode": {"tf": 1.4142135623730951}, "icepool.Die.pool": {"tf": 1.4142135623730951}, "icepool.Die.keep_lowest": {"tf": 1}, "icepool.Die.zero": {"tf": 1}, "icepool.Die.key_tuple": {"tf": 1}, "icepool.Die.equals": {"tf": 1}, "icepool.Population.probabilities": {"tf": 1}, "icepool.Population.probabilities_le": {"tf": 1}, "icepool.Population.probabilities_ge": {"tf": 1}, "icepool.Population.unary_op_non_elementwise": {"tf": 1}, "icepool.Population.format": {"tf": 1}, "icepool.CountsKeysView": {"tf": 1}, "icepool.CountsValuesView": {"tf": 1}, "icepool.CountsItemsView": {"tf": 1}, "icepool.from_rv": {"tf": 1.4142135623730951}, "icepool.accumulate": {"tf": 1}, "icepool.apply": {"tf": 1.4142135623730951}, "icepool.apply_sorted": {"tf": 1}, "icepool.apply_sorted.__init__": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1.4142135623730951}, "icepool.Pool.set_sorted_roll_counts": {"tf": 2.8284271247461903}, "icepool.OutcomeCountEvaluator": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.SumEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.ExpandEvaluator.__init__": {"tf": 1}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.Deck.__init__": {"tf": 1}, "icepool.Deck.map": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1}, "icepool.Deal.hand_sizes": {"tf": 1}, "icepool.Deal.outcomes": {"tf": 1}}, "df": 40, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.OutcomeCountEvaluator.order": {"tf": 1.7320508075688772}, "icepool.JointEvaluator.order": {"tf": 1}, "icepool.SumEvaluator.order": {"tf": 1.7320508075688772}, "icepool.ExpandEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.order": {"tf": 1.7320508075688772}}, "df": 8}}}}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Deck.__init__": {"tf": 1}}, "df": 1}}}}}}}, "t": {"docs": {"icepool.one_hot": {"tf": 1}, "icepool.Die": {"tf": 1}, "icepool.Die.clip": {"tf": 1}, "icepool.Population.has_zero_quantities": {"tf": 1}, "icepool.lowest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.reduce": {"tf": 1}, "icepool.accumulate": {"tf": 1}, "icepool.apply": {"tf": 1.4142135623730951}, "icepool.apply_sorted.__init__": {"tf": 1.4142135623730951}, "icepool.OutcomeCountGenerator.expand": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1}, "icepool.OutcomeCountEvaluator": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}}, "df": 15, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.__init__": {"tf": 1}}, "df": 1}}}}}}, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Again": {"tf": 1}}, "df": 2, "s": {"docs": {"icepool.OutcomeCountEvaluator": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1.4142135623730951}, "icepool.Population.format": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1}, "icepool.OutcomeCountEvaluator": {"tf": 1}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1}}, "df": 8, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die.pool": {"tf": 1}}, "df": 1}}}}}}}}}, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Die.__init__": {"tf": 3.4641016151377544}, "icepool.Die.map": {"tf": 2.23606797749979}, "icepool.Die.map_and_time": {"tf": 2.23606797749979}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.if_else": {"tf": 1.4142135623730951}, "icepool.Again": {"tf": 3}, "icepool.Again.__init__": {"tf": 1}, "icepool.reduce": {"tf": 1.4142135623730951}, "icepool.apply": {"tf": 1.4142135623730951}, "icepool.apply_sorted.__init__": {"tf": 1.4142135623730951}, "icepool.Reroll": {"tf": 1.7320508075688772}, "icepool.Deck.__init__": {"tf": 1}}, "df": 12}}}}, "b": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die.unary_op": {"tf": 1}}, "df": 1, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Die.map_and_time": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Population.kolmogorov_smirnov": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1}}, "df": 2}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"icepool.OutcomeCountGenerator": {"tf": 1}, "icepool.OutcomeCountEvaluator": {"tf": 1.4142135623730951}}, "df": 2}}}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.map_and_time": {"tf": 1}}, "df": 1}}, "v": {"docs": {}, "df": 0, "e": {"docs": {"icepool.apply": {"tf": 1}}, "df": 1}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.OutcomeCountEvaluator": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.OutcomeCountEvaluator.order": {"tf": 1}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1}, "icepool.SumEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1}}, "df": 11}}}, "d": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.set_outcomes": {"tf": 1}, "icepool.Again": {"tf": 1}, "icepool.SumEvaluator.next_state": {"tf": 1}}, "df": 3, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Population.quantile": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Die.unary_op": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.accumulate": {"tf": 1}, "icepool.apply": {"tf": 1}}, "df": 4, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die.binary_op": {"tf": 1}}, "df": 1}}}}}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.explode": {"tf": 1}}, "df": 1}}}, "j": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.clip": {"tf": 1}}, "df": 1}}}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}}, "df": 2}}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {"icepool.Die.binary_op": {"tf": 1}}, "df": 1}, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Population.probabilities_le": {"tf": 1}, "icepool.Population.probabilities_ge": {"tf": 1}}, "df": 2}}}}}, "u": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Pool.set_sorted_roll_counts": {"tf": 1}}, "df": 1}}}}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.lowest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.min_outcome": {"tf": 1}, "icepool.max_outcome": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_matching_set": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_matching_set_and_outcome": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_straight": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_straight_and_outcome": {"tf": 1}, "icepool.Pool.outcomes": {"tf": 1}, "icepool.Pool.min_outcome": {"tf": 1}, "icepool.Pool.max_outcome": {"tf": 1}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 1}}, "df": 12}}}}}, "s": {"docs": {"icepool.standard": {"tf": 1}, "icepool.d": {"tf": 1}, "icepool.Die": {"tf": 1.7320508075688772}, "icepool.Die.items": {"tf": 1}, "icepool.Die.zero": {"tf": 1}, "icepool.Die.zero_outcome": {"tf": 1}, "icepool.Die.sign": {"tf": 1}, "icepool.Population.items": {"tf": 1}, "icepool.Population.mode": {"tf": 1}, "icepool.from_rv": {"tf": 1.7320508075688772}, "icepool.OutcomeCountGenerator": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_straight": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_straight_and_outcome": {"tf": 1}, "icepool.OutcomeCountEvaluator": {"tf": 1}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.OutcomeCountEvaluator.order": {"tf": 1}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 1}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.sample": {"tf": 1}, "icepool.JointEvaluator": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1}, "icepool.SumEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1}, "icepool.Deck.items": {"tf": 1}, "icepool.Deck.map": {"tf": 1}}, "df": 27, "e": {"docs": {}, "df": 0, "e": {"docs": {"icepool": {"tf": 1}, "icepool.Die.__init__": {"tf": 1.4142135623730951}, "icepool.Die.unary_op": {"tf": 1}, "icepool.apply_sorted": {"tf": 1}, "icepool.apply_sorted.__init__": {"tf": 1}, "icepool.Reroll": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.order": {"tf": 1.7320508075688772}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1}, "icepool.SumEvaluator.order": {"tf": 1.7320508075688772}, "icepool.ExpandEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.ExpandEvaluator.order": {"tf": 1.7320508075688772}, "icepool.Deck.deal": {"tf": 1}}, "df": 13, "n": {"docs": {"icepool.OutcomeCountEvaluator.next_state": {"tf": 2.23606797749979}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1.4142135623730951}, "icepool.Order": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 2.23606797749979}}, "df": 4}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"icepool": {"tf": 1}}, "df": 1, "d": {"docs": {"icepool.Population.format": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "t": {"docs": {"icepool.one_hot": {"tf": 1}, "icepool.Die": {"tf": 1}, "icepool.Die.__init__": {"tf": 1}, "icepool.Die.binary_op": {"tf": 1}, "icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.set_outcomes": {"tf": 1}, "icepool.Die.map": {"tf": 1.4142135623730951}, "icepool.Die.map_and_time": {"tf": 1.4142135623730951}, "icepool.Die.explode": {"tf": 1}, "icepool.Population.probabilities": {"tf": 1}, "icepool.Population.probabilities_le": {"tf": 1}, "icepool.Population.probabilities_ge": {"tf": 1}, "icepool.Population.probabilities_lt": {"tf": 1}, "icepool.Population.probabilities_gt": {"tf": 1}, "icepool.from_rv": {"tf": 1}, "icepool.align": {"tf": 1}, "icepool.align_range": {"tf": 1}, "icepool.OutcomeCountGenerator.outcomes": {"tf": 1}, "icepool.OutcomeCountGenerator.expand": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_matching_set": {"tf": 1.7320508075688772}, "icepool.OutcomeCountGenerator.largest_matching_set_and_outcome": {"tf": 1.7320508075688772}, "icepool.Pool": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.OutcomeCountEvaluator.order": {"tf": 1}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 1.4142135623730951}, "icepool.SumEvaluator.final_outcome": {"tf": 1}, "icepool.SumEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.ExpandEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1}, "icepool.Deck.map": {"tf": 1}, "icepool.SuitGenerator.outcomes": {"tf": 1}}, "df": 35, "s": {"docs": {"icepool.Die.set_range": {"tf": 1}, "icepool.Die.set_outcomes": {"tf": 1}}, "df": 2}}, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Die": {"tf": 1}}, "df": 1}}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.__init__": {"tf": 1.7320508075688772}, "icepool.Die.pool": {"tf": 1}, "icepool.CountsKeysView": {"tf": 1}, "icepool.CountsValuesView": {"tf": 1}, "icepool.CountsItemsView": {"tf": 1}, "icepool.from_cumulative_quantities": {"tf": 1}, "icepool.reduce": {"tf": 1.7320508075688772}, "icepool.accumulate": {"tf": 1.7320508075688772}, "icepool.Pool.__init__": {"tf": 1.4142135623730951}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1}, "icepool.OutcomeCountEvaluator": {"tf": 1}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1.4142135623730951}}, "df": 13}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.keep_lowest": {"tf": 1}, "icepool.Die.keep_highest": {"tf": 1}, "icepool.apply": {"tf": 1}, "icepool.Deck.map": {"tf": 1}}, "df": 5}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.if_else": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die.__init__": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Population.sample": {"tf": 1}, "icepool.OutcomeCountGenerator.sample": {"tf": 1}}, "df": 2}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1.4142135623730951}}, "df": 2}}, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.apply_sorted.__init__": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1}}, "df": 2}}}, "s": {"docs": {"icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}}, "df": 2}, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Pool.set_sorted_roll_counts": {"tf": 1.7320508075688772}}, "df": 1}}}}}, "f": {"docs": {"icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Die.keep_lowest": {"tf": 1}, "icepool.Die.cmp": {"tf": 1.4142135623730951}, "icepool.Population.has_zero_quantities": {"tf": 1}, "icepool.Deck.map": {"tf": 1}}, "df": 6}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {"icepool.Population.format": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool": {"tf": 1.4142135623730951}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1}}, "df": 2}}, "c": {"docs": {"icepool.Die": {"tf": 1}, "icepool.Die.unary_op": {"tf": 1}, "icepool.Die.binary_op": {"tf": 1}, "icepool.Reroll": {"tf": 1}}, "df": 4, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.standard": {"tf": 1}, "icepool.d": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1}}, "df": 3}}}}}}, "y": {"docs": {"icepool.OutcomeCountEvaluator.alignment": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}}, "df": 4}}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Population.format": {"tf": 1}, "icepool.Reroll": {"tf": 1}}, "df": 2}}}}, "o": {"docs": {"icepool.Population.marginals": {"tf": 1}, "icepool.align": {"tf": 1}, "icepool.align_range": {"tf": 1}}, "df": 3, "r": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.__init__": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1}}, "df": 2}}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Outcome": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.keys": {"tf": 1}, "icepool.Die.items": {"tf": 1}, "icepool.Die.pool": {"tf": 1}, "icepool.Die.keep_lowest": {"tf": 1}, "icepool.Die.keep_highest": {"tf": 1}, "icepool.Population.keys": {"tf": 1}, "icepool.Population.items": {"tf": 1}, "icepool.Population.outcomes": {"tf": 1}, "icepool.Population.quantities": {"tf": 1}, "icepool.Population.mode": {"tf": 1}, "icepool.from_cumulative_quantities": {"tf": 1}, "icepool.apply": {"tf": 1}, "icepool.apply_sorted.__init__": {"tf": 2.6457513110645907}, "icepool.OutcomeCountGenerator.outcomes": {"tf": 1}, "icepool.OutcomeCountGenerator.sample": {"tf": 1}, "icepool.Pool.sorted_roll_counts": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 2.449489742783178}, "icepool.Pool.lowest": {"tf": 1}, "icepool.Pool.highest": {"tf": 1}, "icepool.Deck.keys": {"tf": 1}, "icepool.Deck.items": {"tf": 1}, "icepool.Deal.outcomes": {"tf": 1}, "icepool.SuitGenerator.outcomes": {"tf": 1}}, "df": 23, "/": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Pool": {"tf": 1}, "icepool.Deal": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.__init__": {"tf": 1.7320508075688772}, "icepool.Die.unary_op": {"tf": 1}, "icepool.Die.binary_op": {"tf": 1}, "icepool.Die.clip": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1}, "icepool.JointEvaluator.order": {"tf": 1}}, "df": 6, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Again": {"tf": 1}}, "df": 1}}}}}}}, "l": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"icepool.apply": {"tf": 1.4142135623730951}}, "df": 1}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"icepool.SuitGenerator": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"icepool.standard": {"tf": 1}, "icepool.d": {"tf": 1}, "icepool.Die.unary_op": {"tf": 1}, "icepool.Die.binary_op": {"tf": 1.4142135623730951}, "icepool.Population.sample": {"tf": 1}, "icepool.OutcomeCountGenerator.sample": {"tf": 1}, "icepool.standard_pool": {"tf": 1}, "icepool.OutcomeCountEvaluator.order": {"tf": 1}, "icepool.SumEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.order": {"tf": 1}}, "df": 10}}}}}, "r": {"docs": {"icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Deck.map": {"tf": 1}}, "df": 6, "t": {"docs": {"icepool.Population.format": {"tf": 1}}, "df": 1}}, "y": {"docs": {"icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Deck.map": {"tf": 1}}, "df": 3}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"icepool.Population.kolmogorov_smirnov": {"tf": 1}, "icepool.Population.cramer_von_mises": {"tf": 1}}, "df": 2}}}}}, "s": {"docs": {"icepool.from_rv": {"tf": 1.4142135623730951}}, "df": 1}, "e": {"docs": {"icepool.OutcomeCountGenerator.evaluate": {"tf": 1.7320508075688772}, "icepool.OutcomeCountEvaluator": {"tf": 4.69041575982343}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 3.3166247903554}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 2.23606797749979}, "icepool.OutcomeCountEvaluator.order": {"tf": 1.7320508075688772}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1.7320508075688772}, "icepool.JointEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.JointEvaluator.final_outcome": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 2.23606797749979}, "icepool.SumEvaluator.order": {"tf": 1.7320508075688772}, "icepool.ExpandEvaluator.next_state": {"tf": 3.3166247903554}, "icepool.ExpandEvaluator.order": {"tf": 1.7320508075688772}, "icepool.ExpandEvaluator.final_outcome": {"tf": 2.23606797749979}, "icepool.Deal.__init__": {"tf": 1}}, "df": 14, "s": {"docs": {"icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}}, "df": 2}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Reroll": {"tf": 1}}, "df": 1}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Population.format": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"icepool.OutcomeCountGenerator.largest_straight": {"tf": 1.7320508075688772}, "icepool.OutcomeCountGenerator.largest_straight_and_outcome": {"tf": 1.7320508075688772}}, "df": 2}}}}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"icepool.apply": {"tf": 1}, "icepool.apply_sorted.__init__": {"tf": 1}}, "df": 2}}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.binary_op": {"tf": 1}, "icepool.Die.truncate": {"tf": 1}, "icepool.Die.clip": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1.4142135623730951}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1.4142135623730951}}, "df": 5, "s": {"docs": {"icepool.standard": {"tf": 1}, "icepool.d": {"tf": 1}}, "df": 2}, "d": {"docs": {"icepool.Pool.set_sorted_roll_counts": {"tf": 1}}, "df": 1}}}, "x": {"docs": {"icepool.Die.__init__": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool.one_hot": {"tf": 1}}, "df": 1}}}, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.__init__": {"tf": 1.7320508075688772}, "icepool.Die.reroll": {"tf": 1}, "icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.zero": {"tf": 1}, "icepool.Population.quantity": {"tf": 1}, "icepool.Population.quantity_ne": {"tf": 1}, "icepool.Population.quantity_le": {"tf": 1}, "icepool.Population.quantity_lt": {"tf": 1}, "icepool.Population.quantity_ge": {"tf": 1}, "icepool.Population.quantity_gt": {"tf": 1}, "icepool.Population.probability": {"tf": 1}, "icepool.Population.modal_quantity": {"tf": 1}, "icepool.Population.sample": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_matching_set": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_matching_set_and_outcome": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_straight": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_straight_and_outcome": {"tf": 1}, "icepool.OutcomeCountGenerator.sample": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1.4142135623730951}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1}, "icepool.Deck": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1.4142135623730951}}, "df": 24}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.equals": {"tf": 1}, "icepool.Population.sample": {"tf": 1}}, "df": 2}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}}, "df": 2, "s": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.map": {"tf": 1}}, "df": 1}}}, "y": {"docs": {"icepool.Die.clip": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die.equals": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.equals": {"tf": 1}}, "df": 1}}}}}}}}, "z": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.pool": {"tf": 1}, "icepool.OutcomeCountGenerator.intersection_size": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_matching_set": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_matching_set_and_outcome": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_straight": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_straight_and_outcome": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 2.6457513110645907}, "icepool.standard_pool": {"tf": 1}}, "df": 8, "s": {"docs": {"icepool.standard_pool": {"tf": 2}, "icepool.Deal.__init__": {"tf": 1.4142135623730951}}, "df": 2}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Die": {"tf": 1}, "icepool.Deck": {"tf": 1}}, "df": 2}}}, "e": {"docs": {"icepool.Population.variance": {"tf": 1}, "icepool.Population.sample": {"tf": 1}, "icepool.OutcomeCountGenerator.sample": {"tf": 1}}, "df": 3, "s": {"docs": {"icepool.OutcomeCountEvaluator.sample": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {"icepool.Die": {"tf": 1}, "icepool.Die.__init__": {"tf": 1}, "icepool.Die.binary_op": {"tf": 1.4142135623730951}, "icepool.Die.clip": {"tf": 1}, "icepool.Die.map": {"tf": 1.4142135623730951}, "icepool.Die.map_and_time": {"tf": 1.4142135623730951}, "icepool.Die.keep_lowest": {"tf": 1}, "icepool.Die.zero": {"tf": 1}, "icepool.Die.equals": {"tf": 1}, "icepool.align": {"tf": 1}, "icepool.align_range": {"tf": 1}, "icepool.accumulate": {"tf": 1}, "icepool.apply": {"tf": 1}, "icepool.Pool.__init__": {"tf": 2}, "icepool.Pool.size": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 1}, "icepool.JointEvaluator": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}, "icepool.Deck.map": {"tf": 1}}, "df": 20}}}, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"icepool.Die": {"tf": 1}, "icepool.Die.__init__": {"tf": 1}, "icepool.Population.nearest_le": {"tf": 1}, "icepool.Population.nearest_ge": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_matching_set": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_matching_set_and_outcome": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_straight": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_straight_and_outcome": {"tf": 1}}, "df": 8}}, "m": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.binary_op": {"tf": 1}, "icepool.Die.keep_lowest": {"tf": 1.4142135623730951}, "icepool.Die.keep_highest": {"tf": 1.4142135623730951}, "icepool.Population.denominator": {"tf": 1}, "icepool.Population.cramer_von_mises": {"tf": 1}, "icepool.Again": {"tf": 1}, "icepool.lowest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.OutcomeCountGenerator.sum": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1}, "icepool.Pool.lowest": {"tf": 1}, "icepool.Pool.highest": {"tf": 1}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 1.4142135623730951}, "icepool.Deck.size": {"tf": 1}}, "df": 15, "s": {"docs": {"icepool.Die.binary_op": {"tf": 1}, "icepool.SumEvaluator": {"tf": 1}}, "df": 2}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.lowest": {"tf": 1.4142135623730951}, "icepool.highest": {"tf": 1.4142135623730951}, "icepool.Pool.lowest": {"tf": 1.4142135623730951}, "icepool.Pool.highest": {"tf": 1.4142135623730951}}, "df": 4}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.OutcomeCountGenerator.sum": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.explode": {"tf": 1.4142135623730951}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Population.median": {"tf": 1}, "icepool.Population.quantile": {"tf": 1}}, "df": 2}}}}}, "b": {"docs": {"icepool.JointEvaluator": {"tf": 1}}, "df": 1, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.pool": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool.JointEvaluator.next_state": {"tf": 1}}, "df": 1}}}}}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"icepool.OutcomeCountGenerator": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.order": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 1.4142135623730951}, "icepool.SumEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.SumEvaluator.order": {"tf": 1.4142135623730951}, "icepool.ExpandEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.ExpandEvaluator.order": {"tf": 1.4142135623730951}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1.4142135623730951}}, "df": 11, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Population": {"tf": 1}, "icepool.OutcomeCountEvaluator": {"tf": 1}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.order": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.SumEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1.4142135623730951}}, "df": 8}}}}}}}, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"icepool.JointEvaluator.next_state": {"tf": 1}, "icepool.JointEvaluator.final_outcome": {"tf": 1}, "icepool.JointEvaluator.order": {"tf": 1.4142135623730951}}, "df": 3}}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool.JointEvaluator.final_outcome": {"tf": 1}}, "df": 1}}}}}}}}}, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Population.probabilities_ge": {"tf": 1}, "icepool.from_cumulative_quantities": {"tf": 1}}, "df": 2}}}}}, "e": {"docs": {"icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "t": {"docs": {"icepool.SuitGenerator": {"tf": 1.7320508075688772}}, "df": 1}}}, "k": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Die": {"tf": 1}}, "df": 1}}}}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die": {"tf": 1}}, "df": 1, "d": {"docs": {"icepool.Die.__init__": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Population.format": {"tf": 1.4142135623730951}, "icepool.Again": {"tf": 1.4142135623730951}, "icepool.reduce": {"tf": 1}, "icepool.accumulate": {"tf": 1}, "icepool.Reroll": {"tf": 1}, "icepool.Pool": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.OutcomeCountEvaluator": {"tf": 1.7320508075688772}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.OutcomeCountEvaluator.order": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1}, "icepool.SumEvaluator.order": {"tf": 1.4142135623730951}, "icepool.ExpandEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.order": {"tf": 1.4142135623730951}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1}}, "df": 20}}}, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Pool.set_sorted_roll_counts": {"tf": 1}}, "df": 1}}}}}}, "f": {"docs": {"icepool.Population.probabilities_ge": {"tf": 1}}, "df": 1}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Population.cramer_von_mises": {"tf": 1}}, "df": 1}}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Population.marginals": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1}}, "df": 2}}}}, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {"icepool.from_rv": {"tf": 1.4142135623730951}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"icepool.OutcomeCountEvaluator.evaluate": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {"icepool.standard": {"tf": 1}, "icepool.d": {"tf": 1}, "icepool.Die.__init__": {"tf": 1.7320508075688772}}, "df": 3, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {"icepool": {"tf": 1}, "icepool.standard": {"tf": 1}, "icepool.d": {"tf": 1}, "icepool.one_hot": {"tf": 1}, "icepool.Die.__init__": {"tf": 2}, "icepool.Die.unary_op": {"tf": 1.7320508075688772}, "icepool.Die.binary_op": {"tf": 1.7320508075688772}, "icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.truncate": {"tf": 1.4142135623730951}, "icepool.Die.clip": {"tf": 2.23606797749979}, "icepool.Die.set_range": {"tf": 1.7320508075688772}, "icepool.Die.set_outcomes": {"tf": 1.4142135623730951}, "icepool.Die.map": {"tf": 2.449489742783178}, "icepool.Die.map_and_time": {"tf": 2.23606797749979}, "icepool.Die.explode": {"tf": 1.4142135623730951}, "icepool.Die.if_else": {"tf": 1}, "icepool.Die.count": {"tf": 1}, "icepool.Die.count_in": {"tf": 1}, "icepool.Die.pool": {"tf": 1.7320508075688772}, "icepool.Die.keep_lowest": {"tf": 1.4142135623730951}, "icepool.Die.keep_highest": {"tf": 1.4142135623730951}, "icepool.Die.zero": {"tf": 1.7320508075688772}, "icepool.Die.zero_outcome": {"tf": 1}, "icepool.Die.cmp": {"tf": 1}, "icepool.Die.key_tuple": {"tf": 1.4142135623730951}, "icepool.Die.equals": {"tf": 1.7320508075688772}, "icepool.Population.tuple_len": {"tf": 1}, "icepool.Population.is_empty": {"tf": 1}, "icepool.Population.probabilities_le": {"tf": 1}, "icepool.Population.median": {"tf": 1.4142135623730951}, "icepool.Population.quantile": {"tf": 1.4142135623730951}, "icepool.Population.variance": {"tf": 1}, "icepool.Population.marginals": {"tf": 1.4142135623730951}, "icepool.Population.unary_op_non_elementwise": {"tf": 1}, "icepool.Population.sample": {"tf": 1.7320508075688772}, "icepool.Population.format": {"tf": 1.4142135623730951}, "icepool.Again": {"tf": 1}, "icepool.CountsKeysView": {"tf": 1}, "icepool.CountsValuesView": {"tf": 1}, "icepool.CountsItemsView": {"tf": 1}, "icepool.from_cumulative_quantities": {"tf": 1.4142135623730951}, "icepool.from_rv": {"tf": 1}, "icepool.lowest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.reduce": {"tf": 1}, "icepool.accumulate": {"tf": 1}, "icepool.apply": {"tf": 1}, "icepool.apply_sorted": {"tf": 1}, "icepool.apply_sorted.__init__": {"tf": 1.4142135623730951}, "icepool.Reroll": {"tf": 1.7320508075688772}, "icepool.OutcomeCountGenerator.denominator": {"tf": 1}, "icepool.OutcomeCountGenerator.evaluate": {"tf": 2.23606797749979}, "icepool.OutcomeCountGenerator.expand": {"tf": 1}, "icepool.OutcomeCountGenerator.sum": {"tf": 1}, "icepool.OutcomeCountGenerator.sample": {"tf": 1.7320508075688772}, "icepool.Pool": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.Pool.size": {"tf": 1}, "icepool.Pool.denominator": {"tf": 1}, "icepool.Pool.unique_dice": {"tf": 1}, "icepool.Pool.outcomes": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 2.6457513110645907}, "icepool.Pool.min_outcome": {"tf": 1}, "icepool.Pool.max_outcome": {"tf": 1}, "icepool.Pool.lowest": {"tf": 1.4142135623730951}, "icepool.Pool.highest": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 2}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1.7320508075688772}, "icepool.OutcomeCountEvaluator.order": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1.7320508075688772}, "icepool.SumEvaluator.order": {"tf": 1.4142135623730951}, "icepool.ExpandEvaluator": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 2}, "icepool.ExpandEvaluator.order": {"tf": 1.4142135623730951}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1.7320508075688772}, "icepool.Deck.__init__": {"tf": 1}, "icepool.Deck.deal": {"tf": 1}, "icepool.Deck.map": {"tf": 1.7320508075688772}, "icepool.Deal.__init__": {"tf": 1}, "icepool.Deal.denominator": {"tf": 1}, "icepool.SuitGenerator": {"tf": 1}, "icepool.SuitGenerator.denominator": {"tf": 1}}, "df": 86}}, "e": {"docs": {"icepool": {"tf": 2}, "icepool.standard": {"tf": 1.4142135623730951}, "icepool.d": {"tf": 1.4142135623730951}, "icepool.bernoulli": {"tf": 1}, "icepool.coin": {"tf": 1}, "icepool.one_hot": {"tf": 1.7320508075688772}, "icepool.cartesian_product": {"tf": 1.4142135623730951}, "icepool.Die": {"tf": 2}, "icepool.Die.__init__": {"tf": 6.082762530298219}, "icepool.Die.unary_op": {"tf": 2.8284271247461903}, "icepool.Die.binary_op": {"tf": 4.47213595499958}, "icepool.Die.keys": {"tf": 1.4142135623730951}, "icepool.Die.values": {"tf": 1.4142135623730951}, "icepool.Die.items": {"tf": 1.4142135623730951}, "icepool.Die.reroll": {"tf": 2.6457513110645907}, "icepool.Die.filter": {"tf": 2.6457513110645907}, "icepool.Die.truncate": {"tf": 2.6457513110645907}, "icepool.Die.clip": {"tf": 3}, "icepool.Die.set_range": {"tf": 2.8284271247461903}, "icepool.Die.set_outcomes": {"tf": 1.7320508075688772}, "icepool.Die.map": {"tf": 3.872983346207417}, "icepool.Die.map_and_time": {"tf": 4.242640687119285}, "icepool.Die.explode": {"tf": 2}, "icepool.Die.if_else": {"tf": 2}, "icepool.Die.is_in": {"tf": 1.7320508075688772}, "icepool.Die.count": {"tf": 1}, "icepool.Die.count_in": {"tf": 1}, "icepool.Die.pool": {"tf": 3}, "icepool.Die.keep_lowest": {"tf": 2.6457513110645907}, "icepool.Die.keep_highest": {"tf": 2.449489742783178}, "icepool.Die.zero": {"tf": 2}, "icepool.Die.cmp": {"tf": 1.7320508075688772}, "icepool.Die.equals": {"tf": 2.8284271247461903}, "icepool.Population.keys": {"tf": 1.4142135623730951}, "icepool.Population.values": {"tf": 1.4142135623730951}, "icepool.Population.items": {"tf": 1.4142135623730951}, "icepool.Population.outcomes": {"tf": 2.23606797749979}, "icepool.Population.tuple_len": {"tf": 1}, "icepool.Population.min_outcome": {"tf": 1}, "icepool.Population.max_outcome": {"tf": 1}, "icepool.Population.nearest_le": {"tf": 1.4142135623730951}, "icepool.Population.nearest_ge": {"tf": 1.4142135623730951}, "icepool.Population.quantities": {"tf": 2.23606797749979}, "icepool.Population.denominator": {"tf": 1.4142135623730951}, "icepool.Population.quantities_le": {"tf": 1}, "icepool.Population.quantities_ge": {"tf": 1}, "icepool.Population.quantity": {"tf": 1}, "icepool.Population.quantity_ne": {"tf": 1}, "icepool.Population.quantity_le": {"tf": 1}, "icepool.Population.quantity_lt": {"tf": 1}, "icepool.Population.quantity_ge": {"tf": 1}, "icepool.Population.quantity_gt": {"tf": 1}, "icepool.Population.probabilities": {"tf": 2}, "icepool.Population.probabilities_le": {"tf": 2}, "icepool.Population.probabilities_ge": {"tf": 2}, "icepool.Population.probabilities_lt": {"tf": 1.7320508075688772}, "icepool.Population.probabilities_gt": {"tf": 1.7320508075688772}, "icepool.Population.probability": {"tf": 1}, "icepool.Population.mode": {"tf": 1.4142135623730951}, "icepool.Population.modal_quantity": {"tf": 1}, "icepool.Population.kolmogorov_smirnov": {"tf": 1}, "icepool.Population.cramer_von_mises": {"tf": 1}, "icepool.Population.median": {"tf": 1.7320508075688772}, "icepool.Population.median_left": {"tf": 1.4142135623730951}, "icepool.Population.median_right": {"tf": 1.4142135623730951}, "icepool.Population.quantile": {"tf": 2.23606797749979}, "icepool.Population.quantile_left": {"tf": 2}, "icepool.Population.quantile_right": {"tf": 2}, "icepool.Population.variance": {"tf": 1.4142135623730951}, "icepool.Population.marginals": {"tf": 1.4142135623730951}, "icepool.Population.sample": {"tf": 1}, "icepool.Population.format": {"tf": 1.7320508075688772}, "icepool.Again": {"tf": 1.7320508075688772}, "icepool.Again.__init__": {"tf": 1}, "icepool.from_cumulative_quantities": {"tf": 2.449489742783178}, "icepool.from_rv": {"tf": 2.23606797749979}, "icepool.align": {"tf": 1}, "icepool.align_range": {"tf": 1}, "icepool.lowest": {"tf": 2.23606797749979}, "icepool.highest": {"tf": 2.23606797749979}, "icepool.min_outcome": {"tf": 1.4142135623730951}, "icepool.max_outcome": {"tf": 1.4142135623730951}, "icepool.reduce": {"tf": 2.8284271247461903}, "icepool.accumulate": {"tf": 3}, "icepool.apply": {"tf": 3.605551275463989}, "icepool.apply_sorted": {"tf": 1}, "icepool.apply_sorted.__init__": {"tf": 2.6457513110645907}, "icepool.Reroll": {"tf": 2.449489742783178}, "icepool.OutcomeCountGenerator.outcomes": {"tf": 1}, "icepool.OutcomeCountGenerator.counts_len": {"tf": 1}, "icepool.OutcomeCountGenerator.denominator": {"tf": 1}, "icepool.OutcomeCountGenerator.evaluate": {"tf": 1.7320508075688772}, "icepool.OutcomeCountGenerator.sum": {"tf": 1.7320508075688772}, "icepool.OutcomeCountGenerator.count": {"tf": 1.4142135623730951}, "icepool.OutcomeCountGenerator.count_in": {"tf": 1.4142135623730951}, "icepool.OutcomeCountGenerator.count_unique": {"tf": 1}, "icepool.OutcomeCountGenerator.contains_subset": {"tf": 1.7320508075688772}, "icepool.OutcomeCountGenerator.intersection_size": {"tf": 2.23606797749979}, "icepool.OutcomeCountGenerator.largest_matching_set": {"tf": 1.7320508075688772}, "icepool.OutcomeCountGenerator.largest_matching_set_and_outcome": {"tf": 1.7320508075688772}, "icepool.OutcomeCountGenerator.largest_straight": {"tf": 1.7320508075688772}, "icepool.OutcomeCountGenerator.largest_straight_and_outcome": {"tf": 1.7320508075688772}, "icepool.OutcomeCountGenerator.sample": {"tf": 1}, "icepool.Pool": {"tf": 1}, "icepool.Pool.__init__": {"tf": 3}, "icepool.Pool.size": {"tf": 1.4142135623730951}, "icepool.Pool.denominator": {"tf": 1}, "icepool.Pool.unique_dice": {"tf": 1}, "icepool.Pool.outcomes": {"tf": 1}, "icepool.Pool.counts_len": {"tf": 1}, "icepool.Pool.sorted_roll_counts": {"tf": 2.449489742783178}, "icepool.Pool.set_sorted_roll_counts": {"tf": 4.795831523312719}, "icepool.Pool.min_outcome": {"tf": 1}, "icepool.Pool.max_outcome": {"tf": 1}, "icepool.Pool.lowest": {"tf": 2.23606797749979}, "icepool.Pool.highest": {"tf": 2.23606797749979}, "icepool.standard_pool": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator": {"tf": 1.7320508075688772}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 4.242640687119285}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 2.23606797749979}, "icepool.OutcomeCountEvaluator.order": {"tf": 2.6457513110645907}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1.7320508075688772}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 2}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 3}, "icepool.OutcomeCountEvaluator.sample": {"tf": 1.4142135623730951}, "icepool.JointEvaluator": {"tf": 1}, "icepool.JointEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.JointEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.JointEvaluator.order": {"tf": 1.4142135623730951}, "icepool.SumEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.SumEvaluator.final_outcome": {"tf": 2.23606797749979}, "icepool.SumEvaluator.order": {"tf": 2.6457513110645907}, "icepool.ExpandEvaluator.next_state": {"tf": 4.242640687119285}, "icepool.ExpandEvaluator.order": {"tf": 2.6457513110645907}, "icepool.ExpandEvaluator.final_outcome": {"tf": 2.23606797749979}, "icepool.Deck.__init__": {"tf": 3.3166247903554}, "icepool.Deck.keys": {"tf": 1.4142135623730951}, "icepool.Deck.values": {"tf": 1.4142135623730951}, "icepool.Deck.items": {"tf": 1.4142135623730951}, "icepool.Deck.size": {"tf": 1.4142135623730951}, "icepool.Deck.map": {"tf": 2}, "icepool.Deal.__init__": {"tf": 1.7320508075688772}, "icepool.Deal.deck": {"tf": 1.4142135623730951}, "icepool.Deal.hand_sizes": {"tf": 1}, "icepool.Deal.total_cards_dealt": {"tf": 1}, "icepool.Deal.outcomes": {"tf": 2.23606797749979}, "icepool.Deal.counts_len": {"tf": 1}, "icepool.Deal.denominator": {"tf": 1}, "icepool.SuitGenerator": {"tf": 1.4142135623730951}, "icepool.SuitGenerator.outcomes": {"tf": 1}, "icepool.SuitGenerator.counts_len": {"tf": 1}, "icepool.SuitGenerator.denominator": {"tf": 1}, "icepool.clear_pool_cache": {"tf": 1}}, "df": 153, "y": {"docs": {"icepool.Die": {"tf": 1}, "icepool.Die.__init__": {"tf": 1}, "icepool.Die.set_outcomes": {"tf": 1.4142135623730951}, "icepool.Die.cmp": {"tf": 1}, "icepool.Die.equals": {"tf": 1.4142135623730951}, "icepool.Population.probabilities_ge": {"tf": 1}, "icepool.from_cumulative_quantities": {"tf": 1}, "icepool.Pool": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 2}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 2}}, "df": 11}, "s": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die": {"tf": 1.4142135623730951}, "icepool.Die.__init__": {"tf": 1}, "icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Die.equals": {"tf": 1.4142135623730951}, "icepool.Population.outcomes": {"tf": 1}, "icepool.Population.quantities": {"tf": 1}, "icepool.Population.probabilities_ge": {"tf": 1}, "icepool.Population.mode": {"tf": 1}, "icepool.Again": {"tf": 1}, "icepool.from_rv": {"tf": 1}, "icepool.OutcomeCountGenerator": {"tf": 1.7320508075688772}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1}, "icepool.OutcomeCountEvaluator": {"tf": 1}, "icepool.Deal.outcomes": {"tf": 1}}, "df": 15}}, "m": {"docs": {"icepool.Die": {"tf": 1}}, "df": 1, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.binary_op": {"tf": 1}}, "df": 2}}}}}}}, "i": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die": {"tf": 1}, "icepool.Die.simplify": {"tf": 1}}, "df": 2}}, "n": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.binary_op": {"tf": 1}}, "df": 2}, "r": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Population.tuple_len": {"tf": 1}, "icepool.Population.nearest_le": {"tf": 1}, "icepool.Population.nearest_ge": {"tf": 1}, "icepool.OutcomeCountGenerator.expand": {"tf": 1}, "icepool.OutcomeCountEvaluator": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.OutcomeCountEvaluator.order": {"tf": 1}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1}, "icepool.SumEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.ExpandEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1}}, "df": 16, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.map_and_time": {"tf": 1}, "icepool.OutcomeCountEvaluator": {"tf": 1}}, "df": 2}}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {"icepool": {"tf": 1}, "icepool.standard": {"tf": 1}, "icepool.d": {"tf": 1}, "icepool.bernoulli": {"tf": 1}, "icepool.coin": {"tf": 1}, "icepool.Outcome": {"tf": 1}, "icepool.Die": {"tf": 1}, "icepool.Die.__init__": {"tf": 2}, "icepool.Die.binary_op": {"tf": 1.7320508075688772}, "icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.truncate": {"tf": 1}, "icepool.Die.clip": {"tf": 1}, "icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1.4142135623730951}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.is_in": {"tf": 1}, "icepool.Die.pool": {"tf": 1}, "icepool.Die.sign": {"tf": 1}, "icepool.Die.key_tuple": {"tf": 1}, "icepool.Die.equals": {"tf": 1}, "icepool.Population.nearest_le": {"tf": 1}, "icepool.Population.nearest_ge": {"tf": 1}, "icepool.Population.marginals": {"tf": 1.4142135623730951}, "icepool.Population.sample": {"tf": 1}, "icepool.Again": {"tf": 1}, "icepool.from_rv": {"tf": 1}, "icepool.align": {"tf": 1}, "icepool.align_range": {"tf": 1}, "icepool.apply": {"tf": 1}, "icepool.apply_sorted.__init__": {"tf": 1}, "icepool.Reroll": {"tf": 1.4142135623730951}, "icepool.OutcomeCountGenerator.evaluate": {"tf": 1}, "icepool.OutcomeCountGenerator.count": {"tf": 1}, "icepool.OutcomeCountGenerator.count_in": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.Pool.sorted_roll_counts": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1}, "icepool.standard_pool": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator": {"tf": 1.7320508075688772}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 2}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 2}, "icepool.OutcomeCountEvaluator.order": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 1.4142135623730951}, "icepool.JointEvaluator": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 2}, "icepool.SumEvaluator.order": {"tf": 1.4142135623730951}, "icepool.ExpandEvaluator.next_state": {"tf": 2}, "icepool.ExpandEvaluator.order": {"tf": 1.4142135623730951}, "icepool.ExpandEvaluator.final_outcome": {"tf": 2}, "icepool.Deck.__init__": {"tf": 1}, "icepool.SuitGenerator": {"tf": 1.7320508075688772}}, "df": 53}, "n": {"docs": {"icepool.Die": {"tf": 1.4142135623730951}, "icepool.Die.unary_op": {"tf": 1}, "icepool.Die.binary_op": {"tf": 1}, "icepool.Die.map": {"tf": 1.4142135623730951}, "icepool.Die.map_and_time": {"tf": 1.4142135623730951}, "icepool.Die.sign": {"tf": 1.4142135623730951}, "icepool.Again": {"tf": 1}, "icepool.apply": {"tf": 1.7320508075688772}, "icepool.apply_sorted.__init__": {"tf": 1.4142135623730951}, "icepool.OutcomeCountGenerator": {"tf": 1}, "icepool.OutcomeCountGenerator.evaluate": {"tf": 1}, "icepool.OutcomeCountGenerator.count_unique": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 2.23606797749979}}, "df": 13}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.cmp": {"tf": 1}}, "df": 2, "s": {"docs": {"icepool.one_hot": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {"icepool.Die": {"tf": 1}, "icepool.Population.quantile": {"tf": 1}, "icepool.Population.quantile_left": {"tf": 1}, "icepool.Population.quantile_right": {"tf": 1}, "icepool.OutcomeCountGenerator.denominator": {"tf": 1}, "icepool.Pool.denominator": {"tf": 1}, "icepool.Deal.denominator": {"tf": 1}, "icepool.SuitGenerator.denominator": {"tf": 1}}, "df": 8}}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {"icepool.Die": {"tf": 1.4142135623730951}, "icepool.Die.__init__": {"tf": 1}, "icepool.Population.probabilities_le": {"tf": 1}, "icepool.Population.probabilities_ge": {"tf": 1}, "icepool.accumulate": {"tf": 1}}, "df": 5}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.truncate": {"tf": 1}, "icepool.Population.denominator": {"tf": 1}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 1}, "icepool.Deck.size": {"tf": 1}}, "df": 4}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {"icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.OutcomeCountEvaluator.order": {"tf": 1}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1}, "icepool.SumEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1}}, "df": 10}}}, "o": {"docs": {"icepool": {"tf": 1.4142135623730951}, "icepool.standard": {"tf": 1}, "icepool.d": {"tf": 1}, "icepool.one_hot": {"tf": 1}, "icepool.Outcome": {"tf": 1}, "icepool.Die": {"tf": 2}, "icepool.Die.__init__": {"tf": 3.1622776601683795}, "icepool.Die.unary_op": {"tf": 1.4142135623730951}, "icepool.Die.binary_op": {"tf": 1.4142135623730951}, "icepool.Die.reroll": {"tf": 2.449489742783178}, "icepool.Die.filter": {"tf": 2.23606797749979}, "icepool.Die.truncate": {"tf": 1.7320508075688772}, "icepool.Die.clip": {"tf": 2}, "icepool.Die.set_range": {"tf": 1}, "icepool.Die.set_outcomes": {"tf": 1}, "icepool.Die.map": {"tf": 2.8284271247461903}, "icepool.Die.map_and_time": {"tf": 3.1622776601683795}, "icepool.Die.explode": {"tf": 2.8284271247461903}, "icepool.Die.if_else": {"tf": 1.4142135623730951}, "icepool.Die.pool": {"tf": 1.4142135623730951}, "icepool.Die.keep_lowest": {"tf": 1.4142135623730951}, "icepool.Die.keep_highest": {"tf": 1.4142135623730951}, "icepool.Die.zero": {"tf": 1}, "icepool.Die.cmp": {"tf": 1}, "icepool.Die.key_tuple": {"tf": 1}, "icepool.Die.equals": {"tf": 1.4142135623730951}, "icepool.Population": {"tf": 1}, "icepool.Population.outcomes": {"tf": 1}, "icepool.Population.quantities": {"tf": 1}, "icepool.Population.mode": {"tf": 1}, "icepool.Population.marginals": {"tf": 1.4142135623730951}, "icepool.Again": {"tf": 2}, "icepool.from_cumulative_quantities": {"tf": 1}, "icepool.from_rv": {"tf": 1.4142135623730951}, "icepool.lowest": {"tf": 1.4142135623730951}, "icepool.highest": {"tf": 1.4142135623730951}, "icepool.reduce": {"tf": 3}, "icepool.accumulate": {"tf": 2.8284271247461903}, "icepool.apply": {"tf": 2.23606797749979}, "icepool.apply_sorted.__init__": {"tf": 2.449489742783178}, "icepool.Reroll": {"tf": 1.4142135623730951}, "icepool.OutcomeCountGenerator": {"tf": 1}, "icepool.OutcomeCountGenerator.evaluate": {"tf": 2}, "icepool.OutcomeCountGenerator.sum": {"tf": 1}, "icepool.OutcomeCountGenerator.contains_subset": {"tf": 1}, "icepool.OutcomeCountGenerator.intersection_size": {"tf": 1}, "icepool.Pool": {"tf": 1}, "icepool.Pool.__init__": {"tf": 2.23606797749979}, "icepool.Pool.sorted_roll_counts": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1.7320508075688772}, "icepool.Pool.lowest": {"tf": 1}, "icepool.Pool.highest": {"tf": 1}, "icepool.standard_pool": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator": {"tf": 2}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 3.1622776601683795}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 2.449489742783178}, "icepool.OutcomeCountEvaluator.order": {"tf": 2}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 2.449489742783178}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 2.23606797749979}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 1.4142135623730951}, "icepool.Order": {"tf": 1}, "icepool.SumEvaluator.next_state": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 2.449489742783178}, "icepool.SumEvaluator.order": {"tf": 2}, "icepool.ExpandEvaluator.next_state": {"tf": 3.1622776601683795}, "icepool.ExpandEvaluator.order": {"tf": 2}, "icepool.ExpandEvaluator.final_outcome": {"tf": 2.449489742783178}, "icepool.Deck.__init__": {"tf": 2}, "icepool.Deck.map": {"tf": 2}, "icepool.Deal.__init__": {"tf": 2.449489742783178}, "icepool.Deal.hand_sizes": {"tf": 1}, "icepool.Deal.outcomes": {"tf": 1}, "icepool.SuitGenerator": {"tf": 1.4142135623730951}}, "df": 73, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Die.explode": {"tf": 1}, "icepool.Population.probabilities": {"tf": 1.4142135623730951}, "icepool.Population.probabilities_le": {"tf": 1.4142135623730951}, "icepool.Population.probabilities_ge": {"tf": 1.4142135623730951}, "icepool.Population.probabilities_lt": {"tf": 1.4142135623730951}, "icepool.Population.probabilities_gt": {"tf": 1.4142135623730951}, "icepool.OutcomeCountGenerator.denominator": {"tf": 1}, "icepool.Pool.denominator": {"tf": 1}, "icepool.SumEvaluator.next_state": {"tf": 1}, "icepool.Deal.total_cards_dealt": {"tf": 1}, "icepool.Deal.denominator": {"tf": 1}, "icepool.SuitGenerator.denominator": {"tf": 1}}, "df": 12, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.binary_op": {"tf": 1}, "icepool.Die.key_tuple": {"tf": 1}, "icepool.Population": {"tf": 1}, "icepool.apply_sorted.__init__": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.Deck.__init__": {"tf": 1}}, "df": 10}}}}}}, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"icepool.bernoulli": {"tf": 1}, "icepool.coin": {"tf": 1}, "icepool.one_hot": {"tf": 1}, "icepool.Die.reroll": {"tf": 1.4142135623730951}, "icepool.Die.filter": {"tf": 1.4142135623730951}, "icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Die.explode": {"tf": 1.4142135623730951}, "icepool.Die.is_in": {"tf": 1}, "icepool.Die.equals": {"tf": 1.4142135623730951}, "icepool.Population.is_empty": {"tf": 1}, "icepool.Population.has_zero_quantities": {"tf": 1}, "icepool.from_cumulative_quantities": {"tf": 1}, "icepool.ExpandEvaluator.__init__": {"tf": 1}, "icepool.Deck.map": {"tf": 1}}, "df": 15}, "n": {"docs": {}, "df": 0, "c": {"docs": {"icepool.Die.unary_op": {"tf": 1}, "icepool.Die.truncate": {"tf": 1}}, "df": 2, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.clip": {"tf": 1}}, "df": 1, "s": {"docs": {"icepool.Die.truncate": {"tf": 1}}, "df": 1}, "d": {"docs": {"icepool.Die.truncate": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Die.truncate": {"tf": 1}, "icepool.OutcomeCountEvaluator.order": {"tf": 1}, "icepool.SumEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.order": {"tf": 1}}, "df": 4, "s": {"docs": {"icepool.Pool.__init__": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {"icepool.Die.binary_op": {"tf": 1}, "icepool.Die.equals": {"tf": 2}}, "df": 2, "y": {"docs": {"icepool.Die.if_else": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"icepool.apply_sorted.__init__": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.explode": {"tf": 1}, "icepool.Die.equals": {"tf": 1}}, "df": 2}}}}, "e": {"docs": {"icepool.Reroll": {"tf": 1}}, "df": 1}}, "y": {"docs": {"icepool.apply": {"tf": 1.4142135623730951}, "icepool.Deal.__init__": {"tf": 1}}, "df": 2}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}}, "df": 2}}}}}}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.one_hot": {"tf": 1}, "icepool.Die.__init__": {"tf": 1.7320508075688772}, "icepool.Die.key_tuple": {"tf": 1}, "icepool.Population.tuple_len": {"tf": 1}, "icepool.Population.mode": {"tf": 1}, "icepool.Population.marginals": {"tf": 1}, "icepool.align": {"tf": 1}, "icepool.align_range": {"tf": 1}, "icepool.reduce": {"tf": 1}, "icepool.accumulate": {"tf": 1}, "icepool.OutcomeCountGenerator.sample": {"tf": 1}, "icepool.Pool.sorted_roll_counts": {"tf": 1.4142135623730951}, "icepool.JointEvaluator.next_state": {"tf": 1}, "icepool.JointEvaluator.final_outcome": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1.4142135623730951}, "icepool.Deal.hand_sizes": {"tf": 1}, "icepool.SuitGenerator": {"tf": 1}}, "df": 17, "s": {"docs": {"icepool.cartesian_product": {"tf": 1.4142135623730951}, "icepool.Die.unary_op": {"tf": 1.4142135623730951}, "icepool.Die.binary_op": {"tf": 1.4142135623730951}, "icepool.Population.tuple_len": {"tf": 1.4142135623730951}, "icepool.Population.marginals": {"tf": 1.4142135623730951}, "icepool.OutcomeCountGenerator.expand": {"tf": 1}}, "df": 6}}}}, "r": {"docs": {}, "df": 0, "n": {"docs": {"icepool.accumulate": {"tf": 1}}, "df": 1}}}, "w": {"docs": {}, "df": 0, "o": {"docs": {"icepool.Population.marginals": {"tf": 1}, "icepool.reduce": {"tf": 1.7320508075688772}, "icepool.accumulate": {"tf": 1.7320508075688772}, "icepool.apply": {"tf": 1}, "icepool.apply_sorted.__init__": {"tf": 1}, "icepool.OutcomeCountGenerator": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 2}}, "df": 7, "s": {"docs": {"icepool.one_hot": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Again": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.binary_op": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1.7320508075688772}, "icepool.apply": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator": {"tf": 1}}, "df": 4, "s": {"docs": {"icepool.Die.__init__": {"tf": 2}, "icepool.Die.binary_op": {"tf": 1.4142135623730951}, "icepool.Die.reroll": {"tf": 1.4142135623730951}, "icepool.Die.filter": {"tf": 1.4142135623730951}, "icepool.Die.map": {"tf": 1.4142135623730951}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Die.count": {"tf": 1}, "icepool.Die.count_in": {"tf": 1}, "icepool.OutcomeCountGenerator.evaluate": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1.7320508075688772}, "icepool.Pool.sorted_roll_counts": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1.4142135623730951}, "icepool.Deck.__init__": {"tf": 2.23606797749979}}, "df": 13, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die.map_and_time": {"tf": 1}}, "df": 1}}}}}}}, "e": {"docs": {"icepool.Population.median": {"tf": 1}, "icepool.Population.median_left": {"tf": 1}, "icepool.Population.median_right": {"tf": 1}, "icepool.Population.quantile": {"tf": 1}, "icepool.Population.quantile_left": {"tf": 1}, "icepool.Population.quantile_right": {"tf": 1}}, "df": 6}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.__init__": {"tf": 1}}, "df": 1}}, "r": {"docs": {}, "df": 0, "m": {"docs": {"icepool.Population.probabilities_le": {"tf": 1}, "icepool.Population.probabilities_ge": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}}, "df": 2}}}}}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die.if_else": {"tf": 1}}, "df": 1}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"icepool.OutcomeCountGenerator.evaluate": {"tf": 1}}, "df": 1}}}}}}}}, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {"icepool.reduce": {"tf": 1}, "icepool.accumulate": {"tf": 1}}, "df": 2, "s": {"docs": {"icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.pool": {"tf": 1}, "icepool.apply": {"tf": 1}, "icepool.apply_sorted.__init__": {"tf": 1}}, "df": 6}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Population.median": {"tf": 1}, "icepool.Population.median_left": {"tf": 1}, "icepool.Population.median_right": {"tf": 1}, "icepool.Population.quantile": {"tf": 1}, "icepool.Population.quantile_left": {"tf": 1}, "icepool.Population.quantile_right": {"tf": 1}, "icepool.OutcomeCountGenerator.evaluate": {"tf": 1}}, "df": 7}}}}, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.is_in": {"tf": 1}, "icepool.Die.count": {"tf": 1}, "icepool.Die.count_in": {"tf": 1}, "icepool.OutcomeCountGenerator.count": {"tf": 1.4142135623730951}, "icepool.OutcomeCountGenerator.count_in": {"tf": 1}, "icepool.OutcomeCountGenerator.contains_subset": {"tf": 1}, "icepool.OutcomeCountGenerator.intersection_size": {"tf": 1.4142135623730951}}, "df": 7, "s": {"docs": {"icepool.OutcomeCountGenerator.contains_subset": {"tf": 1.7320508075688772}, "icepool.OutcomeCountGenerator.intersection_size": {"tf": 1.7320508075688772}}, "df": 2}}}}}}, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die.clip": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {"icepool.Die.zero": {"tf": 1}, "icepool.OutcomeCountEvaluator": {"tf": 1}}, "df": 2, "s": {"docs": {"icepool.OutcomeCountEvaluator": {"tf": 1}}, "df": 1}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.OutcomeCountEvaluator.range_alignment": {"tf": 1}}, "df": 1}}}}}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1}}, "df": 3}}}}}}, "j": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"icepool": {"tf": 1}}, "df": 1}}}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.__init__": {"tf": 1.4142135623730951}, "icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}}, "df": 3}}}, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.apply": {"tf": 1}, "icepool.apply_sorted.__init__": {"tf": 1.4142135623730951}}, "df": 2, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.JointEvaluator": {"tf": 1}}, "df": 1}}}}}}}, "e": {"docs": {"icepool.cartesian_product": {"tf": 1}, "icepool.Die.pool": {"tf": 1}, "icepool.Die.zero_outcome": {"tf": 1}, "icepool.Die.equals": {"tf": 1}, "icepool.Population.denominator": {"tf": 1}, "icepool.Population.probabilities": {"tf": 1}, "icepool.Population.probabilities_le": {"tf": 1}, "icepool.Population.probabilities_ge": {"tf": 1}, "icepool.Population.probabilities_lt": {"tf": 1}, "icepool.Population.probabilities_gt": {"tf": 1}, "icepool.Again": {"tf": 1}, "icepool.from_cumulative_quantities": {"tf": 1}, "icepool.OutcomeCountGenerator.intersection_size": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 2}, "icepool.standard_pool": {"tf": 1}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 1}, "icepool.JointEvaluator.order": {"tf": 1}, "icepool.Deck.size": {"tf": 1}}, "df": 18, "x": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.one_hot": {"tf": 1}, "icepool.Die.__init__": {"tf": 1.4142135623730951}, "icepool.Population.marginals": {"tf": 1}, "icepool.apply": {"tf": 1}, "icepool.apply_sorted.__init__": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1}, "icepool.OutcomeCountEvaluator": {"tf": 1}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 1}}, "df": 9, "s": {"docs": {"icepool": {"tf": 1}, "icepool.Again": {"tf": 1}}, "df": 2}}}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool": {"tf": 1.4142135623730951}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.OutcomeCountGenerator.evaluate": {"tf": 1}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1}}, "df": 4}}}}}}, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Die.__init__": {"tf": 1}}, "df": 1}}}, "e": {"docs": {"icepool.Die.explode": {"tf": 2}}, "df": 1, "d": {"docs": {"icepool.Die.explode": {"tf": 1}}, "df": 1}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die.explode": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Die.__init__": {"tf": 1}}, "df": 1}}}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"icepool.one_hot": {"tf": 1}, "icepool.OutcomeCountGenerator.expand": {"tf": 1}, "icepool.ExpandEvaluator": {"tf": 1}}, "df": 3}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Die.__init__": {"tf": 1.4142135623730951}, "icepool.Die.map": {"tf": 1.4142135623730951}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.OutcomeCountGenerator.sample": {"tf": 1}, "icepool.OutcomeCountEvaluator.sample": {"tf": 1}, "icepool.Deal": {"tf": 1}, "icepool.SuitGenerator": {"tf": 1}}, "df": 7}}}}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {"icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.OutcomeCountEvaluator.order": {"tf": 1}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1}, "icepool.SumEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1}}, "df": 7, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.OutcomeCountEvaluator": {"tf": 1.4142135623730951}}, "df": 1}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.OutcomeCountEvaluator.order": {"tf": 1}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1}, "icepool.SumEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1}}, "df": 10}}}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"icepool.ExpandEvaluator": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {"icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1.4142135623730951}, "icepool.Deck.map": {"tf": 1}}, "df": 3}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Population.format": {"tf": 1}}, "df": 1}}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.one_hot": {"tf": 1}, "icepool.Die.__init__": {"tf": 1.4142135623730951}, "icepool.Die.binary_op": {"tf": 1}, "icepool.accumulate": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.Pool.sorted_roll_counts": {"tf": 1}, "icepool.standard_pool": {"tf": 1}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}}, "df": 9, "s": {"docs": {"icepool": {"tf": 1}, "icepool.Die.__init__": {"tf": 1.4142135623730951}, "icepool.Population.marginals": {"tf": 1}, "icepool.accumulate": {"tf": 1}, "icepool.OutcomeCountGenerator.contains_subset": {"tf": 1}, "icepool.OutcomeCountGenerator.intersection_size": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1.4142135623730951}}, "df": 9}, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.unary_op": {"tf": 1}, "icepool.Die.binary_op": {"tf": 1}, "icepool.Population.marginals": {"tf": 1}, "icepool.Population.unary_op_non_elementwise": {"tf": 1}, "icepool.reduce": {"tf": 1}, "icepool.accumulate": {"tf": 1}}, "df": 6}}}}}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Pool.set_sorted_roll_counts": {"tf": 1}}, "df": 1}}}}}}}, "t": {"docs": {}, "df": 0, "c": {"docs": {"icepool": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"icepool.standard": {"tf": 1}, "icepool.d": {"tf": 1}, "icepool.one_hot": {"tf": 1}, "icepool.cartesian_product": {"tf": 1}, "icepool.Die.__init__": {"tf": 2}, "icepool.Die.truncate": {"tf": 1}, "icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Die.zero": {"tf": 1}, "icepool.Population": {"tf": 1}, "icepool.Population.quantities_le": {"tf": 1}, "icepool.Population.quantities_ge": {"tf": 1}, "icepool.Population.probabilities": {"tf": 1}, "icepool.Population.probabilities_le": {"tf": 1}, "icepool.Population.probabilities_ge": {"tf": 1}, "icepool.Population.probabilities_lt": {"tf": 1}, "icepool.Population.probabilities_gt": {"tf": 1}, "icepool.Population.format": {"tf": 1.7320508075688772}, "icepool.reduce": {"tf": 1}, "icepool.accumulate": {"tf": 1.4142135623730951}, "icepool.apply": {"tf": 1}, "icepool.OutcomeCountGenerator.evaluate": {"tf": 1}, "icepool.OutcomeCountGenerator.expand": {"tf": 1}, "icepool.OutcomeCountGenerator.sample": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1.4142135623730951}, "icepool.Pool.set_sorted_roll_counts": {"tf": 2}, "icepool.standard_pool": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.Deck.__init__": {"tf": 1.7320508075688772}, "icepool.Deck.map": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1}, "icepool.Deal.hand_sizes": {"tf": 1}}, "df": 34}}, "s": {"docs": {}, "df": 0, "y": {"docs": {"icepool.one_hot": {"tf": 1}, "icepool.apply": {"tf": 1.4142135623730951}}, "df": 2}}, "r": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die.map_and_time": {"tf": 1}}, "df": 1}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.__init__": {"tf": 1.7320508075688772}, "icepool.Die.map": {"tf": 1.4142135623730951}, "icepool.Die.map_and_time": {"tf": 1.4142135623730951}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.if_else": {"tf": 1}, "icepool.Again": {"tf": 1}, "icepool.reduce": {"tf": 1}, "icepool.apply": {"tf": 1}, "icepool.apply_sorted.__init__": {"tf": 1}}, "df": 9, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.truncate": {"tf": 1}, "icepool.Die.clip": {"tf": 1}}, "df": 2, "s": {"docs": {"icepool.Die.truncate": {"tf": 1}, "icepool.Die.clip": {"tf": 1}}, "df": 2}}}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Reroll": {"tf": 1.4142135623730951}, "icepool.Deck.__init__": {"tf": 1}}, "df": 2}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {"icepool.Pool.set_sorted_roll_counts": {"tf": 1}}, "df": 1}}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}}, "df": 2}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Population.format": {"tf": 1}, "icepool.apply": {"tf": 1}, "icepool.OutcomeCountGenerator.contains_subset": {"tf": 1}, "icepool.OutcomeCountGenerator.intersection_size": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}}, "df": 9}}}}}, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 1}, "icepool.Deck.map": {"tf": 1}}, "df": 8, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die.truncate": {"tf": 1}, "icepool.Reroll": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}}, "df": 4}}}}}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.apply": {"tf": 1.7320508075688772}, "icepool.apply_sorted.__init__": {"tf": 1.7320508075688772}, "icepool.Pool.__init__": {"tf": 1}}, "df": 3}}}}}}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die.filter": {"tf": 1}}, "df": 1}}}}}}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Die.map_and_time": {"tf": 1}, "icepool.Die.cmp": {"tf": 1}, "icepool.Die.equals": {"tf": 1}, "icepool.accumulate": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1}, "icepool.SuitGenerator": {"tf": 1}}, "df": 9, "s": {"docs": {"icepool.Die.key_tuple": {"tf": 1}, "icepool.Die.equals": {"tf": 1}}, "df": 2}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Die.cmp": {"tf": 1}, "icepool.Die.equals": {"tf": 1}, "icepool.Population.sample": {"tf": 1}, "icepool.OutcomeCountEvaluator": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1.4142135623730951}}, "df": 7}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"icepool.OutcomeCountGenerator.evaluate": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}}, "df": 4, "d": {"docs": {"icepool.Die.equals": {"tf": 1}, "icepool.OutcomeCountGenerator": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.OutcomeCountEvaluator.order": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1}, "icepool.SumEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1}}, "df": 9}, "s": {"docs": {"icepool.OutcomeCountGenerator.evaluate": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 1}, "icepool.OutcomeCountEvaluator.sample": {"tf": 1}, "icepool.JointEvaluator": {"tf": 1}}, "df": 4}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Reroll": {"tf": 1}, "icepool.OutcomeCountGenerator.evaluate": {"tf": 1}, "icepool.OutcomeCountEvaluator.order": {"tf": 1}, "icepool.SumEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.order": {"tf": 1}, "icepool.Deck": {"tf": 1}}, "df": 6}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.OutcomeCountEvaluator.evaluate": {"tf": 1.4142135623730951}}, "df": 1, "s": {"docs": {"icepool.OutcomeCountEvaluator.evaluate": {"tf": 1}, "icepool.JointEvaluator": {"tf": 1}}, "df": 2}}}}}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Pool.__init__": {"tf": 1}}, "df": 1}}, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.OutcomeCountEvaluator": {"tf": 1}}, "df": 1}}}}}}}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"icepool": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Outcome": {"tf": 1}}, "df": 1}}}, "y": {"docs": {"icepool.apply": {"tf": 1}, "icepool.apply_sorted.__init__": {"tf": 1}}, "df": 2}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.__init__": {"tf": 1.7320508075688772}, "icepool.Die.binary_op": {"tf": 1}, "icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Die.explode": {"tf": 1.7320508075688772}, "icepool.Die.equals": {"tf": 2.23606797749979}, "icepool.Again": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.ExpandEvaluator.next_state": {"tf": 1.4142135623730951}}, "df": 9, "s": {"docs": {"icepool.Die": {"tf": 1}, "icepool.Die.clip": {"tf": 1}, "icepool.Population.quantities": {"tf": 1}, "icepool.Population.format": {"tf": 1}, "icepool.OutcomeCountEvaluator": {"tf": 1.4142135623730951}}, "df": 5, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {"icepool.CountsValuesView": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.unary_op": {"tf": 1}, "icepool.Die.binary_op": {"tf": 1}, "icepool.Die.zero": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1}, "icepool.JointEvaluator.order": {"tf": 1}}, "df": 7}}}}}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.__init__": {"tf": 1.7320508075688772}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1.4142135623730951}}, "df": 5}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Population.variance": {"tf": 1.4142135623730951}}, "df": 1}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.OutcomeCountEvaluator.order": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1}, "icepool.SumEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1}}, "df": 6}}}}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Population.cramer_von_mises": {"tf": 1}}, "df": 1}}}, "g": {"docs": {"icepool.cartesian_product": {"tf": 1}, "icepool.Die.pool": {"tf": 1}, "icepool.Die.zero_outcome": {"tf": 1}, "icepool.Die.equals": {"tf": 1}, "icepool.Population.denominator": {"tf": 1}, "icepool.Again": {"tf": 1}, "icepool.from_cumulative_quantities": {"tf": 1}, "icepool.OutcomeCountGenerator.intersection_size": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 2}, "icepool.standard_pool": {"tf": 1}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 1}, "icepool.Deck.size": {"tf": 1}}, "df": 12, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool": {"tf": 1}}, "df": 1}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.OutcomeCountGenerator": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.OutcomeCountGenerator.denominator": {"tf": 1}, "icepool.OutcomeCountGenerator.evaluate": {"tf": 1.7320508075688772}, "icepool.OutcomeCountGenerator.sample": {"tf": 1.4142135623730951}, "icepool.Pool.denominator": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 1}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 2}, "icepool.OutcomeCountEvaluator.sample": {"tf": 1}, "icepool.JointEvaluator": {"tf": 1}, "icepool.ExpandEvaluator": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.Deal.denominator": {"tf": 1}, "icepool.SuitGenerator": {"tf": 1.7320508075688772}, "icepool.SuitGenerator.denominator": {"tf": 1}}, "df": 14, "s": {"docs": {"icepool.OutcomeCountGenerator": {"tf": 1}, "icepool.OutcomeCountEvaluator": {"tf": 2}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 2}, "icepool.OutcomeCountEvaluator.order": {"tf": 2}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 1.7320508075688772}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 1.4142135623730951}, "icepool.SumEvaluator.final_outcome": {"tf": 2}, "icepool.SumEvaluator.order": {"tf": 2}, "icepool.ExpandEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.ExpandEvaluator.order": {"tf": 2}, "icepool.ExpandEvaluator.final_outcome": {"tf": 2}}, "df": 13}}}, "e": {"docs": {"icepool.Pool": {"tf": 1}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1}}, "df": 4, "d": {"docs": {"icepool.OutcomeCountGenerator.counts_len": {"tf": 1}, "icepool.Pool.counts_len": {"tf": 1}, "icepool.Deal.counts_len": {"tf": 1}, "icepool.SuitGenerator.counts_len": {"tf": 1}}, "df": 4}}}}}}}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Die.filter": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.apply_sorted.__init__": {"tf": 1}}, "df": 2, "n": {"docs": {"icepool.Die.unary_op": {"tf": 1}, "icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.truncate": {"tf": 1.4142135623730951}, "icepool.Die.clip": {"tf": 1}, "icepool.Die.set_range": {"tf": 1}, "icepool.Again.__init__": {"tf": 1}, "icepool.from_cumulative_quantities": {"tf": 1}, "icepool.Reroll": {"tf": 1}, "icepool.OutcomeCountGenerator.evaluate": {"tf": 1}, "icepool.OutcomeCountEvaluator": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}}, "df": 14}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Deck.map": {"tf": 1}}, "df": 6}}}}}, "t": {"docs": {"icepool.Die.binary_op": {"tf": 2}, "icepool.Die.cmp": {"tf": 1}, "icepool.Population.nearest_ge": {"tf": 1}, "icepool.Population.quantities_ge": {"tf": 1}, "icepool.Population.quantity_ge": {"tf": 1}, "icepool.Population.quantity_gt": {"tf": 1}, "icepool.Population.probabilities_ge": {"tf": 1.7320508075688772}, "icepool.Population.probabilities_gt": {"tf": 1}, "icepool.Population.format": {"tf": 2.449489742783178}}, "df": 9}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.simplify": {"tf": 1}, "icepool.Population.max_outcome": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_matching_set": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_matching_set_and_outcome": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_straight": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_straight_and_outcome": {"tf": 1}}, "df": 6}}, "r": {"docs": {"icepool.Die.sign": {"tf": 1}, "icepool.Population.median_right": {"tf": 1}, "icepool.Population.quantile_right": {"tf": 1}, "icepool.OutcomeCountGenerator.count_unique": {"tf": 1}}, "df": 4}}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "s": {"docs": {"icepool.SuitGenerator": {"tf": 1}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {"icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}}, "df": 2, "d": {"docs": {"icepool.Die.key_tuple": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}}, "df": 3}}}}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.clear_pool_cache": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {"icepool.Population.probabilities": {"tf": 1}, "icepool.Population.probabilities_le": {"tf": 1}, "icepool.Population.probabilities_ge": {"tf": 1}, "icepool.Population.probabilities_lt": {"tf": 1}, "icepool.Population.probabilities_gt": {"tf": 1}, "icepool.JointEvaluator.order": {"tf": 1}}, "df": 6, "n": {"docs": {"icepool": {"tf": 1.4142135623730951}, "icepool.one_hot": {"tf": 1.4142135623730951}, "icepool.Die": {"tf": 2}, "icepool.Die.__init__": {"tf": 1}, "icepool.Die.keys": {"tf": 1}, "icepool.Die.values": {"tf": 1}, "icepool.Die.items": {"tf": 1}, "icepool.Die.truncate": {"tf": 1}, "icepool.Die.clip": {"tf": 1}, "icepool.Die.set_outcomes": {"tf": 1.4142135623730951}, "icepool.Die.map": {"tf": 1.4142135623730951}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Die.is_in": {"tf": 1}, "icepool.Die.count_in": {"tf": 1}, "icepool.Die.pool": {"tf": 1.4142135623730951}, "icepool.Die.key_tuple": {"tf": 1}, "icepool.Die.equals": {"tf": 1}, "icepool.Population.keys": {"tf": 1}, "icepool.Population.values": {"tf": 1}, "icepool.Population.items": {"tf": 1}, "icepool.Population.quantities": {"tf": 1}, "icepool.Population.quantities_le": {"tf": 1}, "icepool.Population.quantities_ge": {"tf": 1}, "icepool.Population.probabilities": {"tf": 1.4142135623730951}, "icepool.Population.probabilities_le": {"tf": 1.4142135623730951}, "icepool.Population.probabilities_ge": {"tf": 1.4142135623730951}, "icepool.Population.probabilities_lt": {"tf": 1.4142135623730951}, "icepool.Population.probabilities_gt": {"tf": 1.4142135623730951}, "icepool.Population.median": {"tf": 1.4142135623730951}, "icepool.Population.median_left": {"tf": 1}, "icepool.Population.median_right": {"tf": 1}, "icepool.Population.quantile": {"tf": 1.4142135623730951}, "icepool.Population.quantile_left": {"tf": 1}, "icepool.Population.quantile_right": {"tf": 1}, "icepool.from_cumulative_quantities": {"tf": 1}, "icepool.accumulate": {"tf": 1}, "icepool.apply": {"tf": 1}, "icepool.Reroll": {"tf": 1.7320508075688772}, "icepool.OutcomeCountGenerator.outcomes": {"tf": 1}, "icepool.OutcomeCountGenerator.evaluate": {"tf": 1.7320508075688772}, "icepool.OutcomeCountGenerator.count_in": {"tf": 1}, "icepool.OutcomeCountGenerator.intersection_size": {"tf": 1}, "icepool.Pool": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1.4142135623730951}, "icepool.Pool.size": {"tf": 1}, "icepool.Pool.unique_dice": {"tf": 1}, "icepool.Pool.outcomes": {"tf": 1}, "icepool.Pool.sorted_roll_counts": {"tf": 1.7320508075688772}, "icepool.Pool.set_sorted_roll_counts": {"tf": 2.23606797749979}, "icepool.Pool.min_outcome": {"tf": 1}, "icepool.Pool.max_outcome": {"tf": 1}, "icepool.Pool.lowest": {"tf": 1}, "icepool.Pool.highest": {"tf": 1}, "icepool.standard_pool": {"tf": 1}, "icepool.OutcomeCountEvaluator": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.OutcomeCountEvaluator.order": {"tf": 2}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 1}, "icepool.Order": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1}, "icepool.SumEvaluator.order": {"tf": 2}, "icepool.ExpandEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.ExpandEvaluator.order": {"tf": 2}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}, "icepool.Deck.keys": {"tf": 1}, "icepool.Deck.values": {"tf": 1}, "icepool.Deck.items": {"tf": 1}, "icepool.Deck.map": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1}, "icepool.Deal.outcomes": {"tf": 1}, "icepool.SuitGenerator.outcomes": {"tf": 1}}, "df": 74, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"icepool": {"tf": 1.4142135623730951}, "icepool.Population": {"tf": 1}, "icepool.OutcomeCountGenerator.evaluate": {"tf": 1.4142135623730951}}, "df": 3, "s": {"docs": {"icepool": {"tf": 1}, "icepool.Population.sample": {"tf": 1}, "icepool.OutcomeCountEvaluator": {"tf": 1.7320508075688772}}, "df": 3}}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.truncate": {"tf": 1}, "icepool.Population.median": {"tf": 1}, "icepool.Population.quantile": {"tf": 1}, "icepool.Again": {"tf": 1}, "icepool.apply": {"tf": 1.4142135623730951}, "icepool.apply_sorted.__init__": {"tf": 1}}, "df": 7}}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.apply_sorted.__init__": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}}, "df": 3}}}}, "t": {"docs": {"icepool.standard": {"tf": 1}, "icepool.d": {"tf": 1}, "icepool.Die.__init__": {"tf": 1.4142135623730951}, "icepool.Die.set_range": {"tf": 1}, "icepool.Die.pool": {"tf": 1}, "icepool.Die.zero_outcome": {"tf": 1}, "icepool.Population": {"tf": 1}, "icepool.from_rv": {"tf": 1.4142135623730951}, "icepool.align_range": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_straight": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_straight_and_outcome": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 1.7320508075688772}, "icepool.ExpandEvaluator.next_state": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}}, "df": 18, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool": {"tf": 1}}, "df": 1}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.unary_op": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.map_and_time": {"tf": 1}, "icepool.Die.equals": {"tf": 1}}, "df": 2}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.OutcomeCountGenerator.intersection_size": {"tf": 1}}, "df": 1}}}}}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"icepool.OutcomeCountEvaluator": {"tf": 1}}, "df": 1}}}}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.standard": {"tf": 1}, "icepool.d": {"tf": 1}, "icepool.Die.binary_op": {"tf": 1}, "icepool.Die.truncate": {"tf": 1}}, "df": 4}}}, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Deal.__init__": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die": {"tf": 1}}, "df": 1}}}}}}, "o": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.standard_pool": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1.4142135623730951}}, "df": 4}, "`": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Pool.set_sorted_roll_counts": {"tf": 1}}, "df": 1}}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"icepool.standard": {"tf": 1}, "icepool.d": {"tf": 1}, "icepool.Die.set_range": {"tf": 1}, "icepool.from_cumulative_quantities": {"tf": 1}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 1}}, "df": 5}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.cmp": {"tf": 1}, "icepool.Population": {"tf": 1}, "icepool.OutcomeCountGenerator": {"tf": 1}}, "df": 4, "d": {"docs": {"icepool.Die.truncate": {"tf": 1}, "icepool.Die.clip": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Population.denominator": {"tf": 1}, "icepool.Deck.size": {"tf": 1}}, "df": 2}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.OutcomeCountGenerator": {"tf": 1}, "icepool.OutcomeCountEvaluator": {"tf": 1}}, "df": 2}}}}}}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"icepool.OutcomeCountEvaluator": {"tf": 1}}, "df": 1}}}}}}}, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.apply": {"tf": 1}, "icepool.apply_sorted.__init__": {"tf": 1}}, "df": 3, "s": {"docs": {"icepool.cartesian_product": {"tf": 1}}, "df": 1}}}}, "v": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.__init__": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Die.__init__": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}}, "df": 2}}}}}}}}, "f": {"docs": {"icepool.Die.__init__": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.map": {"tf": 1}}, "df": 1}}}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Reroll": {"tf": 1}}, "df": 2}}}}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Again": {"tf": 1}}, "df": 1, "s": {"docs": {"icepool.Reroll": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Pool.sorted_roll_counts": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.ExpandEvaluator.next_state": {"tf": 1.7320508075688772}}, "df": 3}}}}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {"icepool.Pool.set_sorted_roll_counts": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool.apply_sorted.__init__": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.OutcomeCountEvaluator": {"tf": 1}}, "df": 1}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.OutcomeCountEvaluator.order": {"tf": 1}, "icepool.SumEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.order": {"tf": 1}}, "df": 3}}}}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.reduce": {"tf": 1}, "icepool.accumulate": {"tf": 1.4142135623730951}}, "df": 2}}}}}}, "m": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool": {"tf": 1}, "icepool.Die": {"tf": 1}, "icepool.Population.sample": {"tf": 1}, "icepool.OutcomeCountEvaluator": {"tf": 1}}, "df": 4}}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die.pool": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}}, "df": 3}}}}}}}}}, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.__init__": {"tf": 1.4142135623730951}}, "df": 1, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.apply": {"tf": 1}}, "df": 1}}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.__init__": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.OutcomeCountEvaluator": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.apply_sorted": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.OutcomeCountEvaluator.alignment": {"tf": 1}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 1}}, "df": 2}}}}}}}}}}}}}, "t": {"docs": {"icepool": {"tf": 1}, "icepool.Die": {"tf": 2}, "icepool.Die.__init__": {"tf": 1}, "icepool.Die.binary_op": {"tf": 1.4142135623730951}, "icepool.Die.reroll": {"tf": 1.4142135623730951}, "icepool.Die.filter": {"tf": 1.4142135623730951}, "icepool.Die.map": {"tf": 1.4142135623730951}, "icepool.Die.map_and_time": {"tf": 2}, "icepool.Die.explode": {"tf": 1.4142135623730951}, "icepool.Die.equals": {"tf": 1}, "icepool.Population.probabilities_le": {"tf": 1}, "icepool.Again": {"tf": 1}, "icepool.OutcomeCountGenerator.evaluate": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator": {"tf": 1}, "icepool.Deck.map": {"tf": 1}}, "df": 15, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die": {"tf": 1}}, "df": 1}}, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.from_rv": {"tf": 1}}, "df": 1}}}}, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"icepool.accumulate": {"tf": 1}}, "df": 1}}}}}}, "m": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {"icepool.CountsItemsView": {"tf": 1}}, "df": 1}}}}}}}, "s": {"docs": {"icepool.Reroll": {"tf": 1}, "icepool.OutcomeCountGenerator.evaluate": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "f": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1}}, "df": 5}}}}}, "s": {"docs": {"icepool": {"tf": 1}, "icepool.one_hot": {"tf": 1}, "icepool.Die": {"tf": 1}, "icepool.Die.__init__": {"tf": 2.23606797749979}, "icepool.Die.unary_op": {"tf": 1.7320508075688772}, "icepool.Die.binary_op": {"tf": 2}, "icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.truncate": {"tf": 1}, "icepool.Die.clip": {"tf": 1.7320508075688772}, "icepool.Die.map": {"tf": 1.7320508075688772}, "icepool.Die.map_and_time": {"tf": 2.23606797749979}, "icepool.Die.explode": {"tf": 1.4142135623730951}, "icepool.Die.is_in": {"tf": 1}, "icepool.Die.zero": {"tf": 1}, "icepool.Die.key_tuple": {"tf": 1}, "icepool.Die.equals": {"tf": 2}, "icepool.Population.tuple_len": {"tf": 1}, "icepool.Population.nearest_le": {"tf": 1.4142135623730951}, "icepool.Population.nearest_ge": {"tf": 1.4142135623730951}, "icepool.Population.probabilities_le": {"tf": 1.4142135623730951}, "icepool.Population.probabilities_ge": {"tf": 1}, "icepool.Population.variance": {"tf": 1}, "icepool.Population.marginals": {"tf": 1}, "icepool.Population.unary_op_non_elementwise": {"tf": 1}, "icepool.Population.sample": {"tf": 1.4142135623730951}, "icepool.Population.format": {"tf": 1.4142135623730951}, "icepool.Again": {"tf": 1}, "icepool.from_cumulative_quantities": {"tf": 1}, "icepool.from_rv": {"tf": 1}, "icepool.reduce": {"tf": 1}, "icepool.accumulate": {"tf": 1.7320508075688772}, "icepool.apply": {"tf": 2.8284271247461903}, "icepool.apply_sorted": {"tf": 1}, "icepool.apply_sorted.__init__": {"tf": 1.4142135623730951}, "icepool.Reroll": {"tf": 1.4142135623730951}, "icepool.OutcomeCountGenerator.evaluate": {"tf": 1}, "icepool.OutcomeCountGenerator.expand": {"tf": 1}, "icepool.OutcomeCountGenerator.count": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_matching_set": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_matching_set_and_outcome": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_straight": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_straight_and_outcome": {"tf": 1}, "icepool.OutcomeCountGenerator.sample": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1.4142135623730951}, "icepool.Pool.set_sorted_roll_counts": {"tf": 2.8284271247461903}, "icepool.OutcomeCountEvaluator": {"tf": 2}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 2.23606797749979}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1.7320508075688772}, "icepool.OutcomeCountEvaluator.order": {"tf": 1.7320508075688772}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 1}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 1}, "icepool.JointEvaluator.next_state": {"tf": 1}, "icepool.JointEvaluator.final_outcome": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1.7320508075688772}, "icepool.SumEvaluator.order": {"tf": 1.7320508075688772}, "icepool.ExpandEvaluator": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 2.23606797749979}, "icepool.ExpandEvaluator.order": {"tf": 1.7320508075688772}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1.7320508075688772}, "icepool.Deck.__init__": {"tf": 1}, "icepool.Deck.map": {"tf": 1.7320508075688772}}, "df": 63}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"icepool.standard": {"tf": 1.7320508075688772}, "icepool.d": {"tf": 1.7320508075688772}, "icepool.Die": {"tf": 1}, "icepool.Die.__init__": {"tf": 2.23606797749979}, "icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.apply": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1}}, "df": 14}}}}}}, "f": {"docs": {"icepool.bernoulli": {"tf": 1}, "icepool.coin": {"tf": 1}, "icepool.one_hot": {"tf": 1}, "icepool.Die": {"tf": 1}, "icepool.Die.__init__": {"tf": 1.7320508075688772}, "icepool.Die.unary_op": {"tf": 1.4142135623730951}, "icepool.Die.binary_op": {"tf": 1.4142135623730951}, "icepool.Die.reroll": {"tf": 2.449489742783178}, "icepool.Die.filter": {"tf": 2.23606797749979}, "icepool.Die.truncate": {"tf": 1.7320508075688772}, "icepool.Die.clip": {"tf": 1.7320508075688772}, "icepool.Die.set_range": {"tf": 1.4142135623730951}, "icepool.Die.set_outcomes": {"tf": 1.4142135623730951}, "icepool.Die.map": {"tf": 2}, "icepool.Die.map_and_time": {"tf": 1.7320508075688772}, "icepool.Die.explode": {"tf": 2.23606797749979}, "icepool.Die.keep_lowest": {"tf": 1}, "icepool.Die.keep_highest": {"tf": 1}, "icepool.Die.zero": {"tf": 1}, "icepool.Die.cmp": {"tf": 1}, "icepool.Die.sign": {"tf": 1.4142135623730951}, "icepool.Die.equals": {"tf": 2}, "icepool.Population.tuple_len": {"tf": 1.4142135623730951}, "icepool.Population.nearest_le": {"tf": 1}, "icepool.Population.nearest_ge": {"tf": 1}, "icepool.Population.quantity": {"tf": 1}, "icepool.Population.probabilities": {"tf": 1}, "icepool.Population.probabilities_le": {"tf": 1}, "icepool.Population.probabilities_ge": {"tf": 1}, "icepool.Population.probabilities_lt": {"tf": 1}, "icepool.Population.probabilities_gt": {"tf": 1}, "icepool.Population.probability": {"tf": 1}, "icepool.Population.median": {"tf": 1}, "icepool.Population.quantile": {"tf": 1}, "icepool.Population.format": {"tf": 1.4142135623730951}, "icepool.Again": {"tf": 1}, "icepool.from_rv": {"tf": 1}, "icepool.reduce": {"tf": 1}, "icepool.accumulate": {"tf": 1.4142135623730951}, "icepool.apply": {"tf": 1.7320508075688772}, "icepool.apply_sorted.__init__": {"tf": 1}, "icepool.OutcomeCountGenerator.evaluate": {"tf": 1}, "icepool.OutcomeCountGenerator.expand": {"tf": 1}, "icepool.OutcomeCountGenerator.sum": {"tf": 1}, "icepool.OutcomeCountGenerator.count": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 2.449489742783178}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 2.449489742783178}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.OutcomeCountEvaluator.order": {"tf": 1.7320508075688772}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 1}, "icepool.JointEvaluator.order": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1}, "icepool.SumEvaluator.order": {"tf": 1.7320508075688772}, "icepool.ExpandEvaluator.next_state": {"tf": 2.449489742783178}, "icepool.ExpandEvaluator.order": {"tf": 1.7320508075688772}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}, "icepool.Deck.map": {"tf": 1.4142135623730951}, "icepool.Deal.__init__": {"tf": 1}}, "df": 61, "f": {"docs": {"icepool.Die.is_in": {"tf": 1}, "icepool.Die.equals": {"tf": 1}, "icepool.Population.is_empty": {"tf": 1}, "icepool.Population.has_zero_quantities": {"tf": 1}, "icepool.from_cumulative_quantities": {"tf": 1}, "icepool.ExpandEvaluator.__init__": {"tf": 1}}, "df": 6}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die.key_tuple": {"tf": 1}}, "df": 1}}}}}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "s": {"docs": {"icepool": {"tf": 1}}, "df": 1}}}, "w": {"docs": {"icepool": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.pool": {"tf": 1}, "icepool.Die.keep_lowest": {"tf": 1.4142135623730951}, "icepool.Population.mode": {"tf": 1}, "icepool.lowest": {"tf": 2}, "icepool.apply_sorted.__init__": {"tf": 1.4142135623730951}, "icepool.Pool.sorted_roll_counts": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1}, "icepool.Pool.lowest": {"tf": 1.7320508075688772}}, "df": 8}}}}, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Pool.set_sorted_roll_counts": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {"icepool": {"tf": 1}, "icepool.Die": {"tf": 1.4142135623730951}, "icepool.OutcomeCountGenerator.evaluate": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1}}, "df": 4, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.OutcomeCountGenerator": {"tf": 1.4142135623730951}}, "df": 1}}}}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die.binary_op": {"tf": 1}}, "df": 1}}}}, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Reroll": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die": {"tf": 1}}, "df": 1}}, "d": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die.map_and_time": {"tf": 1}}, "df": 1}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Population.min_outcome": {"tf": 1}, "icepool.Population.has_zero_quantities": {"tf": 1}, "icepool.lowest": {"tf": 1}, "icepool.highest": {"tf": 1}}, "df": 4}}}, "n": {"docs": {"icepool.Population.denominator": {"tf": 1}, "icepool.Deck.size": {"tf": 1}}, "df": 2, "g": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.unary_op": {"tf": 1}, "icepool.Die.binary_op": {"tf": 1}, "icepool.Population.tuple_len": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}}, "df": 7, "s": {"docs": {"icepool.Population.tuple_len": {"tf": 1}}, "df": 1}}}}}, "f": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.binary_op": {"tf": 1}, "icepool.Population.median": {"tf": 1}, "icepool.Population.quantile": {"tf": 1}, "icepool.reduce": {"tf": 1}, "icepool.accumulate": {"tf": 1}, "icepool.apply": {"tf": 1}}, "df": 6}}, "s": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die.sign": {"tf": 1}, "icepool.apply": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die.map_and_time": {"tf": 1}, "icepool.Population.median_left": {"tf": 1}, "icepool.Population.quantile_left": {"tf": 1}}, "df": 3}}}}}, "c": {"docs": {}, "df": 0, "m": {"docs": {"icepool.Die.__init__": {"tf": 1.4142135623730951}}, "df": 1}}, "t": {"docs": {"icepool.Die.binary_op": {"tf": 2}, "icepool.Die.cmp": {"tf": 1}, "icepool.Population.nearest_le": {"tf": 1}, "icepool.Population.quantities_le": {"tf": 1}, "icepool.Population.quantity_le": {"tf": 1}, "icepool.Population.quantity_lt": {"tf": 1}, "icepool.Population.probabilities_le": {"tf": 1.7320508075688772}, "icepool.Population.probabilities_lt": {"tf": 1}, "icepool.Population.format": {"tf": 2.449489742783178}}, "df": 9}, "a": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die.equals": {"tf": 1}}, "df": 1}}}}, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {"icepool.apply": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"icepool.OutcomeCountGenerator.largest_matching_set": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_matching_set_and_outcome": {"tf": 1}}, "df": 2}}}}}}}, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool": {"tf": 1}}, "df": 1}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.__init__": {"tf": 1.7320508075688772}, "icepool.Die.binary_op": {"tf": 1}, "icepool.Population": {"tf": 1}, "icepool.from_rv": {"tf": 1}, "icepool.lowest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.apply_sorted.__init__": {"tf": 1}, "icepool.OutcomeCountGenerator.counts_len": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_straight": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_straight_and_outcome": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.Pool.counts_len": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.Deck.__init__": {"tf": 1.4142135623730951}, "icepool.Deal.__init__": {"tf": 1}, "icepool.Deal.counts_len": {"tf": 1}, "icepool.SuitGenerator.counts_len": {"tf": 1}}, "df": 19}}, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.__init__": {"tf": 1}}, "df": 1}, "s": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.binary_op": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}}, "df": 4}}}, "e": {"docs": {"icepool.Die.binary_op": {"tf": 1}, "icepool.OutcomeCountGenerator.evaluate": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1}}, "df": 6, "s": {"docs": {"icepool.Pool.size": {"tf": 1}}, "df": 1}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {"icepool": {"tf": 1}, "icepool.Die.reroll": {"tf": 1}, "icepool.Die.set_range": {"tf": 1.7320508075688772}, "icepool.Pool.min_outcome": {"tf": 1}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 1}}, "df": 5, "d": {"docs": {"icepool.Die": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {"icepool.min_outcome": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1}}, "df": 2}}}}}, "x": {"docs": {"icepool.Die.__init__": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.OutcomeCountEvaluator.order": {"tf": 1}, "icepool.SumEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.order": {"tf": 1}}, "df": 3}}}, "s": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.unary_op": {"tf": 1}, "icepool.Die.binary_op": {"tf": 1}}, "df": 2}}}}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Population.cramer_von_mises": {"tf": 1}}, "df": 1}}}, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.pool": {"tf": 1}}, "df": 1}}}, "d": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Pool.set_sorted_roll_counts": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "x": {"docs": {"icepool": {"tf": 1}, "icepool.Die.set_range": {"tf": 1.7320508075688772}, "icepool.Die.explode": {"tf": 1}, "icepool.Pool.max_outcome": {"tf": 1}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 1}}, "df": 5, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {"icepool.Die.__init__": {"tf": 1.4142135623730951}, "icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Population.kolmogorov_smirnov": {"tf": 1}, "icepool.max_outcome": {"tf": 1}}, "df": 7}}}}}, "n": {"docs": {}, "df": 0, "y": {"docs": {"icepool.one_hot": {"tf": 1}, "icepool.Die.binary_op": {"tf": 1}, "icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Die.count": {"tf": 1}, "icepool.Die.count_in": {"tf": 1}, "icepool.Die.keep_lowest": {"tf": 1}, "icepool.Die.keep_highest": {"tf": 1}, "icepool.apply": {"tf": 1}, "icepool.Reroll": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.Pool.sorted_roll_counts": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1}, "icepool.standard_pool": {"tf": 1}, "icepool.OutcomeCountEvaluator": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1}}, "df": 19}}, "k": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Die": {"tf": 1}}, "df": 1}}}, "e": {"docs": {"icepool.Pool.set_sorted_roll_counts": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}}, "df": 3}}, "t": {"docs": {}, "df": 0, "h": {"docs": {"icepool.Die.__init__": {"tf": 1}}, "df": 1}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die.equals": {"tf": 1}}, "df": 1}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.OutcomeCountGenerator.largest_matching_set": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_matching_set_and_outcome": {"tf": 1}}, "df": 2}}}}}}, "p": {"docs": {"icepool.Die.unary_op": {"tf": 1}, "icepool.Die.binary_op": {"tf": 1}, "icepool.Again": {"tf": 1}, "icepool.OutcomeCountGenerator.sum": {"tf": 1}, "icepool.Deck.map": {"tf": 1}}, "df": 5, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.unary_op": {"tf": 1}, "icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Population": {"tf": 1}, "icepool.Population.outcomes": {"tf": 1.4142135623730951}, "icepool.Population.is_empty": {"tf": 1}, "icepool.Population.quantities": {"tf": 1.4142135623730951}, "icepool.Population.format": {"tf": 1}, "icepool.OutcomeCountGenerator.contains_subset": {"tf": 1}, "icepool.OutcomeCountGenerator.intersection_size": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.standard_pool": {"tf": 1}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}, "icepool.Deal.outcomes": {"tf": 1}}, "df": 16, "s": {"docs": {"icepool.SuitGenerator": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.OutcomeCountGenerator.sum": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.OutcomeCountEvaluator.evaluate": {"tf": 1}}, "df": 1}}}}}, "s": {"docs": {"icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Deck.map": {"tf": 1}}, "df": 3}}, "i": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Die.__init__": {"tf": 1}}, "df": 1}}, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die.unary_op": {"tf": 1}, "icepool.Population.unary_op_non_elementwise": {"tf": 1}}, "df": 2, "[": {"docs": {}, "df": 0, ":": {"2": {"docs": {"icepool.Population.marginals": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}}}, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Population.marginals": {"tf": 1}}, "df": 1}}}}}}}}, "k": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Population.format": {"tf": 1}}, "df": 1}}}}}}, "y": {"docs": {"icepool.Die.set_outcomes": {"tf": 1}, "icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Die.equals": {"tf": 1}, "icepool.Population.format": {"tf": 1}, "icepool.OutcomeCountGenerator.evaluate": {"tf": 1}, "icepool.OutcomeCountGenerator.contains_subset": {"tf": 1}, "icepool.OutcomeCountGenerator.intersection_size": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.Deck.__init__": {"tf": 1}, "icepool.Deck.map": {"tf": 1}}, "df": 16}, "s": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Population.probabilities": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.binary_op": {"tf": 1}, "icepool.Die.pool": {"tf": 1}, "icepool.Die.equals": {"tf": 1}, "icepool.Reroll": {"tf": 1}, "icepool.OutcomeCountGenerator.evaluate": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1}, "icepool.OutcomeCountEvaluator": {"tf": 1}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1}}, "df": 8, "s": {"docs": {"icepool.Die": {"tf": 1.4142135623730951}, "icepool.Die.__init__": {"tf": 1}, "icepool.Die.unary_op": {"tf": 1}, "icepool.Die.equals": {"tf": 1}, "icepool.Again": {"tf": 1}, "icepool.OutcomeCountEvaluator": {"tf": 1.4142135623730951}}, "df": 6}}}}, "a": {"docs": {"icepool.SuitGenerator": {"tf": 1}}, "df": 1}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Population.median": {"tf": 1.7320508075688772}, "icepool.Population.median_left": {"tf": 1}, "icepool.Population.median_right": {"tf": 1}}, "df": 3}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Population.median": {"tf": 1}, "icepool.Population.quantile": {"tf": 1}}, "df": 2, "s": {"docs": {"icepool.OutcomeCountEvaluator.alignment": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Reroll": {"tf": 1}}, "df": 4}}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.OutcomeCountEvaluator": {"tf": 1}}, "df": 1}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die": {"tf": 1.4142135623730951}, "icepool.Population.mode": {"tf": 1}, "icepool.OutcomeCountGenerator": {"tf": 1}, "icepool.OutcomeCountGenerator.expand": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.OutcomeCountEvaluator": {"tf": 1}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.OutcomeCountEvaluator.order": {"tf": 1}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1}, "icepool.SumEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1}}, "df": 13, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Population.format": {"tf": 1}, "icepool.Again": {"tf": 1}, "icepool.apply": {"tf": 1.4142135623730951}, "icepool.apply_sorted.__init__": {"tf": 1.4142135623730951}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator": {"tf": 1}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.OutcomeCountEvaluator.order": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1}, "icepool.SumEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1}}, "df": 12}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}}, "df": 2}}}}}}}}, "d": {"docs": {"icepool.Population.format": {"tf": 1}}, "df": 1, ":": {"docs": {}, "df": 0, "*": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "|": {"docs": {}, "df": 0, "q": {"docs": {"icepool.Population.format": {"tf": 1}}, "df": 1}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Die": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Die.equals": {"tf": 1}, "icepool.OutcomeCountEvaluator": {"tf": 1}}, "df": 4, "s": {"docs": {"icepool": {"tf": 1}, "icepool.Die.unary_op": {"tf": 1.4142135623730951}, "icepool.Die.binary_op": {"tf": 1}, "icepool.Die.reroll": {"tf": 1.4142135623730951}, "icepool.Die.filter": {"tf": 1.4142135623730951}, "icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.is_in": {"tf": 1}, "icepool.Die.keep_lowest": {"tf": 1}, "icepool.Die.keep_highest": {"tf": 1}, "icepool.Population.nearest_le": {"tf": 1}, "icepool.Population.nearest_ge": {"tf": 1}, "icepool.align": {"tf": 1}, "icepool.align_range": {"tf": 1}, "icepool.apply": {"tf": 1.4142135623730951}, "icepool.apply_sorted.__init__": {"tf": 1.4142135623730951}, "icepool.OutcomeCountGenerator.largest_matching_set": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_matching_set_and_outcome": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_straight": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_straight_and_outcome": {"tf": 1}, "icepool.OutcomeCountGenerator.sample": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.OutcomeCountEvaluator.order": {"tf": 1}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 1}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1}, "icepool.SumEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1}}, "df": 33}, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.equals": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_matching_set": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_matching_set_and_outcome": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_straight": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_straight_and_outcome": {"tf": 1}}, "df": 6}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.OutcomeCountGenerator.evaluate": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}, "icepool.Deck.map": {"tf": 1}}, "df": 6}}}}}}}, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool": {"tf": 1.4142135623730951}}, "df": 1}}}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"icepool.bernoulli": {"tf": 1}, "icepool.coin": {"tf": 1}, "icepool.Die": {"tf": 1}, "icepool.Die.__init__": {"tf": 1}, "icepool.Die.unary_op": {"tf": 1}, "icepool.Die.binary_op": {"tf": 1}, "icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.truncate": {"tf": 1}, "icepool.Die.clip": {"tf": 1}, "icepool.Die.set_range": {"tf": 1.4142135623730951}, "icepool.Die.map": {"tf": 1.7320508075688772}, "icepool.Die.map_and_time": {"tf": 1.4142135623730951}, "icepool.Die.zero": {"tf": 1}, "icepool.accumulate": {"tf": 1}, "icepool.OutcomeCountGenerator.intersection_size": {"tf": 1}, "icepool.Pool": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1}, "icepool.OutcomeCountEvaluator": {"tf": 1}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.OutcomeCountEvaluator.order": {"tf": 1}, "icepool.OutcomeCountEvaluator.sample": {"tf": 1.4142135623730951}, "icepool.SumEvaluator.final_outcome": {"tf": 1}, "icepool.SumEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}}, "df": 27, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.from_cumulative_quantities": {"tf": 1}, "icepool.from_rv": {"tf": 1.4142135623730951}}, "df": 3}}}, "s": {"docs": {"icepool.Die.keep_lowest": {"tf": 1}, "icepool.Die.keep_highest": {"tf": 1}, "icepool.Population.probabilities": {"tf": 1}, "icepool.Population.probabilities_le": {"tf": 1}, "icepool.Population.probabilities_ge": {"tf": 1}, "icepool.Population.probabilities_lt": {"tf": 1}, "icepool.Population.probabilities_gt": {"tf": 1}, "icepool.accumulate": {"tf": 1}, "icepool.ExpandEvaluator": {"tf": 1}}, "df": 9}}}}, "t": {"docs": {"icepool.one_hot": {"tf": 1}}, "df": 1}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.zero": {"tf": 1}}, "df": 1}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die.cmp": {"tf": 1}}, "df": 1}}}}}}}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die": {"tf": 1}, "icepool.Deck": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.one_hot": {"tf": 1}, "icepool.Die": {"tf": 1}, "icepool.Die.unary_op": {"tf": 1}, "icepool.Die.binary_op": {"tf": 1}, "icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Die.keep_lowest": {"tf": 1}, "icepool.Die.keep_highest": {"tf": 1}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 1}}, "df": 11}}}, "s": {"docs": {"icepool.Pool": {"tf": 1}, "icepool.Deal": {"tf": 1}}, "df": 2}}}}}}}, "l": {"docs": {"icepool.Die.map": {"tf": 1.7320508075688772}, "icepool.Die.map_and_time": {"tf": 1.7320508075688772}, "icepool.Deck.map": {"tf": 1.7320508075688772}}, "df": 3, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.truncate": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.order": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.SumEvaluator.order": {"tf": 1.4142135623730951}, "icepool.ExpandEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.order": {"tf": 1.4142135623730951}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1.4142135623730951}}, "df": 11, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die": {"tf": 1}, "icepool.Population.sample": {"tf": 1}, "icepool.Deck": {"tf": 1}}, "df": 3}}}}, "s": {"docs": {"icepool.Die.if_else": {"tf": 1}}, "df": 1}, "d": {"docs": {"icepool.Pool.set_sorted_roll_counts": {"tf": 1}, "icepool.Deck.map": {"tf": 1}}, "df": 2}}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.map": {"tf": 1.4142135623730951}, "icepool.Die.map_and_time": {"tf": 2}}, "df": 2, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.map": {"tf": 1.4142135623730951}, "icepool.Die.map_and_time": {"tf": 1}}, "df": 2}}, "s": {"docs": {"icepool.Die.map_and_time": {"tf": 1}}, "df": 1}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die": {"tf": 1}, "icepool.Die.set_outcomes": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}}, "df": 4, "s": {"docs": {"icepool.Die.trim": {"tf": 1}, "icepool.Reroll": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Reroll": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die.cmp": {"tf": 1}}, "df": 1}}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Die.__init__": {"tf": 2.23606797749979}, "icepool.Die.reroll": {"tf": 2.449489742783178}, "icepool.Die.filter": {"tf": 2.449489742783178}, "icepool.Die.clip": {"tf": 1}, "icepool.Die.map": {"tf": 1.4142135623730951}, "icepool.Die.map_and_time": {"tf": 1.4142135623730951}, "icepool.Reroll": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}}, "df": 13, "s": {"docs": {"icepool.Die.reroll": {"tf": 1.4142135623730951}, "icepool.Die.filter": {"tf": 1.4142135623730951}, "icepool.Die.truncate": {"tf": 1}}, "df": 3}, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.reroll": {"tf": 1.4142135623730951}, "icepool.Reroll": {"tf": 1.7320508075688772}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Die.clip": {"tf": 1}}, "df": 1}}}}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"icepool.Die.map_and_time": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}}, "df": 2}, "d": {"docs": {"icepool.Die.explode": {"tf": 1}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.apply_sorted": {"tf": 1}}, "df": 1}}}, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Deal.__init__": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1}}, "df": 2}}}}}}, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die.unary_op": {"tf": 1}, "icepool.Die.binary_op": {"tf": 1}}, "df": 2}}}}}}}}, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.from_cumulative_quantities": {"tf": 1}, "icepool.OutcomeCountGenerator.expand": {"tf": 1}, "icepool.ExpandEvaluator": {"tf": 1}, "icepool.Deck.map": {"tf": 1}}, "df": 4}}}}}}}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Deal.__init__": {"tf": 1}}, "df": 1}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"icepool.from_cumulative_quantities": {"tf": 1}}, "df": 1, "d": {"docs": {"icepool.from_cumulative_quantities": {"tf": 1}}, "df": 1}}}}}}, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"icepool.reduce": {"tf": 1}, "icepool.accumulate": {"tf": 1}, "icepool.apply": {"tf": 1}}, "df": 3}}}}, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Pool.set_sorted_roll_counts": {"tf": 1}}, "df": 1}}}}}}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"icepool.OutcomeCountEvaluator": {"tf": 1}}, "df": 1}}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.OutcomeCountEvaluator.order": {"tf": 1}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1}, "icepool.SumEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1}}, "df": 10}}}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Die.__init__": {"tf": 1.7320508075688772}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.is_in": {"tf": 1}, "icepool.Die.count": {"tf": 1}, "icepool.Die.count_in": {"tf": 1}, "icepool.Die.pool": {"tf": 1}, "icepool.Die.keep_lowest": {"tf": 1.4142135623730951}, "icepool.Die.keep_highest": {"tf": 1.4142135623730951}, "icepool.Again": {"tf": 1.4142135623730951}, "icepool.OutcomeCountGenerator.intersection_size": {"tf": 1}, "icepool.Pool": {"tf": 1}, "icepool.Pool.sorted_roll_counts": {"tf": 1.4142135623730951}, "icepool.Pool.set_sorted_roll_counts": {"tf": 2.449489742783178}, "icepool.Pool.lowest": {"tf": 1}, "icepool.Pool.highest": {"tf": 1}, "icepool.JointEvaluator": {"tf": 1}}, "df": 16, "s": {"docs": {"icepool": {"tf": 1}, "icepool.standard": {"tf": 1}, "icepool.d": {"tf": 1}, "icepool.bernoulli": {"tf": 1}, "icepool.coin": {"tf": 1}, "icepool.Die.__init__": {"tf": 1.4142135623730951}, "icepool.Die.binary_op": {"tf": 1.7320508075688772}, "icepool.Die.pool": {"tf": 1}, "icepool.Die.keep_lowest": {"tf": 1}, "icepool.Die.keep_highest": {"tf": 1}}, "df": 10}, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.one_hot": {"tf": 1.4142135623730951}, "icepool.Die.explode": {"tf": 1}, "icepool.Again": {"tf": 1}, "icepool.apply": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}}, "df": 6}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Population.probabilities_le": {"tf": 1}, "icepool.Population.probabilities_ge": {"tf": 1}, "icepool.Population.probabilities_lt": {"tf": 1}, "icepool.Population.probabilities_gt": {"tf": 1}, "icepool.apply_sorted.__init__": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}}, "df": 9}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.unary_op": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"icepool.one_hot": {"tf": 1}, "icepool.Population.sample": {"tf": 1.4142135623730951}, "icepool.OutcomeCountGenerator.sample": {"tf": 1.4142135623730951}}, "df": 3}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.truncate": {"tf": 1.4142135623730951}, "icepool.Die.clip": {"tf": 1.7320508075688772}, "icepool.Die.set_range": {"tf": 1}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 1}}, "df": 5}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die": {"tf": 1.4142135623730951}, "icepool.Die.unary_op": {"tf": 1}, "icepool.Die.binary_op": {"tf": 1}, "icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.OutcomeCountGenerator": {"tf": 1}, "icepool.OutcomeCountGenerator.evaluate": {"tf": 1}}, "df": 7}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.unary_op": {"tf": 1}, "icepool.Die.binary_op": {"tf": 1}, "icepool.Die.zero": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 1}, "icepool.JointEvaluator.order": {"tf": 1}}, "df": 8}}}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.binary_op": {"tf": 1.4142135623730951}, "icepool.Population.median": {"tf": 1}, "icepool.Population.quantile": {"tf": 1}, "icepool.reduce": {"tf": 1}, "icepool.accumulate": {"tf": 1}, "icepool.OutcomeCountEvaluator.order": {"tf": 1}, "icepool.SumEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.order": {"tf": 1}}, "df": 8}}}}, "v": {"docs": {"icepool.from_rv": {"tf": 2}}, "df": 1}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"icepool.JointEvaluator.next_state": {"tf": 1}, "icepool.JointEvaluator.final_outcome": {"tf": 1}}, "df": 2}, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.SumEvaluator.next_state": {"tf": 1}}, "df": 1}}}}}}}, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"icepool": {"tf": 1.4142135623730951}, "icepool.standard": {"tf": 1.4142135623730951}, "icepool.d": {"tf": 1.4142135623730951}, "icepool.bernoulli": {"tf": 1}, "icepool.coin": {"tf": 1}, "icepool.one_hot": {"tf": 1.4142135623730951}, "icepool.Die": {"tf": 1.7320508075688772}, "icepool.Die.__init__": {"tf": 2.23606797749979}, "icepool.Die.truncate": {"tf": 1.4142135623730951}, "icepool.Die.map": {"tf": 1.4142135623730951}, "icepool.Die.map_and_time": {"tf": 1.4142135623730951}, "icepool.Die.if_else": {"tf": 1.4142135623730951}, "icepool.Die.zero": {"tf": 1}, "icepool.Die.cmp": {"tf": 1}, "icepool.Die.equals": {"tf": 1}, "icepool.Population": {"tf": 1}, "icepool.Population.denominator": {"tf": 1}, "icepool.Population.has_zero_quantities": {"tf": 1}, "icepool.Population.sample": {"tf": 1}, "icepool.Population.format": {"tf": 1.4142135623730951}, "icepool.Again": {"tf": 1.4142135623730951}, "icepool.align": {"tf": 1}, "icepool.align_range": {"tf": 1}, "icepool.accumulate": {"tf": 1.4142135623730951}, "icepool.apply": {"tf": 1.4142135623730951}, "icepool.apply_sorted.__init__": {"tf": 1.4142135623730951}, "icepool.Reroll": {"tf": 2.6457513110645907}, "icepool.OutcomeCountGenerator.count_unique": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_matching_set": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_matching_set_and_outcome": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_straight": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_straight_and_outcome": {"tf": 1}, "icepool.Pool": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1.7320508075688772}, "icepool.OutcomeCountEvaluator": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 2}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.order": {"tf": 1.7320508075688772}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.SumEvaluator.order": {"tf": 1.7320508075688772}, "icepool.ExpandEvaluator.next_state": {"tf": 2}, "icepool.ExpandEvaluator.order": {"tf": 1.7320508075688772}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.Deck.size": {"tf": 1}, "icepool.Deck.map": {"tf": 1}}, "df": 47, "i": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Die.binary_op": {"tf": 1}, "icepool.Die.keys": {"tf": 1}, "icepool.Die.values": {"tf": 1}, "icepool.Die.clip": {"tf": 1}, "icepool.Population.keys": {"tf": 1}, "icepool.Population.values": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.Deck": {"tf": 1}, "icepool.Deck.keys": {"tf": 1}, "icepool.Deck.values": {"tf": 1}}, "df": 10}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.map_and_time": {"tf": 1}, "icepool.Deck": {"tf": 1}}, "df": 2}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"icepool.bernoulli": {"tf": 1}, "icepool.coin": {"tf": 1}, "icepool.Die": {"tf": 1.4142135623730951}, "icepool.Die.__init__": {"tf": 2.6457513110645907}, "icepool.Die.reroll": {"tf": 1.4142135623730951}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.truncate": {"tf": 1}, "icepool.Die.clip": {"tf": 1.4142135623730951}, "icepool.Die.set_range": {"tf": 1.4142135623730951}, "icepool.Die.map": {"tf": 2.23606797749979}, "icepool.Die.map_and_time": {"tf": 2}, "icepool.Die.explode": {"tf": 2.23606797749979}, "icepool.Die.keep_lowest": {"tf": 1.4142135623730951}, "icepool.Die.keep_highest": {"tf": 1}, "icepool.Die.zero": {"tf": 1}, "icepool.Die.cmp": {"tf": 1}, "icepool.Die.equals": {"tf": 1}, "icepool.Population.probabilities": {"tf": 1.4142135623730951}, "icepool.Population.probabilities_le": {"tf": 1.4142135623730951}, "icepool.Population.probabilities_ge": {"tf": 1.4142135623730951}, "icepool.Population.probabilities_lt": {"tf": 1.4142135623730951}, "icepool.Population.probabilities_gt": {"tf": 1.4142135623730951}, "icepool.Population.median": {"tf": 1}, "icepool.Population.quantile": {"tf": 1}, "icepool.Population.marginals": {"tf": 1}, "icepool.from_cumulative_quantities": {"tf": 1}, "icepool.from_rv": {"tf": 1.7320508075688772}, "icepool.lowest": {"tf": 1.4142135623730951}, "icepool.highest": {"tf": 1.4142135623730951}, "icepool.reduce": {"tf": 1}, "icepool.accumulate": {"tf": 1}, "icepool.apply": {"tf": 1.4142135623730951}, "icepool.apply_sorted.__init__": {"tf": 1}, "icepool.OutcomeCountGenerator": {"tf": 1}, "icepool.OutcomeCountGenerator.expand": {"tf": 1}, "icepool.OutcomeCountGenerator.sum": {"tf": 1}, "icepool.OutcomeCountGenerator.count": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.Pool.sorted_roll_counts": {"tf": 1.4142135623730951}, "icepool.Pool.set_sorted_roll_counts": {"tf": 2.449489742783178}, "icepool.Pool.lowest": {"tf": 1.4142135623730951}, "icepool.Pool.highest": {"tf": 1.4142135623730951}, "icepool.standard_pool": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 2}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1.7320508075688772}, "icepool.OutcomeCountEvaluator.order": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1.7320508075688772}, "icepool.SumEvaluator.order": {"tf": 1.4142135623730951}, "icepool.ExpandEvaluator.next_state": {"tf": 2}, "icepool.ExpandEvaluator.order": {"tf": 1.4142135623730951}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1.7320508075688772}, "icepool.Deck.__init__": {"tf": 2}, "icepool.Deck.map": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1}}, "df": 55}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.binary_op": {"tf": 1}}, "df": 2}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"icepool": {"tf": 1.4142135623730951}}, "df": 1}}, "r": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Die.map_and_time": {"tf": 1}}, "df": 1}}}}}, "k": {"docs": {}, "df": 0, "s": {"docs": {"icepool.OutcomeCountEvaluator.order": {"tf": 1}, "icepool.SumEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.order": {"tf": 1}}, "df": 3}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"icepool.cartesian_product": {"tf": 1}, "icepool.Die.__init__": {"tf": 1}, "icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.equals": {"tf": 1}, "icepool.apply_sorted.__init__": {"tf": 1}, "icepool.OutcomeCountGenerator.intersection_size": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 2.23606797749979}}, "df": 8}}}}, "a": {"docs": {}, "df": 0, "y": {"docs": {"icepool.one_hot": {"tf": 1}, "icepool.Population.quantile": {"tf": 1}, "icepool.Population.quantile_left": {"tf": 1}, "icepool.Population.quantile_right": {"tf": 1}, "icepool.OutcomeCountEvaluator": {"tf": 1}}, "df": 5, "s": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1}}, "df": 2}}, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.truncate": {"tf": 1}, "icepool.Die.clip": {"tf": 1}, "icepool.Again": {"tf": 1}, "icepool.OutcomeCountGenerator.evaluate": {"tf": 1}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1}}, "df": 8}}}, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"icepool.cartesian_product": {"tf": 1}, "icepool.Die.zero_outcome": {"tf": 1}, "icepool.SuitGenerator": {"tf": 1}}, "df": 3}}, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.__init__": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"icepool.Die.__init__": {"tf": 2.23606797749979}, "icepool.Die.binary_op": {"tf": 1.7320508075688772}, "icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.truncate": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Population.format": {"tf": 1}, "icepool.reduce": {"tf": 1}, "icepool.accumulate": {"tf": 1}, "icepool.apply": {"tf": 1}, "icepool.OutcomeCountGenerator": {"tf": 1}, "icepool.OutcomeCountGenerator.evaluate": {"tf": 1}, "icepool.Pool.sorted_roll_counts": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1.7320508075688772}, "icepool.standard_pool": {"tf": 1}, "icepool.OutcomeCountEvaluator.order": {"tf": 1}, "icepool.SumEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.order": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1.4142135623730951}, "icepool.Deck.map": {"tf": 1}}, "df": 20, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die.map_and_time": {"tf": 1}}, "df": 1}}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.map_and_time": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Die.unary_op": {"tf": 1}, "icepool.Reroll": {"tf": 1.4142135623730951}, "icepool.Pool.__init__": {"tf": 1}, "icepool.OutcomeCountEvaluator": {"tf": 1}}, "df": 4}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die.binary_op": {"tf": 1}, "icepool.Population.probabilities_le": {"tf": 1}, "icepool.Population.probabilities_ge": {"tf": 1}, "icepool.OutcomeCountGenerator.contains_subset": {"tf": 1}}, "df": 4}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.map_and_time": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}}, "df": 3}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {"icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.Order": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1}}, "df": 4}}}, "e": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"icepool.apply_sorted.__init__": {"tf": 1}, "icepool.OutcomeCountGenerator": {"tf": 1}, "icepool.OutcomeCountGenerator.denominator": {"tf": 1}, "icepool.Pool.denominator": {"tf": 1}, "icepool.Deal.denominator": {"tf": 1}, "icepool.SuitGenerator.denominator": {"tf": 1}}, "df": 6, "s": {"docs": {"icepool.Die": {"tf": 1}, "icepool.Population.denominator": {"tf": 1}, "icepool.Deck.size": {"tf": 1}}, "df": 3}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Die": {"tf": 1}, "icepool.Die.unary_op": {"tf": 1}, "icepool.OutcomeCountEvaluator.order": {"tf": 1}, "icepool.SumEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.order": {"tf": 1}}, "df": 5}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.map": {"tf": 1}, "icepool.OutcomeCountEvaluator": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}}, "df": 4}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.OutcomeCountGenerator": {"tf": 1}}, "df": 1}}}, "e": {"docs": {"icepool.OutcomeCountGenerator": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.OutcomeCountGenerator.evaluate": {"tf": 1}}, "df": 1}}}}}}}}}}}}}, "s": {"docs": {"icepool.SuitGenerator": {"tf": 1}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"icepool": {"tf": 1.4142135623730951}, "icepool.Die": {"tf": 1}, "icepool.OutcomeCountGenerator.expand": {"tf": 1}, "icepool.ExpandEvaluator": {"tf": 1}}, "df": 4}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Reroll": {"tf": 1}}, "df": 3}}}}}}}, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.one_hot": {"tf": 1}}, "df": 1}}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Population.denominator": {"tf": 1}, "icepool.OutcomeCountGenerator.expand": {"tf": 1}, "icepool.Pool.unique_dice": {"tf": 1}, "icepool.ExpandEvaluator.__init__": {"tf": 1}, "icepool.Deck.size": {"tf": 1}}, "df": 5, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die.key_tuple": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Pool.outcomes": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}}, "df": 4}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.unary_op": {"tf": 1.4142135623730951}, "icepool.Population.unary_op_non_elementwise": {"tf": 1}}, "df": 3}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.map": {"tf": 1.4142135623730951}, "icepool.Die.map_and_time": {"tf": 1.4142135623730951}, "icepool.Die.explode": {"tf": 1}, "icepool.Population.format": {"tf": 1}, "icepool.Deck.map": {"tf": 1.4142135623730951}}, "df": 7}}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Die.filter": {"tf": 1.7320508075688772}}, "df": 1}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Deck.map": {"tf": 1}}, "df": 3}}}}}}, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Die.equals": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.OutcomeCountGenerator.expand": {"tf": 1}}, "df": 1}}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}}, "df": 2}}}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die": {"tf": 1.7320508075688772}, "icepool.Die.__init__": {"tf": 2.23606797749979}, "icepool.Die.unary_op": {"tf": 1.4142135623730951}, "icepool.Die.binary_op": {"tf": 2}, "icepool.Die.truncate": {"tf": 1}, "icepool.Die.clip": {"tf": 1}, "icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Population.outcomes": {"tf": 1}, "icepool.Population.quantities": {"tf": 1}, "icepool.Population.denominator": {"tf": 1}, "icepool.Population.median": {"tf": 1}, "icepool.Population.quantile": {"tf": 1}, "icepool.Again": {"tf": 1}, "icepool.apply": {"tf": 1}, "icepool.apply_sorted.__init__": {"tf": 1.4142135623730951}, "icepool.Reroll": {"tf": 1}, "icepool.OutcomeCountGenerator.evaluate": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 1}, "icepool.Deck.size": {"tf": 1}, "icepool.Deal.outcomes": {"tf": 1}}, "df": 22, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Die": {"tf": 1}, "icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}}, "df": 3}}}, "d": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.unary_op": {"tf": 1.7320508075688772}, "icepool.Die.binary_op": {"tf": 1}, "icepool.Die.set_range": {"tf": 1.4142135623730951}, "icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Die.explode": {"tf": 1.4142135623730951}, "icepool.Die.pool": {"tf": 1}, "icepool.Population.marginals": {"tf": 1}, "icepool.Population.unary_op_non_elementwise": {"tf": 1}, "icepool.Again": {"tf": 1.7320508075688772}, "icepool.Reroll": {"tf": 2}, "icepool.OutcomeCountGenerator.evaluate": {"tf": 1}, "icepool.Pool": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.Order": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1}}, "df": 21}, "s": {"docs": {"icepool.Population.sample": {"tf": 1}, "icepool.OutcomeCountGenerator.sample": {"tf": 1}}, "df": 2}}, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1}}, "df": 3, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}}, "df": 3}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Die.binary_op": {"tf": 1}, "icepool.Population.format": {"tf": 1}, "icepool.from_cumulative_quantities": {"tf": 1}, "icepool.apply": {"tf": 1.7320508075688772}, "icepool.OutcomeCountGenerator": {"tf": 1}, "icepool.OutcomeCountGenerator.evaluate": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}}, "df": 8}}}}, "p": {"docs": {"icepool.Die.clip": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1.4142135623730951}}, "df": 2}}, "o": {"docs": {"icepool.Population.format": {"tf": 1.4142135623730951}}, "df": 1, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die": {"tf": 1.4142135623730951}, "icepool.Die.__init__": {"tf": 1}, "icepool.Die.unary_op": {"tf": 1}, "icepool.Die.binary_op": {"tf": 1.4142135623730951}, "icepool.Die.map": {"tf": 1.4142135623730951}, "icepool.Die.map_and_time": {"tf": 1.4142135623730951}, "icepool.Die.cmp": {"tf": 1.4142135623730951}, "icepool.Die.key_tuple": {"tf": 1}, "icepool.Die.equals": {"tf": 1.4142135623730951}, "icepool.Again": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1}, "icepool.OutcomeCountEvaluator": {"tf": 1}, "icepool.OutcomeCountEvaluator.order": {"tf": 1}, "icepool.SumEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.order": {"tf": 1}, "icepool.Deck.map": {"tf": 1}}, "df": 17, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"icepool": {"tf": 1.4142135623730951}, "icepool.bernoulli": {"tf": 1}, "icepool.coin": {"tf": 1}, "icepool.Die.sign": {"tf": 1}, "icepool.Die.equals": {"tf": 1}, "icepool.Population.probabilities": {"tf": 1}, "icepool.Population.probabilities_le": {"tf": 1}, "icepool.Population.probabilities_ge": {"tf": 1}, "icepool.Population.probabilities_lt": {"tf": 1}, "icepool.Population.probabilities_gt": {"tf": 1}, "icepool.OutcomeCountEvaluator": {"tf": 1}}, "df": 11}}}}, "s": {"docs": {"icepool.JointEvaluator.order": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {"icepool.bernoulli": {"tf": 1}, "icepool.coin": {"tf": 1}, "icepool.Die.__init__": {"tf": 2.23606797749979}, "icepool.Die.unary_op": {"tf": 1}, "icepool.Die.binary_op": {"tf": 2}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Die.pool": {"tf": 1}, "icepool.Die.key_tuple": {"tf": 1}, "icepool.Die.equals": {"tf": 1}, "icepool.Population.tuple_len": {"tf": 1}, "icepool.Population.denominator": {"tf": 1}, "icepool.Population.quantity": {"tf": 1}, "icepool.Population.probabilities_le": {"tf": 1}, "icepool.Population.probabilities_ge": {"tf": 1.4142135623730951}, "icepool.Population.probability": {"tf": 1}, "icepool.Population.median": {"tf": 1}, "icepool.Population.quantile": {"tf": 1}, "icepool.Population.format": {"tf": 2.449489742783178}, "icepool.Again": {"tf": 1}, "icepool.from_rv": {"tf": 1}, "icepool.lowest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.apply_sorted.__init__": {"tf": 1}, "icepool.Reroll": {"tf": 1}, "icepool.OutcomeCountGenerator.evaluate": {"tf": 1.4142135623730951}, "icepool.OutcomeCountGenerator.contains_subset": {"tf": 1}, "icepool.OutcomeCountGenerator.intersection_size": {"tf": 1}, "icepool.Pool.__init__": {"tf": 2.449489742783178}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1.4142135623730951}, "icepool.standard_pool": {"tf": 1}, "icepool.OutcomeCountEvaluator": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1.7320508075688772}, "icepool.OutcomeCountEvaluator.order": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1.7320508075688772}, "icepool.SumEvaluator.order": {"tf": 1.4142135623730951}, "icepool.ExpandEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.ExpandEvaluator.order": {"tf": 1.4142135623730951}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1.7320508075688772}, "icepool.Deck.__init__": {"tf": 1}, "icepool.Deck.size": {"tf": 1}}, "df": 43, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool": {"tf": 1}, "icepool.Die.keys": {"tf": 1}, "icepool.Die.values": {"tf": 1}, "icepool.Die.items": {"tf": 1}, "icepool.Population.keys": {"tf": 1}, "icepool.Population.values": {"tf": 1}, "icepool.Population.items": {"tf": 1}, "icepool.Population.quantities": {"tf": 1}, "icepool.Population.quantities_le": {"tf": 1}, "icepool.Population.quantities_ge": {"tf": 1}, "icepool.Population.probabilities": {"tf": 1}, "icepool.Population.probabilities_le": {"tf": 1}, "icepool.Population.probabilities_ge": {"tf": 1}, "icepool.Population.probabilities_lt": {"tf": 1}, "icepool.Population.probabilities_gt": {"tf": 1}, "icepool.from_cumulative_quantities": {"tf": 1.4142135623730951}, "icepool.accumulate": {"tf": 1}, "icepool.apply": {"tf": 1}, "icepool.OutcomeCountGenerator.outcomes": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.order": {"tf": 2.8284271247461903}, "icepool.Order": {"tf": 1}, "icepool.JointEvaluator.order": {"tf": 1}, "icepool.SumEvaluator.order": {"tf": 2.8284271247461903}, "icepool.ExpandEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.ExpandEvaluator.order": {"tf": 2.8284271247461903}, "icepool.Deck.keys": {"tf": 1}, "icepool.Deck.values": {"tf": 1}, "icepool.Deck.items": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1}, "icepool.Deal.outcomes": {"tf": 1}, "icepool.SuitGenerator.outcomes": {"tf": 1}}, "df": 33, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.key_tuple": {"tf": 1}, "icepool.Population": {"tf": 1}, "icepool.apply_sorted.__init__": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.Deck.__init__": {"tf": 1}}, "df": 9}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.binary_op": {"tf": 1}}, "df": 1}}, "s": {"docs": {"icepool.JointEvaluator.order": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"icepool.apply_sorted.__init__": {"tf": 1}}, "df": 1}}}}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1.4142135623730951}}, "df": 2, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"icepool.bernoulli": {"tf": 1}, "icepool.coin": {"tf": 1}, "icepool.Die": {"tf": 1.4142135623730951}, "icepool.Die.__init__": {"tf": 2}, "icepool.Die.unary_op": {"tf": 1.4142135623730951}, "icepool.Die.binary_op": {"tf": 1}, "icepool.Die.values": {"tf": 1}, "icepool.Die.items": {"tf": 1}, "icepool.Die.reroll": {"tf": 2}, "icepool.Die.filter": {"tf": 1.4142135623730951}, "icepool.Die.truncate": {"tf": 1}, "icepool.Die.clip": {"tf": 1}, "icepool.Die.set_range": {"tf": 2.449489742783178}, "icepool.Die.map": {"tf": 2}, "icepool.Die.map_and_time": {"tf": 2.6457513110645907}, "icepool.Die.explode": {"tf": 2}, "icepool.Die.zero": {"tf": 1.4142135623730951}, "icepool.Die.zero_outcome": {"tf": 1}, "icepool.Die.cmp": {"tf": 1}, "icepool.Die.equals": {"tf": 1.4142135623730951}, "icepool.Population.values": {"tf": 1}, "icepool.Population.items": {"tf": 1}, "icepool.Population.min_outcome": {"tf": 1}, "icepool.Population.max_outcome": {"tf": 1}, "icepool.Population.nearest_le": {"tf": 1.4142135623730951}, "icepool.Population.nearest_ge": {"tf": 1.4142135623730951}, "icepool.Population.has_zero_quantities": {"tf": 1}, "icepool.Population.quantities_le": {"tf": 1}, "icepool.Population.quantities_ge": {"tf": 1}, "icepool.Population.quantity": {"tf": 1}, "icepool.Population.quantity_ne": {"tf": 1}, "icepool.Population.quantity_le": {"tf": 1}, "icepool.Population.quantity_lt": {"tf": 1}, "icepool.Population.quantity_ge": {"tf": 1}, "icepool.Population.quantity_gt": {"tf": 1}, "icepool.Population.probabilities": {"tf": 1}, "icepool.Population.probabilities_le": {"tf": 1}, "icepool.Population.probabilities_ge": {"tf": 1}, "icepool.Population.probabilities_lt": {"tf": 1}, "icepool.Population.probabilities_gt": {"tf": 1}, "icepool.Population.probability": {"tf": 1}, "icepool.Population.mode": {"tf": 1}, "icepool.Population.modal_quantity": {"tf": 1}, "icepool.Population.quantile": {"tf": 1}, "icepool.Population.quantile_left": {"tf": 1}, "icepool.Population.quantile_right": {"tf": 1}, "icepool.Population.format": {"tf": 1.7320508075688772}, "icepool.lowest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.min_outcome": {"tf": 1}, "icepool.max_outcome": {"tf": 1}, "icepool.reduce": {"tf": 1}, "icepool.accumulate": {"tf": 1}, "icepool.apply": {"tf": 2}, "icepool.apply_sorted.__init__": {"tf": 1.4142135623730951}, "icepool.Reroll": {"tf": 1.4142135623730951}, "icepool.OutcomeCountGenerator": {"tf": 1}, "icepool.OutcomeCountGenerator.evaluate": {"tf": 1}, "icepool.OutcomeCountGenerator.expand": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_matching_set_and_outcome": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_straight_and_outcome": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.Pool.min_outcome": {"tf": 1}, "icepool.Pool.max_outcome": {"tf": 1}, "icepool.OutcomeCountEvaluator": {"tf": 2.23606797749979}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 2.8284271247461903}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 2}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 1.7320508075688772}, "icepool.JointEvaluator.final_outcome": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 2}, "icepool.ExpandEvaluator.next_state": {"tf": 2.8284271247461903}, "icepool.ExpandEvaluator.final_outcome": {"tf": 2}, "icepool.Deck.__init__": {"tf": 1.4142135623730951}, "icepool.Deck.values": {"tf": 1}, "icepool.Deck.items": {"tf": 1}, "icepool.Deck.map": {"tf": 1.7320508075688772}}, "df": 76, "s": {"docs": {"icepool": {"tf": 1}, "icepool.standard": {"tf": 1}, "icepool.d": {"tf": 1}, "icepool.one_hot": {"tf": 1.4142135623730951}, "icepool.cartesian_product": {"tf": 1.4142135623730951}, "icepool.Outcome": {"tf": 1}, "icepool.Die": {"tf": 2.6457513110645907}, "icepool.Die.__init__": {"tf": 3.605551275463989}, "icepool.Die.unary_op": {"tf": 1.4142135623730951}, "icepool.Die.binary_op": {"tf": 2.23606797749979}, "icepool.Die.keys": {"tf": 1}, "icepool.Die.reroll": {"tf": 2.8284271247461903}, "icepool.Die.filter": {"tf": 2.8284271247461903}, "icepool.Die.truncate": {"tf": 1.7320508075688772}, "icepool.Die.clip": {"tf": 1.7320508075688772}, "icepool.Die.set_range": {"tf": 1}, "icepool.Die.set_outcomes": {"tf": 1.7320508075688772}, "icepool.Die.trim": {"tf": 1}, "icepool.Die.map": {"tf": 2.8284271247461903}, "icepool.Die.map_and_time": {"tf": 3}, "icepool.Die.explode": {"tf": 2.6457513110645907}, "icepool.Die.if_else": {"tf": 1.4142135623730951}, "icepool.Die.keep_lowest": {"tf": 1}, "icepool.Die.zero": {"tf": 1}, "icepool.Die.zero_outcome": {"tf": 1}, "icepool.Die.cmp": {"tf": 1.4142135623730951}, "icepool.Die.sign": {"tf": 1}, "icepool.Die.equals": {"tf": 1}, "icepool.Population": {"tf": 1.4142135623730951}, "icepool.Population.keys": {"tf": 1}, "icepool.Population.outcomes": {"tf": 1.4142135623730951}, "icepool.Population.tuple_len": {"tf": 1.4142135623730951}, "icepool.Population.is_empty": {"tf": 1}, "icepool.Population.denominator": {"tf": 1}, "icepool.Population.median": {"tf": 1}, "icepool.Population.quantile": {"tf": 1}, "icepool.Population.marginals": {"tf": 1.4142135623730951}, "icepool.Population.format": {"tf": 1.4142135623730951}, "icepool.from_cumulative_quantities": {"tf": 1.7320508075688772}, "icepool.from_rv": {"tf": 1.7320508075688772}, "icepool.align": {"tf": 1}, "icepool.align_range": {"tf": 1}, "icepool.lowest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.reduce": {"tf": 1}, "icepool.accumulate": {"tf": 1}, "icepool.apply": {"tf": 1.4142135623730951}, "icepool.apply_sorted.__init__": {"tf": 2.6457513110645907}, "icepool.Reroll": {"tf": 1.4142135623730951}, "icepool.OutcomeCountGenerator.outcomes": {"tf": 1}, "icepool.OutcomeCountGenerator.expand": {"tf": 1}, "icepool.OutcomeCountGenerator.sum": {"tf": 1.4142135623730951}, "icepool.OutcomeCountGenerator.count": {"tf": 1.4142135623730951}, "icepool.OutcomeCountGenerator.count_in": {"tf": 1}, "icepool.OutcomeCountGenerator.count_unique": {"tf": 1}, "icepool.OutcomeCountGenerator.contains_subset": {"tf": 1.7320508075688772}, "icepool.OutcomeCountGenerator.intersection_size": {"tf": 1.7320508075688772}, "icepool.OutcomeCountGenerator.largest_matching_set": {"tf": 1.4142135623730951}, "icepool.OutcomeCountGenerator.largest_matching_set_and_outcome": {"tf": 1.4142135623730951}, "icepool.OutcomeCountGenerator.largest_straight": {"tf": 1.7320508075688772}, "icepool.OutcomeCountGenerator.largest_straight_and_outcome": {"tf": 1.7320508075688772}, "icepool.OutcomeCountGenerator.sample": {"tf": 1}, "icepool.Pool": {"tf": 1}, "icepool.Pool.__init__": {"tf": 2.23606797749979}, "icepool.Pool.outcomes": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1}, "icepool.Pool.lowest": {"tf": 1}, "icepool.Pool.highest": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 3}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.order": {"tf": 1.7320508075688772}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1.7320508075688772}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 1}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 1}, "icepool.Order": {"tf": 1}, "icepool.SumEvaluator": {"tf": 1}, "icepool.SumEvaluator.next_state": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.SumEvaluator.order": {"tf": 1.7320508075688772}, "icepool.ExpandEvaluator.__init__": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 3}, "icepool.ExpandEvaluator.order": {"tf": 1.7320508075688772}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.Deck.__init__": {"tf": 2.8284271247461903}, "icepool.Deck.keys": {"tf": 1}, "icepool.Deck.size": {"tf": 1}, "icepool.Deck.map": {"tf": 2.6457513110645907}, "icepool.Deal.outcomes": {"tf": 1.4142135623730951}, "icepool.SuitGenerator": {"tf": 1.7320508075688772}, "icepool.SuitGenerator.outcomes": {"tf": 1}}, "df": 90}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die": {"tf": 1.4142135623730951}, "icepool.apply": {"tf": 1}, "icepool.apply_sorted.__init__": {"tf": 1}, "icepool.Reroll": {"tf": 1}, "icepool.OutcomeCountGenerator": {"tf": 1}, "icepool.OutcomeCountGenerator.evaluate": {"tf": 2.23606797749979}, "icepool.Pool": {"tf": 1}, "icepool.OutcomeCountEvaluator": {"tf": 1}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 1}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 1}, "icepool.JointEvaluator": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1}}, "df": 13, "s": {"docs": {"icepool.Order": {"tf": 1}}, "df": 1}}}}}}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.OutcomeCountGenerator": {"tf": 1}, "icepool.OutcomeCountEvaluator": {"tf": 1}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.OutcomeCountEvaluator.order": {"tf": 1}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1}, "icepool.SumEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1}}, "df": 9}}}}}}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.cartesian_product": {"tf": 1}}, "df": 1}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.truncate": {"tf": 1}}, "df": 1}}}}, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Population.format": {"tf": 1}, "icepool.OutcomeCountGenerator.sample": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}}, "df": 4, "s": {"docs": {"icepool.apply": {"tf": 1}, "icepool.apply_sorted.__init__": {"tf": 1}}, "df": 2}}}}}}, "n": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.unary_op": {"tf": 1.4142135623730951}, "icepool.Die.binary_op": {"tf": 1.4142135623730951}, "icepool.Die.truncate": {"tf": 1}, "icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Population.marginals": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 3}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.JointEvaluator": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}}, "df": 11, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.bernoulli": {"tf": 1}, "icepool.coin": {"tf": 1}, "icepool.Die.__init__": {"tf": 1}, "icepool.Die.binary_op": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Die.equals": {"tf": 1.4142135623730951}, "icepool.apply_sorted.__init__": {"tf": 1}, "icepool.Reroll": {"tf": 1}, "icepool.Pool": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1}, "icepool.OutcomeCountEvaluator": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.OutcomeCountEvaluator.order": {"tf": 1}, "icepool.SumEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.__init__": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.order": {"tf": 1}}, "df": 17}}, "e": {"docs": {"icepool.bernoulli": {"tf": 1}, "icepool.coin": {"tf": 1}, "icepool.one_hot": {"tf": 1.4142135623730951}, "icepool.Die.__init__": {"tf": 1.7320508075688772}, "icepool.Die.binary_op": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.truncate": {"tf": 1}, "icepool.Die.clip": {"tf": 1}, "icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Die.pool": {"tf": 1}, "icepool.Die.equals": {"tf": 1}, "icepool.Population.has_zero_quantities": {"tf": 1}, "icepool.align": {"tf": 1}, "icepool.align_range": {"tf": 1}, "icepool.lowest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.accumulate": {"tf": 1}, "icepool.apply": {"tf": 2}, "icepool.apply_sorted.__init__": {"tf": 1.4142135623730951}, "icepool.OutcomeCountGenerator": {"tf": 1}, "icepool.OutcomeCountGenerator.expand": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.Pool.sorted_roll_counts": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 2.449489742783178}, "icepool.standard_pool": {"tf": 1}, "icepool.OutcomeCountEvaluator": {"tf": 1.7320508075688772}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.OutcomeCountEvaluator.order": {"tf": 1}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 1}, "icepool.OutcomeCountEvaluator.sample": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1}, "icepool.SumEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.__init__": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1.4142135623730951}, "icepool.Deck.map": {"tf": 1.4142135623730951}, "icepool.Deal.__init__": {"tf": 1}}, "df": 41, "s": {"docs": {"icepool.one_hot": {"tf": 1}}, "df": 1}}, "c": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.explode": {"tf": 1}, "icepool.OutcomeCountGenerator.contains_subset": {"tf": 1}, "icepool.OutcomeCountGenerator.intersection_size": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1.4142135623730951}}, "df": 4}}}, "f": {"docs": {"icepool.one_hot": {"tf": 1.4142135623730951}, "icepool.cartesian_product": {"tf": 1.7320508075688772}, "icepool.Die": {"tf": 1}, "icepool.Die.__init__": {"tf": 4.58257569495584}, "icepool.Die.unary_op": {"tf": 1}, "icepool.Die.binary_op": {"tf": 2}, "icepool.Die.items": {"tf": 1}, "icepool.Die.reroll": {"tf": 1.7320508075688772}, "icepool.Die.filter": {"tf": 2.23606797749979}, "icepool.Die.truncate": {"tf": 1.4142135623730951}, "icepool.Die.clip": {"tf": 1.4142135623730951}, "icepool.Die.set_range": {"tf": 2.23606797749979}, "icepool.Die.set_outcomes": {"tf": 1}, "icepool.Die.map": {"tf": 2}, "icepool.Die.map_and_time": {"tf": 2.449489742783178}, "icepool.Die.explode": {"tf": 1.4142135623730951}, "icepool.Die.is_in": {"tf": 1}, "icepool.Die.count": {"tf": 1}, "icepool.Die.count_in": {"tf": 1}, "icepool.Die.pool": {"tf": 2.23606797749979}, "icepool.Die.keep_lowest": {"tf": 2}, "icepool.Die.keep_highest": {"tf": 2}, "icepool.Die.zero": {"tf": 1}, "icepool.Die.cmp": {"tf": 1}, "icepool.Die.equals": {"tf": 1}, "icepool.Population.items": {"tf": 1}, "icepool.Population.outcomes": {"tf": 1.4142135623730951}, "icepool.Population.tuple_len": {"tf": 1.4142135623730951}, "icepool.Population.quantities": {"tf": 1.4142135623730951}, "icepool.Population.denominator": {"tf": 1.4142135623730951}, "icepool.Population.quantity": {"tf": 1}, "icepool.Population.probabilities": {"tf": 1.4142135623730951}, "icepool.Population.probabilities_le": {"tf": 1.4142135623730951}, "icepool.Population.probabilities_ge": {"tf": 1.4142135623730951}, "icepool.Population.probabilities_lt": {"tf": 1.4142135623730951}, "icepool.Population.probabilities_gt": {"tf": 1.4142135623730951}, "icepool.Population.probability": {"tf": 1}, "icepool.Population.mode": {"tf": 1}, "icepool.Population.modal_quantity": {"tf": 1}, "icepool.Population.cramer_von_mises": {"tf": 1}, "icepool.Population.median": {"tf": 1}, "icepool.Population.median_left": {"tf": 1}, "icepool.Population.median_right": {"tf": 1}, "icepool.Population.quantile": {"tf": 1.4142135623730951}, "icepool.Population.quantile_left": {"tf": 1.4142135623730951}, "icepool.Population.quantile_right": {"tf": 1.4142135623730951}, "icepool.Population.marginals": {"tf": 1}, "icepool.from_cumulative_quantities": {"tf": 2}, "icepool.from_rv": {"tf": 1.7320508075688772}, "icepool.align": {"tf": 1.4142135623730951}, "icepool.align_range": {"tf": 1.4142135623730951}, "icepool.lowest": {"tf": 1.7320508075688772}, "icepool.highest": {"tf": 1.7320508075688772}, "icepool.reduce": {"tf": 2.449489742783178}, "icepool.accumulate": {"tf": 3}, "icepool.apply": {"tf": 3.1622776601683795}, "icepool.apply_sorted.__init__": {"tf": 2.23606797749979}, "icepool.Reroll": {"tf": 1}, "icepool.OutcomeCountGenerator": {"tf": 1.7320508075688772}, "icepool.OutcomeCountGenerator.outcomes": {"tf": 1}, "icepool.OutcomeCountGenerator.counts_len": {"tf": 1}, "icepool.OutcomeCountGenerator.denominator": {"tf": 1}, "icepool.OutcomeCountGenerator.expand": {"tf": 1.4142135623730951}, "icepool.OutcomeCountGenerator.sum": {"tf": 1}, "icepool.OutcomeCountGenerator.count": {"tf": 1}, "icepool.OutcomeCountGenerator.count_in": {"tf": 1}, "icepool.OutcomeCountGenerator.count_unique": {"tf": 1}, "icepool.OutcomeCountGenerator.contains_subset": {"tf": 1.4142135623730951}, "icepool.OutcomeCountGenerator.intersection_size": {"tf": 2.23606797749979}, "icepool.OutcomeCountGenerator.sample": {"tf": 1.4142135623730951}, "icepool.Pool": {"tf": 1}, "icepool.Pool.__init__": {"tf": 3.3166247903554}, "icepool.Pool.size": {"tf": 1.4142135623730951}, "icepool.Pool.denominator": {"tf": 1}, "icepool.Pool.unique_dice": {"tf": 1}, "icepool.Pool.outcomes": {"tf": 1}, "icepool.Pool.counts_len": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 3.3166247903554}, "icepool.Pool.lowest": {"tf": 2}, "icepool.Pool.highest": {"tf": 2}, "icepool.standard_pool": {"tf": 2.23606797749979}, "icepool.OutcomeCountEvaluator": {"tf": 3.605551275463989}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 2.8284271247461903}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 2.449489742783178}, "icepool.OutcomeCountEvaluator.order": {"tf": 2.449489742783178}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 2}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 2}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 2.6457513110645907}, "icepool.JointEvaluator": {"tf": 1}, "icepool.JointEvaluator.next_state": {"tf": 1}, "icepool.JointEvaluator.final_outcome": {"tf": 1}, "icepool.JointEvaluator.order": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 2.449489742783178}, "icepool.SumEvaluator.order": {"tf": 2.449489742783178}, "icepool.ExpandEvaluator": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 2.8284271247461903}, "icepool.ExpandEvaluator.order": {"tf": 2.449489742783178}, "icepool.ExpandEvaluator.final_outcome": {"tf": 2.449489742783178}, "icepool.Deck.__init__": {"tf": 2.8284271247461903}, "icepool.Deck.items": {"tf": 1}, "icepool.Deck.size": {"tf": 1.4142135623730951}, "icepool.Deck.map": {"tf": 1.7320508075688772}, "icepool.Deal": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1.4142135623730951}, "icepool.Deal.hand_sizes": {"tf": 1}, "icepool.Deal.total_cards_dealt": {"tf": 1}, "icepool.Deal.outcomes": {"tf": 1.4142135623730951}, "icepool.Deal.counts_len": {"tf": 1}, "icepool.Deal.denominator": {"tf": 1}, "icepool.SuitGenerator": {"tf": 1.4142135623730951}, "icepool.SuitGenerator.outcomes": {"tf": 1}, "icepool.SuitGenerator.counts_len": {"tf": 1}, "icepool.SuitGenerator.denominator": {"tf": 1}}, "df": 113, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"icepool.OutcomeCountEvaluator": {"tf": 1}}, "df": 1}}}}, "p": {"docs": {"icepool.Die.__init__": {"tf": 1.4142135623730951}, "icepool.Population.unary_op_non_elementwise": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die.unary_op": {"tf": 1.7320508075688772}, "icepool.Die.binary_op": {"tf": 1.4142135623730951}, "icepool.Die.if_else": {"tf": 1}, "icepool.Population.marginals": {"tf": 1}}, "df": 4, "s": {"docs": {"icepool.Die": {"tf": 1}, "icepool.Die.__init__": {"tf": 1}, "icepool.Die.unary_op": {"tf": 1}, "icepool.Die.binary_op": {"tf": 1}, "icepool.Die.equals": {"tf": 1}, "icepool.Again": {"tf": 1}}, "df": 6}}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Die.unary_op": {"tf": 1.4142135623730951}, "icepool.Die.binary_op": {"tf": 1}, "icepool.Reroll": {"tf": 1}}, "df": 3, "s": {"docs": {"icepool.Die.unary_op": {"tf": 1}, "icepool.Die.binary_op": {"tf": 1}}, "df": 2}}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.binary_op": {"tf": 1}}, "df": 1, "s": {"docs": {"icepool.Die.__init__": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Population.format": {"tf": 1}}, "df": 5}, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.OutcomeCountEvaluator.order": {"tf": 1}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1}, "icepool.SumEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1}}, "df": 7, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Population.format": {"tf": 1}, "icepool.OutcomeCountEvaluator": {"tf": 1}}, "df": 2}}}}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Die.__init__": {"tf": 1}}, "df": 1}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Pool.lowest": {"tf": 1}, "icepool.Pool.highest": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.ExpandEvaluator.next_state": {"tf": 1.4142135623730951}}, "df": 4}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"icepool.OutcomeCountEvaluator": {"tf": 1}}, "df": 1}}}}}}}}}, "w": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Die.unary_op": {"tf": 1}, "icepool.Die.binary_op": {"tf": 1}, "icepool.OutcomeCountGenerator": {"tf": 1.4142135623730951}, "icepool.OutcomeCountGenerator.evaluate": {"tf": 1}}, "df": 4}}, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.set_range": {"tf": 1.4142135623730951}, "icepool.Population.format": {"tf": 1}}, "df": 4}}}}}}, "l": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.map": {"tf": 2}, "icepool.Die.map_and_time": {"tf": 2}, "icepool.Deck.map": {"tf": 1.7320508075688772}}, "df": 3}}, "b": {"docs": {}, "df": 0, "j": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"icepool.from_rv": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.Deck.deal": {"tf": 1}}, "df": 5, "s": {"docs": {"icepool.apply_sorted.__init__": {"tf": 1}}, "df": 1}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Reroll": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {"icepool": {"tf": 1}, "icepool.Die": {"tf": 2.23606797749979}, "icepool.Die.__init__": {"tf": 1.4142135623730951}, "icepool.Die.unary_op": {"tf": 1}, "icepool.Die.set_outcomes": {"tf": 1}, "icepool.Die.trim": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.zero_outcome": {"tf": 1}, "icepool.Die.cmp": {"tf": 1}, "icepool.Die.sign": {"tf": 1.4142135623730951}, "icepool.Die.equals": {"tf": 1}, "icepool.Population.denominator": {"tf": 1}, "icepool.Population.has_zero_quantities": {"tf": 1}, "icepool.Population.format": {"tf": 1}, "icepool.align": {"tf": 1}, "icepool.align_range": {"tf": 1}, "icepool.OutcomeCountGenerator.count_unique": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1.4142135623730951}, "icepool.ExpandEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.Deck.size": {"tf": 1}}, "df": 22, "s": {"docs": {"icepool.Die.zero": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "q": {"docs": {"icepool.Population.format": {"tf": 1.7320508075688772}}, "df": 1, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"icepool": {"tf": 1}, "icepool.standard": {"tf": 1}, "icepool.d": {"tf": 1}, "icepool.Die": {"tf": 2.23606797749979}, "icepool.Die.__init__": {"tf": 1.7320508075688772}, "icepool.Die.items": {"tf": 1}, "icepool.Die.clip": {"tf": 1}, "icepool.Die.set_outcomes": {"tf": 1}, "icepool.Die.trim": {"tf": 1}, "icepool.Die.cmp": {"tf": 1}, "icepool.Die.equals": {"tf": 1}, "icepool.Population.items": {"tf": 1}, "icepool.Population.denominator": {"tf": 1}, "icepool.Population.has_zero_quantities": {"tf": 1}, "icepool.Population.quantities_le": {"tf": 1}, "icepool.Population.quantities_ge": {"tf": 1}, "icepool.Population.quantity": {"tf": 1}, "icepool.Population.quantity_ne": {"tf": 1}, "icepool.Population.quantity_le": {"tf": 1}, "icepool.Population.quantity_lt": {"tf": 1}, "icepool.Population.quantity_ge": {"tf": 1}, "icepool.Population.quantity_gt": {"tf": 1}, "icepool.Population.modal_quantity": {"tf": 1}, "icepool.Population.format": {"tf": 1.4142135623730951}, "icepool.Deck.__init__": {"tf": 1}, "icepool.Deck.items": {"tf": 1}, "icepool.Deck.size": {"tf": 1}}, "df": 27}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die": {"tf": 1}, "icepool.Die.__init__": {"tf": 1.7320508075688772}, "icepool.Die.values": {"tf": 1}, "icepool.Die.simplify": {"tf": 1}, "icepool.Die.cmp": {"tf": 1}, "icepool.Die.equals": {"tf": 1}, "icepool.Population": {"tf": 1}, "icepool.Population.values": {"tf": 1}, "icepool.Population.quantities": {"tf": 1.4142135623730951}, "icepool.Population.denominator": {"tf": 1}, "icepool.Population.format": {"tf": 1}, "icepool.from_cumulative_quantities": {"tf": 1.7320508075688772}, "icepool.align": {"tf": 1}, "icepool.align_range": {"tf": 1}, "icepool.apply": {"tf": 1}, "icepool.Deck": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}, "icepool.Deck.values": {"tf": 1}, "icepool.Deck.size": {"tf": 1}}, "df": 19}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Population.quantile": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {"icepool": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.pool": {"tf": 1}, "icepool.Die.keep_highest": {"tf": 1.4142135623730951}, "icepool.Population.mode": {"tf": 1}, "icepool.Population.modal_quantity": {"tf": 1}, "icepool.highest": {"tf": 2}, "icepool.apply_sorted.__init__": {"tf": 1}, "icepool.Pool.sorted_roll_counts": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1.4142135623730951}, "icepool.Pool.highest": {"tf": 1.7320508075688772}}, "df": 9}}}}}}, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"icepool.bernoulli": {"tf": 1}, "icepool.coin": {"tf": 1}, "icepool.Die": {"tf": 2.449489742783178}, "icepool.Die.__init__": {"tf": 1.4142135623730951}, "icepool.Die.binary_op": {"tf": 1}, "icepool.Die.keep_lowest": {"tf": 1}, "icepool.Die.zero": {"tf": 1}, "icepool.Die.cmp": {"tf": 1}, "icepool.Die.key_tuple": {"tf": 1}, "icepool.Die.equals": {"tf": 1.7320508075688772}, "icepool.align": {"tf": 1}, "icepool.align_range": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1}, "icepool.JointEvaluator.order": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1}}, "df": 20}}, "s": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.binary_op": {"tf": 1}, "icepool.Die.reroll": {"tf": 1.4142135623730951}, "icepool.Die.filter": {"tf": 1.4142135623730951}, "icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.equals": {"tf": 1}, "icepool.Population.is_empty": {"tf": 1}, "icepool.Pool.sorted_roll_counts": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 1}, "icepool.Deck.map": {"tf": 1}}, "df": 13, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Outcome": {"tf": 1}, "icepool.Die.__init__": {"tf": 1}, "icepool.Die.key_tuple": {"tf": 1}, "icepool.Population": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.ExpandEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.Deck.__init__": {"tf": 1}}, "df": 7}}}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Deal.__init__": {"tf": 2}, "icepool.Deal.hand_sizes": {"tf": 1}}, "df": 2, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.OutcomeCountEvaluator": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.order": {"tf": 1}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.SumEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.ExpandEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1.4142135623730951}}, "df": 11}}, "s": {"docs": {"icepool.Deal.__init__": {"tf": 1}}, "df": 1}}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1}}, "df": 3}}}}}}, "o": {"docs": {}, "df": 0, "w": {"docs": {"icepool.one_hot": {"tf": 1}, "icepool.Die.count": {"tf": 1}, "icepool.Die.count_in": {"tf": 1}, "icepool.Again": {"tf": 1}, "icepool.apply": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.standard_pool": {"tf": 1}, "icepool.OutcomeCountEvaluator": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1}}, "df": 11, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die": {"tf": 1}, "icepool.Die.__init__": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}}, "df": 4}}}}}, "t": {"docs": {"icepool.one_hot": {"tf": 1}}, "df": 1}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1}}, "df": 2}}}}, "n": {"docs": {"icepool.bernoulli": {"tf": 1.7320508075688772}, "icepool.coin": {"tf": 1.7320508075688772}, "icepool.Population.quantile": {"tf": 1}, "icepool.Population.quantile_left": {"tf": 1}, "icepool.Population.quantile_right": {"tf": 1}}, "df": 5, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.one_hot": {"tf": 1}, "icepool.Die.__init__": {"tf": 1}, "icepool.Die.reroll": {"tf": 1.4142135623730951}, "icepool.Die.filter": {"tf": 1.4142135623730951}, "icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1.4142135623730951}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.count": {"tf": 1}, "icepool.Die.count_in": {"tf": 1}, "icepool.Die.pool": {"tf": 1}, "icepool.Die.keep_lowest": {"tf": 1.4142135623730951}, "icepool.Die.keep_highest": {"tf": 1.4142135623730951}, "icepool.Population.denominator": {"tf": 1}, "icepool.lowest": {"tf": 1.4142135623730951}, "icepool.highest": {"tf": 1.4142135623730951}, "icepool.accumulate": {"tf": 1.4142135623730951}, "icepool.apply": {"tf": 1}, "icepool.apply_sorted.__init__": {"tf": 1}, "icepool.OutcomeCountGenerator.counts_len": {"tf": 1}, "icepool.OutcomeCountGenerator.count": {"tf": 1}, "icepool.OutcomeCountGenerator.count_in": {"tf": 1}, "icepool.OutcomeCountGenerator.count_unique": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.Pool.size": {"tf": 1}, "icepool.Pool.counts_len": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1.4142135623730951}, "icepool.Pool.lowest": {"tf": 1.4142135623730951}, "icepool.Pool.highest": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1.7320508075688772}, "icepool.OutcomeCountEvaluator.order": {"tf": 1.7320508075688772}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 1}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 1.4142135623730951}, "icepool.SumEvaluator.final_outcome": {"tf": 1.7320508075688772}, "icepool.SumEvaluator.order": {"tf": 1.7320508075688772}, "icepool.ExpandEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.ExpandEvaluator.order": {"tf": 1.7320508075688772}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1.7320508075688772}, "icepool.Deck.__init__": {"tf": 1}, "icepool.Deck.size": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1.4142135623730951}, "icepool.Deal.hand_sizes": {"tf": 1}, "icepool.Deal.total_cards_dealt": {"tf": 1}, "icepool.Deal.counts_len": {"tf": 1}, "icepool.SuitGenerator.counts_len": {"tf": 1}}, "df": 47, "s": {"docs": {"icepool.OutcomeCountEvaluator": {"tf": 1}}, "df": 1}}}}}}, "o": {"docs": {"icepool.Die": {"tf": 1}, "icepool.Die.__init__": {"tf": 1}, "icepool.Die.reroll": {"tf": 1.4142135623730951}, "icepool.Die.filter": {"tf": 1.4142135623730951}, "icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.zero": {"tf": 1}, "icepool.Population.is_empty": {"tf": 1}, "icepool.Population.nearest_le": {"tf": 1}, "icepool.Population.nearest_ge": {"tf": 1}, "icepool.accumulate": {"tf": 1}, "icepool.Reroll": {"tf": 1}, "icepool.OutcomeCountGenerator.count": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.order": {"tf": 1}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.SumEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.Deck.map": {"tf": 1}}, "df": 26, "t": {"docs": {"icepool.Die": {"tf": 1.7320508075688772}, "icepool.Die.__init__": {"tf": 1.7320508075688772}, "icepool.Die.unary_op": {"tf": 1}, "icepool.Die.binary_op": {"tf": 1.7320508075688772}, "icepool.Die.reroll": {"tf": 1.4142135623730951}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.truncate": {"tf": 1.7320508075688772}, "icepool.Die.clip": {"tf": 1.7320508075688772}, "icepool.Die.set_outcomes": {"tf": 1.4142135623730951}, "icepool.Die.map": {"tf": 1.7320508075688772}, "icepool.Die.map_and_time": {"tf": 1.7320508075688772}, "icepool.Die.explode": {"tf": 1.7320508075688772}, "icepool.Die.zero": {"tf": 1}, "icepool.Die.key_tuple": {"tf": 1}, "icepool.Die.equals": {"tf": 2}, "icepool.Population.tuple_len": {"tf": 1}, "icepool.Population.quantity": {"tf": 1}, "icepool.Population.probability": {"tf": 1}, "icepool.Population.median": {"tf": 1}, "icepool.Population.quantile": {"tf": 1}, "icepool.Population.variance": {"tf": 1}, "icepool.Population.marginals": {"tf": 1}, "icepool.Population.unary_op_non_elementwise": {"tf": 1}, "icepool.Population.sample": {"tf": 1}, "icepool.Again": {"tf": 1}, "icepool.from_cumulative_quantities": {"tf": 1}, "icepool.apply": {"tf": 1.4142135623730951}, "icepool.apply_sorted.__init__": {"tf": 1.4142135623730951}, "icepool.Reroll": {"tf": 1.4142135623730951}, "icepool.OutcomeCountGenerator.expand": {"tf": 1}, "icepool.OutcomeCountGenerator.sample": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1}, "icepool.ExpandEvaluator": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}, "icepool.Deck.map": {"tf": 1.7320508075688772}}, "df": 42, "e": {"docs": {"icepool.Die.binary_op": {"tf": 1}, "icepool.Die.pool": {"tf": 1}, "icepool.Die.sign": {"tf": 1}, "icepool.Population.sample": {"tf": 1}, "icepool.OutcomeCountGenerator.evaluate": {"tf": 1}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1}}, "df": 8}}, "r": {"docs": {"icepool.Die": {"tf": 1}}, "df": 1}, "n": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.reduce": {"tf": 1}, "icepool.accumulate": {"tf": 1}, "icepool.apply": {"tf": 1}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 1}}, "df": 5, "e": {"docs": {"icepool.Die.__init__": {"tf": 1.4142135623730951}, "icepool.Die.map": {"tf": 1}, "icepool.Population.tuple_len": {"tf": 1}, "icepool.Population.nearest_le": {"tf": 1}, "icepool.Population.nearest_ge": {"tf": 1}, "icepool.OutcomeCountEvaluator": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.SumEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.ExpandEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1.4142135623730951}}, "df": 11}, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {"icepool.OutcomeCountEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.ExpandEvaluator.next_state": {"tf": 1.4142135623730951}}, "df": 2}}}}}}, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Pool.set_sorted_roll_counts": {"tf": 2}}, "df": 2}}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.from_cumulative_quantities": {"tf": 1}}, "df": 2}}}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.unary_op": {"tf": 1}, "icepool.Die.binary_op": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}}, "df": 4, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.map_and_time": {"tf": 1}}, "df": 1}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}}, "df": 2}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.truncate": {"tf": 1}, "icepool.Population.nearest_le": {"tf": 1}, "icepool.Population.nearest_ge": {"tf": 1}}, "df": 3}}}}}, "w": {"docs": {"icepool.Die.map": {"tf": 1.7320508075688772}, "icepool.Die.map_and_time": {"tf": 1.7320508075688772}, "icepool.Deck.map": {"tf": 1.7320508075688772}}, "df": 3}, "x": {"docs": {}, "df": 0, "t": {"docs": {"icepool.apply_sorted.__init__": {"tf": 1}, "icepool.OutcomeCountGenerator.evaluate": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator": {"tf": 2.8284271247461903}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.OutcomeCountEvaluator.order": {"tf": 1.7320508075688772}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1.7320508075688772}, "icepool.JointEvaluator.next_state": {"tf": 1}, "icepool.SumEvaluator.order": {"tf": 1.7320508075688772}, "icepool.ExpandEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.ExpandEvaluator.order": {"tf": 1.7320508075688772}, "icepool.Deal.__init__": {"tf": 1}}, "df": 11}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Die.sign": {"tf": 1}}, "df": 1}, "m": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Population.outcomes": {"tf": 1}, "icepool.Population.quantities": {"tf": 1}, "icepool.Deal.outcomes": {"tf": 1}}, "df": 3, "d": {"docs": {"icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.OutcomeCountEvaluator.order": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1}, "icepool.SumEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1}}, "df": 6}}}}}, "b": {"docs": {"icepool.apply": {"tf": 1.4142135623730951}}, "df": 1, "e": {"docs": {"icepool.Die": {"tf": 1}, "icepool.Die.__init__": {"tf": 3.3166247903554}, "icepool.Die.reroll": {"tf": 1.7320508075688772}, "icepool.Die.filter": {"tf": 1.4142135623730951}, "icepool.Die.truncate": {"tf": 1.4142135623730951}, "icepool.Die.clip": {"tf": 1}, "icepool.Die.set_range": {"tf": 1.4142135623730951}, "icepool.Die.map": {"tf": 2.449489742783178}, "icepool.Die.map_and_time": {"tf": 2.23606797749979}, "icepool.Die.explode": {"tf": 2.449489742783178}, "icepool.Die.pool": {"tf": 1}, "icepool.Die.keep_lowest": {"tf": 1}, "icepool.Die.keep_highest": {"tf": 1}, "icepool.Die.key_tuple": {"tf": 1}, "icepool.Die.equals": {"tf": 1.4142135623730951}, "icepool.Population": {"tf": 1}, "icepool.Population.probabilities": {"tf": 1.4142135623730951}, "icepool.Population.probabilities_le": {"tf": 1.4142135623730951}, "icepool.Population.probabilities_ge": {"tf": 1.4142135623730951}, "icepool.Population.probabilities_lt": {"tf": 1.4142135623730951}, "icepool.Population.probabilities_gt": {"tf": 1.4142135623730951}, "icepool.Population.marginals": {"tf": 1}, "icepool.Population.format": {"tf": 1}, "icepool.Again": {"tf": 2}, "icepool.from_cumulative_quantities": {"tf": 1}, "icepool.from_rv": {"tf": 2}, "icepool.lowest": {"tf": 2.23606797749979}, "icepool.highest": {"tf": 2.23606797749979}, "icepool.reduce": {"tf": 1}, "icepool.accumulate": {"tf": 1}, "icepool.apply": {"tf": 1.4142135623730951}, "icepool.apply_sorted.__init__": {"tf": 1.4142135623730951}, "icepool.Reroll": {"tf": 1.7320508075688772}, "icepool.OutcomeCountGenerator": {"tf": 1.4142135623730951}, "icepool.OutcomeCountGenerator.counts_len": {"tf": 1}, "icepool.OutcomeCountGenerator.evaluate": {"tf": 1.4142135623730951}, "icepool.OutcomeCountGenerator.expand": {"tf": 1}, "icepool.OutcomeCountGenerator.sum": {"tf": 1}, "icepool.OutcomeCountGenerator.count": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_straight": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_straight_and_outcome": {"tf": 1}, "icepool.Pool": {"tf": 1}, "icepool.Pool.__init__": {"tf": 2}, "icepool.Pool.counts_len": {"tf": 1}, "icepool.Pool.sorted_roll_counts": {"tf": 1.4142135623730951}, "icepool.Pool.set_sorted_roll_counts": {"tf": 2.8284271247461903}, "icepool.Pool.lowest": {"tf": 1.7320508075688772}, "icepool.Pool.highest": {"tf": 1.7320508075688772}, "icepool.OutcomeCountEvaluator": {"tf": 2}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 2.8284271247461903}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 2}, "icepool.OutcomeCountEvaluator.order": {"tf": 1}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 2}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 1}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 1.4142135623730951}, "icepool.Order": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 2}, "icepool.SumEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 2.8284271247461903}, "icepool.ExpandEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.final_outcome": {"tf": 2}, "icepool.Deck.__init__": {"tf": 2.8284271247461903}, "icepool.Deck.map": {"tf": 1.4142135623730951}, "icepool.Deal.__init__": {"tf": 1}, "icepool.Deal.counts_len": {"tf": 1}, "icepool.SuitGenerator.counts_len": {"tf": 1}}, "df": 66, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die": {"tf": 1}}, "df": 1}}}, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.binary_op": {"tf": 1}, "icepool.Die.pool": {"tf": 1}, "icepool.Population.kolmogorov_smirnov": {"tf": 1}, "icepool.Population.cramer_von_mises": {"tf": 1}}, "df": 5}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_straight": {"tf": 1}, "icepool.OutcomeCountGenerator.largest_straight_and_outcome": {"tf": 1}}, "df": 3}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Die": {"tf": 1}, "icepool.Die.key_tuple": {"tf": 1}, "icepool.Population.format": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.OutcomeCountEvaluator.order": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1}, "icepool.SumEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1}}, "df": 11}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die.unary_op": {"tf": 1}, "icepool.Die.binary_op": {"tf": 1}, "icepool.OutcomeCountEvaluator": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}}, "df": 5}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Die.binary_op": {"tf": 1}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1}}, "df": 4}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.keep_lowest": {"tf": 1}, "icepool.Die.keep_highest": {"tf": 1}, "icepool.Die.equals": {"tf": 1}, "icepool.lowest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.OutcomeCountGenerator.sum": {"tf": 1}, "icepool.Pool.lowest": {"tf": 1}, "icepool.Pool.highest": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}, "icepool.Deck.map": {"tf": 1}}, "df": 16}}}}, "y": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.clip": {"tf": 1.4142135623730951}}, "df": 1}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.sign": {"tf": 1.4142135623730951}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {"icepool.OutcomeCountEvaluator.alignment": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.binary_op": {"tf": 1}}, "df": 2}}}}}, "y": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.binary_op": {"tf": 1}, "icepool.Die.simplify": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.zero": {"tf": 1}, "icepool.Die.equals": {"tf": 1.7320508075688772}, "icepool.Population.format": {"tf": 1}, "icepool.apply": {"tf": 1.4142135623730951}, "icepool.Reroll": {"tf": 1}, "icepool.OutcomeCountGenerator": {"tf": 1}, "icepool.Pool": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.OutcomeCountEvaluator.order": {"tf": 1}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1.4142135623730951}, "icepool.Order": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1}, "icepool.SumEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1}}, "df": 21}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Die.unary_op": {"tf": 1}}, "df": 1}}, "t": {"docs": {}, "df": 0, "h": {"docs": {"icepool.Die.equals": {"tf": 1}, "icepool.CountsKeysView": {"tf": 1}, "icepool.CountsValuesView": {"tf": 1}, "icepool.CountsItemsView": {"tf": 1}, "icepool.from_cumulative_quantities": {"tf": 1}}, "df": 5}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"icepool.Die.clip": {"tf": 1}}, "df": 1}}}, "t": {"docs": {"icepool.Population.unary_op_non_elementwise": {"tf": 1}, "icepool.Again": {"tf": 1}, "icepool.from_cumulative_quantities": {"tf": 1}, "icepool.apply": {"tf": 1.4142135623730951}, "icepool.apply_sorted.__init__": {"tf": 1}}, "df": 5}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"icepool.OutcomeCountGenerator": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1}}, "df": 3}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Pool.__init__": {"tf": 1}}, "df": 1}}}}, "y": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {"icepool.Die": {"tf": 1}, "icepool.Die.__init__": {"tf": 1.4142135623730951}, "icepool.Die.unary_op": {"tf": 1}, "icepool.Die.binary_op": {"tf": 1}, "icepool.Die.truncate": {"tf": 1}, "icepool.Die.clip": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1.4142135623730951}, "icepool.Die.pool": {"tf": 1}, "icepool.Again": {"tf": 1}, "icepool.apply": {"tf": 1}, "icepool.apply_sorted.__init__": {"tf": 1}, "icepool.OutcomeCountGenerator": {"tf": 1.4142135623730951}, "icepool.OutcomeCountGenerator.evaluate": {"tf": 1.4142135623730951}, "icepool.OutcomeCountEvaluator": {"tf": 1}, "icepool.OutcomeCountEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.OutcomeCountEvaluator.final_outcome": {"tf": 1}, "icepool.OutcomeCountEvaluator.order": {"tf": 1}, "icepool.OutcomeCountEvaluator.alignment": {"tf": 1.7320508075688772}, "icepool.OutcomeCountEvaluator.range_alignment": {"tf": 1}, "icepool.OutcomeCountEvaluator.evaluate": {"tf": 1}, "icepool.SumEvaluator.final_outcome": {"tf": 1}, "icepool.SumEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.ExpandEvaluator.order": {"tf": 1}, "icepool.ExpandEvaluator.final_outcome": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1}}, "df": 26, "r": {"docs": {"icepool.Die.unary_op": {"tf": 1}, "icepool.Die.binary_op": {"tf": 1}, "icepool.OutcomeCountGenerator": {"tf": 1.4142135623730951}}, "df": 3}}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.__init__": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.accumulate": {"tf": 1}}, "df": 1}}}, "s": {"docs": {"icepool.SuitGenerator": {"tf": 1}}, "df": 1}}}}}}, "k": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.from_rv": {"tf": 1}}, "df": 2}}}}}, "e": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.__init__": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {"icepool.Population.outcomes": {"tf": 1}, "icepool.Deal.outcomes": {"tf": 1}}, "df": 2, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {"icepool.CountsKeysView": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "p": {"docs": {"icepool.Die.keep_lowest": {"tf": 1.4142135623730951}, "icepool.Die.keep_highest": {"tf": 1.4142135623730951}, "icepool.lowest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.Pool.lowest": {"tf": 1}, "icepool.Pool.highest": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1}}, "df": 7, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Die.keep_lowest": {"tf": 1}, "icepool.Die.keep_highest": {"tf": 1}, "icepool.lowest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.Pool.lowest": {"tf": 1}, "icepool.Pool.highest": {"tf": 1}}, "df": 6}}}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Population.probabilities": {"tf": 1}, "icepool.Population.probabilities_le": {"tf": 1}, "icepool.Population.probabilities_ge": {"tf": 1}}, "df": 3}}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "\u2013": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {"icepool.Population.kolmogorov_smirnov": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}}}, "pipeline": ["trimmer"], "_isPrebuiltIndex": true};

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();
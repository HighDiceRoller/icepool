window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = {"version": "0.9.5", "fields": ["qualname", "fullname", "annotation", "default_value", "signature", "bases", "doc"], "ref": "fullname", "documentStore": {"docs": {"icepool": {"fullname": "icepool", "modulename": "icepool", "kind": "module", "doc": "<p>Package for computing dice and card probabilities.</p>\n\n<p>Starting with <code>v0.25.1</code>, you can replace <code>latest</code> in the URL with an old version\nnumber to get the documentation for that version.</p>\n\n<p>See <a href=\"https://highdiceroller.github.io/icepool/notebooks/lab/index.html\">this JupyterLite distribution</a>\nfor examples.</p>\n\n<p><a href=\"https://github.com/HighDiceRoller/icepool\">Visit the project page.</a></p>\n\n<p>General conventions:</p>\n\n<ul>\n<li>Instances are immutable (apart from internal caching). Anything that looks\nlike it mutates an instance actually returns a separate instance with the\nchange.</li>\n<li>Unless explictly specified otherwise, elements with zero quantity, rolls, etc.\nare considered.</li>\n</ul>\n"}, "icepool.d": {"fullname": "icepool.d", "modulename": "icepool", "qualname": "d", "kind": "function", "doc": "<p>A standard die, uniformly distributed from <code>1</code> to <code>sides</code> inclusive.</p>\n\n<p>Don't confuse this with <code>icepool.Die()</code>:</p>\n\n<ul>\n<li><code>icepool.Die([6])</code>: A <code>Die</code> that always rolls the integer 6.</li>\n<li><code>icepool.d(6)</code>: A d6.</li>\n</ul>\n\n<p>You can also import individual standard dice from the <code>icepool</code> module, e.g.\n<code>from icepool import d6</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sides</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.z": {"fullname": "icepool.z", "modulename": "icepool", "qualname": "z", "kind": "function", "doc": "<p>A die uniformly distributed from <code>0</code> to <code>sides - 1</code> inclusive.</p>\n\n<p>Equal to d(sides) - 1.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sides</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.coin": {"fullname": "icepool.coin", "modulename": "icepool", "qualname": "coin", "kind": "function", "doc": "<p>A <code>Die</code> that rolls <code>True</code> with probability <code>n / d</code>, and <code>False</code> otherwise.</p>\n\n<p>If <code>n &lt;= 0</code> or <code>n &gt;= d</code> the result will have only one outcome.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>n:</strong>  An int numerator, or a non-integer probability.</li>\n<li><strong>d:</strong>  An int denominator. Should not be provided if the first argument is\nnot an int.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"n\">fractions</span><span class=\"o\">.</span><span class=\"n\">Fraction</span>,</span><span class=\"param\">\t<span class=\"n\">d</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"o\">/</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">max_denominator</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.stochastic_round": {"fullname": "icepool.stochastic_round", "modulename": "icepool", "qualname": "stochastic_round", "kind": "function", "doc": "<p>Randomly rounds a value up or down to the nearest integer according to the two distances.</p>\n\n<p>Specificially, rounds <code>x</code> up with probability <code>x - floor(x)</code> and down\notherwise, producing a <code>Die</code> with up to two outcomes.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>max_denominator:</strong>  If provided, each rounding will be performed\nusing <code>fractions.Fraction.limit_denominator(max_denominator)</code>.\nOtherwise, the rounding will be performed without\n<code>limit_denominator</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">x</span>,</span><span class=\"param\">\t<span class=\"o\">/</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">max_denominator</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.one_hot": {"fullname": "icepool.one_hot", "modulename": "icepool", "qualname": "one_hot", "kind": "function", "doc": "<p>A <code>Die</code> with <code>Vector</code> outcomes with one element set to <code>True</code> uniformly at random and the rest <code>False</code>.</p>\n\n<p>This is an easy (if somewhat expensive) way of representing how many dice\nin a pool rolled each number. For example, the outcomes of <code>10 @ one_hot(6)</code>\nare the <code>(ones, twos, threes, fours, fives, sixes)</code> rolled in 10d6.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sides</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "icepool.Outcome": {"fullname": "icepool.Outcome", "modulename": "icepool", "qualname": "Outcome", "kind": "class", "doc": "<p>Protocol to attempt to verify that outcome types are hashable and sortable.</p>\n\n<p>Far from foolproof, e.g. it cannot enforce total ordering.</p>\n", "bases": "typing.Hashable, typing.Protocol[-T_contra]"}, "icepool.Die": {"fullname": "icepool.Die", "modulename": "icepool", "qualname": "Die", "kind": "class", "doc": "<p>Sampling with replacement. Quantities represent weights.</p>\n\n<p>Dice are immutable. Methods do not modify the <code>Die</code> in-place;\nrather they return a <code>Die</code> representing the result.</p>\n\n<p>It <em>is</em> (mostly) well-defined to have a <code>Die</code> with zero-quantity outcomes.\nThese can be useful in a few cases, such as:</p>\n\n<ul>\n<li><code>MultisetEvaluator</code> will iterate through zero-quantity outcomes,\nrather than possibly skipping that outcome. (Though in most cases it's\nbetter to use <code>MultisetEvaluator.alignment()</code>.)</li>\n<li><code>icepool.align()</code> and the like are convenient for making dice share the\nsame set of outcomes.</li>\n</ul>\n\n<p>However, zero-quantity outcomes have a computational cost like any other\noutcome. Unless you have a specific use case in mind, it's best to leave\nthem out.</p>\n\n<p>Most operators and methods will not introduce zero-quantity outcomes if\ntheir arguments do not have any; nor remove zero-quantity outcomes.</p>\n\n<p>It's also possible to have \"empty\" dice with no outcomes at all,\nthough these have little use other than being sentinel values.</p>\n", "bases": "icepool.population.base.Population[+T_co]"}, "icepool.Die.__init__": {"fullname": "icepool.Die.__init__", "modulename": "icepool", "qualname": "Die.__init__", "kind": "function", "doc": "<p>Constructor for a <code>Die</code>.</p>\n\n<p>Don't confuse this with <code>d()</code>:</p>\n\n<ul>\n<li><code>Die([6])</code>: A <code>Die</code> that always rolls the <code>int</code> 6.</li>\n<li><code>d(6)</code>: A d6.</li>\n</ul>\n\n<p>Also, don't confuse this with <code>Pool()</code>:</p>\n\n<ul>\n<li><code>Die([1, 2, 3, 4, 5, 6])</code>: A d6.</li>\n<li><code>Pool([1, 2, 3, 4, 5, 6])</code>: A <code>Pool</code> of six dice that always rolls one\nof each number.</li>\n</ul>\n\n<p>Here are some different ways of constructing a d6:</p>\n\n<ul>\n<li>Just import it: <code>from icepool import d6</code></li>\n<li>Use the <code>d()</code> function: <code>icepool.d(6)</code></li>\n<li>Use a d6 that you already have: <code>Die(d6)</code> or <code>Die([d6])</code></li>\n<li>Mix a d3 and a d3+3: <code>Die([d3, d3+3])</code></li>\n<li>Use a dict: <code>Die({1:1, 2:1, 3:1, 4:1, 5:1, 6:1})</code></li>\n<li>Give the faces as a sequence: <code>Die([1, 2, 3, 4, 5, 6])</code></li>\n</ul>\n\n<p>All quantities must be non-negative, though they can be zero.</p>\n\n<p>Several methods and functions foward **kwargs to this constructor.\nHowever, these only affect the construction of the returned or yielded\ndice. Any other implicit conversions of arguments or operands to dice\nwill be done with the default keyword arguments.</p>\n\n<p>EXPERIMENTAL: Use <code>icepool.Again</code> to roll the dice again, usually with\nsome modification. See the <code>Again</code> documentation for details.</p>\n\n<p>Denominator: For a flat set of outcomes, the denominator is just the\nsum of the corresponding quantities. If the outcomes themselves have\nsecondary denominators, then the overall denominator will be minimized\nwhile preserving the relative weighting of the primary outcomes.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><p><strong>outcomes:</strong>  The faces of the <code>Die</code>. This can be one of the following:</p>\n\n<ul>\n<li>A <code>Sequence</code> of outcomes. Duplicates will contribute\nquantity for each appearance.</li>\n<li>A <code>Mapping</code> from outcomes to quantities.</li>\n</ul>\n\n<p>Individual outcomes can each be one of the following:</p>\n\n<ul>\n<li>An outcome, which must be hashable and totally orderable.\n<ul>\n<li>For convenience, <code>tuple</code>s containing <code>Population</code>s will be\n<code>tupleize</code>d into a <code>Population</code> of <code>tuple</code>s.\nThis does not apply to subclasses of <code>tuple</code>s such as <code>namedtuple</code>\nor other classes such as <code>Vector</code>.</li>\n</ul></li>\n<li>A <code>Die</code>, which will be flattened into the result.\nThe quantity assigned to a <code>Die</code> is shared among its\noutcomes. The total denominator will be scaled up if\nnecessary.</li>\n<li><code>icepool.Reroll</code>, which will drop itself from consideration.</li>\n<li>EXPERIMENTAL: <code>icepool.Again</code>. See the documentation for\n<code>Again</code> for details.</li>\n</ul></li>\n<li><strong>times:</strong>  Multiplies the quantity of each element of <code>outcomes</code>.\n<code>times</code> can either be a sequence of the same length as\n<code>outcomes</code> or a single <code>int</code> to apply to all elements of\n<code>outcomes</code>.</li>\n<li><strong>again_count, again_depth, again_end:</strong>  These affect how <code>Again</code>\nexpressions are handled. See the <code>Again</code> documentation for\ndetails.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  <code>None</code> is not a valid outcome for a <code>Die</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">outcomes</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">,</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">times</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">again_count</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">again_depth</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">again_end</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Outcome</span> <span class=\"o\">|</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span> <span class=\"o\">|</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">RerollType</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, "icepool.Die.unary_operator": {"fullname": "icepool.Die.unary_operator", "modulename": "icepool", "qualname": "Die.unary_operator", "kind": "function", "doc": "<p>Performs the unary operation on the outcomes.</p>\n\n<p>This is used for the standard unary operators\n<code>-, +, abs, ~, round, trunc, floor, ceil</code>\nas well as the additional methods\n<code>zero, bool</code>.</p>\n\n<p>This is NOT used for the <code>[]</code> operator; when used directly, this is\ninterpreted as a <code>Mapping</code> operation and returns the count corresponding\nto a given outcome. See <code>marginals()</code> for applying the <code>[]</code> operator to\noutcomes.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A <code>Die</code> representing the result.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  If tuples are of mismatched length.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">op</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Die.binary_operator": {"fullname": "icepool.Die.binary_operator", "modulename": "icepool", "qualname": "Die.binary_operator", "kind": "function", "doc": "<p>Performs the operation on pairs of outcomes.</p>\n\n<p>By the time this is called, the other operand has already been\nconverted to a <code>Die</code>.</p>\n\n<p>If one side of a binary operator is a tuple and the other is not, the\nbinary operator is applied to each element of the tuple with the\nnon-tuple side. For example, the following are equivalent:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">cartesian_product</span><span class=\"p\">(</span><span class=\"n\">d6</span><span class=\"p\">,</span> <span class=\"n\">d8</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mi\">2</span>\n<span class=\"n\">cartesian_product</span><span class=\"p\">(</span><span class=\"n\">d6</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">d8</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>This is used for the standard binary operators\n<code>+, -, *, /, //, %, **, &lt;&lt;, &gt;&gt;, &amp;, |, ^</code>\nand the standard binary comparators\n<code>&lt;, &lt;=, &gt;=, &gt;, ==, !=, cmp</code>.</p>\n\n<p><code>==</code> and <code>!=</code> additionally set the truth value of the <code>Die</code> according to\nwhether the dice themselves are the same or not.</p>\n\n<p>The <code>@</code> operator does NOT use this method directly.\nIt rolls the left <code>Die</code>, which must have integer outcomes,\nthen rolls the right <code>Die</code> that many times and sums the outcomes.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A <code>Die</code> representing the result.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  If tuples are of mismatched length within one of the\ndice or between the dice.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span>,</span><span class=\"param\">\t<span class=\"n\">op</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Die.keys": {"fullname": "icepool.Die.keys", "modulename": "icepool", "qualname": "Die.keys", "kind": "function", "doc": "<p>The outcomes within the population in sorted order.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">collection</span><span class=\"o\">.</span><span class=\"n\">counts</span><span class=\"o\">.</span><span class=\"n\">CountsKeysView</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Die.values": {"fullname": "icepool.Die.values", "modulename": "icepool", "qualname": "Die.values", "kind": "function", "doc": "<p>The quantities within the population in outcome order.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">collection</span><span class=\"o\">.</span><span class=\"n\">counts</span><span class=\"o\">.</span><span class=\"n\">CountsValuesView</span>:</span></span>", "funcdef": "def"}, "icepool.Die.items": {"fullname": "icepool.Die.items", "modulename": "icepool", "qualname": "Die.items", "kind": "function", "doc": "<p>The (outcome, quantity)s of the population in sorted order.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">collection</span><span class=\"o\">.</span><span class=\"n\">counts</span><span class=\"o\">.</span><span class=\"n\">CountsItemsView</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Die.simplify": {"fullname": "icepool.Die.simplify", "modulename": "icepool", "qualname": "Die.simplify", "kind": "function", "doc": "<p>Divides all quantities by their greatest common denominator.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Die.reroll": {"fullname": "icepool.Die.reroll", "modulename": "icepool", "qualname": "Die.reroll", "kind": "function", "doc": "<p>Rerolls the given outcomes.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>which:</strong>  Selects which outcomes to reroll. Options:\n<ul>\n<li>A collection of outcomes to reroll.</li>\n<li>A callable that takes an outcome and returns <code>True</code> if it\nshould be rerolled.</li>\n<li>If not provided, the min outcome will be rerolled.</li>\n</ul></li>\n<li><strong>star:</strong>  Whether outcomes should be unpacked into separate arguments\nbefore sending them to a callable <code>which</code>.\nIf not provided, this will be guessed based on the function\nsignature.</li>\n<li><strong>depth:</strong>  The maximum number of times to reroll.\nIf <code>None</code>, rerolls an unlimited number of times.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A <code>Die</code> representing the reroll.\n  If the reroll would never terminate, the result has no outcomes.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">which</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">],</span> <span class=\"n\">Collection</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">/</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">star</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">depth</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Die.filter": {"fullname": "icepool.Die.filter", "modulename": "icepool", "qualname": "Die.filter", "kind": "function", "doc": "<p>Rerolls until getting one of the given outcomes.</p>\n\n<p>Essentially the complement of <code>reroll()</code>.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>which:</strong>  Selects which outcomes to reroll until. Options:\n<ul>\n<li>A callable that takes an outcome and returns <code>True</code> if it\nshould be accepted.</li>\n<li>A collection of outcomes to reroll until.</li>\n</ul></li>\n<li><strong>star:</strong>  Whether outcomes should be unpacked into separate arguments\nbefore sending them to a callable <code>which</code>.\nIf not provided, this will be guessed based on the function\nsignature.</li>\n<li><strong>depth:</strong>  The maximum number of times to reroll.\nIf <code>None</code>, rerolls an unlimited number of times.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A <code>Die</code> representing the reroll.\n  If the reroll would never terminate, the result has no outcomes.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">which</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">],</span> <span class=\"n\">Collection</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"o\">/</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">star</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">depth</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Die.split": {"fullname": "icepool.Die.split", "modulename": "icepool", "qualname": "Die.split", "kind": "function", "doc": "<p>Splits this die into one containing selected items and another containing the rest.</p>\n\n<p>The total denominator is preserved.</p>\n\n<p>Equivalent to <code>self.filter(), self.reroll()</code>.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>which:</strong>  Selects which outcomes to reroll until. Options:\n<ul>\n<li>A callable that takes an outcome and returns <code>True</code> if it\nshould be accepted.</li>\n<li>A collection of outcomes to reroll until.</li>\n</ul></li>\n<li><strong>star:</strong>  Whether outcomes should be unpacked into separate arguments\nbefore sending them to a callable <code>which</code>.\nIf not provided, this will be guessed based on the function\nsignature.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">which</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">],</span> <span class=\"n\">Collection</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">/</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">star</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "icepool.Die.truncate": {"fullname": "icepool.Die.truncate", "modulename": "icepool", "qualname": "Die.truncate", "kind": "function", "doc": "<p>Truncates the outcomes of this <code>Die</code> to the given range.</p>\n\n<p>The endpoints are included in the result if applicable.\nIf one of the arguments is not provided, that side will not be truncated.</p>\n\n<p>This effectively rerolls outcomes outside the given range.\nIf instead you want to replace those outcomes with the nearest endpoint,\nuse <code>clip()</code>.</p>\n\n<p>Not to be confused with <code>trunc(die)</code>, which performs integer truncation\non each outcome.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">min_outcome</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">max_outcome</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Die.clip": {"fullname": "icepool.Die.clip", "modulename": "icepool", "qualname": "Die.clip", "kind": "function", "doc": "<p>Clips the outcomes of this <code>Die</code> to the given values.</p>\n\n<p>The endpoints are included in the result if applicable.\nIf one of the arguments is not provided, that side will not be clipped.</p>\n\n<p>This is not the same as rerolling outcomes beyond this range;\nthe outcome is simply adjusted to fit within the range.\nThis will typically cause some quantity to bunch up at the endpoint.\nIf you want to reroll outcomes beyond this range, use <code>truncate()</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">min_outcome</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">max_outcome</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Die.set_range": {"fullname": "icepool.Die.set_range", "modulename": "icepool", "qualname": "Die.set_range", "kind": "function", "doc": "<p>Sets the outcomes of this <code>Die</code> to the given <code>int</code> range (inclusive).</p>\n\n<p>This may remove outcomes (if they are not within the range)\nand/or add zero-quantity outcomes (if they are in range but not present\nin this <code>Die</code>).</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>min_outcome:</strong>  The min outcome of the result.\nIf omitted, the min outcome of this <code>Die</code> will be used.</li>\n<li><strong>max_outcome:</strong>  The max outcome of the result.\nIf omitted, the max outcome of this <code>Die</code> will be used.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">min_outcome</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">max_outcome</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Die.set_outcomes": {"fullname": "icepool.Die.set_outcomes", "modulename": "icepool", "qualname": "Die.set_outcomes", "kind": "function", "doc": "<p>Sets the set of outcomes to the argument.</p>\n\n<p>This may remove outcomes (if they are not present in the argument)\nand/or add zero-quantity outcomes (if they are not present in this <code>Die</code>).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">outcomes</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Die.trim": {"fullname": "icepool.Die.trim", "modulename": "icepool", "qualname": "Die.trim", "kind": "function", "doc": "<p>Removes all zero-quantity outcomes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Die.map": {"fullname": "icepool.Die.map", "modulename": "icepool", "qualname": "Die.map", "kind": "function", "doc": "<p>Maps outcomes of the <code>Die</code> to other outcomes.</p>\n\n<p>This is also useful for representing processes.</p>\n\n<p>As <code>icepool.map(repl, self, ...)</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">repl</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">],</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">RerollType</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">again</span><span class=\"o\">.</span><span class=\"n\">AgainExpression</span><span class=\"p\">]],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">],</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">RerollType</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">again</span><span class=\"o\">.</span><span class=\"n\">AgainExpression</span><span class=\"p\">]]]</span>,</span><span class=\"param\">\t<span class=\"o\">/</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">extra_args</span>,</span><span class=\"param\">\t<span class=\"n\">star</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">repeat</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">again_count</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">again_depth</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">again_end</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">],</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">RerollType</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Die.map_and_time": {"fullname": "icepool.Die.map_and_time", "modulename": "icepool", "qualname": "Die.map_and_time", "kind": "function", "doc": "<p>Repeatedly map outcomes of the state to other outcomes, while also\ncounting timesteps.</p>\n\n<p>This is useful for representing processes.</p>\n\n<p>As <code>map_and_time(repl, self, ...)</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">repl</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">],</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">RerollType</span><span class=\"p\">]],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">],</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">RerollType</span><span class=\"p\">]]]</span>,</span><span class=\"param\">\t<span class=\"o\">/</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">extra_args</span>,</span><span class=\"param\">\t<span class=\"n\">star</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">repeat</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "icepool.Die.mean_time_to_sum": {"fullname": "icepool.Die.mean_time_to_sum", "modulename": "icepool", "qualname": "Die.mean_time_to_sum", "kind": "function", "doc": "<p>The mean number of rolls until the cumulative sum is greater or equal to the target.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>target:</strong>  The target sum.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  If <code>self</code> has negative outcomes.</li>\n<li><strong>ZeroDivisionError:</strong>  If <code>self.mean() == 0</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"n\">fractions</span><span class=\"o\">.</span><span class=\"n\">Fraction</span>:</span></span>", "funcdef": "def"}, "icepool.Die.explode": {"fullname": "icepool.Die.explode", "modulename": "icepool", "qualname": "Die.explode", "kind": "function", "doc": "<p>Causes outcomes to be rolled again and added to the total.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>which:</strong>  Which outcomes to explode. Options:\n<ul>\n<li>A single outcome to explode.</li>\n<li>An collection of outcomes to explode.</li>\n<li>A callable that takes an outcome and returns <code>True</code> if it\nshould be exploded.</li>\n<li>If not supplied, the max outcome will explode.</li>\n</ul></li>\n<li><strong>star:</strong>  Whether outcomes should be unpacked into separate arguments\nbefore sending them to a callable <code>which</code>.\nIf not provided, this will be guessed based on the function\nsignature.</li>\n<li><strong>depth:</strong>  The maximum number of additional dice to roll, not counting\nthe initial roll.\nIf not supplied, a default value will be used.</li>\n<li><strong>end:</strong>  Once <code>depth</code> is reached, further explosions will be treated\nas this value. By default, a zero value will be used.\n<code>icepool.Reroll</code> will make one extra final roll, rerolling until\na non-exploding outcome is reached.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">which</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">],</span> <span class=\"n\">Collection</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">/</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">star</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">depth</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">9</span>,</span><span class=\"param\">\t<span class=\"n\">end</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Die.if_else": {"fullname": "icepool.Die.if_else", "modulename": "icepool", "qualname": "Die.if_else", "kind": "function", "doc": "<p>Ternary conditional operator.</p>\n\n<p>This replaces truthy outcomes with the first argument and falsy outcomes\nwith the second argument.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>again_count, again_depth, again_end:</strong>  Forwarded to the final die constructor.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">outcome_if_true</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">outcome_if_false</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">again_count</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">again_depth</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">again_end</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">],</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">RerollType</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Die.is_in": {"fullname": "icepool.Die.is_in", "modulename": "icepool", "qualname": "Die.is_in", "kind": "function", "doc": "<p>A die that returns True iff the roll of the die is contained in the target.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"n\">Container</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Die.count": {"fullname": "icepool.Die.count", "modulename": "icepool", "qualname": "Die.count", "kind": "function", "doc": "<p>Roll this dice a number of times and count how many are in the target.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">rolls</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"n\">Container</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Die.pool": {"fullname": "icepool.Die.pool", "modulename": "icepool", "qualname": "Die.pool", "kind": "function", "doc": "<p>Creates a <code>Pool</code> from this <code>Die</code>.</p>\n\n<p>You might subscript the pool immediately afterwards, e.g.\n<code>d6.pool(5)[-1, ..., 1]</code> takes the difference between the highest and\nlowest of 5d6.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>rolls:</strong>  The number of copies of this <code>Die</code> to put in the pool.\nOr, a sequence of one <code>int</code> per die acting as\n<code>keep_tuple</code>. Note that <code>...</code> cannot be used in the\nargument to this method, as the argument determines the size of\nthe pool.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">rolls</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">pool</span><span class=\"o\">.</span><span class=\"n\">Pool</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Die.keep": {"fullname": "icepool.Die.keep", "modulename": "icepool", "qualname": "Die.keep", "kind": "function", "doc": "<p>Selects elements after drawing and sorting and sums them.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>rolls:</strong>  The number of dice to roll.</li>\n<li><strong>index:</strong>  One of the following:</li>\n<li><ul>\n<li>An <code>int</code>. This will count only the roll at the specified index.</li>\n</ul></li>\n\n<p><li>In this case, the result is a <code>Die</code> rather than a generator.</li>\n<li><ul>\n<li>A <code>slice</code>. The selected dice are counted once each.</li></p>\n\n</ul></li>\n<li><ul>\n<li>A sequence of <code>int</code>s with length equal to <code>rolls</code>.\nEach roll is counted that many times, which could be multiple or\nnegative times.</li>\n</ul>\n\n<p>Up to one <code>...</code> (<code>Ellipsis</code>) may be used. If no <code>...</code> is used,\nthe <code>rolls</code> argument may be omitted.</p>\n\n<p><code>...</code> will be replaced with a number of zero counts in order\n\n<p>to make up any missing elements compared to <code>rolls</code>.\nThis number may be \"negative\" if more <code>int</code>s are provided than\n<code>rolls</code>. Specifically:</p></p>\n\n<ul>\n<li>If <code>index</code> is shorter than <code>rolls</code>, <code>...</code>\nacts as enough zero counts to make up the difference.\nE.g. <code>(1, ..., 1)</code> on five dice would act as\n<code>(1, 0, 0, 0, 1)</code>.</li>\n<li>If <code>index</code> has length equal to <code>rolls</code>, <code>...</code> has no effect.\nE.g. <code>(1, ..., 1)</code> on two dice would act as <code>(1, 1)</code>.</li>\n<li>If <code>index</code> is longer than <code>rolls</code> and <code>...</code> is on one side,\nelements will be dropped from <code>index</code> on the side with <code>...</code>.\nE.g. <code>(..., 1, 2, 3)</code> on two dice would act as <code>(2, 3)</code>.</li>\n<li>If <code>index</code> is longer than <code>rolls</code> and <code>...</code>\nis in the middle, the counts will be as the sum of two\none-sided <code>...</code>.\nE.g. <code>(-1, ..., 1)</code> acts like <code>(-1, ...)</code> plus <code>(..., 1)</code>.\nIf <code>rolls</code> was 1 this would have the -1 and 1 cancel each other out.</li>\n</ul></li>\n\n<p></ul></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">rolls</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">slice</span><span class=\"p\">,</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"n\">ellipsis</span><span class=\"p\">],</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span>:</span></span>", "funcdef": "def"}, "icepool.Die.lowest": {"fullname": "icepool.Die.lowest", "modulename": "icepool", "qualname": "Die.lowest", "kind": "function", "doc": "<p>Roll several of this <code>Die</code> and return the lowest result, or the sum of some of the lowest.</p>\n\n<p>The outcomes should support addition and multiplication if <code>keep != 1</code>.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>rolls:</strong>  The number of dice to roll. All dice will have the same\noutcomes as <code>self</code>.</li>\n<li><strong>keep, drop:</strong>  These arguments work together:\n<ul>\n<li>If neither are provided, the single lowest die will be taken.</li>\n<li>If only <code>keep</code> is provided, the <code>keep</code> lowest dice will be summed.</li>\n<li>If only <code>drop</code> is provided, the <code>drop</code> lowest dice will be dropped\nand the rest will be summed.</li>\n<li>If both are provided, <code>drop</code> lowest dice will be dropped, then\nthe next <code>keep</code> lowest dice will be summed.</li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A <code>Die</code> representing the probability distribution of the sum.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">rolls</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"o\">/</span>,</span><span class=\"param\">\t<span class=\"n\">keep</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">drop</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span>:</span></span>", "funcdef": "def"}, "icepool.Die.highest": {"fullname": "icepool.Die.highest", "modulename": "icepool", "qualname": "Die.highest", "kind": "function", "doc": "<p>Roll several of this <code>Die</code> and return the highest result, or the sum of some of the highest.</p>\n\n<p>The outcomes should support addition and multiplication if <code>keep != 1</code>.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>rolls:</strong>  The number of dice to roll.</li>\n<li><strong>keep, drop:</strong>  These arguments work together:\n<ul>\n<li>If neither are provided, the single highest die will be taken.</li>\n<li>If only <code>keep</code> is provided, the <code>keep</code> highest dice will be summed.</li>\n<li>If only <code>drop</code> is provided, the <code>drop</code> highest dice will be dropped\nand the rest will be summed.</li>\n<li>If both are provided, <code>drop</code> highest dice will be dropped, then\nthe next <code>keep</code> highest dice will be summed.</li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A <code>Die</code> representing the probability distribution of the sum.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">rolls</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"o\">/</span>,</span><span class=\"param\">\t<span class=\"n\">keep</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">drop</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Die.middle": {"fullname": "icepool.Die.middle", "modulename": "icepool", "qualname": "Die.middle", "kind": "function", "doc": "<p>Roll several of this <code>Die</code> and sum the sorted results in the middle.</p>\n\n<p>The outcomes should support addition and multiplication if <code>keep != 1</code>.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>rolls:</strong>  The number of dice to roll.</li>\n<li><strong>keep:</strong>  The number of outcomes to sum. If this is greater than the\ncurrent keep_size, all are kept.</li>\n<li><strong>tie:</strong>  What to do if <code>keep</code> is odd but the current keep_size\nis even, or vice versa.\n<ul>\n<li>'error' (default): Raises <code>IndexError</code>.</li>\n<li>'high': The higher outcome is taken.</li>\n<li>'low': The lower outcome is taken.</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">rolls</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"o\">/</span>,</span><span class=\"param\">\t<span class=\"n\">keep</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">tie</span><span class=\"p\">:</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;error&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;high&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;low&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;error&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span>:</span></span>", "funcdef": "def"}, "icepool.Die.map_to_pool": {"fullname": "icepool.Die.map_to_pool", "modulename": "icepool", "qualname": "Die.map_to_pool", "kind": "function", "doc": "<p>EXPERIMENTAL: Maps outcomes of this <code>Die</code> to <code>Pools</code>, creating a <code>MultisetGenerator</code>.</p>\n\n<p>As <code>icepool.map_to_pool(repl, self, ...)</code>.</p>\n\n<p>If no argument is provided, the outcomes will be used to construct a\nmixture of pools directly, similar to the inverse of <code>pool.expand()</code>.\nNote that this is not particularly efficient since it does not make much\nuse of dynamic programming.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>repl:</strong>  One of the following:\n<ul>\n<li>A callable that takes in one outcome per element of args and\nproduces a <code>Pool</code> (or something convertible to such).</li>\n<li>A mapping from old outcomes to <code>Pool</code> \n(or something convertible to such).\nIn this case args must have exactly one element.\nThe new outcomes may be dice rather than just single outcomes.\nThe special value <code>icepool.Reroll</code> will reroll that old outcome.</li>\n</ul></li>\n<li><strong>star:</strong>  If <code>True</code>, the first of the args will be unpacked before \ngiving them to <code>repl</code>.\nIf not provided, it will be guessed based on the signature of \n<code>repl</code> and the number of arguments.</li>\n<li><strong>denominator:</strong>  If provided, the denominator of the result will be this\nvalue. Otherwise it will be the minimum to correctly weight the\npools.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A <code>MultisetGenerator</code> representing the mixture of <code>Pool</code>s. Note<br />\n  that this is not technically a <code>Pool</code>, though it supports most of \n  the same operations.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  If <code>denominator</code> cannot be made consistent with the \nresulting mixture of pools.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">repl</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">],</span> <span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"o\">&lt;</span><span class=\"n\">RerollType</span><span class=\"o\">.</span><span class=\"n\">Reroll</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Reroll&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">]]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">/</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">extra_args</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Outcome</span> <span class=\"o\">|</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span> <span class=\"o\">|</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"n\">multiset_expression</span><span class=\"o\">.</span><span class=\"n\">MultisetExpression</span>,</span><span class=\"param\">\t<span class=\"n\">star</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">denominator</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">multiset_generator</span><span class=\"o\">.</span><span class=\"n\">MultisetGenerator</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "icepool.Die.explode_to_pool": {"fullname": "icepool.Die.explode_to_pool", "modulename": "icepool", "qualname": "Die.explode_to_pool", "kind": "function", "doc": "<p>EXPERIMENTAL: Causes outcomes to be rolled again, keeping that outcome as an individual die in a pool.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>rolls:</strong>  The number of initial dice.</li>\n<li><strong>which:</strong>  Which outcomes to explode. Options:\n<ul>\n<li>A single outcome to explode.</li>\n<li>An collection of outcomes to explode.</li>\n<li>A callable that takes an outcome and returns <code>True</code> if it\nshould be exploded.</li>\n<li>If not supplied, the max outcome will explode.</li>\n</ul></li>\n<li><strong>star:</strong>  Whether outcomes should be unpacked into separate arguments\nbefore sending them to a callable <code>which</code>.\nIf not provided, this will be guessed based on the function\nsignature.</li>\n<li><strong>depth:</strong>  The maximum depth of explosions for an individual dice.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A <code>MultisetGenerator</code> representing the mixture of <code>Pool</code>s. Note<br />\n  that this is not technically a <code>Pool</code>, though it supports most of \n  the same operations.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">rolls</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">which</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">],</span> <span class=\"n\">Collection</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">/</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">star</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">depth</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">9</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">multiset_generator</span><span class=\"o\">.</span><span class=\"n\">MultisetGenerator</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "icepool.Die.reroll_to_pool": {"fullname": "icepool.Die.reroll_to_pool", "modulename": "icepool", "qualname": "Die.reroll_to_pool", "kind": "function", "doc": "<p>EXPERIMENTAL: Applies a limited number of rerolls shared across a pool.</p>\n\n<p>Each die can only be rerolled once (effectively <code>depth=1</code>), and no more\nthan <code>max_rerolls</code> dice may be rerolled.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>rolls:</strong>  How many dice in the pool.</li>\n<li><strong>which:</strong>  Selects which outcomes are eligible to be rerolled. Options:\n<ul>\n<li>A collection of outcomes to reroll.</li>\n<li>A callable that takes an outcome and returns <code>True</code> if it\ncould be rerolled.</li>\n</ul></li>\n<li><strong>max_rerolls:</strong>  The maximum number of dice to reroll. \nNote that each die can only be rerolled once, so if the number \nof eligible dice is less than this, the excess rerolls have no\neffect.</li>\n<li><strong>star:</strong>  Whether outcomes should be unpacked into separate arguments\nbefore sending them to a callable <code>which</code>.\nIf not provided, this will be guessed based on the function\nsignature.</li>\n<li><strong>mode:</strong>  How dice are selected for rerolling if there are more eligible\ndice than <code>max_rerolls</code>. Options:\n<ul>\n<li><code>'random'</code> (default): Eligible dice will be chosen uniformly\nat random.</li>\n<li><code>'lowest'</code>: The lowest eligible dice will be rerolled.</li>\n<li><code>'highest'</code>: The highest eligible dice will be rerolled.</li>\n<li><code>'drop'</code>: All dice that ended up on an outcome selected by \n<code>which</code> will be dropped. This includes both dice that rolled\ninto <code>which</code> initially and were not rerolled, and dice that\nwere rerolled but rolled into <code>which</code> again. This can be\nconsiderably more efficient than the other modes.</li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A <code>MultisetGenerator</code> representing the mixture of <code>Pool</code>s. Note<br />\n  that this is not technically a <code>Pool</code>, though it supports most of \n  the same operations.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">rolls</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">which</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">],</span> <span class=\"n\">Collection</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"o\">/</span>,</span><span class=\"param\">\t<span class=\"n\">max_rerolls</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">star</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">mode</span><span class=\"p\">:</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;random&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;lowest&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;highest&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;drop&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;random&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">multiset_generator</span><span class=\"o\">.</span><span class=\"n\">MultisetGenerator</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "icepool.Die.abs": {"fullname": "icepool.Die.abs", "modulename": "icepool", "qualname": "Die.abs", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Die.round": {"fullname": "icepool.Die.round", "modulename": "icepool", "qualname": "Die.round", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ndigits</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span>:</span></span>", "funcdef": "def"}, "icepool.Die.stochastic_round": {"fullname": "icepool.Die.stochastic_round", "modulename": "icepool", "qualname": "Die.stochastic_round", "kind": "function", "doc": "<p>Randomly rounds outcomes up or down to the nearest integer according to the two distances.</p>\n\n<p>Specificially, rounds <code>x</code> up with probability <code>x - floor(x)</code> and down\notherwise.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>max_denominator:</strong>  If provided, each rounding will be performed\nusing <code>fractions.Fraction.limit_denominator(max_denominator)</code>.\nOtherwise, the rounding will be performed without\n<code>limit_denominator</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">max_denominator</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Die.trunc": {"fullname": "icepool.Die.trunc", "modulename": "icepool", "qualname": "Die.trunc", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span>:</span></span>", "funcdef": "def"}, "icepool.Die.floor": {"fullname": "icepool.Die.floor", "modulename": "icepool", "qualname": "Die.floor", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span>:</span></span>", "funcdef": "def"}, "icepool.Die.ceil": {"fullname": "icepool.Die.ceil", "modulename": "icepool", "qualname": "Die.ceil", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span>:</span></span>", "funcdef": "def"}, "icepool.Die.zero": {"fullname": "icepool.Die.zero", "modulename": "icepool", "qualname": "Die.zero", "kind": "function", "doc": "<p>Zeros all outcomes of this die.</p>\n\n<p>This is done by multiplying all outcomes by <code>0</code>.</p>\n\n<p>The result will have the same denominator as this die.</p>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  If the zeros did not resolve to a single outcome.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Die.zero_outcome": {"fullname": "icepool.Die.zero_outcome", "modulename": "icepool", "qualname": "Die.zero_outcome", "kind": "function", "doc": "<p>A zero-outcome for this die.</p>\n\n<p>E.g. <code>0</code> for a <code>Die</code> whose outcomes are <code>int</code>s.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"o\">+</span><span class=\"n\">T_co</span>:</span></span>", "funcdef": "def"}, "icepool.Die.cmp": {"fullname": "icepool.Die.cmp", "modulename": "icepool", "qualname": "Die.cmp", "kind": "function", "doc": "<p>A <code>Die</code> with outcomes 1, -1, and 0.</p>\n\n<p>The quantities are equal to the positive outcome of <code>self &gt; other</code>,\n<code>self &lt; other</code>, and the remainder respectively.</p>\n\n<p>This will include all three outcomes even if they have zero quantity.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Die.sign": {"fullname": "icepool.Die.sign", "modulename": "icepool", "qualname": "Die.sign", "kind": "function", "doc": "<p>Outcomes become 1 if greater than <code>zero()</code>, -1 if less than <code>zero()</code>, and 0 otherwise.</p>\n\n<p>Note that for <code>float</code>s, +0.0, -0.0, and nan all become 0.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Die.equals": {"fullname": "icepool.Die.equals", "modulename": "icepool", "qualname": "Die.equals", "kind": "function", "doc": "<p><code>True</code> iff both dice have the same outcomes and quantities.</p>\n\n<p>This is <code>False</code> if <code>other</code> is not a <code>Die</code>, even if it would convert\nto an equal <code>Die</code>.</p>\n\n<p>Truth value does NOT matter.</p>\n\n<p>If one <code>Die</code> has a zero-quantity outcome and the other <code>Die</code> does not\ncontain that outcome, they are treated as unequal by this function.</p>\n\n<p>The <code>==</code> and <code>!=</code> operators have a dual purpose; they return a <code>Die</code>\nwith a truth value determined by this method.\nOnly dice returned by these methods have a truth value. The data of\nthese dice is lazily evaluated since the caller may only be interested\nin the <code>Die</code> value or the truth value.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>simplify:</strong>  If <code>True</code>, the dice will be simplified before comparing.\nOtherwise, e.g. a 2:2 coin is not <code>equals()</code> to a 1:1 coin.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">simplify</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "icepool.Population": {"fullname": "icepool.Population", "modulename": "icepool", "qualname": "Population", "kind": "class", "doc": "<p>A mapping from outcomes to <code>int</code> quantities.</p>\n\n<p>Outcomes with each instance must be hashable and totally orderable.</p>\n\n<p>Subclasses include <code>Die</code> and <code>Deck</code>.</p>\n", "bases": "abc.ABC, typing.Generic[+T_co], typing.Mapping[typing.Any, int]"}, "icepool.Population.keys": {"fullname": "icepool.Population.keys", "modulename": "icepool", "qualname": "Population.keys", "kind": "function", "doc": "<p>The outcomes within the population in sorted order.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">collection</span><span class=\"o\">.</span><span class=\"n\">counts</span><span class=\"o\">.</span><span class=\"n\">CountsKeysView</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Population.values": {"fullname": "icepool.Population.values", "modulename": "icepool", "qualname": "Population.values", "kind": "function", "doc": "<p>The quantities within the population in outcome order.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">collection</span><span class=\"o\">.</span><span class=\"n\">counts</span><span class=\"o\">.</span><span class=\"n\">CountsValuesView</span>:</span></span>", "funcdef": "def"}, "icepool.Population.items": {"fullname": "icepool.Population.items", "modulename": "icepool", "qualname": "Population.items", "kind": "function", "doc": "<p>The (outcome, quantity)s of the population in sorted order.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">collection</span><span class=\"o\">.</span><span class=\"n\">counts</span><span class=\"o\">.</span><span class=\"n\">CountsItemsView</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Population.outcomes": {"fullname": "icepool.Population.outcomes", "modulename": "icepool", "qualname": "Population.outcomes", "kind": "function", "doc": "<p>The outcomes of the mapping in ascending order.</p>\n\n<p>These are also the <code>keys</code> of the mapping.\nPrefer to use the name <code>outcomes</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">collection</span><span class=\"o\">.</span><span class=\"n\">counts</span><span class=\"o\">.</span><span class=\"n\">CountsKeysView</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Population.common_outcome_length": {"fullname": "icepool.Population.common_outcome_length", "modulename": "icepool", "qualname": "Population.common_outcome_length", "kind": "function", "doc": "<p>The common length of all outcomes.</p>\n\n<p>If outcomes have no lengths or different lengths, the result is <code>None</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "icepool.Population.is_empty": {"fullname": "icepool.Population.is_empty", "modulename": "icepool", "qualname": "Population.is_empty", "kind": "function", "doc": "<p><code>True</code> iff this population has no outcomes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "icepool.Population.min_outcome": {"fullname": "icepool.Population.min_outcome", "modulename": "icepool", "qualname": "Population.min_outcome", "kind": "function", "doc": "<p>The least outcome.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"o\">+</span><span class=\"n\">T_co</span>:</span></span>", "funcdef": "def"}, "icepool.Population.max_outcome": {"fullname": "icepool.Population.max_outcome", "modulename": "icepool", "qualname": "Population.max_outcome", "kind": "function", "doc": "<p>The greatest outcome.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"o\">+</span><span class=\"n\">T_co</span>:</span></span>", "funcdef": "def"}, "icepool.Population.nearest": {"fullname": "icepool.Population.nearest", "modulename": "icepool", "qualname": "Population.nearest", "kind": "function", "doc": "<p>The nearest outcome in this population fitting the comparison.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>comparison:</strong>  The comparison which the result must fit. For example,\n'&lt;=' would find the greatest outcome that is not greater than\nthe argument.</li>\n<li><strong>outcome:</strong>  The outcome to compare against.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The nearest outcome fitting the comparison, or <code>None</code> if there is\n  no such outcome.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">comparison</span><span class=\"p\">:</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;&lt;=&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&lt;&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&gt;=&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&gt;&#39;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">outcome</span>,</span><span class=\"param\">\t<span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Population.quantity": {"fullname": "icepool.Population.quantity", "modulename": "icepool", "qualname": "Population.quantity", "kind": "function", "doc": "<p>The quantity of a single outcome.</p>\n\n<p>A comparison can be provided, in which case this returns the total\nquantity fitting the comparison.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>comparison:</strong>  The comparison to use. This can be omitted, in which\ncase it is treated as '=='.</li>\n<li><strong>outcome:</strong>  The outcome to query.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">comparison</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;==&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;!=&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&lt;=&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&lt;&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&gt;=&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&gt;&#39;</span><span class=\"p\">],</span> <span class=\"n\">Hashable</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">outcome</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Hashable</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "icepool.Population.quantities": {"fullname": "icepool.Population.quantities", "modulename": "icepool", "qualname": "Population.quantities", "kind": "function", "doc": "<p>The quantities of the mapping in sorted order.</p>\n\n<p>For example, '&lt;=' gives the CDF.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>comparison:</strong>  Optional. If omitted, this defaults to '=='.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">comparison</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;==&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;!=&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&lt;=&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&lt;&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&gt;=&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&gt;&#39;</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">collection</span><span class=\"o\">.</span><span class=\"n\">counts</span><span class=\"o\">.</span><span class=\"n\">CountsValuesView</span><span class=\"p\">,</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "icepool.Population.denominator": {"fullname": "icepool.Population.denominator", "modulename": "icepool", "qualname": "Population.denominator", "kind": "function", "doc": "<p>The sum of all quantities (e.g. weights or duplicates).</p>\n\n<p>For the number of unique outcomes, including those with zero quantity,\nuse <code>len()</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "icepool.Population.scale_quantities": {"fullname": "icepool.Population.scale_quantities", "modulename": "icepool", "qualname": "Population.scale_quantities", "kind": "function", "doc": "<p>Scales all quantities by an integer.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">C</span>, </span><span class=\"param\"><span class=\"n\">scale</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">C</span>:</span></span>", "funcdef": "def"}, "icepool.Population.has_zero_quantities": {"fullname": "icepool.Population.has_zero_quantities", "modulename": "icepool", "qualname": "Population.has_zero_quantities", "kind": "function", "doc": "<p><code>True</code> iff <code>self</code> contains at least one outcome with zero quantity.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "icepool.Population.probability": {"fullname": "icepool.Population.probability", "modulename": "icepool", "qualname": "Population.probability", "kind": "function", "doc": "<p>The total probability of outcomes fitting a comparison.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">comparison</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;==&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;!=&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&lt;=&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&lt;&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&gt;=&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&gt;&#39;</span><span class=\"p\">],</span> <span class=\"n\">Hashable</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">outcome</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Hashable</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">/</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">percent</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">fractions</span><span class=\"o\">.</span><span class=\"n\">Fraction</span> <span class=\"o\">|</span> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, "icepool.Population.probabilities": {"fullname": "icepool.Population.probabilities", "modulename": "icepool", "qualname": "Population.probabilities", "kind": "function", "doc": "<p>The total probabilities fitting the comparison for each outcome in sorted order.</p>\n\n<p>For example, '&lt;=' gives the CDF.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>comparison:</strong>  Optional. If omitted, this defaults to '=='.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">comparison</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;==&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;!=&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&lt;=&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&lt;&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&gt;=&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&gt;&#39;</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">/</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">percent</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">fractions</span><span class=\"o\">.</span><span class=\"n\">Fraction</span><span class=\"p\">],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "icepool.Population.mode": {"fullname": "icepool.Population.mode", "modulename": "icepool", "qualname": "Population.mode", "kind": "function", "doc": "<p>A tuple containing the most common outcome(s) of the population.</p>\n\n<p>These are sorted from lowest to highest.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, "icepool.Population.modal_quantity": {"fullname": "icepool.Population.modal_quantity", "modulename": "icepool", "qualname": "Population.modal_quantity", "kind": "function", "doc": "<p>The highest quantity of any single outcome.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "icepool.Population.kolmogorov_smirnov": {"fullname": "icepool.Population.kolmogorov_smirnov", "modulename": "icepool", "qualname": "Population.kolmogorov_smirnov", "kind": "function", "doc": "<p>Kolmogorov\u2013Smirnov statistic. The maximum absolute difference between CDFs.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span></span><span class=\"return-annotation\">) -> <span class=\"n\">fractions</span><span class=\"o\">.</span><span class=\"n\">Fraction</span>:</span></span>", "funcdef": "def"}, "icepool.Population.cramer_von_mises": {"fullname": "icepool.Population.cramer_von_mises", "modulename": "icepool", "qualname": "Population.cramer_von_mises", "kind": "function", "doc": "<p>Cram\u00e9r-von Mises statistic. The sum-of-squares difference between CDFs.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span></span><span class=\"return-annotation\">) -> <span class=\"n\">fractions</span><span class=\"o\">.</span><span class=\"n\">Fraction</span>:</span></span>", "funcdef": "def"}, "icepool.Population.median": {"fullname": "icepool.Population.median", "modulename": "icepool", "qualname": "Population.median", "kind": "function", "doc": "<p>The median, taking the mean in case of a tie.</p>\n\n<p>This will fail if the outcomes do not support division;\nin this case, use <code>median_low</code> or <code>median_high</code> instead.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "icepool.Population.median_low": {"fullname": "icepool.Population.median_low", "modulename": "icepool", "qualname": "Population.median_low", "kind": "function", "doc": "<p>The median, taking the lower in case of a tie.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"o\">+</span><span class=\"n\">T_co</span>:</span></span>", "funcdef": "def"}, "icepool.Population.median_high": {"fullname": "icepool.Population.median_high", "modulename": "icepool", "qualname": "Population.median_high", "kind": "function", "doc": "<p>The median, taking the higher in case of a tie.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"o\">+</span><span class=\"n\">T_co</span>:</span></span>", "funcdef": "def"}, "icepool.Population.quantile": {"fullname": "icepool.Population.quantile", "modulename": "icepool", "qualname": "Population.quantile", "kind": "function", "doc": "<p>The outcome <code>n / d</code> of the way through the CDF, taking the mean in case of a tie.</p>\n\n<p>This will fail if the outcomes do not support addition and division;\nin this case, use <code>quantile_low</code> or <code>quantile_high</code> instead.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">d</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">100</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "icepool.Population.quantile_low": {"fullname": "icepool.Population.quantile_low", "modulename": "icepool", "qualname": "Population.quantile_low", "kind": "function", "doc": "<p>The outcome <code>n / d</code> of the way through the CDF, taking the lesser in case of a tie.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">d</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">100</span></span><span class=\"return-annotation\">) -> <span class=\"o\">+</span><span class=\"n\">T_co</span>:</span></span>", "funcdef": "def"}, "icepool.Population.quantile_high": {"fullname": "icepool.Population.quantile_high", "modulename": "icepool", "qualname": "Population.quantile_high", "kind": "function", "doc": "<p>The outcome <code>n / d</code> of the way through the CDF, taking the greater in case of a tie.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">d</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">100</span></span><span class=\"return-annotation\">) -> <span class=\"o\">+</span><span class=\"n\">T_co</span>:</span></span>", "funcdef": "def"}, "icepool.Population.mean": {"fullname": "icepool.Population.mean", "modulename": "icepool", "qualname": "Population.mean", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">Population</span><span class=\"p\">[</span><span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Rational</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">Population</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">fractions</span><span class=\"o\">.</span><span class=\"n\">Fraction</span> <span class=\"o\">|</span> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, "icepool.Population.variance": {"fullname": "icepool.Population.variance", "modulename": "icepool", "qualname": "Population.variance", "kind": "function", "doc": "<p>This is the population variance, not the sample variance.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">Population</span><span class=\"p\">[</span><span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Rational</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">Population</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">fractions</span><span class=\"o\">.</span><span class=\"n\">Fraction</span> <span class=\"o\">|</span> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, "icepool.Population.standard_deviation": {"fullname": "icepool.Population.standard_deviation", "modulename": "icepool", "qualname": "Population.standard_deviation", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">Population</span><span class=\"p\">[</span><span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Rational</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">Population</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, "icepool.Population.sd": {"fullname": "icepool.Population.sd", "modulename": "icepool", "qualname": "Population.sd", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">Population</span><span class=\"p\">[</span><span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Rational</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">Population</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, "icepool.Population.standardized_moment": {"fullname": "icepool.Population.standardized_moment", "modulename": "icepool", "qualname": "Population.standardized_moment", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">Population</span><span class=\"p\">[</span><span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Rational</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">Population</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">k</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, "icepool.Population.skewness": {"fullname": "icepool.Population.skewness", "modulename": "icepool", "qualname": "Population.skewness", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">Population</span><span class=\"p\">[</span><span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Rational</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">Population</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, "icepool.Population.excess_kurtosis": {"fullname": "icepool.Population.excess_kurtosis", "modulename": "icepool", "qualname": "Population.excess_kurtosis", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">Population</span><span class=\"p\">[</span><span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Rational</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">Population</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, "icepool.Population.entropy": {"fullname": "icepool.Population.entropy", "modulename": "icepool", "qualname": "Population.entropy", "kind": "function", "doc": "<p>The entropy of a random sample from this population.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>base:</strong>  The logarithm base to use. Default is 2.0, which gives the \nentropy in bits.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">base</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">2.0</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, "icepool.Population.marginals": {"fullname": "icepool.Population.marginals", "modulename": "icepool", "qualname": "Population.marginals", "kind": "variable", "doc": "<p>A property that applies the <code>[]</code> operator to outcomes.</p>\n\n<p>For example, <code>population.marginals[:2]</code> will marginalize the first two\nelements of sequence outcomes.</p>\n\n<p>Attributes that do not start with an underscore will also be forwarded.\nFor example, <code>population.marginals.x</code> will marginalize the <code>x</code> attribute\nfrom e.g. <code>namedtuple</code> outcomes.</p>\n", "annotation": ": icepool.population.base.Population._Marginals[~C]"}, "icepool.Population.covariance": {"fullname": "icepool.Population.covariance", "modulename": "icepool", "qualname": "Population.covariance", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">Population</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Rational</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]]</span> <span class=\"o\">|</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">Population</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">i</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">j</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">fractions</span><span class=\"o\">.</span><span class=\"n\">Fraction</span> <span class=\"o\">|</span> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, "icepool.Population.correlation": {"fullname": "icepool.Population.correlation", "modulename": "icepool", "qualname": "Population.correlation", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">Population</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Rational</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]]</span> <span class=\"o\">|</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">Population</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">i</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">j</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, "icepool.Population.to_one_hot": {"fullname": "icepool.Population.to_one_hot", "modulename": "icepool", "qualname": "Population.to_one_hot", "kind": "function", "doc": "<p>Converts the outcomes of this population to a one-hot representation.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>outcomes:</strong>  If provided, each outcome will be mapped to a <code>Vector</code>\nwhere the element at <code>outcomes.index(outcome)</code> is set to <code>True</code>\nand the rest to <code>False</code>, or all <code>False</code> if the outcome is not\nin <code>outcomes</code>.\nIf not provided, <code>self.outcomes()</code> is used.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">C</span>, </span><span class=\"param\"><span class=\"n\">outcomes</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">C</span>:</span></span>", "funcdef": "def"}, "icepool.Population.sample": {"fullname": "icepool.Population.sample", "modulename": "icepool", "qualname": "Population.sample", "kind": "function", "doc": "<p>A single random sample from this population.</p>\n\n<p>Note that this is always \"with replacement\" even for <code>Deck</code> since\ninstances are immutable.</p>\n\n<p>This uses the standard <code>random</code> package and is not cryptographically\nsecure.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"o\">+</span><span class=\"n\">T_co</span>:</span></span>", "funcdef": "def"}, "icepool.Population.format": {"fullname": "icepool.Population.format", "modulename": "icepool", "qualname": "Population.format", "kind": "function", "doc": "<p>Formats this mapping as a string.</p>\n\n<p><code>format_spec</code> should start with the output format,\nwhich can be:</p>\n\n<ul>\n<li><code>md</code> for Markdown (default)</li>\n<li><code>bbcode</code> for BBCode</li>\n<li><code>csv</code> for comma-separated values</li>\n<li><code>html</code> for HTML</li>\n</ul>\n\n<p>After this, you may optionally add a <code>:</code> followed by a series of\nrequested columns. Allowed columns are:</p>\n\n<ul>\n<li><code>o</code>: Outcomes.</li>\n<li><code>*o</code>: Outcomes, unpacked if applicable.</li>\n<li><code>q==</code>, <code>q&lt;=</code>, <code>q&gt;=</code>: Quantities ==, &lt;=, or &gt;= each outcome.</li>\n<li><code>p==</code>, <code>p&lt;=</code>, <code>p&gt;=</code>: Probabilities (0-1) ==, &lt;=, or &gt;= each outcome.</li>\n<li><code>%==</code>, <code>%&lt;=</code>, <code>%&gt;=</code>: Probabilities (0%-100%) ==, &lt;=, or &gt;= each outcome.</li>\n</ul>\n\n<p>Columns may optionally be separated using <code>|</code> characters.</p>\n\n<p>The default columns are <code>*o|q==|%==</code>, which are the unpacked outcomes,\nthe quantities, and the probabilities. The quantities are omitted from\nthe default columns if any individual quantity is 10**30 or greater.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">format_spec</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "icepool.tupleize": {"fullname": "icepool.tupleize", "modulename": "icepool", "qualname": "tupleize", "kind": "function", "doc": "<p>Returns the Cartesian product of the arguments as <code>tuple</code>s or a <code>Population</code> thereof.</p>\n\n<p>For example:</p>\n\n<ul>\n<li><code>tupleize(1, 2)</code> would produce <code>(1, 2)</code>.</li>\n<li><code>tupleize(d6, 0)</code> would produce a <code>Die</code> with outcomes <code>(1, 0)</code>, <code>(2, 0)</code>,\n... <code>(6, 0)</code>.</li>\n<li><code>tupleize(d6, d6)</code> would produce a <code>Die</code> with outcomes <code>(1, 1)</code>, <code>(1, 2)</code>,\n... <code>(6, 5)</code>, <code>(6, 6)</code>.</li>\n</ul>\n\n<p>If <code>Population</code>s are provided, they must all be <code>Die</code> or all <code>Deck</code> and not\na mixture of the two.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>If none of the outcomes is a <code>Population</code>, the result is a <code>tuple</code>\n  with one element per argument. Otherwise, the result is a <code>Population</code>\n  of the same type as the input <code>Population</code>, and the outcomes are\n  <code>tuple</code>s with one element per argument.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">Population</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">Population</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "icepool.vectorize": {"fullname": "icepool.vectorize", "modulename": "icepool", "qualname": "vectorize", "kind": "function", "doc": "<p>Returns the Cartesian product of the arguments as <code>Vector</code>s or a <code>Population</code> thereof.</p>\n\n<p>For example:</p>\n\n<ul>\n<li><code>vectorize(1, 2)</code> would produce <code>Vector(1, 2)</code>.</li>\n<li><code>vectorize(d6, 0)</code> would produce a <code>Die</code> with outcomes <code>Vector(1, 0)</code>,\n<code>Vector(2, 0)</code>, ... <code>Vector(6, 0)</code>.</li>\n<li><code>vectorize(d6, d6)</code> would produce a <code>Die</code> with outcomes <code>Vector(1, 1)</code>,\n<code>Vector(1, 2)</code>, ... <code>Vector(6, 5)</code>, <code>Vector(6, 6)</code>.</li>\n</ul>\n\n<p>If <code>Population</code>s are provided, they must all be <code>Die</code> or all <code>Deck</code> and not\na mixture of the two.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>If none of the outcomes is a <code>Population</code>, the result is a <code>Vector</code>\n  with one element per argument. Otherwise, the result is a <code>Population</code>\n  of the same type as the input <code>Population</code>, and the outcomes are\n  <code>Vector</code>s with one element per argument.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">Population</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">collection</span><span class=\"o\">.</span><span class=\"n\">vector</span><span class=\"o\">.</span><span class=\"n\">Vector</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">Population</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">collection</span><span class=\"o\">.</span><span class=\"n\">vector</span><span class=\"o\">.</span><span class=\"n\">Vector</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]]]</span>:</span></span>", "funcdef": "def"}, "icepool.Vector": {"fullname": "icepool.Vector", "modulename": "icepool", "qualname": "Vector", "kind": "class", "doc": "<p>Immutable tuple-like class that applies most operators elementwise.</p>\n\n<p>May become a variadic generic type in the future.</p>\n", "bases": "icepool.typing.Outcome, typing.Sequence[+T_co]"}, "icepool.Vector.unary_operator": {"fullname": "icepool.Vector.unary_operator", "modulename": "icepool", "qualname": "Vector.unary_operator", "kind": "function", "doc": "<p>Unary operators on <code>Vector</code> are applied elementwise.</p>\n\n<p>This is used for the standard unary operators\n<code>-, +, abs, ~, round, trunc, floor, ceil</code></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">op</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">collection</span><span class=\"o\">.</span><span class=\"n\">vector</span><span class=\"o\">.</span><span class=\"n\">Vector</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Vector.abs": {"fullname": "icepool.Vector.abs", "modulename": "icepool", "qualname": "Vector.abs", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">collection</span><span class=\"o\">.</span><span class=\"n\">vector</span><span class=\"o\">.</span><span class=\"n\">Vector</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Vector.round": {"fullname": "icepool.Vector.round", "modulename": "icepool", "qualname": "Vector.round", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ndigits</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">collection</span><span class=\"o\">.</span><span class=\"n\">vector</span><span class=\"o\">.</span><span class=\"n\">Vector</span>:</span></span>", "funcdef": "def"}, "icepool.Vector.trunc": {"fullname": "icepool.Vector.trunc", "modulename": "icepool", "qualname": "Vector.trunc", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">collection</span><span class=\"o\">.</span><span class=\"n\">vector</span><span class=\"o\">.</span><span class=\"n\">Vector</span>:</span></span>", "funcdef": "def"}, "icepool.Vector.floor": {"fullname": "icepool.Vector.floor", "modulename": "icepool", "qualname": "Vector.floor", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">collection</span><span class=\"o\">.</span><span class=\"n\">vector</span><span class=\"o\">.</span><span class=\"n\">Vector</span>:</span></span>", "funcdef": "def"}, "icepool.Vector.ceil": {"fullname": "icepool.Vector.ceil", "modulename": "icepool", "qualname": "Vector.ceil", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">collection</span><span class=\"o\">.</span><span class=\"n\">vector</span><span class=\"o\">.</span><span class=\"n\">Vector</span>:</span></span>", "funcdef": "def"}, "icepool.Vector.binary_operator": {"fullname": "icepool.Vector.binary_operator", "modulename": "icepool", "qualname": "Vector.binary_operator", "kind": "function", "doc": "<p>Binary operators on <code>Vector</code> are applied elementwise.</p>\n\n<p>If the other operand is also a <code>Vector</code>, the operator is applied to each\npair of elements from <code>self</code> and <code>other</code>. Both must have the same\nlength.</p>\n\n<p>Otherwise the other operand is broadcast to each element of <code>self</code>.</p>\n\n<p>This is used for the standard binary operators\n<code>+, -, *, /, //, %, **, &lt;&lt;, &gt;&gt;, &amp;, |, ^</code>.</p>\n\n<p><code>@</code> is not included due to its different meaning in <code>Die</code>.</p>\n\n<p>This is also used for the comparators\n<code>&lt;, &lt;=, &gt;, &gt;=, ==, !=</code>.</p>\n\n<p>In this case, the result also has a truth value based on lexicographic\nordering.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">other</span>,</span><span class=\"param\">\t<span class=\"n\">op</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span>,</span><span class=\"param\">\t<span class=\"n\">compare_for_truth</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">collection</span><span class=\"o\">.</span><span class=\"n\">vector</span><span class=\"o\">.</span><span class=\"n\">Vector</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Vector.reverse_binary_operator": {"fullname": "icepool.Vector.reverse_binary_operator", "modulename": "icepool", "qualname": "Vector.reverse_binary_operator", "kind": "function", "doc": "<p>Reverse version of <code>binary_operator()</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">other</span>,</span><span class=\"param\">\t<span class=\"n\">op</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">collection</span><span class=\"o\">.</span><span class=\"n\">vector</span><span class=\"o\">.</span><span class=\"n\">Vector</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Vector.append": {"fullname": "icepool.Vector.append", "modulename": "icepool", "qualname": "Vector.append", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">collection</span><span class=\"o\">.</span><span class=\"n\">vector</span><span class=\"o\">.</span><span class=\"n\">Vector</span>:</span></span>", "funcdef": "def"}, "icepool.Vector.concatenate": {"fullname": "icepool.Vector.concatenate", "modulename": "icepool", "qualname": "Vector.concatenate", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">collection</span><span class=\"o\">.</span><span class=\"n\">vector</span><span class=\"o\">.</span><span class=\"n\">Vector</span>:</span></span>", "funcdef": "def"}, "icepool.Symbols": {"fullname": "icepool.Symbols", "modulename": "icepool", "qualname": "Symbols", "kind": "class", "doc": "<p>EXPERIMENTAL: Immutable multiset of single characters.</p>\n\n<p>Spaces, dashes, and underscores cannot be used as symbols.</p>\n\n<p>Operations include:</p>\n\n<table>\n<thead>\n<tr>\n  <th style=\"text-align:left;\">Operation</th>\n  <th style=\"text-align:left;\">Count / notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td style=\"text-align:left;\"><code>additive_union</code>, <code>+</code></td>\n  <td style=\"text-align:left;\"><code>l + r</code></td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\"><code>difference</code>, <code>-</code></td>\n  <td style=\"text-align:left;\"><code>l - r</code></td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\"><code>intersection</code>, <code>&amp;</code></td>\n  <td style=\"text-align:left;\"><code>min(l, r)</code></td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\"><code>union</code>, <code>|</code></td>\n  <td style=\"text-align:left;\"><code>max(l, r)</code></td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\"><code>symmetric_difference</code>, <code>^</code></td>\n  <td style=\"text-align:left;\"><code>abs(l - r)</code></td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\"><code>multiply_counts</code>, <code>*</code></td>\n  <td style=\"text-align:left;\"><code>count * n</code></td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\"><code>divide_counts</code>, <code>//</code></td>\n  <td style=\"text-align:left;\"><code>count // n</code></td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\"><code>issubset</code>, <code>&lt;=</code></td>\n  <td style=\"text-align:left;\">all counts l &lt;= r</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\"><code>issuperset</code>, <code>&gt;=</code></td>\n  <td style=\"text-align:left;\">all counts l &gt;= r</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\"><code>==</code></td>\n  <td style=\"text-align:left;\">all counts l == r</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\"><code>!=</code></td>\n  <td style=\"text-align:left;\">any count l != r</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\">unary <code>+</code></td>\n  <td style=\"text-align:left;\">drop all negative counts</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\">unary <code>-</code></td>\n  <td style=\"text-align:left;\">reverses the sign of all counts</td>\n</tr>\n</tbody>\n</table>\n\n<p><code>&lt;</code> and <code>&gt;</code> are lexicographic orderings rather than subset relations.\nSpecifically, they compare the count of each character in alphabetical\norder. For example:</p>\n\n<ul>\n<li><code>'a' &gt; ''</code> since one <code>'a'</code> is more than zero <code>'a'</code>s.</li>\n<li><code>'a' &gt; 'bb'</code> since <code>'a'</code> is compared first.</li>\n<li><code>'-a' &lt; 'bb'</code> since the left side has -1 <code>'a'</code>s.</li>\n<li><code>'a' &lt; 'ab'</code> since the <code>'a'</code>s are equal but the right side has more <code>'b'</code>s.</li>\n</ul>\n\n<p>Binary operators other than <code>*</code> and <code>//</code> implicitly convert the other\nargument to <code>Symbols</code> using the constructor.</p>\n\n<p>Subscripting with a single character returns the count of that character\nas an <code>int</code>. E.g. <code>symbols['a']</code> -> number of <code>a</code>s as an <code>int</code>.\nYou can also access it as an attribute, e.g.  <code>symbols.a</code>.</p>\n\n<p>Subscripting with multiple characters returns a <code>Symbols</code> with only those\ncharacters, dropping the rest.\nE.g. <code>symbols['ab']</code> -> number of <code>a</code>s and <code>b</code>s as a <code>Symbols</code>.\nAgain you can also access it as an attribute, e.g. <code>symbols.ab</code>.\nThis is useful for reducing the outcome space, which reduces computational\ncost for further operations. If you want to keep only a single character\nwhile keeping the type as <code>Symbols</code>, you can subscript with that character\nplus an unused character.</p>\n\n<p>Subscripting with duplicate characters currently has no further effect, but\nthis may change in the future.</p>\n\n<p><code>Population.marginals</code> forwards attribute access, so you can use e.g.\n<code>die.marginals.a</code> to get the marginal distribution of <code>a</code>s.</p>\n\n<p>Note that attribute access only works with valid identifiers,\nso e.g. emojis would need to use the subscript method.</p>\n", "bases": "typing.Mapping[str, int]"}, "icepool.Symbols.__init__": {"fullname": "icepool.Symbols.__init__", "modulename": "icepool", "qualname": "Symbols.__init__", "kind": "function", "doc": "<p>Constructor.</p>\n\n<p>The argument can be a string, an iterable of characters, or a mapping of\ncharacters to counts.</p>\n\n<p>If the argument is a string, negative symbols can be specified using a\nminus sign optionally surrounded by whitespace. For example,\n<code>a - b</code> has one positive a and one negative b.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">symbols</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span></span>)</span>"}, "icepool.Symbols.additive_union": {"fullname": "icepool.Symbols.additive_union", "modulename": "icepool", "qualname": "Symbols.additive_union", "kind": "function", "doc": "<p>The sum of counts of each symbol.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">collection</span><span class=\"o\">.</span><span class=\"n\">symbols</span><span class=\"o\">.</span><span class=\"n\">Symbols</span>:</span></span>", "funcdef": "def"}, "icepool.Symbols.difference": {"fullname": "icepool.Symbols.difference", "modulename": "icepool", "qualname": "Symbols.difference", "kind": "function", "doc": "<p>The difference between the counts of each symbol.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">collection</span><span class=\"o\">.</span><span class=\"n\">symbols</span><span class=\"o\">.</span><span class=\"n\">Symbols</span>:</span></span>", "funcdef": "def"}, "icepool.Symbols.intersection": {"fullname": "icepool.Symbols.intersection", "modulename": "icepool", "qualname": "Symbols.intersection", "kind": "function", "doc": "<p>The min count of each symbol.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">collection</span><span class=\"o\">.</span><span class=\"n\">symbols</span><span class=\"o\">.</span><span class=\"n\">Symbols</span>:</span></span>", "funcdef": "def"}, "icepool.Symbols.union": {"fullname": "icepool.Symbols.union", "modulename": "icepool", "qualname": "Symbols.union", "kind": "function", "doc": "<p>The max count of each symbol.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">collection</span><span class=\"o\">.</span><span class=\"n\">symbols</span><span class=\"o\">.</span><span class=\"n\">Symbols</span>:</span></span>", "funcdef": "def"}, "icepool.Symbols.symmetric_difference": {"fullname": "icepool.Symbols.symmetric_difference", "modulename": "icepool", "qualname": "Symbols.symmetric_difference", "kind": "function", "doc": "<p>The absolute difference in symbol counts between the two sets.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">collection</span><span class=\"o\">.</span><span class=\"n\">symbols</span><span class=\"o\">.</span><span class=\"n\">Symbols</span>:</span></span>", "funcdef": "def"}, "icepool.Symbols.multiply_counts": {"fullname": "icepool.Symbols.multiply_counts", "modulename": "icepool", "qualname": "Symbols.multiply_counts", "kind": "function", "doc": "<p>Multiplies all counts by an integer.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">collection</span><span class=\"o\">.</span><span class=\"n\">symbols</span><span class=\"o\">.</span><span class=\"n\">Symbols</span>:</span></span>", "funcdef": "def"}, "icepool.Symbols.divide_counts": {"fullname": "icepool.Symbols.divide_counts", "modulename": "icepool", "qualname": "Symbols.divide_counts", "kind": "function", "doc": "<p>Divides all counts by an integer, rounding down.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">collection</span><span class=\"o\">.</span><span class=\"n\">symbols</span><span class=\"o\">.</span><span class=\"n\">Symbols</span>:</span></span>", "funcdef": "def"}, "icepool.Symbols.count_subset": {"fullname": "icepool.Symbols.count_subset", "modulename": "icepool", "qualname": "Symbols.count_subset", "kind": "function", "doc": "<p>The number of times the divisor is contained in this multiset.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">divisor</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">empty_divisor</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "icepool.Symbols.modulo_counts": {"fullname": "icepool.Symbols.modulo_counts", "modulename": "icepool", "qualname": "Symbols.modulo_counts", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">collection</span><span class=\"o\">.</span><span class=\"n\">symbols</span><span class=\"o\">.</span><span class=\"n\">Symbols</span>:</span></span>", "funcdef": "def"}, "icepool.Symbols.issubset": {"fullname": "icepool.Symbols.issubset", "modulename": "icepool", "qualname": "Symbols.issubset", "kind": "function", "doc": "<p>Whether <code>self</code> is a subset of the other.</p>\n\n<p>Same as <code>&lt;=</code>.</p>\n\n<p>Note that the <code>&lt;</code> and <code>&gt;</code> operators are lexicographic orderings,\nnot proper subset relations.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "icepool.Symbols.issuperset": {"fullname": "icepool.Symbols.issuperset", "modulename": "icepool", "qualname": "Symbols.issuperset", "kind": "function", "doc": "<p>Whether <code>self</code> is a superset of the other.</p>\n\n<p>Same as <code>&gt;=</code>.</p>\n\n<p>Note that the <code>&lt;</code> and <code>&gt;</code> operators are lexicographic orderings,\nnot proper subset relations.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "icepool.Symbols.isdisjoint": {"fullname": "icepool.Symbols.isdisjoint", "modulename": "icepool", "qualname": "Symbols.isdisjoint", "kind": "function", "doc": "<p>Whether <code>self</code> has any positive elements in common with the other.</p>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>ValueError if either has negative elements.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "icepool.Symbols.has_negative_counts": {"fullname": "icepool.Symbols.has_negative_counts", "modulename": "icepool", "qualname": "Symbols.has_negative_counts", "kind": "function", "doc": "<p>Whether any counts are negative.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "icepool.Symbols.count": {"fullname": "icepool.Symbols.count", "modulename": "icepool", "qualname": "Symbols.count", "kind": "function", "doc": "<p>The total number of elements.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "icepool.Again": {"fullname": "icepool.Again", "modulename": "icepool", "qualname": "Again", "kind": "variable", "doc": "<p>A symbol indicating that the die should be rolled again, usually with some operation applied.</p>\n\n<p>This is designed to be used with the <code>Die()</code> constructor.\n<code>AgainExpression</code>s should not be fed to functions or methods other than\n<code>Die()</code>, but it can be used with operators. Examples:</p>\n\n<ul>\n<li><code>Again + 6</code>: Roll again and add 6.</li>\n<li><code>Again + Again</code>: Roll again twice and sum.</li>\n</ul>\n\n<p>The <code>again_count</code>, <code>again_depth</code>, and <code>again_end</code> arguments to <code>Die()</code>\naffect how these arguments are processed. At most one of <code>again_count</code> or\n<code>again_depth</code> may be provided; if neither are provided, the behavior is as\n`again_depth=1.</p>\n\n<p>For finer control over rolling processes, use e.g. <code>Die.map()</code> instead.</p>\n\n<h4 id=\"count-mode\">Count mode</h4>\n\n<p>When <code>again_count</code> is provided, we start with one roll queued and execute one \nroll at a time. For every <code>Again</code> we roll, we queue another roll.\nIf we run out of rolls, we sum the rolls to find the result. If the total number\nof rolls (not including the initial roll) would exceed <code>again_count</code>, we reroll\nthe entire process, effectively conditioning the process on not rolling more\nthan <code>again_count</code> extra dice.</p>\n\n<p>This mode only allows \"additive\" expressions to be used with <code>Again</code>, which\nmeans that only the following operators are allowed:</p>\n\n<ul>\n<li>Binary <code>+</code></li>\n<li><code>n @ AgainExpression</code>, where <code>n</code> is a non-negative <code>int</code> or <code>Population</code>.</li>\n</ul>\n\n<p>Furthermore, the <code>+</code> operator is assumed to be associative and commutative.\nFor example, <code>str</code> or <code>tuple</code> outcomes will not produce elements with a definite\norder.</p>\n\n<h4 id=\"depth-mode\">Depth mode</h4>\n\n<p>When <code>again_depth=0</code>, <code>again_end</code> is directly substituted\nfor each occurence of <code>Again</code>. For other values of <code>again_depth</code>, the result for\n<code>again_depth-1</code> is substituted for each occurence of <code>Again</code>.</p>\n\n<p>If <code>again_end=icepool.Reroll</code>, then any <code>AgainExpression</code>s in the final depth\nare rerolled.</p>\n\n<h4 id=\"rerolls\">Rerolls</h4>\n\n<p><code>Reroll</code> only rerolls that particular die, not the entire process. Any such\nrerolls do not count against the <code>again_count</code> or <code>again_depth</code> limit.</p>\n\n<p>If <code>again_end=icepool.Reroll</code>:</p>\n\n<ul>\n<li>Count mode: Any result that would cause the number of rolls to exceed\n<code>again_count</code> is rerolled.</li>\n<li>Depth mode: Any <code>AgainExpression</code>s in the final depth level are rerolled.</li>\n</ul>\n", "annotation": ": Final", "default_value": "&lt;icepool.population.again.AgainExpression object&gt;"}, "icepool.CountsKeysView": {"fullname": "icepool.CountsKeysView", "modulename": "icepool", "qualname": "CountsKeysView", "kind": "class", "doc": "<p>This functions as both a <code>KeysView</code> and a <code>Sequence</code>.</p>\n", "bases": "typing.KeysView[~T], typing.Sequence[~T]"}, "icepool.CountsKeysView.__init__": {"fullname": "icepool.CountsKeysView.__init__", "modulename": "icepool", "qualname": "CountsKeysView.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">counts</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">collection</span><span class=\"o\">.</span><span class=\"n\">counts</span><span class=\"o\">.</span><span class=\"n\">Counts</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span></span>)</span>"}, "icepool.CountsValuesView": {"fullname": "icepool.CountsValuesView", "modulename": "icepool", "qualname": "CountsValuesView", "kind": "class", "doc": "<p>This functions as both a <code>ValuesView</code> and a <code>Sequence</code>.</p>\n", "bases": "typing.ValuesView[int], typing.Sequence[int]"}, "icepool.CountsValuesView.__init__": {"fullname": "icepool.CountsValuesView.__init__", "modulename": "icepool", "qualname": "CountsValuesView.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">counts</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">collection</span><span class=\"o\">.</span><span class=\"n\">counts</span><span class=\"o\">.</span><span class=\"n\">Counts</span></span>)</span>"}, "icepool.CountsItemsView": {"fullname": "icepool.CountsItemsView", "modulename": "icepool", "qualname": "CountsItemsView", "kind": "class", "doc": "<p>This functions as both an <code>ItemsView</code> and a <code>Sequence</code>.</p>\n", "bases": "typing.ItemsView[~T, int], typing.Sequence[tuple[~T, int]]"}, "icepool.CountsItemsView.__init__": {"fullname": "icepool.CountsItemsView.__init__", "modulename": "icepool", "qualname": "CountsItemsView.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">counts</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">collection</span><span class=\"o\">.</span><span class=\"n\">counts</span><span class=\"o\">.</span><span class=\"n\">Counts</span></span>)</span>"}, "icepool.from_cumulative": {"fullname": "icepool.from_cumulative", "modulename": "icepool", "qualname": "from_cumulative", "kind": "function", "doc": "<p>Constructs a <code>Die</code> from a sequence of cumulative values.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>outcomes:</strong>  The outcomes of the resulting die. Sorted order is recommended\nbut not necessary.</li>\n<li><strong>cumulative:</strong>  The cumulative values (inclusive) of the outcomes in the\norder they are given to this function. These may be:\n<ul>\n<li><code>int</code> cumulative quantities.</li>\n<li>Dice representing the cumulative distribution at that point.</li>\n</ul></li>\n<li><strong>reverse:</strong>  Iff true, both of the arguments will be reversed. This allows\ne.g. constructing using a survival distribution.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">outcomes</span><span class=\"p\">:</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">cumulative</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]]]</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">reverse</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.from_rv": {"fullname": "icepool.from_rv", "modulename": "icepool", "qualname": "from_rv", "kind": "function", "doc": "<p>Constructs a <code>Die</code> from a rv object (as <code>scipy.stats</code>).</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>rv:</strong>  A rv object (as <code>scipy.stats</code>).</li>\n<li><strong>outcomes:</strong>  An iterable of <code>int</code>s or <code>float</code>s that will be the outcomes\nof the resulting <code>Die</code>.\nIf the distribution is discrete, outcomes must be <code>int</code>s.</li>\n<li><strong>denominator:</strong>  The denominator of the resulting <code>Die</code> will be set to this.</li>\n<li><strong>**kwargs:</strong>  These will be forwarded to <code>rv.cdf()</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">rv</span>,</span><span class=\"param\">\t<span class=\"n\">outcomes</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">denominator</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.lowest": {"fullname": "icepool.lowest", "modulename": "icepool", "qualname": "lowest", "kind": "function", "doc": "<p>The lowest outcome among the rolls, or the sum of some of the lowest.</p>\n\n<p>The outcomes should support addition and multiplication if <code>keep != 1</code>.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>args:</strong>  Dice or individual outcomes in a single iterable, or as two or\nmore separate arguments. Similar to the built-in <code>min()</code>.</li>\n<li><strong>keep, drop:</strong>  These arguments work together:\n<ul>\n<li>If neither are provided, the single lowest die will be taken.</li>\n<li>If only <code>keep</code> is provided, the <code>keep</code> lowest dice will be summed.</li>\n<li>If only <code>drop</code> is provided, the <code>drop</code> lowest dice will be dropped\nand the rest will be summed.</li>\n<li>If both are provided, <code>drop</code> lowest dice will be dropped, then\nthe next <code>keep</code> lowest dice will be summed.</li>\n</ul></li>\n<li><strong>default:</strong>  If an empty iterable is provided, the result will be a die that\nalways rolls this value.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>ValueError if an empty iterable is provided with no <code>default</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">arg0</span>,</span><span class=\"param\">\t<span class=\"o\">/</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">more_args</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">keep</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">drop</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">default</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.highest": {"fullname": "icepool.highest", "modulename": "icepool", "qualname": "highest", "kind": "function", "doc": "<p>The highest outcome among the rolls, or the sum of some of the highest.</p>\n\n<p>The outcomes should support addition and multiplication if <code>keep != 1</code>.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>args:</strong>  Dice or individual outcomes in a single iterable, or as two or\nmore separate arguments. Similar to the built-in <code>max()</code>.</li>\n<li><strong>keep, drop:</strong>  These arguments work together:\n<ul>\n<li>If neither are provided, the single highest die will be taken.</li>\n<li>If only <code>keep</code> is provided, the <code>keep</code> highest dice will be summed.</li>\n<li>If only <code>drop</code> is provided, the <code>drop</code> highest dice will be dropped\nand the rest will be summed.</li>\n<li>If both are provided, <code>drop</code> highest dice will be dropped, then\nthe next <code>keep</code> highest dice will be summed.</li>\n</ul></li>\n<li><strong>drop:</strong>  This number of highest dice will be dropped before keeping dice\nto be summed.</li>\n<li><strong>default:</strong>  If an empty iterable is provided, the result will be a die that\nalways rolls this value.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>ValueError if an empty iterable is provided with no <code>default</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">arg0</span>,</span><span class=\"param\">\t<span class=\"o\">/</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">more_args</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">keep</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">drop</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">default</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.middle": {"fullname": "icepool.middle", "modulename": "icepool", "qualname": "middle", "kind": "function", "doc": "<p>The middle of the outcomes among the rolls, or the sum of some of the middle.</p>\n\n<p>The outcomes should support addition and multiplication if <code>keep != 1</code>.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>args:</strong>  Dice or individual outcomes in a single iterable, or as two or\nmore separate arguments.</li>\n<li><strong>keep:</strong>  The number of outcomes to sum.</li>\n<li><strong>tie:</strong>  What to do if <code>keep</code> is odd but the the number of args is even, or\nvice versa.\n<ul>\n<li>'error' (default): Raises <code>IndexError</code>.</li>\n<li>'high': The higher outcome is taken.</li>\n<li>'low': The lower outcome is taken.</li>\n</ul></li>\n<li><strong>default:</strong>  If an empty iterable is provided, the result will be a die that\nalways rolls this value.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>ValueError if an empty iterable is provided with no <code>default</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">arg0</span>,</span><span class=\"param\">\t<span class=\"o\">/</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">more_args</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">keep</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">tie</span><span class=\"p\">:</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;error&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;high&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;low&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;error&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">default</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.min_outcome": {"fullname": "icepool.min_outcome", "modulename": "icepool", "qualname": "min_outcome", "kind": "function", "doc": "<p>The minimum outcome among the dice.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">dice</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "icepool.max_outcome": {"fullname": "icepool.max_outcome", "modulename": "icepool", "qualname": "max_outcome", "kind": "function", "doc": "<p>The maximum outcome among the dice.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">dice</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "icepool.align": {"fullname": "icepool.align", "modulename": "icepool", "qualname": "align", "kind": "function", "doc": "<p>Pads dice with zero quantities so that all have the same set of outcomes.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>*dice:</strong>  Any number of dice or single outcomes convertible to dice.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A tuple of aligned dice.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">dice</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"o\">...</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.align_range": {"fullname": "icepool.align_range", "modulename": "icepool", "qualname": "align_range", "kind": "function", "doc": "<p>Pads dice with zero quantities so that all have the same set of consecutive <code>int</code> outcomes.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>*dice:</strong>  Any number of dice or single outcomes convertible to dice.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A tuple of aligned dice.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">dice</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"o\">...</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.commonize_denominator": {"fullname": "icepool.commonize_denominator", "modulename": "icepool", "qualname": "commonize_denominator", "kind": "function", "doc": "<p>Scale the weights of the dice so that all of them have the same denominator.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>*dice:</strong>  Any number of dice or single outcomes convertible to dice.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A tuple of dice with the same denominator.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">dice</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"o\">...</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.reduce": {"fullname": "icepool.reduce", "modulename": "icepool", "qualname": "reduce", "kind": "function", "doc": "<p>Applies a function of two arguments cumulatively to a sequence of dice.</p>\n\n<p>Analogous to the\n<a href=\"https://docs.python.org/3/library/functools.html#functools.reduce\"><code>functools</code> function of the same name.</a></p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>function:</strong>  The function to map. The function should take two arguments,\nwhich are an outcome from each of two dice, and produce an outcome\nof the same type. It may also return <code>Reroll</code>, in which case the\nentire sequence is effectively rerolled.</li>\n<li><strong>dice:</strong>  A sequence of dice to map the function to, from left to right.</li>\n<li><strong>initial:</strong>  If provided, this will be placed at the front of the sequence\nof dice.</li>\n<li><strong>again_count, again_depth, again_end:</strong>  Forwarded to the final die constructor.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">function</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">RerollType</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">dice</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]]]</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">initial</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.accumulate": {"fullname": "icepool.accumulate", "modulename": "icepool", "qualname": "accumulate", "kind": "function", "doc": "<p>Applies a function of two arguments cumulatively to a sequence of dice, yielding each result in turn.</p>\n\n<p>Analogous to the\n<a href=\"https://docs.python.org/3/library/itertools.html#itertools.accumulate\"><code>itertools function of the same name</code></a>\n, though with no default function and\nthe same parameter order as <code>reduce()</code>.</p>\n\n<p>The number of results is equal to the number of elements of <code>dice</code>, with\none additional element if <code>initial</code> is provided.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>function:</strong>  The function to map. The function should take two arguments,\nwhich are an outcome from each of two dice.</li>\n<li><strong>dice:</strong>  A sequence of dice to map the function to, from left to right.</li>\n<li><strong>initial:</strong>  If provided, this will be placed at the front of the sequence\nof dice.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">function</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]]]</span>,</span><span class=\"param\">\t<span class=\"n\">dice</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]]]</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">initial</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "icepool.map": {"fullname": "icepool.map", "modulename": "icepool", "qualname": "map", "kind": "function", "doc": "<p>Applies <code>func(outcome_of_die_0, outcome_of_die_1, ...)</code> for all joint outcomes, returning a Die.</p>\n\n<p>See <code>map_function</code> for a decorator version of this.</p>\n\n<p>Example: <code>map(lambda a, b: a + b, d6, d6)</code> is the same as d6 + d6.</p>\n\n<p><code>map()</code> is flexible but not very efficient for more than a few dice.\nIf at all possible, use <code>reduce()</code>, <code>MultisetExpression</code> methods, and/or\n<code>MultisetEvaluator</code>s. Even <code>Pool.expand()</code> (which sorts rolls) is more\nefficient than using <code>map</code> on the dice in order.</p>\n\n<p><code>Again</code> can be used but is not recommended with <code>repeat</code> other than 1.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>repl:</strong>  One of the following:\n<ul>\n<li>A callable that takes in one outcome per element of args and\nproduces a new outcome.</li>\n<li>A mapping from old outcomes to new outcomes.\nUnmapped old outcomes stay the same.\nIn this case args must have exactly one element.\nAs with the <code>Die</code> constructor, the new outcomes:</li>\n<li>May be dice rather than just single outcomes.</li>\n<li>The special value <code>icepool.Reroll</code> will reroll that old outcome.</li>\n<li><code>tuples</code> containing <code>Population</code>s will be <code>tupleize</code>d into\n<code>Population</code>s of <code>tuple</code>s.\nThis does not apply to subclasses of <code>tuple</code>s such as <code>namedtuple</code>\nor other classes such as <code>Vector</code>.</li>\n</ul></li>\n<li><strong>*args:</strong>  <code>func</code> will be called with all joint outcomes of these.\nAllowed arg types are:\n<ul>\n<li>Single outcome.</li>\n<li><code>Die</code>. All outcomes will be sent to <code>func</code>.</li>\n<li><code>MultisetExpression</code>. All sorted tuples of outcomes will be sent\nto <code>func</code>, as <code>MultisetExpression.expand()</code>. The expression must\nbe fully bound.</li>\n</ul></li>\n<li><strong>star:</strong>  If <code>True</code>, the first of the args will be unpacked before giving\nthem to <code>func</code>.\nIf not provided, it will be guessed based on the signature of <code>func</code>\nand the number of arguments.</li>\n<li><p><strong>repeat:</strong>  This will be repeated with the same arguments on the\nresult this many times, except the first of <code>args</code> will be replaced\nby the result of the previous iteration.</p>\n\n<p>Note that returning <code>Reroll</code> from <code>repl</code> will effectively reroll all\narguments, including the first argument which represents the result\nof the process up to this point. If you only want to reroll the\ncurrent stage, you can nest another <code>map</code> inside <code>repl</code>.</p>\n\n<p>EXPERIMENTAL: If set to <code>None</code>, the result will be as if this\nwere repeated an infinite number of times. In this case, the\nresult will be in simplest form.</p></li>\n<li><strong>again_count, again_depth, again_end:</strong>  Forwarded to the final die constructor.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">repl</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">RerollType</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">again</span><span class=\"o\">.</span><span class=\"n\">AgainExpression</span><span class=\"p\">]],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">RerollType</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">again</span><span class=\"o\">.</span><span class=\"n\">AgainExpression</span><span class=\"p\">]]]</span>,</span><span class=\"param\">\t<span class=\"o\">/</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Outcome</span> <span class=\"o\">|</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span> <span class=\"o\">|</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"n\">multiset_expression</span><span class=\"o\">.</span><span class=\"n\">MultisetExpression</span>,</span><span class=\"param\">\t<span class=\"n\">star</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">repeat</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">again_count</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">again_depth</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">again_end</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">RerollType</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.map_function": {"fullname": "icepool.map_function", "modulename": "icepool", "qualname": "map_function", "kind": "function", "doc": "<p>Decorator that turns a function that takes outcomes into a function that takes dice.</p>\n\n<p>The result must be a <code>Die</code>.</p>\n\n<p>This is basically a decorator version of <code>map()</code> and produces behavior\nsimilar to AnyDice functions, though Icepool has different typing rules\namong other differences.</p>\n\n<p><code>map_function</code> can either be used with no arguments:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nd\">@map_function</span>\n<span class=\"k\">def</span> <span class=\"nf\">explode_six</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"mi\">6</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"mi\">6</span> <span class=\"o\">+</span> <span class=\"n\">Again</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">x</span>\n\n<span class=\"n\">explode_six</span><span class=\"p\">(</span><span class=\"n\">d6</span><span class=\"p\">,</span> <span class=\"n\">again_depth</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Or with keyword arguments, in which case the extra arguments are bound:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nd\">@map_function</span><span class=\"p\">(</span><span class=\"n\">again_depth</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">explode_six</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"mi\">6</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"mi\">6</span> <span class=\"o\">+</span> <span class=\"n\">Again</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">x</span>\n\n<span class=\"n\">explode_six</span><span class=\"p\">(</span><span class=\"n\">d6</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>again_count, again_depth, again_end:</strong>  Forwarded to the final die constructor.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">function</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">RerollType</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">again</span><span class=\"o\">.</span><span class=\"n\">AgainExpression</span><span class=\"p\">]]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">/</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">star</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">repeat</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">again_count</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">again_depth</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">again_end</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">RerollType</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]],</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]]]]</span>:</span></span>", "funcdef": "def"}, "icepool.map_and_time": {"fullname": "icepool.map_and_time", "modulename": "icepool", "qualname": "map_and_time", "kind": "function", "doc": "<p>Repeatedly map outcomes of the state to other outcomes, while also\ncounting timesteps.</p>\n\n<p>This is useful for representing processes.</p>\n\n<p>The outcomes of the result are  <code>(outcome, time)</code>, where <code>time</code> is the\nnumber of repeats needed to reach an absorbing outcome (an outcome that\nonly leads to itself), or <code>repeat</code>, whichever is lesser.</p>\n\n<p>This will return early if it reaches a fixed point.\nTherefore, you can set <code>repeat</code> equal to the maximum number of\ntime you could possibly be interested in without worrying about\nit causing extra computations after the fixed point.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>repl:</strong>  One of the following:\n<ul>\n<li>A callable returning a new outcome for each old outcome.</li>\n<li>A mapping from old outcomes to new outcomes.\nUnmapped old outcomes stay the same.\nThe new outcomes may be dice rather than just single outcomes.\nThe special value <code>icepool.Reroll</code> will reroll that old outcome.</li>\n</ul></li>\n<li><strong>star:</strong>  If <code>True</code>, the first of the args will be unpacked before giving\nthem to <code>func</code>.\nIf not provided, it will be guessed based on the signature of <code>func</code>\nand the number of arguments.</li>\n<li><strong>repeat:</strong>  This will be repeated with the same arguments on the result\nthis many times.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The <code>Die</code> after the modification.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">repl</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">RerollType</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">again</span><span class=\"o\">.</span><span class=\"n\">AgainExpression</span><span class=\"p\">]],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">RerollType</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">again</span><span class=\"o\">.</span><span class=\"n\">AgainExpression</span><span class=\"p\">]]]</span>,</span><span class=\"param\">\t<span class=\"n\">state</span>,</span><span class=\"param\">\t<span class=\"o\">/</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">extra_args</span>,</span><span class=\"param\">\t<span class=\"n\">star</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">repeat</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "icepool.map_to_pool": {"fullname": "icepool.map_to_pool", "modulename": "icepool", "qualname": "map_to_pool", "kind": "function", "doc": "<p>EXPERIMENTAL: Applies <code>repl(outcome_of_die_0, outcome_of_die_1, ...)</code> for all joint outcomes, producing a MultisetGenerator.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>repl:</strong>  One of the following:\n<ul>\n<li>A callable that takes in one outcome per element of args and\nproduces a <code>MultisetGenerator</code> or something convertible to a <code>Pool</code>.</li>\n<li>A mapping from old outcomes to <code>MultisetGenerator</code> \nor something convertible to a <code>Pool</code>.\nIn this case args must have exactly one element.\nThe new outcomes may be dice rather than just single outcomes.\nThe special value <code>icepool.Reroll</code> will reroll that old outcome.</li>\n</ul></li>\n<li><strong>star:</strong>  If <code>True</code>, the first of the args will be unpacked before giving\nthem to <code>repl</code>.\nIf not provided, it will be guessed based on the signature of <code>repl</code>\nand the number of arguments.</li>\n<li><strong>denominator:</strong>  If provided, the denominator of the result will be this\nvalue. Otherwise it will be the minimum to correctly weight the\npools.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A <code>MultisetGenerator</code> representing the mixture of <code>Pool</code>s. Note<br />\n  that this is not technically a <code>Pool</code>, though it supports most of \n  the same operations.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  If <code>denominator</code> cannot be made consistent with the \nresulting mixture of pools.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">repl</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">multiset_generator</span><span class=\"o\">.</span><span class=\"n\">MultisetGenerator</span><span class=\"p\">,</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"o\">&lt;</span><span class=\"n\">RerollType</span><span class=\"o\">.</span><span class=\"n\">Reroll</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Reroll&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">]],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">multiset_generator</span><span class=\"o\">.</span><span class=\"n\">MultisetGenerator</span><span class=\"p\">,</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"o\">&lt;</span><span class=\"n\">RerollType</span><span class=\"o\">.</span><span class=\"n\">Reroll</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Reroll&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">]]]</span>,</span><span class=\"param\">\t<span class=\"o\">/</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Outcome</span> <span class=\"o\">|</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span> <span class=\"o\">|</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"n\">multiset_expression</span><span class=\"o\">.</span><span class=\"n\">MultisetExpression</span>,</span><span class=\"param\">\t<span class=\"n\">star</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">denominator</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">multiset_generator</span><span class=\"o\">.</span><span class=\"n\">MultisetGenerator</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "icepool.Reroll": {"fullname": "icepool.Reroll", "modulename": "icepool", "qualname": "Reroll", "kind": "variable", "doc": "<p>Indicates that an outcome should be rerolled (with unlimited depth).</p>\n\n<p>This can be used in place of outcomes in many places. See individual function\nand method descriptions for details.</p>\n\n<p>This effectively removes the outcome from the probability space, along with its\ncontribution to the denominator.</p>\n\n<p>This can be used for conditional probability by removing all outcomes not\nconsistent with the given observations.</p>\n\n<p>Operation in specific cases:</p>\n\n<ul>\n<li>When used with <code>Again</code>, only that stage is rerolled, not the entire <code>Again</code>\ntree.</li>\n<li>To reroll with limited depth, use <code>Die.reroll()</code>, or <code>Again</code> with no\nmodification.</li>\n<li>When used with <code>MultisetEvaluator</code>, the entire evaluation is rerolled.</li>\n</ul>\n", "annotation": ": Final", "default_value": "&lt;RerollType.Reroll: &#x27;Reroll&#x27;&gt;"}, "icepool.RerollType": {"fullname": "icepool.RerollType", "modulename": "icepool", "qualname": "RerollType", "kind": "class", "doc": "<p>The type of the Reroll singleton.</p>\n", "bases": "enum.Enum"}, "icepool.RerollType.Reroll": {"fullname": "icepool.RerollType.Reroll", "modulename": "icepool", "qualname": "RerollType.Reroll", "kind": "variable", "doc": "<p>Indicates an outcome should be rerolled (with unlimited depth).</p>\n", "default_value": "&lt;RerollType.Reroll: &#x27;Reroll&#x27;&gt;"}, "icepool.Pool": {"fullname": "icepool.Pool", "modulename": "icepool", "qualname": "Pool", "kind": "class", "doc": "<p>Represents a multiset of outcomes resulting from the roll of several dice.</p>\n\n<p>This should be used in conjunction with <code>MultisetEvaluator</code> to generate a\nresult.</p>\n\n<p>Note that operators are performed on the multiset of rolls, not the multiset\nof dice. For example, <code>d6.pool(3) - d6.pool(3)</code> is not an empty pool, but\nan expression meaning \"roll two pools of 3d6 and get the rolls from the\nfirst pool, with rolls in the second pool cancelling matching rolls in the\nfirst pool one-for-one\".</p>\n", "bases": "icepool.generator.keep.KeepGenerator[~T]"}, "icepool.Pool.__init__": {"fullname": "icepool.Pool.__init__", "modulename": "icepool", "qualname": "Pool.__init__", "kind": "function", "doc": "<p>Public constructor for a pool.</p>\n\n<p>Evaulation is most efficient when the dice are the same or same-side\ntruncations of each other. For example, d4, d6, d8, d10, d12 are all\nsame-side truncations of d12.</p>\n\n<p>It is permissible to create a <code>Pool</code> without providing dice, but not all\nevaluators will handle this case, especially if they depend on the\noutcome type. In this case you may want to provide a die with zero\nquantity.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><p><strong>dice:</strong>  The dice to put in the <code>Pool</code>. This can be one of the following:</p>\n\n<ul>\n<li>A <code>Sequence</code> of <code>Die</code> or outcomes.</li>\n<li>A <code>Mapping</code> of <code>Die</code> or outcomes to how many of that <code>Die</code> or\noutcome to put in the <code>Pool</code>.</li>\n</ul>\n\n<p>All outcomes within a <code>Pool</code> must be totally orderable.</p></li>\n<li><strong>times:</strong>  Multiplies the number of times each element of <code>dice</code> will\nbe put into the pool.\n<code>times</code> can either be a sequence of the same length as\n<code>outcomes</code> or a single <code>int</code> to apply to all elements of\n<code>outcomes</code>.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  If a bare <code>Deck</code> or <code>Die</code> argument is provided.\nA <code>Pool</code> of a single <code>Die</code> should constructed as <code>Pool([die])</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">dice</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"nb\">int</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">times</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span>)</span>"}, "icepool.Pool.clear_cache": {"fullname": "icepool.Pool.clear_cache", "modulename": "icepool", "qualname": "Pool.clear_cache", "kind": "function", "doc": "<p>Clears the global pool cache.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "icepool.Pool.raw_size": {"fullname": "icepool.Pool.raw_size", "modulename": "icepool", "qualname": "Pool.raw_size", "kind": "function", "doc": "<p>The number of dice in this pool before the keep_tuple is applied.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "icepool.Pool.denominator": {"fullname": "icepool.Pool.denominator", "modulename": "icepool", "qualname": "Pool.denominator", "kind": "function", "doc": "<p>The total weight of all paths through this generator.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "icepool.Pool.unique_dice": {"fullname": "icepool.Pool.unique_dice", "modulename": "icepool", "qualname": "Pool.unique_dice", "kind": "function", "doc": "<p>The collection of unique dice in this pool.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Collection</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "icepool.Pool.outcomes": {"fullname": "icepool.Pool.outcomes", "modulename": "icepool", "qualname": "Pool.outcomes", "kind": "function", "doc": "<p>The union of possible outcomes among all dice in this pool in ascending order.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Pool.output_arity": {"fullname": "icepool.Pool.output_arity", "modulename": "icepool", "qualname": "Pool.output_arity", "kind": "function", "doc": "<p>The number of multisets/counts generated. Must be constant.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "icepool.Pool.min_outcome": {"fullname": "icepool.Pool.min_outcome", "modulename": "icepool", "qualname": "Pool.min_outcome", "kind": "function", "doc": "<p>The min outcome among all dice in this pool.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "icepool.Pool.max_outcome": {"fullname": "icepool.Pool.max_outcome", "modulename": "icepool", "qualname": "Pool.max_outcome", "kind": "function", "doc": "<p>The max outcome among all dice in this pool.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "icepool.Pool.additive_union": {"fullname": "icepool.Pool.additive_union", "modulename": "icepool", "qualname": "Pool.additive_union", "kind": "function", "doc": "<p>The combined elements from all of the multisets.</p>\n\n<p>Same as <code>a + b + c + ...</code>.</p>\n\n<p>Any resulting counts that would be negative are set to zero.</p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"o\">-&gt;</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"n\">multiset_expression</span><span class=\"o\">.</span><span class=\"n\">MultisetExpression</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"n\">multiset_expression</span><span class=\"o\">.</span><span class=\"n\">MultisetExpression</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.standard_pool": {"fullname": "icepool.standard_pool", "modulename": "icepool", "qualname": "standard_pool", "kind": "function", "doc": "<p>A <code>Pool</code> of standard dice (e.g. d6, d8...).</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>die_sizes:</strong>  A collection of die sizes, which will put one die of that\nsizes in the pool for each element.\nOr, a mapping of die sizes to how many dice of that size to put\ninto the pool.\nIf empty, the pool will be considered to consist of zero zeros.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">die_sizes</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Collection</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">pool</span><span class=\"o\">.</span><span class=\"n\">Pool</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.MultisetGenerator": {"fullname": "icepool.MultisetGenerator", "modulename": "icepool", "qualname": "MultisetGenerator", "kind": "class", "doc": "<p>Abstract base class for generating one or more multisets.</p>\n\n<p>These include dice pools (<code>Pool</code>) and card deals (<code>Deal</code>). Most likely you\nwill be using one of these two rather than writing your own subclass of\n<code>MultisetGenerator</code>.</p>\n\n<p>The multisets are incrementally generated one outcome at a time.\nFor each outcome, a <code>count</code> and <code>weight</code> are generated, along with a\nsmaller generator to produce the rest of the multiset.</p>\n\n<p>You can perform simple evaluations using built-in operators and methods in\nthis class.\nFor more complex evaluations and better performance, particularly when\nmultiple generators are involved, you will want to write your own subclass\nof <code>MultisetEvaluator</code>.</p>\n", "bases": "typing.Generic[~T, ~Qs], icepool.expression.multiset_expression.MultisetExpression[~T]"}, "icepool.MultisetGenerator.outcomes": {"fullname": "icepool.MultisetGenerator.outcomes", "modulename": "icepool", "qualname": "MultisetGenerator.outcomes", "kind": "function", "doc": "<p>The possible outcomes that could be generated, in ascending order.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.MultisetGenerator.output_arity": {"fullname": "icepool.MultisetGenerator.output_arity", "modulename": "icepool", "qualname": "MultisetGenerator.output_arity", "kind": "function", "doc": "<p>The number of multisets/counts generated. Must be constant.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "icepool.MultisetGenerator.denominator": {"fullname": "icepool.MultisetGenerator.denominator", "modulename": "icepool", "qualname": "MultisetGenerator.denominator", "kind": "function", "doc": "<p>The total weight of all paths through this generator.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "icepool.MultisetGenerator.equals": {"fullname": "icepool.MultisetGenerator.equals", "modulename": "icepool", "qualname": "MultisetGenerator.equals", "kind": "function", "doc": "<p>Whether this generator is logically equal to another object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "icepool.MultisetGenerator.order": {"fullname": "icepool.MultisetGenerator.order", "modulename": "icepool", "qualname": "MultisetGenerator.order", "kind": "function", "doc": "<p>Any ordering that is required by this expression.</p>\n\n<p>This should check any previous expressions for their order, and\nraise a ValueError for any incompatibilities.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The required order.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Order</span>:</span></span>", "funcdef": "def"}, "icepool.MultisetGenerator.min_outcome": {"fullname": "icepool.MultisetGenerator.min_outcome", "modulename": "icepool", "qualname": "MultisetGenerator.min_outcome", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "icepool.MultisetGenerator.max_outcome": {"fullname": "icepool.MultisetGenerator.max_outcome", "modulename": "icepool", "qualname": "MultisetGenerator.max_outcome", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "icepool.MultisetGenerator.sample": {"fullname": "icepool.MultisetGenerator.sample", "modulename": "icepool", "qualname": "MultisetGenerator.sample", "kind": "function", "doc": "<p>EXPERIMENTAL: A single random sample from this generator.</p>\n\n<p>This uses the standard <code>random</code> package and is not cryptographically\nsecure.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A sorted tuple of outcomes for each output of this generator.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Alignment": {"fullname": "icepool.Alignment", "modulename": "icepool", "qualname": "Alignment", "kind": "class", "doc": "<p>A generator that does not output any counts.</p>\n\n<p>This can be used to enforce that certain outcomes are seen without otherwise\naffecting a multiset evaluation.</p>\n", "bases": "icepool.generator.multiset_generator.MultisetGenerator[~T, tuple[()]]"}, "icepool.Alignment.__init__": {"fullname": "icepool.Alignment.__init__", "modulename": "icepool", "qualname": "Alignment.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">outcomes</span><span class=\"p\">:</span> <span class=\"n\">Collection</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span></span>)</span>"}, "icepool.Alignment.outcomes": {"fullname": "icepool.Alignment.outcomes", "modulename": "icepool", "qualname": "Alignment.outcomes", "kind": "function", "doc": "<p>The possible outcomes that could be generated, in ascending order.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Alignment.output_arity": {"fullname": "icepool.Alignment.output_arity", "modulename": "icepool", "qualname": "Alignment.output_arity", "kind": "function", "doc": "<p>The number of multisets/counts generated. Must be constant.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "icepool.Alignment.denominator": {"fullname": "icepool.Alignment.denominator", "modulename": "icepool", "qualname": "Alignment.denominator", "kind": "function", "doc": "<p>The total weight of all paths through this generator.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "icepool.MultisetExpression": {"fullname": "icepool.MultisetExpression", "modulename": "icepool", "qualname": "MultisetExpression", "kind": "class", "doc": "<p>Abstract base class representing an expression that operates on multisets.</p>\n\n<p>Expression methods can be applied to <code>MultisetGenerator</code>s to do simple\nevaluations. For joint evaluations, try <code>multiset_function</code>.</p>\n\n<p>Use the provided operations to build up more complicated\nexpressions, or to attach a final evaluator.</p>\n\n<p>Operations include:</p>\n\n<table>\n<thead>\n<tr>\n  <th style=\"text-align:left;\">Operation</th>\n  <th style=\"text-align:left;\">Count / notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td style=\"text-align:left;\"><code>additive_union</code>, <code>+</code></td>\n  <td style=\"text-align:left;\"><code>l + r</code></td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\"><code>difference</code>, <code>-</code></td>\n  <td style=\"text-align:left;\"><code>l - r</code></td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\"><code>intersection</code>, <code>&amp;</code></td>\n  <td style=\"text-align:left;\"><code>min(l, r)</code></td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\"><code>union</code>, <code>|</code></td>\n  <td style=\"text-align:left;\"><code>max(l, r)</code></td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\"><code>symmetric_difference</code>, <code>^</code></td>\n  <td style=\"text-align:left;\"><code>abs(l - r)</code></td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\"><code>multiply_counts</code>, <code>*</code></td>\n  <td style=\"text-align:left;\"><code>count * n</code></td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\"><code>divide_counts</code>, <code>//</code></td>\n  <td style=\"text-align:left;\"><code>count // n</code></td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\"><code>modulo_counts</code>, <code>%</code></td>\n  <td style=\"text-align:left;\"><code>count % n</code></td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\"><code>keep_counts</code></td>\n  <td style=\"text-align:left;\"><code>count if count &gt;= n else 0</code> etc.</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\">unary <code>+</code></td>\n  <td style=\"text-align:left;\">same as <code>keep_counts_ge(0)</code></td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\">unary <code>-</code></td>\n  <td style=\"text-align:left;\">reverses the sign of all counts</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\"><code>unique</code></td>\n  <td style=\"text-align:left;\"><code>min(count, n)</code></td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\"><code>keep_outcomes</code></td>\n  <td style=\"text-align:left;\"><code>count if outcome in t else 0</code></td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\"><code>drop_outcomes</code></td>\n  <td style=\"text-align:left;\"><code>count if outcome not in t else 0</code></td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\"><code>map_counts</code></td>\n  <td style=\"text-align:left;\"><code>f(outcome, *counts)</code></td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\"><code>keep</code>, <code>[]</code></td>\n  <td style=\"text-align:left;\">less capable than <code>KeepGenerator</code> version</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\"><code>highest</code></td>\n  <td style=\"text-align:left;\">less capable than <code>KeepGenerator</code> version</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\"><code>lowest</code></td>\n  <td style=\"text-align:left;\">less capable than <code>KeepGenerator</code> version</td>\n</tr>\n</tbody>\n</table>\n\n<table>\n<thead>\n<tr>\n  <th style=\"text-align:left;\">Evaluator</th>\n  <th style=\"text-align:left;\">Summary</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td style=\"text-align:left;\"><code>issubset</code>, <code>&lt;=</code></td>\n  <td style=\"text-align:left;\">Whether the left side's counts are all &lt;= their counterparts on the right</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\"><code>issuperset</code>, <code>&gt;=</code></td>\n  <td style=\"text-align:left;\">Whether the left side's counts are all &gt;= their counterparts on the right</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\"><code>isdisjoint</code></td>\n  <td style=\"text-align:left;\">Whether the left side has no positive counts in common with the right side</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\"><code>&lt;</code></td>\n  <td style=\"text-align:left;\">As <code>&lt;=</code>, but <code>False</code> if the two multisets are equal</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\"><code>&gt;</code></td>\n  <td style=\"text-align:left;\">As <code>&gt;=</code>, but <code>False</code> if the two multisets are equal</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\"><code>==</code></td>\n  <td style=\"text-align:left;\">Whether the left side has all the same counts as the right side</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\"><code>!=</code></td>\n  <td style=\"text-align:left;\">Whether the left side has any different counts to the right side</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\"><code>expand</code></td>\n  <td style=\"text-align:left;\">All elements in ascending order</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\"><code>sum</code></td>\n  <td style=\"text-align:left;\">Sum of all elements</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\"><code>count</code></td>\n  <td style=\"text-align:left;\">The number of elements</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\"><code>any</code></td>\n  <td style=\"text-align:left;\">Whether there is at least 1 element</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\"><code>highest_outcome_and_count</code></td>\n  <td style=\"text-align:left;\">The highest outcome and how many of that outcome</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\"><code>all_counts</code></td>\n  <td style=\"text-align:left;\">All counts in descending order</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\"><code>largest_count</code></td>\n  <td style=\"text-align:left;\">The single largest count, aka x-of-a-kind</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\"><code>largest_count_and_outcome</code></td>\n  <td style=\"text-align:left;\">Same but also with the corresponding outcome</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\"><code>count_subset</code>, <code>//</code></td>\n  <td style=\"text-align:left;\">The number of times the right side is contained in the left side</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\"><code>largest_straight</code></td>\n  <td style=\"text-align:left;\">Length of longest consecutive sequence</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\"><code>largest_straight_and_outcome</code></td>\n  <td style=\"text-align:left;\">Same but also with the corresponding outcome</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\"><code>all_straights</code></td>\n  <td style=\"text-align:left;\">Lengths of all consecutive sequences in descending order</td>\n</tr>\n</tbody>\n</table>\n", "bases": "abc.ABC, typing.Generic[-T_contra]"}, "icepool.MultisetExpression.order": {"fullname": "icepool.MultisetExpression.order", "modulename": "icepool", "qualname": "MultisetExpression.order", "kind": "function", "doc": "<p>Any ordering that is required by this expression.</p>\n\n<p>This should check any previous expressions for their order, and\nraise a ValueError for any incompatibilities.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The required order.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Order</span>:</span></span>", "funcdef": "def"}, "icepool.MultisetExpression.additive_union": {"fullname": "icepool.MultisetExpression.additive_union", "modulename": "icepool", "qualname": "MultisetExpression.additive_union", "kind": "function", "doc": "<p>The combined elements from all of the multisets.</p>\n\n<p>Same as <code>a + b + c + ...</code>.</p>\n\n<p>Any resulting counts that would be negative are set to zero.</p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"o\">-&gt;</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"n\">multiset_expression</span><span class=\"o\">.</span><span class=\"n\">MultisetExpression</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"n\">multiset_expression</span><span class=\"o\">.</span><span class=\"n\">MultisetExpression</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.MultisetExpression.difference": {"fullname": "icepool.MultisetExpression.difference", "modulename": "icepool", "qualname": "MultisetExpression.difference", "kind": "function", "doc": "<p>The elements from the left multiset that are not in any of the others.</p>\n\n<p>Same as <code>a - b - c - ...</code>.</p>\n\n<p>Any resulting counts that would be negative are set to zero.</p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"o\">-&gt;</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n\n<p>If no arguments are given, the result will be an empty multiset, i.e.\nall zero counts.</p>\n\n<p>Note that, as a multiset operation, this will only cancel elements 1:1.\nIf you want to drop all elements in a set of outcomes regardless of\ncount, either use <code>drop_outcomes()</code> instead, or use a large number of\ncounts on the right side.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"n\">multiset_expression</span><span class=\"o\">.</span><span class=\"n\">MultisetExpression</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"n\">multiset_expression</span><span class=\"o\">.</span><span class=\"n\">MultisetExpression</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.MultisetExpression.intersection": {"fullname": "icepool.MultisetExpression.intersection", "modulename": "icepool", "qualname": "MultisetExpression.intersection", "kind": "function", "doc": "<p>The elements that all the multisets have in common.</p>\n\n<p>Same as <code>a &amp; b &amp; c &amp; ...</code>.</p>\n\n<p>Any resulting counts that would be negative are set to zero.</p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">&amp;</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"o\">-&gt;</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n\n<p>Note that, as a multiset operation, this will only intersect elements\n1:1.\nIf you want to keep all elements in a set of outcomes regardless of\ncount, either use <code>keep_outcomes()</code> instead, or use a large number of\ncounts on the right side.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"n\">multiset_expression</span><span class=\"o\">.</span><span class=\"n\">MultisetExpression</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"n\">multiset_expression</span><span class=\"o\">.</span><span class=\"n\">MultisetExpression</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.MultisetExpression.union": {"fullname": "icepool.MultisetExpression.union", "modulename": "icepool", "qualname": "MultisetExpression.union", "kind": "function", "doc": "<p>The most of each outcome that appear in any of the multisets.</p>\n\n<p>Same as <code>a | b | c | ...</code>.</p>\n\n<p>Any resulting counts that would be negative are set to zero.</p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"o\">-&gt;</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"n\">multiset_expression</span><span class=\"o\">.</span><span class=\"n\">MultisetExpression</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"n\">multiset_expression</span><span class=\"o\">.</span><span class=\"n\">MultisetExpression</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.MultisetExpression.symmetric_difference": {"fullname": "icepool.MultisetExpression.symmetric_difference", "modulename": "icepool", "qualname": "MultisetExpression.symmetric_difference", "kind": "function", "doc": "<p>The elements that appear in the left or right multiset but not both.</p>\n\n<p>Same as <code>a ^ b</code>.</p>\n\n<p>Specifically, this produces the absolute difference between counts.\nIf you don't want negative counts to be used from the inputs, you can\ndo <code>left.keep_counts('&gt;=', 0) ^ right.keep_counts('&gt;=', 0)</code>.</p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">^</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"o\">-&gt;</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"n\">multiset_expression</span><span class=\"o\">.</span><span class=\"n\">MultisetExpression</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"n\">multiset_expression</span><span class=\"o\">.</span><span class=\"n\">MultisetExpression</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.MultisetExpression.keep_outcomes": {"fullname": "icepool.MultisetExpression.keep_outcomes", "modulename": "icepool", "qualname": "MultisetExpression.keep_outcomes", "kind": "function", "doc": "<p>Keeps the elements in the target set of outcomes, and drops the rest by setting their counts to zero.</p>\n\n<p>This is similar to <code>intersection()</code>, except the right side is considered\nto have unlimited multiplicity.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>target:</strong>  A callable returning <code>True</code> iff the outcome should be kept,\nor an expression or collection of outcomes to keep.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">],</span> <span class=\"n\">Collection</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">],</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"n\">multiset_expression</span><span class=\"o\">.</span><span class=\"n\">MultisetExpression</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"n\">multiset_expression</span><span class=\"o\">.</span><span class=\"n\">MultisetExpression</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.MultisetExpression.drop_outcomes": {"fullname": "icepool.MultisetExpression.drop_outcomes", "modulename": "icepool", "qualname": "MultisetExpression.drop_outcomes", "kind": "function", "doc": "<p>Drops the elements in the target set of outcomes by setting their counts to zero, and keeps the rest.</p>\n\n<p>This is similar to <code>difference()</code>, except the right side is considered\nto have unlimited multiplicity.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>target:</strong>  A callable returning <code>True</code> iff the outcome should be\ndropped, or an expression or collection of outcomes to drop.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">],</span> <span class=\"n\">Collection</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">],</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"n\">multiset_expression</span><span class=\"o\">.</span><span class=\"n\">MultisetExpression</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"n\">multiset_expression</span><span class=\"o\">.</span><span class=\"n\">MultisetExpression</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.MultisetExpression.map_counts": {"fullname": "icepool.MultisetExpression.map_counts", "modulename": "icepool", "qualname": "MultisetExpression.map_counts", "kind": "function", "doc": "<p>Maps the counts to new counts.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>function:</strong>  A function that takes <code>outcome, *counts</code> and produces a\ncombined count.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"n\">multiset_expression</span><span class=\"o\">.</span><span class=\"n\">MultisetExpression</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">function</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"n\">multiset_expression</span><span class=\"o\">.</span><span class=\"n\">MultisetExpression</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.MultisetExpression.multiply_counts": {"fullname": "icepool.MultisetExpression.multiply_counts", "modulename": "icepool", "qualname": "MultisetExpression.multiply_counts", "kind": "function", "doc": "<p>Multiplies all counts by n.</p>\n\n<p>Same as <code>self * n</code>.</p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">Pool</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span> <span class=\"o\">*</span> <span class=\"mi\">2</span> <span class=\"o\">-&gt;</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"n\">multiset_expression</span><span class=\"o\">.</span><span class=\"n\">MultisetExpression</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.MultisetExpression.divide_counts": {"fullname": "icepool.MultisetExpression.divide_counts", "modulename": "icepool", "qualname": "MultisetExpression.divide_counts", "kind": "function", "doc": "<p>Divides all counts by n (rounding down).</p>\n\n<p>Same as <code>self // n</code>.</p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">Pool</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span> <span class=\"o\">//</span> <span class=\"mi\">2</span> <span class=\"o\">-&gt;</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"n\">multiset_expression</span><span class=\"o\">.</span><span class=\"n\">MultisetExpression</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.MultisetExpression.modulo_counts": {"fullname": "icepool.MultisetExpression.modulo_counts", "modulename": "icepool", "qualname": "MultisetExpression.modulo_counts", "kind": "function", "doc": "<p>Moduos all counts by n.</p>\n\n<p>Same as <code>self % n</code>.</p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">Pool</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">-&gt;</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"n\">multiset_expression</span><span class=\"o\">.</span><span class=\"n\">MultisetExpression</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.MultisetExpression.keep_counts": {"fullname": "icepool.MultisetExpression.keep_counts", "modulename": "icepool", "qualname": "MultisetExpression.keep_counts", "kind": "function", "doc": "<p>Keeps counts fitting the comparison, treating the rest as zero.</p>\n\n<p>For example, <code>expression.keep_counts('&gt;=', 2)</code> would keep pairs,\ntriplets, etc. and drop singles.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">Pool</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">keep_counts</span><span class=\"p\">(</span><span class=\"s1\">&#39;&gt;=&#39;</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>comparison:</strong>  The comparison to use.</li>\n<li><strong>n:</strong>  The number to compare counts against.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">comparison</span><span class=\"p\">:</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;==&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;!=&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&lt;=&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&lt;&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&gt;=&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&gt;&#39;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"n\">multiset_expression</span><span class=\"o\">.</span><span class=\"n\">MultisetExpression</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.MultisetExpression.unique": {"fullname": "icepool.MultisetExpression.unique", "modulename": "icepool", "qualname": "MultisetExpression.unique", "kind": "function", "doc": "<p>Counts each outcome at most <code>n</code> times.</p>\n\n<p>For example, <code>generator.unique(2)</code> would count each outcome at most\ntwice.</p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">Pool</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">unique</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"n\">multiset_expression</span><span class=\"o\">.</span><span class=\"n\">MultisetExpression</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.MultisetExpression.keep": {"fullname": "icepool.MultisetExpression.keep", "modulename": "icepool", "qualname": "MultisetExpression.keep", "kind": "function", "doc": "<p>Selects elements after drawing and sorting.</p>\n\n<p>This is less capable than the <code>KeepGenerator</code> version.\nIn particular, it does not know how many elements it is selecting from,\nso it must be anchored at the starting end. The advantage is that it\ncan be applied to any expression.</p>\n\n<p>The valid types of argument are:</p>\n\n<ul>\n<li>A <code>slice</code>. If both start and stop are provided, they must both be\nnon-negative or both be negative. step is not supported.</li>\n<li>A sequence of <code>int</code> with <code>...</code> (<code>Ellipsis</code>) at exactly one end.\nEach sorted element will be counted that many times, with the\n<code>Ellipsis</code> treated as enough zeros (possibly \"negative\") to\nfill the rest of the elements.</li>\n<li>An <code>int</code>, which evaluates by taking the element at the specified\nindex. In this case the result is a <code>Die</code> (if fully bound) or a\n<code>MultisetEvaluator</code> (if there are free variables).</li>\n</ul>\n\n<p>Use the <code>[]</code> operator for the same effect as this method.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">slice</span><span class=\"p\">,</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"n\">ellipsis</span><span class=\"p\">],</span> <span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"n\">multiset_expression</span><span class=\"o\">.</span><span class=\"n\">MultisetExpression</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">],</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">],</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">evaluator</span><span class=\"o\">.</span><span class=\"n\">multiset_evaluator</span><span class=\"o\">.</span><span class=\"n\">MultisetEvaluator</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "icepool.MultisetExpression.lowest": {"fullname": "icepool.MultisetExpression.lowest", "modulename": "icepool", "qualname": "MultisetExpression.lowest", "kind": "function", "doc": "<p>Keep some of the lowest elements from this multiset and drop the rest.</p>\n\n<p>In contrast to the die and free function versions, this does not\nautomatically sum the dice. Use <code>.sum()</code> afterwards if you want to sum.\nAlternatively, you can perform some other evaluation.</p>\n\n<p>This requires the outcomes to be evaluated in ascending order.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>keep, drop:</strong>  These arguments work together:\n<ul>\n<li>If neither are provided, the single lowest element\nwill be kept.</li>\n<li>If only <code>keep</code> is provided, the <code>keep</code> lowest elements\nwill be kept.</li>\n<li>If only <code>drop</code> is provided, the <code>drop</code> lowest elements\nwill be dropped and the rest will be kept.</li>\n<li>If both are provided, <code>drop</code> lowest elements will be dropped,\nthen the next <code>keep</code> lowest elements will be kept.</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">keep</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">drop</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"n\">multiset_expression</span><span class=\"o\">.</span><span class=\"n\">MultisetExpression</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.MultisetExpression.highest": {"fullname": "icepool.MultisetExpression.highest", "modulename": "icepool", "qualname": "MultisetExpression.highest", "kind": "function", "doc": "<p>Keep some of the highest elements from this multiset and drop the rest.</p>\n\n<p>In contrast to the die and free function versions, this does not\nautomatically sum the dice. Use <code>.sum()</code> afterwards if you want to sum.\nAlternatively, you can perform some other evaluation.</p>\n\n<p>This requires the outcomes to be evaluated in descending order.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>keep, drop:</strong>  These arguments work together:\n<ul>\n<li>If neither are provided, the single highest element\nwill be kept.</li>\n<li>If only <code>keep</code> is provided, the <code>keep</code> highest elements\nwill be kept.</li>\n<li>If only <code>drop</code> is provided, the <code>drop</code> highest elements\nwill be dropped and the rest will be kept.</li>\n<li>If both are provided, <code>drop</code> highest elements will be dropped, \nthen the next <code>keep</code> highest elements will be kept.</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">keep</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">drop</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"n\">multiset_expression</span><span class=\"o\">.</span><span class=\"n\">MultisetExpression</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.MultisetExpression.sort_match": {"fullname": "icepool.MultisetExpression.sort_match", "modulename": "icepool", "qualname": "MultisetExpression.sort_match", "kind": "function", "doc": "<p>EXPERIMENTAL: Matches elements of <code>self</code> with elements of <code>other</code> in sorted order, then keeps elements from <code>self</code> that fit <code>comparison</code> with their partner.</p>\n\n<p>Contrast <code>maximum_match()</code>, which first creates the maximum number of\npairs that fit the comparison, not necessarily in sorted order.</p>\n\n<p>Example: An attacker rolls 3d6 versus a defender's 2d6 in the game of\n<em>RISK</em>. Which pairs did the attacker win?</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">d6</span><span class=\"o\">.</span><span class=\"n\">pool</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">highest</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sort_match</span><span class=\"p\">(</span><span class=\"s1\">&#39;&gt;&#39;</span><span class=\"p\">,</span> <span class=\"n\">d6</span><span class=\"o\">.</span><span class=\"n\">pool</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p>Suppose the attacker rolled 5, 3, 2 and the defender 6, 1.\nIn this case the attacker's 2 would be dropped by <code>highest</code>,\nand then the 5 would be dropped since the attacker lost that pair,\nleaving the attacker's 3.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">Pool</span><span class=\"p\">([</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">highest</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sort_match</span><span class=\"p\">(</span><span class=\"s1\">&#39;&gt;&#39;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n\n<p>Extra elements: If <code>self</code> has more elements than <code>other</code>, whether the\nextra elements are kept depends on the <code>order</code> and <code>comparison</code>:</p>\n\n<ul>\n<li>Descending: <code>&gt;=</code>, <code>&gt;</code></li>\n<li>Ascending: <code>&lt;=</code>, <code>&lt;</code></li>\n</ul>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>comparison:</strong>  The comparison to filter by. If you want to drop rather\nthan keep, use the complementary comparison:\n<ul>\n<li>'==' vs. '!='</li>\n<li>'&lt;=' vs. '>'</li>\n<li>'>=' vs. '&lt;'</li>\n</ul></li>\n<li><strong>other:</strong>  The other multiset to match elements with.</li>\n<li><strong>order:</strong>  The order in which to sort before forming matches.\nDefault is descending.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">comparison</span><span class=\"p\">:</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;==&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;!=&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&lt;=&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&lt;&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&gt;=&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&gt;&#39;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"n\">multiset_expression</span><span class=\"o\">.</span><span class=\"n\">MultisetExpression</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">/</span>,</span><span class=\"param\">\t<span class=\"n\">order</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Order</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">Order</span><span class=\"o\">.</span><span class=\"n\">Descending</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"n\">multiset_expression</span><span class=\"o\">.</span><span class=\"n\">MultisetExpression</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.MultisetExpression.maximum_match": {"fullname": "icepool.MultisetExpression.maximum_match", "modulename": "icepool", "qualname": "MultisetExpression.maximum_match", "kind": "function", "doc": "<p>EXPERIMENTAL: Match elements of <code>self</code> with elements of <code>other</code> fitting the comparison, then keeps the matched or unmatched elements from <code>self</code>.</p>\n\n<p>As many pairs of elements will be matched as possible that fit the\n<code>comparison</code>. Contrast <code>sort_matched()</code>, which first creates pairs in\nsorted order and then filters them by <code>comparison</code>.</p>\n\n<p>Example: An attacker rolls a pool of 4d6 and a defender rolls a pool of \n3d6. Defender dice can be used to block attacker dice of equal or lesser\nvalue, and the defender prefers to block the highest attacker dice\npossible. Which attacker dice were not blocked?</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">d6</span><span class=\"o\">.</span><span class=\"n\">pool</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">maximum_match</span><span class=\"p\">(</span><span class=\"s1\">&#39;&lt;=&#39;</span><span class=\"p\">,</span> <span class=\"n\">d6</span><span class=\"o\">.</span><span class=\"n\">pool</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">keep</span><span class=\"o\">=</span><span class=\"s1\">&#39;unmatched&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n\n<p>Suppose the attacker rolls 6, 5, 3, 1 and the defender rolls 6, 4.\nThen the result should be [5, 1].</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">d6</span><span class=\"o\">.</span><span class=\"n\">pool</span><span class=\"p\">([</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">maximum_match</span><span class=\"p\">(</span><span class=\"s1\">&#39;&lt;=&#39;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"n\">keep</span><span class=\"o\">=</span><span class=\"s1\">&#39;unmatched&#39;</span><span class=\"p\">)</span>\n<span class=\"o\">-&gt;</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>comparison:</strong>  One of the following:\n<ul>\n<li>'==': The same as <code>intersection(other)</code> if <code>keep='matched'</code>,\nor <code>difference(other)</code> if <code>keep=unmatched</code>.</li>\n<li>'&lt;=': Elements of <code>self</code> will be matched with elements of\n<code>other</code> such that the element from <code>self</code> is &lt;= the element\nfrom <code>other</code>, but is otherwise as high as possible.\nThis requires that outcomes be evaluated in descending\norder.</li>\n<li><code>&lt;</code>: Elements of <code>self</code> will be matched with elements of\n<code>other</code> such that the element from <code>self</code> is &lt; the element\nfrom <code>other</code>, but is otherwise as high as possible.\nThis requires that outcomes be evaluated in descending\norder.</li>\n<li>'>=': Elements of <code>self</code> will be matched with elements of\n<code>other</code> such that the element from <code>self</code> is &gt;= the element\nfrom <code>other</code>, but is otherwise as low as possible.\nThis requires that outcomes be evaluated in ascending\norder.</li>\n<li><code>&gt;</code>: Elements of <code>self</code> will be matched with elements of\n<code>other</code> such that the element from <code>self</code> is &gt; the element\nfrom <code>other</code>, but is otherwise as low as possible.\nThis requires that outcomes be evaluated in ascending\norder.</li>\n</ul></li>\n<li><strong>other:</strong>  The other multiset to match elements with.</li>\n<li><strong>keep:</strong>  Whether 'matched' or 'unmatched' elements are to be kept.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">comparison</span><span class=\"p\">:</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;==&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&lt;=&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&lt;&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&gt;=&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&gt;&#39;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"n\">multiset_expression</span><span class=\"o\">.</span><span class=\"n\">MultisetExpression</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">/</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">keep</span><span class=\"p\">:</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;matched&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;unmatched&#39;</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"n\">multiset_expression</span><span class=\"o\">.</span><span class=\"n\">MultisetExpression</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.MultisetExpression.evaluate": {"fullname": "icepool.MultisetExpression.evaluate", "modulename": "icepool", "qualname": "MultisetExpression.evaluate", "kind": "function", "doc": "<p>Attaches a final <code>MultisetEvaluator</code> to expressions.</p>\n\n<p>All of the <code>MultisetExpression</code> methods below are evaluations,\nas are the operators <code>&lt;, &lt;=, &gt;, &gt;=, !=, ==</code>. This means if the\nexpression is fully bound, it will be evaluated to a <code>Die</code>.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A <code>Die</code> if the expression is are fully bound.\n  A <code>MultisetEvaluator</code> otherwise.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">expressions</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"n\">multiset_expression</span><span class=\"o\">.</span><span class=\"n\">MultisetExpression</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">evaluator</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">evaluator</span><span class=\"o\">.</span><span class=\"n\">multiset_evaluator</span><span class=\"o\">.</span><span class=\"n\">MultisetEvaluator</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">],</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">evaluator</span><span class=\"o\">.</span><span class=\"n\">multiset_evaluator</span><span class=\"o\">.</span><span class=\"n\">MultisetEvaluator</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "icepool.MultisetExpression.expand": {"fullname": "icepool.MultisetExpression.expand", "modulename": "icepool", "qualname": "MultisetExpression.expand", "kind": "function", "doc": "<p>Evaluation: All elements of the multiset in ascending order.</p>\n\n<p>This is expensive and not recommended unless there are few possibilities.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>order:</strong>  Whether the elements are in ascending (default) or descending\norder.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">order</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Order</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">Order</span><span class=\"o\">.</span><span class=\"n\">Ascending</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]],</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">evaluator</span><span class=\"o\">.</span><span class=\"n\">multiset_evaluator</span><span class=\"o\">.</span><span class=\"n\">MultisetEvaluator</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]]]</span>:</span></span>", "funcdef": "def"}, "icepool.MultisetExpression.sum": {"fullname": "icepool.MultisetExpression.sum", "modulename": "icepool", "qualname": "MultisetExpression.sum", "kind": "function", "doc": "<p>Evaluation: The sum of all elements.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"nb\">map</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">],</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">evaluator</span><span class=\"o\">.</span><span class=\"n\">multiset_evaluator</span><span class=\"o\">.</span><span class=\"n\">MultisetEvaluator</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "icepool.MultisetExpression.count": {"fullname": "icepool.MultisetExpression.count", "modulename": "icepool", "qualname": "MultisetExpression.count", "kind": "function", "doc": "<p>Evaluation: The total number of elements in the multiset.</p>\n\n<p>This is usually not very interesting unless some other operation is\nperformed first. Examples:</p>\n\n<p><code>generator.unique().count()</code> will count the number of unique outcomes.</p>\n\n<p><code>(generator &amp; [4, 5, 6]).count()</code> will count up to one each of\n4, 5, and 6.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">evaluator</span><span class=\"o\">.</span><span class=\"n\">multiset_evaluator</span><span class=\"o\">.</span><span class=\"n\">MultisetEvaluator</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "icepool.MultisetExpression.any": {"fullname": "icepool.MultisetExpression.any", "modulename": "icepool", "qualname": "MultisetExpression.any", "kind": "function", "doc": "<p>Evaluation: Whether the multiset has at least one positive count.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">],</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">evaluator</span><span class=\"o\">.</span><span class=\"n\">multiset_evaluator</span><span class=\"o\">.</span><span class=\"n\">MultisetEvaluator</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "icepool.MultisetExpression.highest_outcome_and_count": {"fullname": "icepool.MultisetExpression.highest_outcome_and_count", "modulename": "icepool", "qualname": "MultisetExpression.highest_outcome_and_count", "kind": "function", "doc": "<p>Evaluation: The highest outcome with positive count, along with that count.</p>\n\n<p>If no outcomes have positive count, the min outcome will be returned with 0 count.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]],</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">evaluator</span><span class=\"o\">.</span><span class=\"n\">multiset_evaluator</span><span class=\"o\">.</span><span class=\"n\">MultisetEvaluator</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]]</span>:</span></span>", "funcdef": "def"}, "icepool.MultisetExpression.all_counts": {"fullname": "icepool.MultisetExpression.all_counts", "modulename": "icepool", "qualname": "MultisetExpression.all_counts", "kind": "function", "doc": "<p>Evaluation: Sorted tuple of all counts, i.e. the sizes of all matching sets.</p>\n\n<p>The sizes are in <strong>descending</strong> order.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><p><strong>filter:</strong>  Any counts below this value will not be in the output.\nFor example, <code>filter=2</code> will only produce pairs and better.\nIf <code>None</code>, no filtering will be done.</p>\n\n<p>Why not just place <code>keep_countss_ge()</code> before this?\n<code>keep_countss_ge()</code> operates by setting counts to zero, so you\nwould still need an argument to specify whether you want to\noutput zero counts. So we might as well use the argument to do\nboth.</p></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"nb\">filter</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]],</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">evaluator</span><span class=\"o\">.</span><span class=\"n\">multiset_evaluator</span><span class=\"o\">.</span><span class=\"n\">MultisetEvaluator</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]]]</span>:</span></span>", "funcdef": "def"}, "icepool.MultisetExpression.largest_count": {"fullname": "icepool.MultisetExpression.largest_count", "modulename": "icepool", "qualname": "MultisetExpression.largest_count", "kind": "function", "doc": "<p>Evaluation: The size of the largest matching set among the elements.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">evaluator</span><span class=\"o\">.</span><span class=\"n\">multiset_evaluator</span><span class=\"o\">.</span><span class=\"n\">MultisetEvaluator</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "icepool.MultisetExpression.largest_count_and_outcome": {"fullname": "icepool.MultisetExpression.largest_count_and_outcome", "modulename": "icepool", "qualname": "MultisetExpression.largest_count_and_outcome", "kind": "function", "doc": "<p>Evaluation: The largest matching set among the elements and the corresponding outcome.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">]],</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">evaluator</span><span class=\"o\">.</span><span class=\"n\">multiset_evaluator</span><span class=\"o\">.</span><span class=\"n\">MultisetEvaluator</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">]]]</span>:</span></span>", "funcdef": "def"}, "icepool.MultisetExpression.count_subset": {"fullname": "icepool.MultisetExpression.count_subset", "modulename": "icepool", "qualname": "MultisetExpression.count_subset", "kind": "function", "doc": "<p>Evaluation: The number of times the divisor is contained in this multiset.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>divisor:</strong>  The multiset to divide by.</li>\n<li><strong>empty_divisor:</strong>  If the divisor is empty, the outcome will be this.\nIf not set, <code>ZeroDivisionError</code> will be raised for an empty\nright side.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ZeroDivisionError:</strong>  If the divisor may be empty and \nempty_divisor_outcome is not set.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">divisor</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"n\">multiset_expression</span><span class=\"o\">.</span><span class=\"n\">MultisetExpression</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"o\">/</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">empty_divisor</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">evaluator</span><span class=\"o\">.</span><span class=\"n\">multiset_evaluator</span><span class=\"o\">.</span><span class=\"n\">MultisetEvaluator</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "icepool.MultisetExpression.largest_straight": {"fullname": "icepool.MultisetExpression.largest_straight", "modulename": "icepool", "qualname": "MultisetExpression.largest_straight", "kind": "function", "doc": "<p>Evaluation: The size of the largest straight among the elements.</p>\n\n<p>Outcomes must be <code>int</code>s.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"n\">multiset_expression</span><span class=\"o\">.</span><span class=\"n\">MultisetExpression</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">evaluator</span><span class=\"o\">.</span><span class=\"n\">multiset_evaluator</span><span class=\"o\">.</span><span class=\"n\">MultisetEvaluator</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "icepool.MultisetExpression.largest_straight_and_outcome": {"fullname": "icepool.MultisetExpression.largest_straight_and_outcome", "modulename": "icepool", "qualname": "MultisetExpression.largest_straight_and_outcome", "kind": "function", "doc": "<p>Evaluation: The size of the largest straight among the elements and the highest outcome in that straight.</p>\n\n<p>Outcomes must be <code>int</code>s.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"n\">multiset_expression</span><span class=\"o\">.</span><span class=\"n\">MultisetExpression</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]],</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">evaluator</span><span class=\"o\">.</span><span class=\"n\">multiset_evaluator</span><span class=\"o\">.</span><span class=\"n\">MultisetEvaluator</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]]</span>:</span></span>", "funcdef": "def"}, "icepool.MultisetExpression.all_straights": {"fullname": "icepool.MultisetExpression.all_straights", "modulename": "icepool", "qualname": "MultisetExpression.all_straights", "kind": "function", "doc": "<p>Evaluation: The sizes of all straights.</p>\n\n<p>The sizes are in <strong>descending</strong> order.</p>\n\n<p>Each element can only contribute to one straight, though duplicate\nelements can produces straights that overlap in outcomes. In this case,\nelements are preferentially assigned to the longer straight.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"n\">multiset_expression</span><span class=\"o\">.</span><span class=\"n\">MultisetExpression</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]],</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">evaluator</span><span class=\"o\">.</span><span class=\"n\">multiset_evaluator</span><span class=\"o\">.</span><span class=\"n\">MultisetEvaluator</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]]]</span>:</span></span>", "funcdef": "def"}, "icepool.MultisetExpression.all_straights_reduce_counts": {"fullname": "icepool.MultisetExpression.all_straights_reduce_counts", "modulename": "icepool", "qualname": "MultisetExpression.all_straights_reduce_counts", "kind": "function", "doc": "<p>Experimental: All straights with a reduce operation on the counts.</p>\n\n<p>This can be used to evaluate e.g. cribbage-style straight counting.</p>\n\n<p>The result is a tuple of <code>(run_length, run_score)</code>s.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"n\">multiset_expression</span><span class=\"o\">.</span><span class=\"n\">MultisetExpression</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">reducer</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">mul</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"o\">...</span><span class=\"p\">]],</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">evaluator</span><span class=\"o\">.</span><span class=\"n\">multiset_evaluator</span><span class=\"o\">.</span><span class=\"n\">MultisetEvaluator</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"o\">...</span><span class=\"p\">]]]</span>:</span></span>", "funcdef": "def"}, "icepool.MultisetExpression.argsort": {"fullname": "icepool.MultisetExpression.argsort", "modulename": "icepool", "qualname": "MultisetExpression.argsort", "kind": "function", "doc": "<p>Experimental: Returns the indexes of the originating multisets for each rank in their additive union.</p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">MultisetExpression</span><span class=\"o\">.</span><span class=\"n\">argsort</span><span class=\"p\">([</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">])</span>\n</code></pre>\n</div>\n\n<p>produces</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"p\">((</span><span class=\"mi\">0</span><span class=\"p\">,),</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,))</span>\n</code></pre>\n</div>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>self, *args:</strong>  The multiset expressions to be evaluated.</li>\n<li><strong>order:</strong>  Which order the ranks are to be emitted. Default is descending.</li>\n<li><strong>limit:</strong>  How many ranks to emit. Default will emit all ranks, which\nmakes the length of each outcome equal to\n<code>additive_union(+self, +arg1, +arg2, ...).unique().count()</code></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"n\">multiset_expression</span><span class=\"o\">.</span><span class=\"n\">MultisetExpression</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"n\">multiset_expression</span><span class=\"o\">.</span><span class=\"n\">MultisetExpression</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">order</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Order</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">Order</span><span class=\"o\">.</span><span class=\"n\">Descending</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">limit</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "icepool.MultisetExpression.issubset": {"fullname": "icepool.MultisetExpression.issubset", "modulename": "icepool", "qualname": "MultisetExpression.issubset", "kind": "function", "doc": "<p>Evaluation: Whether this multiset is a subset of the other multiset.</p>\n\n<p>Specifically, if this multiset has a lesser or equal count for each\noutcome than the other multiset, this evaluates to <code>True</code>; \nif there is some outcome for which this multiset has a greater count \nthan the other multiset, this evaluates to <code>False</code>.</p>\n\n<p><code>issubset</code> is the same as <code>self &lt;= other</code>.</p>\n\n<p><code>self &lt; other</code> evaluates a proper subset relation, which is the same\nexcept the result is <code>False</code> if the two multisets are exactly equal.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"n\">multiset_expression</span><span class=\"o\">.</span><span class=\"n\">MultisetExpression</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">],</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">evaluator</span><span class=\"o\">.</span><span class=\"n\">multiset_evaluator</span><span class=\"o\">.</span><span class=\"n\">MultisetEvaluator</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "icepool.MultisetExpression.issuperset": {"fullname": "icepool.MultisetExpression.issuperset", "modulename": "icepool", "qualname": "MultisetExpression.issuperset", "kind": "function", "doc": "<p>Evaluation: Whether this multiset is a superset of the other multiset.</p>\n\n<p>Specifically, if this multiset has a greater or equal count for each\noutcome than the other multiset, this evaluates to <code>True</code>; \nif there is some  outcome for which this multiset has a lesser count \nthan the other multiset, this evaluates to <code>False</code>.</p>\n\n<p>A typical use of this evaluation is testing for the presence of a\ncombo of cards in a hand, e.g.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">deal</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"o\">&gt;=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n\n<p>represents the chance that a deal of 5 cards contains at least two 'a's\nand one 'b'.</p>\n\n<p><code>issuperset</code> is the same as <code>self &gt;= other</code>.</p>\n\n<p><code>self &gt; other</code> evaluates a proper superset relation, which is the same\nexcept the result is <code>False</code> if the two multisets are exactly equal.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"n\">multiset_expression</span><span class=\"o\">.</span><span class=\"n\">MultisetExpression</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">],</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">evaluator</span><span class=\"o\">.</span><span class=\"n\">multiset_evaluator</span><span class=\"o\">.</span><span class=\"n\">MultisetEvaluator</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "icepool.MultisetExpression.isdisjoint": {"fullname": "icepool.MultisetExpression.isdisjoint", "modulename": "icepool", "qualname": "MultisetExpression.isdisjoint", "kind": "function", "doc": "<p>Evaluation: Whether this multiset is disjoint from the other multiset.</p>\n\n<p>Specifically, this evaluates to <code>False</code> if there is any outcome for\nwhich both multisets have positive count, and <code>True</code> if there is not.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"n\">multiset_expression</span><span class=\"o\">.</span><span class=\"n\">MultisetExpression</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">],</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">evaluator</span><span class=\"o\">.</span><span class=\"n\">multiset_evaluator</span><span class=\"o\">.</span><span class=\"n\">MultisetEvaluator</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "icepool.MultisetExpression.compair_lt": {"fullname": "icepool.MultisetExpression.compair_lt", "modulename": "icepool", "qualname": "MultisetExpression.compair_lt", "kind": "function", "doc": "<p>Evaluation: EXPERIMENTAL: Compare pairs of elements in sorted order, counting how many pairs <code>self</code> is &lt; <code>other</code>.</p>\n\n<p>Any extra unpaired elements do not affect the result.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>other:</strong>  The other multiset to compare.</li>\n<li><strong>order:</strong>  Which order elements will be matched in.\nDefault is descending.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"n\">multiset_expression</span><span class=\"o\">.</span><span class=\"n\">MultisetExpression</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">order</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Order</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">Order</span><span class=\"o\">.</span><span class=\"n\">Descending</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "icepool.MultisetExpression.compair_le": {"fullname": "icepool.MultisetExpression.compair_le", "modulename": "icepool", "qualname": "MultisetExpression.compair_le", "kind": "function", "doc": "<p>Evaluation: EXPERIMENTAL: Compare pairs of elements in sorted order, counting how many pairs <code>self</code> is &lt;= <code>other</code>.</p>\n\n<p>Any extra unpaired elements do not affect the result.</p>\n\n<p>Example: number of armies destroyed by the defender in a \n3v2 attack in <em>RISK</em>:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">d6</span><span class=\"o\">.</span><span class=\"n\">pool</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">compair_le</span><span class=\"p\">(</span><span class=\"n\">d6</span><span class=\"o\">.</span><span class=\"n\">pool</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>other:</strong>  The other multiset to compare.</li>\n<li><strong>order:</strong>  Which order elements will be matched in.\nDefault is descending.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"n\">multiset_expression</span><span class=\"o\">.</span><span class=\"n\">MultisetExpression</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">order</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Order</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">Order</span><span class=\"o\">.</span><span class=\"n\">Descending</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "icepool.MultisetExpression.compair_gt": {"fullname": "icepool.MultisetExpression.compair_gt", "modulename": "icepool", "qualname": "MultisetExpression.compair_gt", "kind": "function", "doc": "<p>Evaluation: EXPERIMENTAL: Compare pairs of elements in sorted order, counting how many pairs <code>self</code> is &gt; <code>other</code>.</p>\n\n<p>Any extra unpaired elements do not affect the result.</p>\n\n<p>Example: number of armies destroyed by the attacker in a \n3v2 attack in <em>RISK</em>:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">d6</span><span class=\"o\">.</span><span class=\"n\">pool</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">compair_gt</span><span class=\"p\">(</span><span class=\"n\">d6</span><span class=\"o\">.</span><span class=\"n\">pool</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>other:</strong>  The other multiset to compare.</li>\n<li><strong>order:</strong>  Which order elements will be matched in.\nDefault is descending.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"n\">multiset_expression</span><span class=\"o\">.</span><span class=\"n\">MultisetExpression</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">order</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Order</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">Order</span><span class=\"o\">.</span><span class=\"n\">Descending</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "icepool.MultisetExpression.compair_ge": {"fullname": "icepool.MultisetExpression.compair_ge", "modulename": "icepool", "qualname": "MultisetExpression.compair_ge", "kind": "function", "doc": "<p>Evaluation: EXPERIMENTAL: Compare pairs of elements in sorted order, counting how many pairs <code>self</code> is &gt;= <code>other</code>.</p>\n\n<p>Any extra unpaired elements do not affect the result.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>other:</strong>  The other multiset to compare.</li>\n<li><strong>order:</strong>  Which order elements will be matched in.\nDefault is descending.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"n\">multiset_expression</span><span class=\"o\">.</span><span class=\"n\">MultisetExpression</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">order</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Order</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">Order</span><span class=\"o\">.</span><span class=\"n\">Descending</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "icepool.MultisetExpression.compair_eq": {"fullname": "icepool.MultisetExpression.compair_eq", "modulename": "icepool", "qualname": "MultisetExpression.compair_eq", "kind": "function", "doc": "<p>Evaluation: EXPERIMENTAL: Compare pairs of elements in sorted order, counting how many pairs <code>self</code> is &gt;= <code>other</code>.</p>\n\n<p>Any extra unpaired elements do not affect the result.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>other:</strong>  The other multiset to compare.</li>\n<li><strong>order:</strong>  Which order elements will be matched in.\nDefault is descending.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"n\">multiset_expression</span><span class=\"o\">.</span><span class=\"n\">MultisetExpression</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">order</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Order</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">Order</span><span class=\"o\">.</span><span class=\"n\">Descending</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "icepool.MultisetExpression.compair_ne": {"fullname": "icepool.MultisetExpression.compair_ne", "modulename": "icepool", "qualname": "MultisetExpression.compair_ne", "kind": "function", "doc": "<p>Evaluation: EXPERIMENTAL: Compare pairs of elements in sorted order, counting how many pairs <code>self</code> is &gt;= <code>other</code>.</p>\n\n<p>Any extra unpaired elements do not affect the result.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>other:</strong>  The other multiset to compare.</li>\n<li><strong>order:</strong>  Which order elements will be matched in.\nDefault is descending.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"n\">multiset_expression</span><span class=\"o\">.</span><span class=\"n\">MultisetExpression</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">order</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Order</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">Order</span><span class=\"o\">.</span><span class=\"n\">Descending</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "icepool.MultisetEvaluator": {"fullname": "icepool.MultisetEvaluator", "modulename": "icepool", "qualname": "MultisetEvaluator", "kind": "class", "doc": "<p>An abstract, immutable, callable class for evaulating one or more <code>MultisetGenerator</code>s.</p>\n\n<p>There is one abstract method to implement: <code>next_state()</code>.\nThis should incrementally calculate the result given one outcome at a time\nalong with how many of that outcome were produced.</p>\n\n<p>An example sequence of calls, as far as <code>next_state()</code> is concerned, is:</p>\n\n<ol>\n<li><code>state = next_state(state=None, outcome=1, count_of_1s)</code></li>\n<li><code>state = next_state(state, 2, count_of_2s)</code></li>\n<li><code>state = next_state(state, 3, count_of_3s)</code></li>\n<li><code>state = next_state(state, 4, count_of_4s)</code></li>\n<li><code>state = next_state(state, 5, count_of_5s)</code></li>\n<li><code>state = next_state(state, 6, count_of_6s)</code></li>\n<li><code>outcome = final_outcome(state)</code></li>\n</ol>\n\n<p>A few other methods can optionally be overridden to further customize behavior.</p>\n\n<p>It is not expected that subclasses of <code>MultisetEvaluator</code>\nbe able to handle arbitrary types or numbers of generators.\nIndeed, most are expected to handle only a fixed number of generators,\nand often even only generators with a particular type of <code>Die</code>.</p>\n\n<p>Instances cache all intermediate state distributions.\nYou should therefore reuse instances when possible.</p>\n\n<p>Instances should not be modified after construction\nin any way that affects the return values of these methods.\nOtherwise, values in the cache may be incorrect.</p>\n", "bases": "abc.ABC, typing.Generic[-T_contra, +U_co]"}, "icepool.MultisetEvaluator.next_state": {"fullname": "icepool.MultisetEvaluator.next_state", "modulename": "icepool", "qualname": "MultisetEvaluator.next_state", "kind": "function", "doc": "<p>State transition function.</p>\n\n<p>This should produce a state given the previous state, an outcome,\nand the number that outcome produced by each generator.</p>\n\n<p><code>evaluate()</code> will always call this using only positional arguments.\nFurthermore, there is no expectation that a subclass be able to handle\nan arbitrary number of counts. Thus, you are free to rename any of\nthe parameters in a subclass, or to replace <code>*counts</code> with a fixed set\nof parameters.</p>\n\n<p>Make sure to handle the base case where <code>state is None</code>.</p>\n\n<p>States must be hashable. At current, they do not have to be orderable.\nHowever, this may change in the future, and if they are not totally\norderable, you must override <code>final_outcome</code> to create totally orderable\nfinal outcomes.</p>\n\n<p>The behavior of returning a <code>Die</code> from <code>next_state</code> is currently\nundefined.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>state:</strong>  A hashable object indicating the state before rolling the\ncurrent outcome. If this is the first outcome being considered,\n<code>state</code> will be <code>None</code>.</li>\n<li><strong>outcome:</strong>  The current outcome.\n<code>next_state</code> will see all rolled outcomes in monotonic order;\neither ascending or descending depending on <code>order()</code>.\nIf there are multiple generators, the set of outcomes is the\nunion of the outcomes of the invididual generators. All outcomes\nwith nonzero count will be seen. Outcomes with zero count\nmay or may not be seen. If you need to enforce that certain\noutcomes are seen even if they have zero count, see\n<code>alignment()</code>.</li>\n<li><strong>*counts:</strong>  One value (usually an <code>int</code>) for each generator output\nindicating how many of the current outcome were produced.\nAll outcomes with nonzero count are guaranteed to be seen.\nTo guarantee that outcomes are seen even if they have zero\ncount, override <code>alignment()</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A hashable object indicating the next state.\n  The special value <code>icepool.Reroll</code> can be used to immediately remove\n  the state from consideration, effectively performing a full reroll.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"n\">Hashable</span>, </span><span class=\"param\"><span class=\"n\">outcome</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"n\">T_contra</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">counts</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Hashable</span>:</span></span>", "funcdef": "def"}, "icepool.MultisetEvaluator.final_outcome": {"fullname": "icepool.MultisetEvaluator.final_outcome", "modulename": "icepool", "qualname": "MultisetEvaluator.final_outcome", "kind": "function", "doc": "<p>Optional function to generate a final outcome from a final state.</p>\n\n<p>By default, the final outcome is equal to the final state.\nNote that <code>None</code> is not a valid outcome for a <code>Die</code>,\nand if there are no outcomes, <code>final_outcome</code> will be immediately\nbe callled with <code>final_state=None</code>.\nSubclasses that want to handle this case should explicitly define what\nhappens.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>final_state:</strong>  A state after all outcomes have been processed.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A final outcome that will be used as part of constructing the result <code>Die</code>.\n  As usual for <code>Die()</code>, this could itself be a <code>Die</code> or <code>icepool.Reroll</code>.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">final_state</span><span class=\"p\">:</span> <span class=\"n\">Hashable</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">U_co</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">U_co</span><span class=\"p\">],</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">RerollType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.MultisetEvaluator.order": {"fullname": "icepool.MultisetEvaluator.order", "modulename": "icepool", "qualname": "MultisetEvaluator.order", "kind": "function", "doc": "<p>Optional function to determine the order in which <code>next_state()</code> will see outcomes.</p>\n\n<p>The default is ascending order. This has better caching behavior with \nmixed standard dice.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <ul>\n  <li>Order.Ascending (= 1)\n  if <code>next_state()</code> should always see the outcomes in ascending order.</li>\n  <li>Order.Descending (= -1)\n  if <code>next_state()</code> should always see the outcomes in descending order.</li>\n  <li>Order.Any (= 0)\n  if the result of the evaluation is order-independent.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Order</span>:</span></span>", "funcdef": "def"}, "icepool.MultisetEvaluator.alignment": {"fullname": "icepool.MultisetEvaluator.alignment", "modulename": "icepool", "qualname": "MultisetEvaluator.alignment", "kind": "function", "doc": "<p>Optional method to specify additional outcomes that should be seen by <code>next_state()</code>.</p>\n\n<p>These will be seen by <code>next_state</code> even if they have zero count or do\nnot appear in the generator(s) at all.</p>\n\n<p>The default implementation returns <code>()</code>; this means outcomes with zero\ncount may or may not be seen by <code>next_state</code>.</p>\n\n<p>If you want <code>next_state</code> to see consecutive <code>int</code> outcomes, you can set\n<code>alignment = icepool.MultisetEvaluator.range_alignment</code>.\nSee <code>range_alignment()</code> below.</p>\n\n<p>If you want <code>next_state</code> to see all generator outcomes, you can return\n<code>outcomes</code> as-is.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>outcomes:</strong>  The outcomes that could be produced by the generators, in</li>\n<li>ascending order.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">outcomes</span><span class=\"p\">:</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Collection</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.MultisetEvaluator.range_alignment": {"fullname": "icepool.MultisetEvaluator.range_alignment", "modulename": "icepool", "qualname": "MultisetEvaluator.range_alignment", "kind": "function", "doc": "<p>Example implementation of <code>alignment()</code> that produces consecutive <code>int</code> outcomes.</p>\n\n<p>There is no expectation that a subclass be able to handle\nan arbitrary number of generators. Thus, you are free to rename any of\nthe parameters in a subclass, or to replace <code>*generators</code> with a fixed\nset of parameters.</p>\n\n<p>Set <code>alignment = icepool.MultisetEvaluator.range_alignment</code> to use this.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>All <code>int</code>s from the min outcome to the max outcome among the generators,\n  inclusive.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TypeError:</strong>  if any generator has any non-<code>int</code> outcome.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">outcomes</span><span class=\"p\">:</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Collection</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.MultisetEvaluator.prefix_generators": {"fullname": "icepool.MultisetEvaluator.prefix_generators", "modulename": "icepool", "qualname": "MultisetEvaluator.prefix_generators", "kind": "function", "doc": "<p>An optional sequence of extra generators whose counts will be prepended to *counts.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">multiset_generator</span><span class=\"o\">.</span><span class=\"n\">MultisetGenerator</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.MultisetEvaluator.validate_arity": {"fullname": "icepool.MultisetEvaluator.validate_arity", "modulename": "icepool", "qualname": "MultisetEvaluator.validate_arity", "kind": "function", "doc": "<p>An optional method to verify the total input arity.</p>\n\n<p>This is called after any implicit conversion to generators, but does\nnot include any <code>extra_generators()</code>.</p>\n\n<p>Overriding <code>next_state</code> with a fixed number of counts will make this\ncheck redundant.</p>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><code>ValueError</code> if the total input arity is not valid.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">arity</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "icepool.MultisetEvaluator.evaluate": {"fullname": "icepool.MultisetEvaluator.evaluate", "modulename": "icepool", "qualname": "MultisetEvaluator.evaluate", "kind": "function", "doc": "<p>Evaluates generator(s).</p>\n\n<p>You can call the <code>MultisetEvaluator</code> object directly for the same effect,\ne.g. <code>sum_evaluator(generator)</code> is an alias for <code>sum_evaluator.evaluate(generator)</code>.</p>\n\n<p>Most evaluators will expect a fixed number of input multisets.\nThe union of the outcomes of the generator(s) must be totally orderable.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>*args:</strong>  Each may be one of the following:\n<ul>\n<li>A <code>MultisetExpression</code>.</li>\n<li>A mappable mapping outcomes to the number of those outcomes.</li>\n<li>A sequence of outcomes.</li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A <code>Die</code> representing the distribution of the final outcome if no\n  arg contains a free variable. Otherwise, returns a new evaluator.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"n\">multiset_expression</span><span class=\"o\">.</span><span class=\"n\">MultisetExpression</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">U_co</span><span class=\"p\">],</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">evaluator</span><span class=\"o\">.</span><span class=\"n\">multiset_evaluator</span><span class=\"o\">.</span><span class=\"n\">MultisetEvaluator</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">,</span> <span class=\"o\">+</span><span class=\"n\">U_co</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "icepool.MultisetEvaluator.sample": {"fullname": "icepool.MultisetEvaluator.sample", "modulename": "icepool", "qualname": "MultisetEvaluator.sample", "kind": "function", "doc": "<p>EXPERIMENTAL: Samples one result from the generator(s) and evaluates the result.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">generators</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">multiset_generator</span><span class=\"o\">.</span><span class=\"n\">MultisetGenerator</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "icepool.Order": {"fullname": "icepool.Order", "modulename": "icepool", "qualname": "Order", "kind": "class", "doc": "<p>Can be used to define what order outcomes are seen in by MultisetEvaluators.</p>\n", "bases": "enum.IntEnum"}, "icepool.Order.Ascending": {"fullname": "icepool.Order.Ascending", "modulename": "icepool", "qualname": "Order.Ascending", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Order.Ascending: 1&gt;"}, "icepool.Order.Descending": {"fullname": "icepool.Order.Descending", "modulename": "icepool", "qualname": "Order.Descending", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Order.Descending: -1&gt;"}, "icepool.Order.Any": {"fullname": "icepool.Order.Any", "modulename": "icepool", "qualname": "Order.Any", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Order.Any: 0&gt;"}, "icepool.Order.merge": {"fullname": "icepool.Order.merge", "modulename": "icepool", "qualname": "Order.merge", "kind": "function", "doc": "<p>Merges the given Orders.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p><code>Any</code> if all arguments are <code>Any</code>.\n  <code>Ascending</code> if there is at least one <code>Ascending</code> in the arguments.\n  <code>Descending</code> if there is at least one <code>Descending</code> in the arguments.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><code>ValueError</code> if both <code>Ascending</code> and <code>Descending</code> are in the</li>\n<li>arguments.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">orders</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Order</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Order</span>:</span></span>", "funcdef": "def"}, "icepool.Deck": {"fullname": "icepool.Deck", "modulename": "icepool", "qualname": "Deck", "kind": "class", "doc": "<p>Sampling without replacement (within a single evaluation).</p>\n\n<p>Quantities represent duplicates.</p>\n", "bases": "icepool.population.base.Population[+T_co]"}, "icepool.Deck.__init__": {"fullname": "icepool.Deck.__init__", "modulename": "icepool", "qualname": "Deck.__init__", "kind": "function", "doc": "<p>Constructor for a <code>Deck</code>.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><p><strong>outcomes:</strong>  The cards of the <code>Deck</code>. This can be one of the following:</p>\n\n<ul>\n<li>A <code>Sequence</code> of outcomes. Duplicates will contribute\nquantity for each appearance.</li>\n<li>A <code>Mapping</code> from outcomes to quantities.</li>\n</ul>\n\n<p>Each outcome may be one of the following:</p>\n\n<ul>\n<li>An outcome, which must be hashable and totally orderable.</li>\n<li>A <code>Deck</code>, which will be flattened into the result. If a\n<code>times</code> is assigned to the <code>Deck</code>, the entire <code>Deck</code> will\nbe duplicated that many times.</li>\n</ul></li>\n<li><strong>times:</strong>  Multiplies the number of times each element of <code>outcomes</code>\nwill be put into the <code>Deck</code>.\n<code>times</code> can either be a sequence of the same length as\n<code>outcomes</code> or a single <code>int</code> to apply to all elements of\n<code>outcomes</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">outcomes</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">,</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">times</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span>)</span>"}, "icepool.Deck.keys": {"fullname": "icepool.Deck.keys", "modulename": "icepool", "qualname": "Deck.keys", "kind": "function", "doc": "<p>The outcomes within the population in sorted order.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">collection</span><span class=\"o\">.</span><span class=\"n\">counts</span><span class=\"o\">.</span><span class=\"n\">CountsKeysView</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Deck.values": {"fullname": "icepool.Deck.values", "modulename": "icepool", "qualname": "Deck.values", "kind": "function", "doc": "<p>The quantities within the population in outcome order.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">collection</span><span class=\"o\">.</span><span class=\"n\">counts</span><span class=\"o\">.</span><span class=\"n\">CountsValuesView</span>:</span></span>", "funcdef": "def"}, "icepool.Deck.items": {"fullname": "icepool.Deck.items", "modulename": "icepool", "qualname": "Deck.items", "kind": "function", "doc": "<p>The (outcome, quantity)s of the population in sorted order.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">collection</span><span class=\"o\">.</span><span class=\"n\">counts</span><span class=\"o\">.</span><span class=\"n\">CountsItemsView</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Deck.size": {"fullname": "icepool.Deck.size", "modulename": "icepool", "qualname": "Deck.size", "kind": "function", "doc": "<p>The sum of all quantities (e.g. weights or duplicates).</p>\n\n<p>For the number of unique outcomes, including those with zero quantity,\nuse <code>len()</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "icepool.Deck.deal": {"fullname": "icepool.Deck.deal", "modulename": "icepool", "qualname": "Deck.deal", "kind": "function", "doc": "<p>Creates a <code>Deal</code> object from this deck.</p>\n\n<p>See <code>Deal()</code> for details.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">hand_sizes</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">deal</span><span class=\"o\">.</span><span class=\"n\">Deal</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">],</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">multi_deal</span><span class=\"o\">.</span><span class=\"n\">MultiDeal</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]]]</span>:</span></span>", "funcdef": "def"}, "icepool.Deck.additive_union": {"fullname": "icepool.Deck.additive_union", "modulename": "icepool", "qualname": "Deck.additive_union", "kind": "function", "doc": "<p>Both decks merged together.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">Deck</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Deck.difference": {"fullname": "icepool.Deck.difference", "modulename": "icepool", "qualname": "Deck.difference", "kind": "function", "doc": "<p>This deck with the other cards removed (but not below zero of each card).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">Deck</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Deck.intersection": {"fullname": "icepool.Deck.intersection", "modulename": "icepool", "qualname": "Deck.intersection", "kind": "function", "doc": "<p>The cards that both decks have.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">Deck</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Deck.union": {"fullname": "icepool.Deck.union", "modulename": "icepool", "qualname": "Deck.union", "kind": "function", "doc": "<p>As many of each card as the deck that has more of them.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">Deck</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Deck.symmetric_difference": {"fullname": "icepool.Deck.symmetric_difference", "modulename": "icepool", "qualname": "Deck.symmetric_difference", "kind": "function", "doc": "<p>As many of each card as the deck that has more of them.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">Deck</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Deck.multiply_counts": {"fullname": "icepool.Deck.multiply_counts", "modulename": "icepool", "qualname": "Deck.multiply_counts", "kind": "function", "doc": "<p>Merge multiple copies of the deck.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">Deck</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Deck.divide_counts": {"fullname": "icepool.Deck.divide_counts", "modulename": "icepool", "qualname": "Deck.divide_counts", "kind": "function", "doc": "<p>Divide all card counts, rounding down.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">Deck</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Deck.modulo_counts": {"fullname": "icepool.Deck.modulo_counts", "modulename": "icepool", "qualname": "Deck.modulo_counts", "kind": "function", "doc": "<p>Modulo all card counts.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">Deck</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Deck.map": {"fullname": "icepool.Deck.map", "modulename": "icepool", "qualname": "Deck.map", "kind": "function", "doc": "<p>Maps outcomes of this <code>Deck</code> to other outcomes.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>repl:</strong>  One of the following:\n<ul>\n<li>A callable returning a new outcome for each old outcome.</li>\n<li>A map from old outcomes to new outcomes.\nUnmapped old outcomes stay the same.\nThe new outcomes may be <code>Deck</code>s, in which case one card is\nreplaced with several. This is not recommended.</li>\n</ul></li>\n<li><strong>star:</strong>  Whether outcomes should be unpacked into separate arguments\nbefore sending them to a callable <code>repl</code>.\nIf not provided, this will be guessed based on the function\nsignature.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">repl</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">Deck</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">],</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">RerollType</span><span class=\"p\">]],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">T_co</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">Deck</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">],</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">RerollType</span><span class=\"p\">]]]</span>,</span><span class=\"param\">\t<span class=\"o\">/</span>,</span><span class=\"param\">\t<span class=\"n\">star</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">Deck</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">U</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Deal": {"fullname": "icepool.Deal", "modulename": "icepool", "qualname": "Deal", "kind": "class", "doc": "<p>Represents an unordered deal of a single hand from a <code>Deck</code>.</p>\n", "bases": "icepool.generator.keep.KeepGenerator[~T]"}, "icepool.Deal.__init__": {"fullname": "icepool.Deal.__init__", "modulename": "icepool", "qualname": "Deal.__init__", "kind": "function", "doc": "<p>Constructor.</p>\n\n<p>For algorithmic reasons, you must pre-commit to the number of cards to\ndeal.</p>\n\n<p>It is permissible to deal zero cards from an empty deck, but not all\nevaluators will handle this case, especially if they depend on the\noutcome type. Dealing zero cards from a non-empty deck does not have\nthis issue.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>deck:</strong>  The <code>Deck</code> to deal from.</li>\n<li><strong>hand_size:</strong>  How many cards to deal.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">deck</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">Deck</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">hand_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span>)</span>"}, "icepool.Deal.deck": {"fullname": "icepool.Deal.deck", "modulename": "icepool", "qualname": "Deal.deck", "kind": "function", "doc": "<p>The <code>Deck</code> the cards are dealt from.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">Deck</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Deal.hand_sizes": {"fullname": "icepool.Deal.hand_sizes", "modulename": "icepool", "qualname": "Deal.hand_sizes", "kind": "function", "doc": "<p>The number of cards dealt to each hand as a tuple.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Deal.total_cards_dealt": {"fullname": "icepool.Deal.total_cards_dealt", "modulename": "icepool", "qualname": "Deal.total_cards_dealt", "kind": "function", "doc": "<p>The total number of cards dealt.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "icepool.Deal.outcomes": {"fullname": "icepool.Deal.outcomes", "modulename": "icepool", "qualname": "Deal.outcomes", "kind": "function", "doc": "<p>The outcomes of the <code>Deck</code> in ascending order.</p>\n\n<p>These are also the <code>keys</code> of the <code>Deck</code> as a <code>Mapping</code>.\nPrefer to use the name <code>outcomes</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">collection</span><span class=\"o\">.</span><span class=\"n\">counts</span><span class=\"o\">.</span><span class=\"n\">CountsKeysView</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.Deal.output_arity": {"fullname": "icepool.Deal.output_arity", "modulename": "icepool", "qualname": "Deal.output_arity", "kind": "function", "doc": "<p>The number of multisets/counts generated. Must be constant.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "icepool.Deal.denominator": {"fullname": "icepool.Deal.denominator", "modulename": "icepool", "qualname": "Deal.denominator", "kind": "function", "doc": "<p>The total weight of all paths through this generator.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "icepool.MultiDeal": {"fullname": "icepool.MultiDeal", "modulename": "icepool", "qualname": "MultiDeal", "kind": "class", "doc": "<p>Represents an unordered deal of multiple hands from a <code>Deck</code>.</p>\n", "bases": "icepool.generator.multiset_generator.MultisetGenerator[~T, ~Qs]"}, "icepool.MultiDeal.__init__": {"fullname": "icepool.MultiDeal.__init__", "modulename": "icepool", "qualname": "MultiDeal.__init__", "kind": "function", "doc": "<p>Constructor.</p>\n\n<p>For algorithmic reasons, you must pre-commit to the number of cards to\ndeal for each hand.</p>\n\n<p>It is permissible to deal zero cards from an empty deck, but not all\nevaluators will handle this case, especially if they depend on the\noutcome type. Dealing zero cards from a non-empty deck does not have\nthis issue.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>deck:</strong>  The <code>Deck</code> to deal from.</li>\n<li><strong>*hand_sizes:</strong>  How many cards to deal. If multiple <code>hand_sizes</code> are\nprovided, <code>MultisetEvaluator.next_state</code> will recieve one count\nper hand in order. Try to keep the number of hands to a minimum\nas this can be computationally intensive.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">deck</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">Deck</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">hand_sizes</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span>)</span>"}, "icepool.MultiDeal.deck": {"fullname": "icepool.MultiDeal.deck", "modulename": "icepool", "qualname": "MultiDeal.deck", "kind": "function", "doc": "<p>The <code>Deck</code> the cards are dealt from.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">Deck</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.MultiDeal.hand_sizes": {"fullname": "icepool.MultiDeal.hand_sizes", "modulename": "icepool", "qualname": "MultiDeal.hand_sizes", "kind": "function", "doc": "<p>The number of cards dealt to each hand as a tuple.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">Qs</span>:</span></span>", "funcdef": "def"}, "icepool.MultiDeal.total_cards_dealt": {"fullname": "icepool.MultiDeal.total_cards_dealt", "modulename": "icepool", "qualname": "MultiDeal.total_cards_dealt", "kind": "function", "doc": "<p>The total number of cards dealt.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "icepool.MultiDeal.outcomes": {"fullname": "icepool.MultiDeal.outcomes", "modulename": "icepool", "qualname": "MultiDeal.outcomes", "kind": "function", "doc": "<p>The outcomes of the <code>Deck</code> in ascending order.</p>\n\n<p>These are also the <code>keys</code> of the <code>Deck</code> as a <code>Mapping</code>.\nPrefer to use the name <code>outcomes</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">collection</span><span class=\"o\">.</span><span class=\"n\">counts</span><span class=\"o\">.</span><span class=\"n\">CountsKeysView</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.MultiDeal.output_arity": {"fullname": "icepool.MultiDeal.output_arity", "modulename": "icepool", "qualname": "MultiDeal.output_arity", "kind": "function", "doc": "<p>The number of multisets/counts generated. Must be constant.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "icepool.MultiDeal.denominator": {"fullname": "icepool.MultiDeal.denominator", "modulename": "icepool", "qualname": "MultiDeal.denominator", "kind": "function", "doc": "<p>The total weight of all paths through this generator.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "icepool.multiset_function": {"fullname": "icepool.multiset_function", "modulename": "icepool", "qualname": "multiset_function", "kind": "function", "doc": "<p>EXPERIMENTAL: A decorator that turns a function into a <code>MultisetEvaluator</code>.</p>\n\n<p>The provided function should take in arguments representing multisets,\ndo a limited set of operations on them (see <code>MultisetExpression</code>), and\nfinish off with an evaluation. You can return tuples to perform a joint\nevaluation.</p>\n\n<p>For example, to create an evaluator which computes the elements each of two\nmultisets has that the other doesn't:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nd\">@multiset_function</span>\n<span class=\"k\">def</span> <span class=\"nf\">two_way_difference</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">-</span> <span class=\"n\">b</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">expand</span><span class=\"p\">(),</span> <span class=\"p\">(</span><span class=\"n\">b</span> <span class=\"o\">-</span> <span class=\"n\">a</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">expand</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n\n<p>Any globals inside <code>function</code> are effectively bound at the time\n<code>multiset_function</code> is invoked. Note that this is different than how\nordinary Python closures behave. For example,</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n\n<span class=\"nd\">@multiset_function</span>\n<span class=\"k\">def</span> <span class=\"nf\">count_intersection</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">&amp;</span> <span class=\"n\">target</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">count_intersection</span><span class=\"p\">(</span><span class=\"n\">d6</span><span class=\"o\">.</span><span class=\"n\">pool</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)))</span>\n\n<span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">count_intersection</span><span class=\"p\">(</span><span class=\"n\">d6</span><span class=\"o\">.</span><span class=\"n\">pool</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)))</span>\n</code></pre>\n</div>\n\n<p>would produce the same thing both times. Likewise, the function should not\nhave any side effects.</p>\n\n<p>Be careful when using control structures: you cannot branch on the value of\na multiset expression or evaluation, so e.g.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nd\">@multiset_function</span>\n<span class=\"k\">def</span> <span class=\"nf\">bad</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"o\">==</span> <span class=\"n\">b</span><span class=\"p\">:</span>\n        <span class=\"o\">...</span>\n</code></pre>\n</div>\n\n<p>is not allowed.</p>\n\n<p><code>multiset_function</code> has considerable overhead, being effectively a\nmini-language within Python. For better performance, you can try\nimplementing your own subclass of <code>MultisetEvaluator</code> directly.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>function:</strong>  This should take in a fixed number of multiset variables and\noutput an evaluator or a nested tuple of evaluators. Tuples will\nresult in a <code>JointEvaluator</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">function</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">evaluator</span><span class=\"o\">.</span><span class=\"n\">multiset_evaluator</span><span class=\"o\">.</span><span class=\"n\">MultisetEvaluator</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">,</span> <span class=\"o\">+</span><span class=\"n\">U_co</span><span class=\"p\">],</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">evaluator</span><span class=\"o\">.</span><span class=\"n\">multiset_evaluator</span><span class=\"o\">.</span><span class=\"n\">MultisetEvaluator</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">,</span> <span class=\"o\">+</span><span class=\"n\">U_co</span><span class=\"p\">],</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;NestedTupleOrEvaluator[T_contra, U_co]&#39;</span><span class=\"p\">),</span> <span class=\"o\">...</span><span class=\"p\">]],</span> <span class=\"o\">...</span><span class=\"p\">]]]</span>,</span><span class=\"param\">\t<span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">evaluator</span><span class=\"o\">.</span><span class=\"n\">multiset_evaluator</span><span class=\"o\">.</span><span class=\"n\">MultisetEvaluator</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">U_co</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">U_co</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;NestedTupleOrOutcome[U_co]&#39;</span><span class=\"p\">),</span> <span class=\"o\">...</span><span class=\"p\">]],</span> <span class=\"o\">...</span><span class=\"p\">]]]</span>:</span></span>", "funcdef": "def"}, "icepool.evaluator": {"fullname": "icepool.evaluator", "modulename": "icepool.evaluator", "kind": "module", "doc": "<p>Submodule containing evaluators.</p>\n"}, "icepool.evaluator.JointEvaluator": {"fullname": "icepool.evaluator.JointEvaluator", "modulename": "icepool.evaluator", "qualname": "JointEvaluator", "kind": "class", "doc": "<p>A <code>MultisetEvaluator</code> that jointly evaluates sub-evaluators on the same set of input generators.</p>\n", "bases": "icepool.evaluator.multiset_evaluator.MultisetEvaluator[-T_contra, tuple]"}, "icepool.evaluator.JointEvaluator.__init__": {"fullname": "icepool.evaluator.JointEvaluator.__init__", "modulename": "icepool.evaluator", "qualname": "JointEvaluator.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">inners</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">evaluator</span><span class=\"o\">.</span><span class=\"n\">multiset_evaluator</span><span class=\"o\">.</span><span class=\"n\">MultisetEvaluator</span></span>)</span>"}, "icepool.evaluator.JointEvaluator.next_state": {"fullname": "icepool.evaluator.JointEvaluator.next_state", "modulename": "icepool.evaluator", "qualname": "JointEvaluator.next_state", "kind": "function", "doc": "<p>Runs <code>next_state</code> for all sub-evaluator.</p>\n\n<p>The state is a tuple of the sub-states.</p>\n\n<p>If any sub-evaluator returns <code>Reroll</code>, the result as a whole is <code>Reroll</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">state</span>, </span><span class=\"param\"><span class=\"n\">outcome</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">counts</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "icepool.evaluator.JointEvaluator.final_outcome": {"fullname": "icepool.evaluator.JointEvaluator.final_outcome", "modulename": "icepool.evaluator", "qualname": "JointEvaluator.final_outcome", "kind": "function", "doc": "<p>Runs <code>final_state</code> for all sub-evaluators.</p>\n\n<p>The final outcome is a tuple of the final suboutcomes.</p>\n\n<p>If any sub-evaluator returns <code>Reroll</code>, the result as a whole is <code>Reroll</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">final_state</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span> <span class=\"o\">|</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">RerollType</span>:</span></span>", "funcdef": "def"}, "icepool.evaluator.JointEvaluator.order": {"fullname": "icepool.evaluator.JointEvaluator.order", "modulename": "icepool.evaluator", "qualname": "JointEvaluator.order", "kind": "function", "doc": "<p>Determines the common order of the sub-evaluators.</p>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  If sub-evaluators have conflicting orders, i.e. some are\nascending and others are descending.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Order</span>:</span></span>", "funcdef": "def"}, "icepool.evaluator.JointEvaluator.alignment": {"fullname": "icepool.evaluator.JointEvaluator.alignment", "modulename": "icepool.evaluator", "qualname": "JointEvaluator.alignment", "kind": "function", "doc": "<p>Optional method to specify additional outcomes that should be seen by <code>next_state()</code>.</p>\n\n<p>These will be seen by <code>next_state</code> even if they have zero count or do\nnot appear in the generator(s) at all.</p>\n\n<p>The default implementation returns <code>()</code>; this means outcomes with zero\ncount may or may not be seen by <code>next_state</code>.</p>\n\n<p>If you want <code>next_state</code> to see consecutive <code>int</code> outcomes, you can set\n<code>alignment = icepool.MultisetEvaluator.range_alignment</code>.\nSee <code>range_alignment()</code> below.</p>\n\n<p>If you want <code>next_state</code> to see all generator outcomes, you can return\n<code>outcomes</code> as-is.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>outcomes:</strong>  The outcomes that could be produced by the generators, in</li>\n<li>ascending order.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">outcomes</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Collection</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.evaluator.JointEvaluator.prefix_generators": {"fullname": "icepool.evaluator.JointEvaluator.prefix_generators", "modulename": "icepool.evaluator", "qualname": "JointEvaluator.prefix_generators", "kind": "function", "doc": "<p>An optional sequence of extra generators whose counts will be prepended to *counts.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">multiset_generator</span><span class=\"o\">.</span><span class=\"n\">MultisetGenerator</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.evaluator.JointEvaluator.validate_arity": {"fullname": "icepool.evaluator.JointEvaluator.validate_arity", "modulename": "icepool.evaluator", "qualname": "JointEvaluator.validate_arity", "kind": "function", "doc": "<p>An optional method to verify the total input arity.</p>\n\n<p>This is called after any implicit conversion to generators, but does\nnot include any <code>extra_generators()</code>.</p>\n\n<p>Overriding <code>next_state</code> with a fixed number of counts will make this\ncheck redundant.</p>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><code>ValueError</code> if the total input arity is not valid.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">arity</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "icepool.evaluator.ExpandEvaluator": {"fullname": "icepool.evaluator.ExpandEvaluator", "modulename": "icepool.evaluator", "qualname": "ExpandEvaluator", "kind": "class", "doc": "<p>All elements of the multiset.</p>\n\n<p>This is expensive and not recommended unless there are few possibilities.</p>\n\n<p>Outcomes with negative count will be treated as 0 count.</p>\n", "bases": "icepool.evaluator.multiset_evaluator.MultisetEvaluator[typing.Any, tuple]"}, "icepool.evaluator.ExpandEvaluator.__init__": {"fullname": "icepool.evaluator.ExpandEvaluator.__init__", "modulename": "icepool.evaluator", "qualname": "ExpandEvaluator.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">order</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Order</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">Order</span><span class=\"o\">.</span><span class=\"n\">Ascending</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"o\">&gt;</span></span>)</span>"}, "icepool.evaluator.ExpandEvaluator.next_state": {"fullname": "icepool.evaluator.ExpandEvaluator.next_state", "modulename": "icepool.evaluator", "qualname": "ExpandEvaluator.next_state", "kind": "function", "doc": "<p>Implementation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">state</span>, </span><span class=\"param\"><span class=\"n\">outcome</span>, </span><span class=\"param\"><span class=\"n\">count</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "icepool.evaluator.ExpandEvaluator.order": {"fullname": "icepool.evaluator.ExpandEvaluator.order", "modulename": "icepool.evaluator", "qualname": "ExpandEvaluator.order", "kind": "function", "doc": "<p>Allows any order.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">Order</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"o\">&gt;</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.evaluator.ExpandEvaluator.final_outcome": {"fullname": "icepool.evaluator.ExpandEvaluator.final_outcome", "modulename": "icepool.evaluator", "qualname": "ExpandEvaluator.final_outcome", "kind": "function", "doc": "<p>Implementation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">final_state</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, "icepool.evaluator.SumEvaluator": {"fullname": "icepool.evaluator.SumEvaluator", "modulename": "icepool.evaluator", "qualname": "SumEvaluator", "kind": "class", "doc": "<p>Sums all outcomes.</p>\n", "bases": "icepool.evaluator.multiset_evaluator.MultisetEvaluator[typing.Any, typing.Any]"}, "icepool.evaluator.SumEvaluator.__init__": {"fullname": "icepool.evaluator.SumEvaluator.__init__", "modulename": "icepool.evaluator", "qualname": "SumEvaluator.__init__", "kind": "function", "doc": "<p>Constructor.</p>\n\n<p>map: If provided, outcomes will be mapped according to this just\n    before summing.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"nb\">map</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">,</span> <span class=\"n\">Mapping</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, "icepool.evaluator.SumEvaluator.next_state": {"fullname": "icepool.evaluator.SumEvaluator.next_state", "modulename": "icepool.evaluator", "qualname": "SumEvaluator.next_state", "kind": "function", "doc": "<p>Implementation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">state</span>, </span><span class=\"param\"><span class=\"n\">outcome</span>, </span><span class=\"param\"><span class=\"n\">count</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "icepool.evaluator.SumEvaluator.order": {"fullname": "icepool.evaluator.SumEvaluator.order", "modulename": "icepool.evaluator", "qualname": "SumEvaluator.order", "kind": "function", "doc": "<p>Allows any order.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">Order</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"o\">&gt;</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.evaluator.sum_evaluator": {"fullname": "icepool.evaluator.sum_evaluator", "modulename": "icepool.evaluator", "qualname": "sum_evaluator", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;icepool.evaluator.basic.SumEvaluator object&gt;"}, "icepool.evaluator.CountEvaluator": {"fullname": "icepool.evaluator.CountEvaluator", "modulename": "icepool.evaluator", "qualname": "CountEvaluator", "kind": "class", "doc": "<p>Returns the total count of outcomes.</p>\n\n<p>Usually not very interesting unless the counts are adjusted by\n<code>unique</code> etc.</p>\n", "bases": "icepool.evaluator.multiset_evaluator.MultisetEvaluator[typing.Any, int]"}, "icepool.evaluator.CountEvaluator.next_state": {"fullname": "icepool.evaluator.CountEvaluator.next_state", "modulename": "icepool.evaluator", "qualname": "CountEvaluator.next_state", "kind": "function", "doc": "<p>Implementation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">state</span>, </span><span class=\"param\"><span class=\"n\">outcome</span>, </span><span class=\"param\"><span class=\"n\">count</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "icepool.evaluator.CountEvaluator.final_outcome": {"fullname": "icepool.evaluator.CountEvaluator.final_outcome", "modulename": "icepool.evaluator", "qualname": "CountEvaluator.final_outcome", "kind": "function", "doc": "<p>Implementation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">final_state</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "icepool.evaluator.CountEvaluator.order": {"fullname": "icepool.evaluator.CountEvaluator.order", "modulename": "icepool.evaluator", "qualname": "CountEvaluator.order", "kind": "function", "doc": "<p>Allows any order.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">Order</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"o\">&gt;</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.evaluator.count_evaluator": {"fullname": "icepool.evaluator.count_evaluator", "modulename": "icepool.evaluator", "qualname": "count_evaluator", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;icepool.evaluator.basic.CountEvaluator object&gt;"}, "icepool.evaluator.AnyEvaluator": {"fullname": "icepool.evaluator.AnyEvaluator", "modulename": "icepool.evaluator", "qualname": "AnyEvaluator", "kind": "class", "doc": "<p>Returns <code>True</code> iff at least one count is positive.</p>\n", "bases": "icepool.evaluator.multiset_evaluator.MultisetEvaluator[typing.Any, bool]"}, "icepool.evaluator.AnyEvaluator.next_state": {"fullname": "icepool.evaluator.AnyEvaluator.next_state", "modulename": "icepool.evaluator", "qualname": "AnyEvaluator.next_state", "kind": "function", "doc": "<p>Implementation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">state</span>, </span><span class=\"param\"><span class=\"n\">outcome</span>, </span><span class=\"param\"><span class=\"n\">count</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "icepool.evaluator.AnyEvaluator.final_outcome": {"fullname": "icepool.evaluator.AnyEvaluator.final_outcome", "modulename": "icepool.evaluator", "qualname": "AnyEvaluator.final_outcome", "kind": "function", "doc": "<p>Implementation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">final_state</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "icepool.evaluator.AnyEvaluator.order": {"fullname": "icepool.evaluator.AnyEvaluator.order", "modulename": "icepool.evaluator", "qualname": "AnyEvaluator.order", "kind": "function", "doc": "<p>Allows any order.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">Order</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"o\">&gt;</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.evaluator.any_evaluator": {"fullname": "icepool.evaluator.any_evaluator", "modulename": "icepool.evaluator", "qualname": "any_evaluator", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;icepool.evaluator.basic.AnyEvaluator object&gt;"}, "icepool.evaluator.HighestOutcomeAndCountEvaluator": {"fullname": "icepool.evaluator.HighestOutcomeAndCountEvaluator", "modulename": "icepool.evaluator", "qualname": "HighestOutcomeAndCountEvaluator", "kind": "class", "doc": "<p>The highest outcome that has positive count, along with that count.</p>\n\n<p>If no outcomes have positive count, the result is the min outcome with a count of 0.</p>\n", "bases": "icepool.evaluator.multiset_evaluator.MultisetEvaluator[typing.Any, tuple[typing.Any, int]]"}, "icepool.evaluator.HighestOutcomeAndCountEvaluator.next_state": {"fullname": "icepool.evaluator.HighestOutcomeAndCountEvaluator.next_state", "modulename": "icepool.evaluator", "qualname": "HighestOutcomeAndCountEvaluator.next_state", "kind": "function", "doc": "<p>Implementation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">state</span>, </span><span class=\"param\"><span class=\"n\">outcome</span>, </span><span class=\"param\"><span class=\"n\">count</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "icepool.evaluator.HighestOutcomeAndCountEvaluator.order": {"fullname": "icepool.evaluator.HighestOutcomeAndCountEvaluator.order", "modulename": "icepool.evaluator", "qualname": "HighestOutcomeAndCountEvaluator.order", "kind": "function", "doc": "<p>Allows any order.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">Order</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"o\">&gt;</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.evaluator.HighestOutcomeAndCountEvaluator.alignment": {"fullname": "icepool.evaluator.HighestOutcomeAndCountEvaluator.alignment", "modulename": "icepool.evaluator", "qualname": "HighestOutcomeAndCountEvaluator.alignment", "kind": "function", "doc": "<p>Always sees zero counts.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">outcomes</span><span class=\"p\">:</span> <span class=\"n\">Sequence</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Collection</span>:</span></span>", "funcdef": "def"}, "icepool.evaluator.LargestCountEvaluator": {"fullname": "icepool.evaluator.LargestCountEvaluator", "modulename": "icepool.evaluator", "qualname": "LargestCountEvaluator", "kind": "class", "doc": "<p>The largest count of any outcome.</p>\n", "bases": "icepool.evaluator.multiset_evaluator.MultisetEvaluator[typing.Any, int]"}, "icepool.evaluator.LargestCountEvaluator.next_state": {"fullname": "icepool.evaluator.LargestCountEvaluator.next_state", "modulename": "icepool.evaluator", "qualname": "LargestCountEvaluator.next_state", "kind": "function", "doc": "<p>Implementation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">state</span>, </span><span class=\"param\"><span class=\"n\">_</span>, </span><span class=\"param\"><span class=\"n\">count</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "icepool.evaluator.LargestCountEvaluator.order": {"fullname": "icepool.evaluator.LargestCountEvaluator.order", "modulename": "icepool.evaluator", "qualname": "LargestCountEvaluator.order", "kind": "function", "doc": "<p>Allows any order.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">Order</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"o\">&gt;</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.evaluator.LargestCountAndOutcomeEvaluator": {"fullname": "icepool.evaluator.LargestCountAndOutcomeEvaluator", "modulename": "icepool.evaluator", "qualname": "LargestCountAndOutcomeEvaluator", "kind": "class", "doc": "<p>The largest count of any outcome, along with that outcome.</p>\n", "bases": "icepool.evaluator.multiset_evaluator.MultisetEvaluator[typing.Any, tuple[int, typing.Any]]"}, "icepool.evaluator.LargestCountAndOutcomeEvaluator.next_state": {"fullname": "icepool.evaluator.LargestCountAndOutcomeEvaluator.next_state", "modulename": "icepool.evaluator", "qualname": "LargestCountAndOutcomeEvaluator.next_state", "kind": "function", "doc": "<p>Implementation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">state</span>, </span><span class=\"param\"><span class=\"n\">outcome</span>, </span><span class=\"param\"><span class=\"n\">count</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "icepool.evaluator.LargestCountAndOutcomeEvaluator.order": {"fullname": "icepool.evaluator.LargestCountAndOutcomeEvaluator.order", "modulename": "icepool.evaluator", "qualname": "LargestCountAndOutcomeEvaluator.order", "kind": "function", "doc": "<p>Allows any order.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">Order</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"o\">&gt;</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.evaluator.CountSubsetEvaluator": {"fullname": "icepool.evaluator.CountSubsetEvaluator", "modulename": "icepool.evaluator", "qualname": "CountSubsetEvaluator", "kind": "class", "doc": "<p>The number of times the right side is contained in the left side.</p>\n", "bases": "icepool.evaluator.multiset_evaluator.MultisetEvaluator[typing.Any, int]"}, "icepool.evaluator.CountSubsetEvaluator.__init__": {"fullname": "icepool.evaluator.CountSubsetEvaluator.__init__", "modulename": "icepool.evaluator", "qualname": "CountSubsetEvaluator.__init__", "kind": "function", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>empty_divisor:</strong>  If the divisor is empty, the outcome will be this.\nIf not set, <code>ZeroDivisionError</code> will be raised for an empty\nright side.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">empty_divisor</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"fullname": "icepool.evaluator.CountSubsetEvaluator.next_state", "modulename": "icepool.evaluator", "qualname": "CountSubsetEvaluator.next_state", "kind": "function", "doc": "<p>State transition function.</p>\n\n<p>This should produce a state given the previous state, an outcome,\nand the number that outcome produced by each generator.</p>\n\n<p><code>evaluate()</code> will always call this using only positional arguments.\nFurthermore, there is no expectation that a subclass be able to handle\nan arbitrary number of counts. Thus, you are free to rename any of\nthe parameters in a subclass, or to replace <code>*counts</code> with a fixed set\nof parameters.</p>\n\n<p>Make sure to handle the base case where <code>state is None</code>.</p>\n\n<p>States must be hashable. At current, they do not have to be orderable.\nHowever, this may change in the future, and if they are not totally\norderable, you must override <code>final_outcome</code> to create totally orderable\nfinal outcomes.</p>\n\n<p>The behavior of returning a <code>Die</code> from <code>next_state</code> is currently\nundefined.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>state:</strong>  A hashable object indicating the state before rolling the\ncurrent outcome. If this is the first outcome being considered,\n<code>state</code> will be <code>None</code>.</li>\n<li><strong>outcome:</strong>  The current outcome.\n<code>next_state</code> will see all rolled outcomes in monotonic order;\neither ascending or descending depending on <code>order()</code>.\nIf there are multiple generators, the set of outcomes is the\nunion of the outcomes of the invididual generators. All outcomes\nwith nonzero count will be seen. Outcomes with zero count\nmay or may not be seen. If you need to enforce that certain\noutcomes are seen even if they have zero count, see\n<code>alignment()</code>.</li>\n<li><strong>*counts:</strong>  One value (usually an <code>int</code>) for each generator output\nindicating how many of the current outcome were produced.\nAll outcomes with nonzero count are guaranteed to be seen.\nTo guarantee that outcomes are seen even if they have zero\ncount, override <code>alignment()</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A hashable object indicating the next state.\n  The special value <code>icepool.Reroll</code> can be used to immediately remove\n  the state from consideration, effectively performing a full reroll.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">state</span>, </span><span class=\"param\"><span class=\"n\">_</span>, </span><span class=\"param\"><span class=\"n\">left</span>, </span><span class=\"param\"><span class=\"n\">right</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "icepool.evaluator.CountSubsetEvaluator.order": {"fullname": "icepool.evaluator.CountSubsetEvaluator.order", "modulename": "icepool.evaluator", "qualname": "CountSubsetEvaluator.order", "kind": "function", "doc": "<p>Allows any order.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">Order</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"o\">&gt;</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"fullname": "icepool.evaluator.CountSubsetEvaluator.final_outcome", "modulename": "icepool.evaluator", "qualname": "CountSubsetEvaluator.final_outcome", "kind": "function", "doc": "<p>Optional function to generate a final outcome from a final state.</p>\n\n<p>By default, the final outcome is equal to the final state.\nNote that <code>None</code> is not a valid outcome for a <code>Die</code>,\nand if there are no outcomes, <code>final_outcome</code> will be immediately\nbe callled with <code>final_state=None</code>.\nSubclasses that want to handle this case should explicitly define what\nhappens.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>final_state:</strong>  A state after all outcomes have been processed.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A final outcome that will be used as part of constructing the result <code>Die</code>.\n  As usual for <code>Die()</code>, this could itself be a <code>Die</code> or <code>icepool.Reroll</code>.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">final_state</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "icepool.evaluator.AllCountsEvaluator": {"fullname": "icepool.evaluator.AllCountsEvaluator", "modulename": "icepool.evaluator", "qualname": "AllCountsEvaluator", "kind": "class", "doc": "<p>All counts in descending order.</p>\n\n<p>In other words, this produces tuples of the sizes of all matching sets.</p>\n", "bases": "icepool.evaluator.multiset_evaluator.MultisetEvaluator[typing.Any, tuple[int, ...]]"}, "icepool.evaluator.AllCountsEvaluator.__init__": {"fullname": "icepool.evaluator.AllCountsEvaluator.__init__", "modulename": "icepool.evaluator", "qualname": "AllCountsEvaluator.__init__", "kind": "function", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>filter:</strong>  Any counts below this value will not be in the output.\nFor example, <code>filter=2</code> will only produce pairs and better.\nIf <code>None</code>, no filtering will be done.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"nb\">filter</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span>)</span>"}, "icepool.evaluator.AllCountsEvaluator.next_state": {"fullname": "icepool.evaluator.AllCountsEvaluator.next_state", "modulename": "icepool.evaluator", "qualname": "AllCountsEvaluator.next_state", "kind": "function", "doc": "<p>Implementation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">state</span>, </span><span class=\"param\"><span class=\"n\">outcome</span>, </span><span class=\"param\"><span class=\"n\">count</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "icepool.evaluator.AllCountsEvaluator.final_outcome": {"fullname": "icepool.evaluator.AllCountsEvaluator.final_outcome", "modulename": "icepool.evaluator", "qualname": "AllCountsEvaluator.final_outcome", "kind": "function", "doc": "<p>Implementation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">final_state</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, "icepool.evaluator.AllCountsEvaluator.order": {"fullname": "icepool.evaluator.AllCountsEvaluator.order", "modulename": "icepool.evaluator", "qualname": "AllCountsEvaluator.order", "kind": "function", "doc": "<p>Allows any order.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">Order</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"o\">&gt;</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.evaluator.AllCountsEvaluator.alignment": {"fullname": "icepool.evaluator.AllCountsEvaluator.alignment", "modulename": "icepool.evaluator", "qualname": "AllCountsEvaluator.alignment", "kind": "function", "doc": "<p>Always sees zero counts.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">outcomes</span><span class=\"p\">:</span> <span class=\"n\">Sequence</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Collection</span>:</span></span>", "funcdef": "def"}, "icepool.evaluator.LargestStraightEvaluator": {"fullname": "icepool.evaluator.LargestStraightEvaluator", "modulename": "icepool.evaluator", "qualname": "LargestStraightEvaluator", "kind": "class", "doc": "<p>The size of the largest straight.</p>\n", "bases": "icepool.evaluator.multiset_evaluator.MultisetEvaluator[int, int]"}, "icepool.evaluator.LargestStraightEvaluator.next_state": {"fullname": "icepool.evaluator.LargestStraightEvaluator.next_state", "modulename": "icepool.evaluator", "qualname": "LargestStraightEvaluator.next_state", "kind": "function", "doc": "<p>Implementation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">state</span>, </span><span class=\"param\"><span class=\"n\">_</span>, </span><span class=\"param\"><span class=\"n\">count</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "icepool.evaluator.LargestStraightEvaluator.final_outcome": {"fullname": "icepool.evaluator.LargestStraightEvaluator.final_outcome", "modulename": "icepool.evaluator", "qualname": "LargestStraightEvaluator.final_outcome", "kind": "function", "doc": "<p>Implementation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">final_state</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"fullname": "icepool.evaluator.LargestStraightEvaluator.alignment", "modulename": "icepool.evaluator", "qualname": "LargestStraightEvaluator.alignment", "kind": "function", "doc": "<p>Example implementation of <code>alignment()</code> that produces consecutive <code>int</code> outcomes.</p>\n\n<p>There is no expectation that a subclass be able to handle\nan arbitrary number of generators. Thus, you are free to rename any of\nthe parameters in a subclass, or to replace <code>*generators</code> with a fixed\nset of parameters.</p>\n\n<p>Set <code>alignment = icepool.MultisetEvaluator.range_alignment</code> to use this.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>All <code>int</code>s from the min outcome to the max outcome among the generators,\n  inclusive.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TypeError:</strong>  if any generator has any non-<code>int</code> outcome.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">outcomes</span><span class=\"p\">:</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Collection</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator": {"fullname": "icepool.evaluator.LargestStraightAndOutcomeEvaluator", "modulename": "icepool.evaluator", "qualname": "LargestStraightAndOutcomeEvaluator", "kind": "class", "doc": "<p>The size of the largest straight, along with the greatest outcome in that straight.</p>\n", "bases": "icepool.evaluator.multiset_evaluator.MultisetEvaluator[int, tuple[int, int]]"}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.next_state": {"fullname": "icepool.evaluator.LargestStraightAndOutcomeEvaluator.next_state", "modulename": "icepool.evaluator", "qualname": "LargestStraightAndOutcomeEvaluator.next_state", "kind": "function", "doc": "<p>Implementation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">state</span>, </span><span class=\"param\"><span class=\"n\">outcome</span>, </span><span class=\"param\"><span class=\"n\">count</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.final_outcome": {"fullname": "icepool.evaluator.LargestStraightAndOutcomeEvaluator.final_outcome", "modulename": "icepool.evaluator", "qualname": "LargestStraightAndOutcomeEvaluator.final_outcome", "kind": "function", "doc": "<p>Implementation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">final_state</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.order": {"fullname": "icepool.evaluator.LargestStraightAndOutcomeEvaluator.order", "modulename": "icepool.evaluator", "qualname": "LargestStraightAndOutcomeEvaluator.order", "kind": "function", "doc": "<p>Ascending order.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">Order</span><span class=\"o\">.</span><span class=\"n\">Ascending</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"o\">&gt;</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"fullname": "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment", "modulename": "icepool.evaluator", "qualname": "LargestStraightAndOutcomeEvaluator.alignment", "kind": "function", "doc": "<p>Example implementation of <code>alignment()</code> that produces consecutive <code>int</code> outcomes.</p>\n\n<p>There is no expectation that a subclass be able to handle\nan arbitrary number of generators. Thus, you are free to rename any of\nthe parameters in a subclass, or to replace <code>*generators</code> with a fixed\nset of parameters.</p>\n\n<p>Set <code>alignment = icepool.MultisetEvaluator.range_alignment</code> to use this.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>All <code>int</code>s from the min outcome to the max outcome among the generators,\n  inclusive.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TypeError:</strong>  if any generator has any non-<code>int</code> outcome.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">outcomes</span><span class=\"p\">:</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Collection</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.evaluator.AllStraightsEvaluator": {"fullname": "icepool.evaluator.AllStraightsEvaluator", "modulename": "icepool.evaluator", "qualname": "AllStraightsEvaluator", "kind": "class", "doc": "<p>The sizes of all straights in descending order.</p>\n\n<p>Each element can only contribute to one straight, though duplicate\nelements can produces straights that overlap in outcomes. In this case,\nelements are preferentially assigned to the longer straight.</p>\n", "bases": "icepool.evaluator.multiset_evaluator.MultisetEvaluator[int, tuple[int, ...]]"}, "icepool.evaluator.AllStraightsEvaluator.next_state": {"fullname": "icepool.evaluator.AllStraightsEvaluator.next_state", "modulename": "icepool.evaluator", "qualname": "AllStraightsEvaluator.next_state", "kind": "function", "doc": "<p>Implementation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">state</span>, </span><span class=\"param\"><span class=\"n\">_</span>, </span><span class=\"param\"><span class=\"n\">count</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "icepool.evaluator.AllStraightsEvaluator.final_outcome": {"fullname": "icepool.evaluator.AllStraightsEvaluator.final_outcome", "modulename": "icepool.evaluator", "qualname": "AllStraightsEvaluator.final_outcome", "kind": "function", "doc": "<p>Implementation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">final_state</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.evaluator.AllStraightsEvaluator.order": {"fullname": "icepool.evaluator.AllStraightsEvaluator.order", "modulename": "icepool.evaluator", "qualname": "AllStraightsEvaluator.order", "kind": "function", "doc": "<p>Ascending order.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">Order</span><span class=\"o\">.</span><span class=\"n\">Ascending</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"o\">&gt;</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"fullname": "icepool.evaluator.AllStraightsEvaluator.alignment", "modulename": "icepool.evaluator", "qualname": "AllStraightsEvaluator.alignment", "kind": "function", "doc": "<p>Example implementation of <code>alignment()</code> that produces consecutive <code>int</code> outcomes.</p>\n\n<p>There is no expectation that a subclass be able to handle\nan arbitrary number of generators. Thus, you are free to rename any of\nthe parameters in a subclass, or to replace <code>*generators</code> with a fixed\nset of parameters.</p>\n\n<p>Set <code>alignment = icepool.MultisetEvaluator.range_alignment</code> to use this.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>All <code>int</code>s from the min outcome to the max outcome among the generators,\n  inclusive.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TypeError:</strong>  if any generator has any non-<code>int</code> outcome.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">outcomes</span><span class=\"p\">:</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Collection</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.evaluator.AllStraightsReduceCountsEvaluator": {"fullname": "icepool.evaluator.AllStraightsReduceCountsEvaluator", "modulename": "icepool.evaluator", "qualname": "AllStraightsReduceCountsEvaluator", "kind": "class", "doc": "<p>All straights with a reduce operation on the counts.</p>\n\n<p>This can be used to evaluate e.g. cribbage-style straight counting.</p>\n\n<p>The result is a tuple of <code>(run_length, run_score)</code>s.</p>\n", "bases": "icepool.evaluator.multiset_evaluator.MultisetEvaluator[int, tuple[tuple[int, int], ...]]"}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.__init__": {"fullname": "icepool.evaluator.AllStraightsReduceCountsEvaluator.__init__", "modulename": "icepool.evaluator", "qualname": "AllStraightsReduceCountsEvaluator.__init__", "kind": "function", "doc": "<p>Constructor.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>reducer:</strong>  How to reduce the counts within each straight. The default\nis <code>operator.mul</code>, which counts the number of ways to pick\nelements for each straight, e.g. cribbage.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">reducer</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">mul</span><span class=\"o\">&gt;</span></span>)</span>"}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.next_state": {"fullname": "icepool.evaluator.AllStraightsReduceCountsEvaluator.next_state", "modulename": "icepool.evaluator", "qualname": "AllStraightsReduceCountsEvaluator.next_state", "kind": "function", "doc": "<p>Implementation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">state</span>, </span><span class=\"param\"><span class=\"n\">_</span>, </span><span class=\"param\"><span class=\"n\">count</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.final_outcome": {"fullname": "icepool.evaluator.AllStraightsReduceCountsEvaluator.final_outcome", "modulename": "icepool.evaluator", "qualname": "AllStraightsReduceCountsEvaluator.final_outcome", "kind": "function", "doc": "<p>Implementation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">final_state</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"o\">...</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"fullname": "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment", "modulename": "icepool.evaluator", "qualname": "AllStraightsReduceCountsEvaluator.alignment", "kind": "function", "doc": "<p>Example implementation of <code>alignment()</code> that produces consecutive <code>int</code> outcomes.</p>\n\n<p>There is no expectation that a subclass be able to handle\nan arbitrary number of generators. Thus, you are free to rename any of\nthe parameters in a subclass, or to replace <code>*generators</code> with a fixed\nset of parameters.</p>\n\n<p>Set <code>alignment = icepool.MultisetEvaluator.range_alignment</code> to use this.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>All <code>int</code>s from the min outcome to the max outcome among the generators,\n  inclusive.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TypeError:</strong>  if any generator has any non-<code>int</code> outcome.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">outcomes</span><span class=\"p\">:</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Collection</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.evaluator.ComparisonEvaluator": {"fullname": "icepool.evaluator.ComparisonEvaluator", "modulename": "icepool.evaluator", "qualname": "ComparisonEvaluator", "kind": "class", "doc": "<p>Compares the multisets produced by two generators.</p>\n", "bases": "icepool.evaluator.multiset_evaluator.MultisetEvaluator[typing.Any, bool]"}, "icepool.evaluator.ComparisonEvaluator.any_all": {"fullname": "icepool.evaluator.ComparisonEvaluator.any_all", "modulename": "icepool.evaluator", "qualname": "ComparisonEvaluator.any_all", "kind": "function", "doc": "<p>Called for each outcome and produces a pair of bools.</p>\n\n<p>The final outcome is true iff any of the first and all of the second\nbool are <code>True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">left</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">right</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.evaluator.ComparisonEvaluator.default_outcome": {"fullname": "icepool.evaluator.ComparisonEvaluator.default_outcome", "modulename": "icepool.evaluator", "qualname": "ComparisonEvaluator.default_outcome", "kind": "function", "doc": "<p>The final outcome if both left and right have no outcomes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "icepool.evaluator.ComparisonEvaluator.next_state": {"fullname": "icepool.evaluator.ComparisonEvaluator.next_state", "modulename": "icepool.evaluator", "qualname": "ComparisonEvaluator.next_state", "kind": "function", "doc": "<p>Implementation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">state</span>, </span><span class=\"param\"><span class=\"n\">outcome</span>, </span><span class=\"param\"><span class=\"n\">left</span>, </span><span class=\"param\"><span class=\"n\">right</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "icepool.evaluator.ComparisonEvaluator.final_outcome": {"fullname": "icepool.evaluator.ComparisonEvaluator.final_outcome", "modulename": "icepool.evaluator", "qualname": "ComparisonEvaluator.final_outcome", "kind": "function", "doc": "<p>Implementation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">final_state</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "icepool.evaluator.ComparisonEvaluator.order": {"fullname": "icepool.evaluator.ComparisonEvaluator.order", "modulename": "icepool.evaluator", "qualname": "ComparisonEvaluator.order", "kind": "function", "doc": "<p>Allows any order.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">Order</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"o\">&gt;</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.evaluator.IsSubsetEvaluator": {"fullname": "icepool.evaluator.IsSubsetEvaluator", "modulename": "icepool.evaluator", "qualname": "IsSubsetEvaluator", "kind": "class", "doc": "<p>Compares the multisets produced by two generators.</p>\n", "bases": "icepool.evaluator.multiset_evaluator.MultisetEvaluator[typing.Any, bool]"}, "icepool.evaluator.IsSubsetEvaluator.any_all": {"fullname": "icepool.evaluator.IsSubsetEvaluator.any_all", "modulename": "icepool.evaluator", "qualname": "IsSubsetEvaluator.any_all", "kind": "function", "doc": "<p>Called for each outcome and produces a pair of bools.</p>\n\n<p>The final outcome is true iff any of the first and all of the second\nbool are <code>True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">left</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">right</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.evaluator.IsSubsetEvaluator.default_outcome": {"fullname": "icepool.evaluator.IsSubsetEvaluator.default_outcome", "modulename": "icepool.evaluator", "qualname": "IsSubsetEvaluator.default_outcome", "kind": "function", "doc": "<p>The final outcome if both left and right have no outcomes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "icepool.evaluator.IsProperSubsetEvaluator": {"fullname": "icepool.evaluator.IsProperSubsetEvaluator", "modulename": "icepool.evaluator", "qualname": "IsProperSubsetEvaluator", "kind": "class", "doc": "<p>Compares the multisets produced by two generators.</p>\n", "bases": "icepool.evaluator.multiset_evaluator.MultisetEvaluator[typing.Any, bool]"}, "icepool.evaluator.IsProperSubsetEvaluator.any_all": {"fullname": "icepool.evaluator.IsProperSubsetEvaluator.any_all", "modulename": "icepool.evaluator", "qualname": "IsProperSubsetEvaluator.any_all", "kind": "function", "doc": "<p>Called for each outcome and produces a pair of bools.</p>\n\n<p>The final outcome is true iff any of the first and all of the second\nbool are <code>True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">left</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">right</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.evaluator.IsProperSubsetEvaluator.default_outcome": {"fullname": "icepool.evaluator.IsProperSubsetEvaluator.default_outcome", "modulename": "icepool.evaluator", "qualname": "IsProperSubsetEvaluator.default_outcome", "kind": "function", "doc": "<p>The final outcome if both left and right have no outcomes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "icepool.evaluator.IsSupersetEvaluator": {"fullname": "icepool.evaluator.IsSupersetEvaluator", "modulename": "icepool.evaluator", "qualname": "IsSupersetEvaluator", "kind": "class", "doc": "<p>Compares the multisets produced by two generators.</p>\n", "bases": "icepool.evaluator.multiset_evaluator.MultisetEvaluator[typing.Any, bool]"}, "icepool.evaluator.IsSupersetEvaluator.any_all": {"fullname": "icepool.evaluator.IsSupersetEvaluator.any_all", "modulename": "icepool.evaluator", "qualname": "IsSupersetEvaluator.any_all", "kind": "function", "doc": "<p>Called for each outcome and produces a pair of bools.</p>\n\n<p>The final outcome is true iff any of the first and all of the second\nbool are <code>True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">left</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">right</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.evaluator.IsSupersetEvaluator.default_outcome": {"fullname": "icepool.evaluator.IsSupersetEvaluator.default_outcome", "modulename": "icepool.evaluator", "qualname": "IsSupersetEvaluator.default_outcome", "kind": "function", "doc": "<p>The final outcome if both left and right have no outcomes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "icepool.evaluator.IsProperSupersetEvaluator": {"fullname": "icepool.evaluator.IsProperSupersetEvaluator", "modulename": "icepool.evaluator", "qualname": "IsProperSupersetEvaluator", "kind": "class", "doc": "<p>Compares the multisets produced by two generators.</p>\n", "bases": "icepool.evaluator.multiset_evaluator.MultisetEvaluator[typing.Any, bool]"}, "icepool.evaluator.IsProperSupersetEvaluator.any_all": {"fullname": "icepool.evaluator.IsProperSupersetEvaluator.any_all", "modulename": "icepool.evaluator", "qualname": "IsProperSupersetEvaluator.any_all", "kind": "function", "doc": "<p>Called for each outcome and produces a pair of bools.</p>\n\n<p>The final outcome is true iff any of the first and all of the second\nbool are <code>True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">left</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">right</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.evaluator.IsProperSupersetEvaluator.default_outcome": {"fullname": "icepool.evaluator.IsProperSupersetEvaluator.default_outcome", "modulename": "icepool.evaluator", "qualname": "IsProperSupersetEvaluator.default_outcome", "kind": "function", "doc": "<p>The final outcome if both left and right have no outcomes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "icepool.evaluator.IsEqualSetEvaluator": {"fullname": "icepool.evaluator.IsEqualSetEvaluator", "modulename": "icepool.evaluator", "qualname": "IsEqualSetEvaluator", "kind": "class", "doc": "<p>Compares the multisets produced by two generators.</p>\n", "bases": "icepool.evaluator.multiset_evaluator.MultisetEvaluator[typing.Any, bool]"}, "icepool.evaluator.IsEqualSetEvaluator.any_all": {"fullname": "icepool.evaluator.IsEqualSetEvaluator.any_all", "modulename": "icepool.evaluator", "qualname": "IsEqualSetEvaluator.any_all", "kind": "function", "doc": "<p>Called for each outcome and produces a pair of bools.</p>\n\n<p>The final outcome is true iff any of the first and all of the second\nbool are <code>True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">left</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">right</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.evaluator.IsEqualSetEvaluator.default_outcome": {"fullname": "icepool.evaluator.IsEqualSetEvaluator.default_outcome", "modulename": "icepool.evaluator", "qualname": "IsEqualSetEvaluator.default_outcome", "kind": "function", "doc": "<p>The final outcome if both left and right have no outcomes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "icepool.evaluator.IsNotEqualSetEvaluator": {"fullname": "icepool.evaluator.IsNotEqualSetEvaluator", "modulename": "icepool.evaluator", "qualname": "IsNotEqualSetEvaluator", "kind": "class", "doc": "<p>Compares the multisets produced by two generators.</p>\n", "bases": "icepool.evaluator.multiset_evaluator.MultisetEvaluator[typing.Any, bool]"}, "icepool.evaluator.IsNotEqualSetEvaluator.any_all": {"fullname": "icepool.evaluator.IsNotEqualSetEvaluator.any_all", "modulename": "icepool.evaluator", "qualname": "IsNotEqualSetEvaluator.any_all", "kind": "function", "doc": "<p>Called for each outcome and produces a pair of bools.</p>\n\n<p>The final outcome is true iff any of the first and all of the second\nbool are <code>True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">left</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">right</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.evaluator.IsNotEqualSetEvaluator.default_outcome": {"fullname": "icepool.evaluator.IsNotEqualSetEvaluator.default_outcome", "modulename": "icepool.evaluator", "qualname": "IsNotEqualSetEvaluator.default_outcome", "kind": "function", "doc": "<p>The final outcome if both left and right have no outcomes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "icepool.evaluator.IsDisjointSetEvaluator": {"fullname": "icepool.evaluator.IsDisjointSetEvaluator", "modulename": "icepool.evaluator", "qualname": "IsDisjointSetEvaluator", "kind": "class", "doc": "<p>Compares the multisets produced by two generators.</p>\n", "bases": "icepool.evaluator.multiset_evaluator.MultisetEvaluator[typing.Any, bool]"}, "icepool.evaluator.IsDisjointSetEvaluator.any_all": {"fullname": "icepool.evaluator.IsDisjointSetEvaluator.any_all", "modulename": "icepool.evaluator", "qualname": "IsDisjointSetEvaluator.any_all", "kind": "function", "doc": "<p>Called for each outcome and produces a pair of bools.</p>\n\n<p>The final outcome is true iff any of the first and all of the second\nbool are <code>True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">left</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">right</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.evaluator.IsDisjointSetEvaluator.default_outcome": {"fullname": "icepool.evaluator.IsDisjointSetEvaluator.default_outcome", "modulename": "icepool.evaluator", "qualname": "IsDisjointSetEvaluator.default_outcome", "kind": "function", "doc": "<p>The final outcome if both left and right have no outcomes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "icepool.evaluator.ConstantEvaluator": {"fullname": "icepool.evaluator.ConstantEvaluator", "modulename": "icepool.evaluator", "qualname": "ConstantEvaluator", "kind": "class", "doc": "<p>An evaluator that ignores its arguments and returns a constant result.</p>\n", "bases": "icepool.evaluator.multiset_evaluator.MultisetEvaluator[typing.Any, +U_co]"}, "icepool.evaluator.ConstantEvaluator.__init__": {"fullname": "icepool.evaluator.ConstantEvaluator.__init__", "modulename": "icepool.evaluator", "qualname": "ConstantEvaluator.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">result</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">U_co</span><span class=\"p\">]</span></span>)</span>"}, "icepool.evaluator.ConstantEvaluator.next_state": {"fullname": "icepool.evaluator.ConstantEvaluator.next_state", "modulename": "icepool.evaluator", "qualname": "ConstantEvaluator.next_state", "kind": "function", "doc": "<p>State transition function.</p>\n\n<p>This should produce a state given the previous state, an outcome,\nand the number that outcome produced by each generator.</p>\n\n<p><code>evaluate()</code> will always call this using only positional arguments.\nFurthermore, there is no expectation that a subclass be able to handle\nan arbitrary number of counts. Thus, you are free to rename any of\nthe parameters in a subclass, or to replace <code>*counts</code> with a fixed set\nof parameters.</p>\n\n<p>Make sure to handle the base case where <code>state is None</code>.</p>\n\n<p>States must be hashable. At current, they do not have to be orderable.\nHowever, this may change in the future, and if they are not totally\norderable, you must override <code>final_outcome</code> to create totally orderable\nfinal outcomes.</p>\n\n<p>The behavior of returning a <code>Die</code> from <code>next_state</code> is currently\nundefined.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>state:</strong>  A hashable object indicating the state before rolling the\ncurrent outcome. If this is the first outcome being considered,\n<code>state</code> will be <code>None</code>.</li>\n<li><strong>outcome:</strong>  The current outcome.\n<code>next_state</code> will see all rolled outcomes in monotonic order;\neither ascending or descending depending on <code>order()</code>.\nIf there are multiple generators, the set of outcomes is the\nunion of the outcomes of the invididual generators. All outcomes\nwith nonzero count will be seen. Outcomes with zero count\nmay or may not be seen. If you need to enforce that certain\noutcomes are seen even if they have zero count, see\n<code>alignment()</code>.</li>\n<li><strong>*counts:</strong>  One value (usually an <code>int</code>) for each generator output\nindicating how many of the current outcome were produced.\nAll outcomes with nonzero count are guaranteed to be seen.\nTo guarantee that outcomes are seen even if they have zero\ncount, override <code>alignment()</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A hashable object indicating the next state.\n  The special value <code>icepool.Reroll</code> can be used to immediately remove\n  the state from consideration, effectively performing a full reroll.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">state</span>, </span><span class=\"param\"><span class=\"n\">outcome</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">counts</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"fullname": "icepool.evaluator.ConstantEvaluator.final_outcome", "modulename": "icepool.evaluator", "qualname": "ConstantEvaluator.final_outcome", "kind": "function", "doc": "<p>Optional function to generate a final outcome from a final state.</p>\n\n<p>By default, the final outcome is equal to the final state.\nNote that <code>None</code> is not a valid outcome for a <code>Die</code>,\nand if there are no outcomes, <code>final_outcome</code> will be immediately\nbe callled with <code>final_state=None</code>.\nSubclasses that want to handle this case should explicitly define what\nhappens.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>final_state:</strong>  A state after all outcomes have been processed.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A final outcome that will be used as part of constructing the result <code>Die</code>.\n  As usual for <code>Die()</code>, this could itself be a <code>Die</code> or <code>icepool.Reroll</code>.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">final_state</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">U_co</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.evaluator.KeepEvaluator": {"fullname": "icepool.evaluator.KeepEvaluator", "modulename": "icepool.evaluator", "qualname": "KeepEvaluator", "kind": "class", "doc": "<p>Produces the outcome at a given sorted index.</p>\n\n<p>The attached generator or expression must produce enough values to reach\nthe sorted index; otherwise, this raises <code>IndexError</code>.</p>\n", "bases": "icepool.evaluator.multiset_evaluator.MultisetEvaluator[typing.Any, typing.Any]"}, "icepool.evaluator.KeepEvaluator.__init__": {"fullname": "icepool.evaluator.KeepEvaluator.__init__", "modulename": "icepool.evaluator", "qualname": "KeepEvaluator.__init__", "kind": "function", "doc": "<p>Constructor.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>index:</strong>  The index to keep.\n<ul>\n<li>If non-negative, this runs in ascending order.</li>\n<li>If negative, this runs in descending order.</li>\n<li>If <code>None</code>, this assumes only one element is produced.</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, "icepool.evaluator.KeepEvaluator.next_state": {"fullname": "icepool.evaluator.KeepEvaluator.next_state", "modulename": "icepool.evaluator", "qualname": "KeepEvaluator.next_state", "kind": "function", "doc": "<p>Implementation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">state</span>, </span><span class=\"param\"><span class=\"n\">outcome</span>, </span><span class=\"param\"><span class=\"n\">count</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "icepool.evaluator.KeepEvaluator.final_outcome": {"fullname": "icepool.evaluator.KeepEvaluator.final_outcome", "modulename": "icepool.evaluator", "qualname": "KeepEvaluator.final_outcome", "kind": "function", "doc": "<p>Implementation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">final_state</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "icepool.evaluator.KeepEvaluator.order": {"fullname": "icepool.evaluator.KeepEvaluator.order", "modulename": "icepool.evaluator", "qualname": "KeepEvaluator.order", "kind": "function", "doc": "<p>The required order is determined by whether the index is negative.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Order</span>:</span></span>", "funcdef": "def"}, "icepool.evaluator.ArgsortEvaluator": {"fullname": "icepool.evaluator.ArgsortEvaluator", "modulename": "icepool.evaluator", "qualname": "ArgsortEvaluator", "kind": "class", "doc": "<p>Returns the indexes of the originating multisets for each rank in their additive union.</p>\n", "bases": "icepool.evaluator.multiset_evaluator.MultisetEvaluator[typing.Any, tuple[tuple[int, ...], ...]]"}, "icepool.evaluator.ArgsortEvaluator.__init__": {"fullname": "icepool.evaluator.ArgsortEvaluator.__init__", "modulename": "icepool.evaluator", "qualname": "ArgsortEvaluator.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">order</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Order</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">Order</span><span class=\"o\">.</span><span class=\"n\">Descending</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">limit</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, "icepool.evaluator.ArgsortEvaluator.next_state": {"fullname": "icepool.evaluator.ArgsortEvaluator.next_state", "modulename": "icepool.evaluator", "qualname": "ArgsortEvaluator.next_state", "kind": "function", "doc": "<p>Implementation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">state</span>, </span><span class=\"param\"><span class=\"n\">_</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">counts</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"fullname": "icepool.evaluator.ArgsortEvaluator.final_outcome", "modulename": "icepool.evaluator", "qualname": "ArgsortEvaluator.final_outcome", "kind": "function", "doc": "<p>Optional function to generate a final outcome from a final state.</p>\n\n<p>By default, the final outcome is equal to the final state.\nNote that <code>None</code> is not a valid outcome for a <code>Die</code>,\nand if there are no outcomes, <code>final_outcome</code> will be immediately\nbe callled with <code>final_state=None</code>.\nSubclasses that want to handle this case should explicitly define what\nhappens.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>final_state:</strong>  A state after all outcomes have been processed.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A final outcome that will be used as part of constructing the result <code>Die</code>.\n  As usual for <code>Die()</code>, this could itself be a <code>Die</code> or <code>icepool.Reroll</code>.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">final_state</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "icepool.evaluator.ArgsortEvaluator.order": {"fullname": "icepool.evaluator.ArgsortEvaluator.order", "modulename": "icepool.evaluator", "qualname": "ArgsortEvaluator.order", "kind": "function", "doc": "<p>Optional function to determine the order in which <code>next_state()</code> will see outcomes.</p>\n\n<p>The default is ascending order. This has better caching behavior with \nmixed standard dice.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <ul>\n  <li>Order.Ascending (= 1)\n  if <code>next_state()</code> should always see the outcomes in ascending order.</li>\n  <li>Order.Descending (= -1)\n  if <code>next_state()</code> should always see the outcomes in descending order.</li>\n  <li>Order.Any (= 0)\n  if the result of the evaluation is order-independent.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Order</span>:</span></span>", "funcdef": "def"}, "icepool.evaluator.CompairEvalautor": {"fullname": "icepool.evaluator.CompairEvalautor", "modulename": "icepool.evaluator", "qualname": "CompairEvalautor", "kind": "class", "doc": "<p>Compares sorted pairs of two multisets and scores wins, ties, and extra elements.</p>\n\n<p>This can be used for e.g. RISK-like mechanics.</p>\n", "bases": "icepool.evaluator.multiset_evaluator.MultisetEvaluator[typing.Any, int]"}, "icepool.evaluator.CompairEvalautor.__init__": {"fullname": "icepool.evaluator.CompairEvalautor.__init__", "modulename": "icepool.evaluator", "qualname": "CompairEvalautor.__init__", "kind": "function", "doc": "<p>Compares sorted pairs of two multisets and scores wins, ties, and extra elements.</p>\n\n<p>For example, <code>left=1</code> would count how many pairs were won by the left\nside, and <code>left=1, right=-1</code> would give the difference in the number of\npairs won by each side.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>order:</strong>  If descending (default), pairs are made in descending order\nand the higher element wins. If ascending, pairs are made in\nascending order and the lower element wins.</li>\n<li><strong>tie:</strong>  The score for each pair that is a tie.</li>\n<li><strong>left:</strong>  The score for each pair that left has a higher outcome.</li>\n<li><strong>right:</strong>  The score for each pair that right has a higher outcome.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">order</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Order</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">Order</span><span class=\"o\">.</span><span class=\"n\">Descending</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">tie</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">left_greater</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">right_greater</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span>)</span>"}, "icepool.evaluator.CompairEvalautor.next_state": {"fullname": "icepool.evaluator.CompairEvalautor.next_state", "modulename": "icepool.evaluator", "qualname": "CompairEvalautor.next_state", "kind": "function", "doc": "<p>State transition function.</p>\n\n<p>This should produce a state given the previous state, an outcome,\nand the number that outcome produced by each generator.</p>\n\n<p><code>evaluate()</code> will always call this using only positional arguments.\nFurthermore, there is no expectation that a subclass be able to handle\nan arbitrary number of counts. Thus, you are free to rename any of\nthe parameters in a subclass, or to replace <code>*counts</code> with a fixed set\nof parameters.</p>\n\n<p>Make sure to handle the base case where <code>state is None</code>.</p>\n\n<p>States must be hashable. At current, they do not have to be orderable.\nHowever, this may change in the future, and if they are not totally\norderable, you must override <code>final_outcome</code> to create totally orderable\nfinal outcomes.</p>\n\n<p>The behavior of returning a <code>Die</code> from <code>next_state</code> is currently\nundefined.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>state:</strong>  A hashable object indicating the state before rolling the\ncurrent outcome. If this is the first outcome being considered,\n<code>state</code> will be <code>None</code>.</li>\n<li><strong>outcome:</strong>  The current outcome.\n<code>next_state</code> will see all rolled outcomes in monotonic order;\neither ascending or descending depending on <code>order()</code>.\nIf there are multiple generators, the set of outcomes is the\nunion of the outcomes of the invididual generators. All outcomes\nwith nonzero count will be seen. Outcomes with zero count\nmay or may not be seen. If you need to enforce that certain\noutcomes are seen even if they have zero count, see\n<code>alignment()</code>.</li>\n<li><strong>*counts:</strong>  One value (usually an <code>int</code>) for each generator output\nindicating how many of the current outcome were produced.\nAll outcomes with nonzero count are guaranteed to be seen.\nTo guarantee that outcomes are seen even if they have zero\ncount, override <code>alignment()</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A hashable object indicating the next state.\n  The special value <code>icepool.Reroll</code> can be used to immediately remove\n  the state from consideration, effectively performing a full reroll.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">state</span>, </span><span class=\"param\"><span class=\"n\">_</span>, </span><span class=\"param\"><span class=\"n\">left</span>, </span><span class=\"param\"><span class=\"n\">right</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "icepool.evaluator.CompairEvalautor.final_outcome": {"fullname": "icepool.evaluator.CompairEvalautor.final_outcome", "modulename": "icepool.evaluator", "qualname": "CompairEvalautor.final_outcome", "kind": "function", "doc": "<p>Optional function to generate a final outcome from a final state.</p>\n\n<p>By default, the final outcome is equal to the final state.\nNote that <code>None</code> is not a valid outcome for a <code>Die</code>,\nand if there are no outcomes, <code>final_outcome</code> will be immediately\nbe callled with <code>final_state=None</code>.\nSubclasses that want to handle this case should explicitly define what\nhappens.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>final_state:</strong>  A state after all outcomes have been processed.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A final outcome that will be used as part of constructing the result <code>Die</code>.\n  As usual for <code>Die()</code>, this could itself be a <code>Die</code> or <code>icepool.Reroll</code>.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">final_state</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "icepool.evaluator.CompairEvalautor.order": {"fullname": "icepool.evaluator.CompairEvalautor.order", "modulename": "icepool.evaluator", "qualname": "CompairEvalautor.order", "kind": "function", "doc": "<p>Optional function to determine the order in which <code>next_state()</code> will see outcomes.</p>\n\n<p>The default is ascending order. This has better caching behavior with \nmixed standard dice.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <ul>\n  <li>Order.Ascending (= 1)\n  if <code>next_state()</code> should always see the outcomes in ascending order.</li>\n  <li>Order.Descending (= -1)\n  if <code>next_state()</code> should always see the outcomes in descending order.</li>\n  <li>Order.Any (= 0)\n  if the result of the evaluation is order-independent.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Order</span>:</span></span>", "funcdef": "def"}, "icepool.evaluator.ExpressionEvaluator": {"fullname": "icepool.evaluator.ExpressionEvaluator", "modulename": "icepool.evaluator", "qualname": "ExpressionEvaluator", "kind": "class", "doc": "<p>Assigns an expression to be evaluated first to each input of an evaluator.</p>\n", "bases": "icepool.evaluator.multiset_evaluator.MultisetEvaluator[-T_contra, +U_co]"}, "icepool.evaluator.ExpressionEvaluator.__init__": {"fullname": "icepool.evaluator.ExpressionEvaluator.__init__", "modulename": "icepool.evaluator", "qualname": "ExpressionEvaluator.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">expressions</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"n\">multiset_expression</span><span class=\"o\">.</span><span class=\"n\">MultisetExpression</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">evaluator</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">evaluator</span><span class=\"o\">.</span><span class=\"n\">multiset_evaluator</span><span class=\"o\">.</span><span class=\"n\">MultisetEvaluator</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">,</span> <span class=\"o\">+</span><span class=\"n\">U_co</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">truth_value</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, "icepool.evaluator.ExpressionEvaluator.next_state": {"fullname": "icepool.evaluator.ExpressionEvaluator.next_state", "modulename": "icepool.evaluator", "qualname": "ExpressionEvaluator.next_state", "kind": "function", "doc": "<p>Adjusts the counts, then forwards to inner.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">state</span>, </span><span class=\"param\"><span class=\"n\">outcome</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">counts</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"fullname": "icepool.evaluator.ExpressionEvaluator.final_outcome", "modulename": "icepool.evaluator", "qualname": "ExpressionEvaluator.final_outcome", "kind": "function", "doc": "<p>Optional function to generate a final outcome from a final state.</p>\n\n<p>By default, the final outcome is equal to the final state.\nNote that <code>None</code> is not a valid outcome for a <code>Die</code>,\nand if there are no outcomes, <code>final_outcome</code> will be immediately\nbe callled with <code>final_state=None</code>.\nSubclasses that want to handle this case should explicitly define what\nhappens.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>final_state:</strong>  A state after all outcomes have been processed.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A final outcome that will be used as part of constructing the result <code>Die</code>.\n  As usual for <code>Die()</code>, this could itself be a <code>Die</code> or <code>icepool.Reroll</code>.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">final_state</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">U_co</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">U_co</span><span class=\"p\">],</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">RerollType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.evaluator.ExpressionEvaluator.order": {"fullname": "icepool.evaluator.ExpressionEvaluator.order", "modulename": "icepool.evaluator", "qualname": "ExpressionEvaluator.order", "kind": "function", "doc": "<p>Forwards to inner.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Order</span>:</span></span>", "funcdef": "def"}, "icepool.evaluator.ExpressionEvaluator.alignment": {"fullname": "icepool.evaluator.ExpressionEvaluator.alignment", "modulename": "icepool.evaluator", "qualname": "ExpressionEvaluator.alignment", "kind": "function", "doc": "<p>Forwards to inner.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">generators</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Collection</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">T_contra</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.evaluator.ExpressionEvaluator.prefix_generators": {"fullname": "icepool.evaluator.ExpressionEvaluator.prefix_generators", "modulename": "icepool.evaluator", "qualname": "ExpressionEvaluator.prefix_generators", "kind": "function", "doc": "<p>An optional sequence of extra generators whose counts will be prepended to *counts.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">multiset_generator</span><span class=\"o\">.</span><span class=\"n\">MultisetGenerator</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.evaluator.ExpressionEvaluator.validate_arity": {"fullname": "icepool.evaluator.ExpressionEvaluator.validate_arity", "modulename": "icepool.evaluator", "qualname": "ExpressionEvaluator.validate_arity", "kind": "function", "doc": "<p>An optional method to verify the total input arity.</p>\n\n<p>This is called after any implicit conversion to generators, but does\nnot include any <code>extra_generators()</code>.</p>\n\n<p>Overriding <code>next_state</code> with a fixed number of counts will make this\ncheck redundant.</p>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><code>ValueError</code> if the total input arity is not valid.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">arity</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "icepool.function": {"fullname": "icepool.function", "modulename": "icepool.function", "kind": "module", "doc": "<p>Free functions.</p>\n"}, "icepool.function.d": {"fullname": "icepool.function.d", "modulename": "icepool.function", "qualname": "d", "kind": "function", "doc": "<p>A standard die, uniformly distributed from <code>1</code> to <code>sides</code> inclusive.</p>\n\n<p>Don't confuse this with <code>icepool.Die()</code>:</p>\n\n<ul>\n<li><code>icepool.Die([6])</code>: A <code>Die</code> that always rolls the integer 6.</li>\n<li><code>icepool.d(6)</code>: A d6.</li>\n</ul>\n\n<p>You can also import individual standard dice from the <code>icepool</code> module, e.g.\n<code>from icepool import d6</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sides</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.function.z": {"fullname": "icepool.function.z", "modulename": "icepool.function", "qualname": "z", "kind": "function", "doc": "<p>A die uniformly distributed from <code>0</code> to <code>sides - 1</code> inclusive.</p>\n\n<p>Equal to d(sides) - 1.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sides</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.function.coin": {"fullname": "icepool.function.coin", "modulename": "icepool.function", "qualname": "coin", "kind": "function", "doc": "<p>A <code>Die</code> that rolls <code>True</code> with probability <code>n / d</code>, and <code>False</code> otherwise.</p>\n\n<p>If <code>n &lt;= 0</code> or <code>n &gt;= d</code> the result will have only one outcome.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>n:</strong>  An int numerator, or a non-integer probability.</li>\n<li><strong>d:</strong>  An int denominator. Should not be provided if the first argument is\nnot an int.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"n\">fractions</span><span class=\"o\">.</span><span class=\"n\">Fraction</span>,</span><span class=\"param\">\t<span class=\"n\">d</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"o\">/</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">max_denominator</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.function.stochastic_round": {"fullname": "icepool.function.stochastic_round", "modulename": "icepool.function", "qualname": "stochastic_round", "kind": "function", "doc": "<p>Randomly rounds a value up or down to the nearest integer according to the two distances.</p>\n\n<p>Specificially, rounds <code>x</code> up with probability <code>x - floor(x)</code> and down\notherwise, producing a <code>Die</code> with up to two outcomes.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>max_denominator:</strong>  If provided, each rounding will be performed\nusing <code>fractions.Fraction.limit_denominator(max_denominator)</code>.\nOtherwise, the rounding will be performed without\n<code>limit_denominator</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">x</span>,</span><span class=\"param\">\t<span class=\"o\">/</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">max_denominator</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.function.one_hot": {"fullname": "icepool.function.one_hot", "modulename": "icepool.function", "qualname": "one_hot", "kind": "function", "doc": "<p>A <code>Die</code> with <code>Vector</code> outcomes with one element set to <code>True</code> uniformly at random and the rest <code>False</code>.</p>\n\n<p>This is an easy (if somewhat expensive) way of representing how many dice\nin a pool rolled each number. For example, the outcomes of <code>10 @ one_hot(6)</code>\nare the <code>(ones, twos, threes, fours, fives, sixes)</code> rolled in 10d6.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sides</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "icepool.function.from_cumulative": {"fullname": "icepool.function.from_cumulative", "modulename": "icepool.function", "qualname": "from_cumulative", "kind": "function", "doc": "<p>Constructs a <code>Die</code> from a sequence of cumulative values.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>outcomes:</strong>  The outcomes of the resulting die. Sorted order is recommended\nbut not necessary.</li>\n<li><strong>cumulative:</strong>  The cumulative values (inclusive) of the outcomes in the\norder they are given to this function. These may be:\n<ul>\n<li><code>int</code> cumulative quantities.</li>\n<li>Dice representing the cumulative distribution at that point.</li>\n</ul></li>\n<li><strong>reverse:</strong>  Iff true, both of the arguments will be reversed. This allows\ne.g. constructing using a survival distribution.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">outcomes</span><span class=\"p\">:</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">cumulative</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]]]</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">reverse</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.function.from_rv": {"fullname": "icepool.function.from_rv", "modulename": "icepool.function", "qualname": "from_rv", "kind": "function", "doc": "<p>Constructs a <code>Die</code> from a rv object (as <code>scipy.stats</code>).</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>rv:</strong>  A rv object (as <code>scipy.stats</code>).</li>\n<li><strong>outcomes:</strong>  An iterable of <code>int</code>s or <code>float</code>s that will be the outcomes\nof the resulting <code>Die</code>.\nIf the distribution is discrete, outcomes must be <code>int</code>s.</li>\n<li><strong>denominator:</strong>  The denominator of the resulting <code>Die</code> will be set to this.</li>\n<li><strong>**kwargs:</strong>  These will be forwarded to <code>rv.cdf()</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">rv</span>,</span><span class=\"param\">\t<span class=\"n\">outcomes</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">denominator</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.function.min_outcome": {"fullname": "icepool.function.min_outcome", "modulename": "icepool.function", "qualname": "min_outcome", "kind": "function", "doc": "<p>The minimum outcome among the dice.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">dice</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "icepool.function.max_outcome": {"fullname": "icepool.function.max_outcome", "modulename": "icepool.function", "qualname": "max_outcome", "kind": "function", "doc": "<p>The maximum outcome among the dice.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">dice</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "icepool.function.align": {"fullname": "icepool.function.align", "modulename": "icepool.function", "qualname": "align", "kind": "function", "doc": "<p>Pads dice with zero quantities so that all have the same set of outcomes.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>*dice:</strong>  Any number of dice or single outcomes convertible to dice.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A tuple of aligned dice.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">dice</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"o\">...</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.function.align_range": {"fullname": "icepool.function.align_range", "modulename": "icepool.function", "qualname": "align_range", "kind": "function", "doc": "<p>Pads dice with zero quantities so that all have the same set of consecutive <code>int</code> outcomes.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>*dice:</strong>  Any number of dice or single outcomes convertible to dice.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A tuple of aligned dice.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">dice</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"o\">...</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.function.commonize_denominator": {"fullname": "icepool.function.commonize_denominator", "modulename": "icepool.function", "qualname": "commonize_denominator", "kind": "function", "doc": "<p>Scale the weights of the dice so that all of them have the same denominator.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>*dice:</strong>  Any number of dice or single outcomes convertible to dice.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A tuple of dice with the same denominator.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">dice</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"o\">...</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.function.reduce": {"fullname": "icepool.function.reduce", "modulename": "icepool.function", "qualname": "reduce", "kind": "function", "doc": "<p>Applies a function of two arguments cumulatively to a sequence of dice.</p>\n\n<p>Analogous to the\n<a href=\"https://docs.python.org/3/library/functools.html#functools.reduce\"><code>functools</code> function of the same name.</a></p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>function:</strong>  The function to map. The function should take two arguments,\nwhich are an outcome from each of two dice, and produce an outcome\nof the same type. It may also return <code>Reroll</code>, in which case the\nentire sequence is effectively rerolled.</li>\n<li><strong>dice:</strong>  A sequence of dice to map the function to, from left to right.</li>\n<li><strong>initial:</strong>  If provided, this will be placed at the front of the sequence\nof dice.</li>\n<li><strong>again_count, again_depth, again_end:</strong>  Forwarded to the final die constructor.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">function</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">RerollType</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">dice</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]]]</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">initial</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.function.accumulate": {"fullname": "icepool.function.accumulate", "modulename": "icepool.function", "qualname": "accumulate", "kind": "function", "doc": "<p>Applies a function of two arguments cumulatively to a sequence of dice, yielding each result in turn.</p>\n\n<p>Analogous to the\n<a href=\"https://docs.python.org/3/library/itertools.html#itertools.accumulate\"><code>itertools function of the same name</code></a>\n, though with no default function and\nthe same parameter order as <code>reduce()</code>.</p>\n\n<p>The number of results is equal to the number of elements of <code>dice</code>, with\none additional element if <code>initial</code> is provided.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>function:</strong>  The function to map. The function should take two arguments,\nwhich are an outcome from each of two dice.</li>\n<li><strong>dice:</strong>  A sequence of dice to map the function to, from left to right.</li>\n<li><strong>initial:</strong>  If provided, this will be placed at the front of the sequence\nof dice.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">function</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]]]</span>,</span><span class=\"param\">\t<span class=\"n\">dice</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]]]</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">initial</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "icepool.function.map": {"fullname": "icepool.function.map", "modulename": "icepool.function", "qualname": "map", "kind": "function", "doc": "<p>Applies <code>func(outcome_of_die_0, outcome_of_die_1, ...)</code> for all joint outcomes, returning a Die.</p>\n\n<p>See <code>map_function</code> for a decorator version of this.</p>\n\n<p>Example: <code>map(lambda a, b: a + b, d6, d6)</code> is the same as d6 + d6.</p>\n\n<p><code>map()</code> is flexible but not very efficient for more than a few dice.\nIf at all possible, use <code>reduce()</code>, <code>MultisetExpression</code> methods, and/or\n<code>MultisetEvaluator</code>s. Even <code>Pool.expand()</code> (which sorts rolls) is more\nefficient than using <code>map</code> on the dice in order.</p>\n\n<p><code>Again</code> can be used but is not recommended with <code>repeat</code> other than 1.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>repl:</strong>  One of the following:\n<ul>\n<li>A callable that takes in one outcome per element of args and\nproduces a new outcome.</li>\n<li>A mapping from old outcomes to new outcomes.\nUnmapped old outcomes stay the same.\nIn this case args must have exactly one element.\nAs with the <code>Die</code> constructor, the new outcomes:</li>\n<li>May be dice rather than just single outcomes.</li>\n<li>The special value <code>icepool.Reroll</code> will reroll that old outcome.</li>\n<li><code>tuples</code> containing <code>Population</code>s will be <code>tupleize</code>d into\n<code>Population</code>s of <code>tuple</code>s.\nThis does not apply to subclasses of <code>tuple</code>s such as <code>namedtuple</code>\nor other classes such as <code>Vector</code>.</li>\n</ul></li>\n<li><strong>*args:</strong>  <code>func</code> will be called with all joint outcomes of these.\nAllowed arg types are:\n<ul>\n<li>Single outcome.</li>\n<li><code>Die</code>. All outcomes will be sent to <code>func</code>.</li>\n<li><code>MultisetExpression</code>. All sorted tuples of outcomes will be sent\nto <code>func</code>, as <code>MultisetExpression.expand()</code>. The expression must\nbe fully bound.</li>\n</ul></li>\n<li><strong>star:</strong>  If <code>True</code>, the first of the args will be unpacked before giving\nthem to <code>func</code>.\nIf not provided, it will be guessed based on the signature of <code>func</code>\nand the number of arguments.</li>\n<li><p><strong>repeat:</strong>  This will be repeated with the same arguments on the\nresult this many times, except the first of <code>args</code> will be replaced\nby the result of the previous iteration.</p>\n\n<p>Note that returning <code>Reroll</code> from <code>repl</code> will effectively reroll all\narguments, including the first argument which represents the result\nof the process up to this point. If you only want to reroll the\ncurrent stage, you can nest another <code>map</code> inside <code>repl</code>.</p>\n\n<p>EXPERIMENTAL: If set to <code>None</code>, the result will be as if this\nwere repeated an infinite number of times. In this case, the\nresult will be in simplest form.</p></li>\n<li><strong>again_count, again_depth, again_end:</strong>  Forwarded to the final die constructor.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">repl</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">RerollType</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">again</span><span class=\"o\">.</span><span class=\"n\">AgainExpression</span><span class=\"p\">]],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">RerollType</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">again</span><span class=\"o\">.</span><span class=\"n\">AgainExpression</span><span class=\"p\">]]]</span>,</span><span class=\"param\">\t<span class=\"o\">/</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Outcome</span> <span class=\"o\">|</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span> <span class=\"o\">|</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"n\">multiset_expression</span><span class=\"o\">.</span><span class=\"n\">MultisetExpression</span>,</span><span class=\"param\">\t<span class=\"n\">star</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">repeat</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">again_count</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">again_depth</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">again_end</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">RerollType</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.function.map_function": {"fullname": "icepool.function.map_function", "modulename": "icepool.function", "qualname": "map_function", "kind": "function", "doc": "<p>Decorator that turns a function that takes outcomes into a function that takes dice.</p>\n\n<p>The result must be a <code>Die</code>.</p>\n\n<p>This is basically a decorator version of <code>map()</code> and produces behavior\nsimilar to AnyDice functions, though Icepool has different typing rules\namong other differences.</p>\n\n<p><code>map_function</code> can either be used with no arguments:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nd\">@map_function</span>\n<span class=\"k\">def</span> <span class=\"nf\">explode_six</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"mi\">6</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"mi\">6</span> <span class=\"o\">+</span> <span class=\"n\">Again</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">x</span>\n\n<span class=\"n\">explode_six</span><span class=\"p\">(</span><span class=\"n\">d6</span><span class=\"p\">,</span> <span class=\"n\">again_depth</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Or with keyword arguments, in which case the extra arguments are bound:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nd\">@map_function</span><span class=\"p\">(</span><span class=\"n\">again_depth</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">explode_six</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"mi\">6</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"mi\">6</span> <span class=\"o\">+</span> <span class=\"n\">Again</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">x</span>\n\n<span class=\"n\">explode_six</span><span class=\"p\">(</span><span class=\"n\">d6</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>again_count, again_depth, again_end:</strong>  Forwarded to the final die constructor.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">function</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">RerollType</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">again</span><span class=\"o\">.</span><span class=\"n\">AgainExpression</span><span class=\"p\">]]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">/</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">star</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">repeat</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">again_count</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">again_depth</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">again_end</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">RerollType</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]],</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]]]]</span>:</span></span>", "funcdef": "def"}, "icepool.function.map_and_time": {"fullname": "icepool.function.map_and_time", "modulename": "icepool.function", "qualname": "map_and_time", "kind": "function", "doc": "<p>Repeatedly map outcomes of the state to other outcomes, while also\ncounting timesteps.</p>\n\n<p>This is useful for representing processes.</p>\n\n<p>The outcomes of the result are  <code>(outcome, time)</code>, where <code>time</code> is the\nnumber of repeats needed to reach an absorbing outcome (an outcome that\nonly leads to itself), or <code>repeat</code>, whichever is lesser.</p>\n\n<p>This will return early if it reaches a fixed point.\nTherefore, you can set <code>repeat</code> equal to the maximum number of\ntime you could possibly be interested in without worrying about\nit causing extra computations after the fixed point.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>repl:</strong>  One of the following:\n<ul>\n<li>A callable returning a new outcome for each old outcome.</li>\n<li>A mapping from old outcomes to new outcomes.\nUnmapped old outcomes stay the same.\nThe new outcomes may be dice rather than just single outcomes.\nThe special value <code>icepool.Reroll</code> will reroll that old outcome.</li>\n</ul></li>\n<li><strong>star:</strong>  If <code>True</code>, the first of the args will be unpacked before giving\nthem to <code>func</code>.\nIf not provided, it will be guessed based on the signature of <code>func</code>\nand the number of arguments.</li>\n<li><strong>repeat:</strong>  This will be repeated with the same arguments on the result\nthis many times.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The <code>Die</code> after the modification.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">repl</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">RerollType</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">again</span><span class=\"o\">.</span><span class=\"n\">AgainExpression</span><span class=\"p\">]],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">RerollType</span><span class=\"p\">,</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">again</span><span class=\"o\">.</span><span class=\"n\">AgainExpression</span><span class=\"p\">]]]</span>,</span><span class=\"param\">\t<span class=\"n\">state</span>,</span><span class=\"param\">\t<span class=\"o\">/</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">extra_args</span>,</span><span class=\"param\">\t<span class=\"n\">star</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">repeat</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "icepool.function.map_to_pool": {"fullname": "icepool.function.map_to_pool", "modulename": "icepool.function", "qualname": "map_to_pool", "kind": "function", "doc": "<p>EXPERIMENTAL: Applies <code>repl(outcome_of_die_0, outcome_of_die_1, ...)</code> for all joint outcomes, producing a MultisetGenerator.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>repl:</strong>  One of the following:\n<ul>\n<li>A callable that takes in one outcome per element of args and\nproduces a <code>MultisetGenerator</code> or something convertible to a <code>Pool</code>.</li>\n<li>A mapping from old outcomes to <code>MultisetGenerator</code> \nor something convertible to a <code>Pool</code>.\nIn this case args must have exactly one element.\nThe new outcomes may be dice rather than just single outcomes.\nThe special value <code>icepool.Reroll</code> will reroll that old outcome.</li>\n</ul></li>\n<li><strong>star:</strong>  If <code>True</code>, the first of the args will be unpacked before giving\nthem to <code>repl</code>.\nIf not provided, it will be guessed based on the signature of <code>repl</code>\nand the number of arguments.</li>\n<li><strong>denominator:</strong>  If provided, the denominator of the result will be this\nvalue. Otherwise it will be the minimum to correctly weight the\npools.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A <code>MultisetGenerator</code> representing the mixture of <code>Pool</code>s. Note<br />\n  that this is not technically a <code>Pool</code>, though it supports most of \n  the same operations.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  If <code>denominator</code> cannot be made consistent with the \nresulting mixture of pools.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">repl</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">multiset_generator</span><span class=\"o\">.</span><span class=\"n\">MultisetGenerator</span><span class=\"p\">,</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"o\">&lt;</span><span class=\"n\">RerollType</span><span class=\"o\">.</span><span class=\"n\">Reroll</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Reroll&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">]],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">multiset_generator</span><span class=\"o\">.</span><span class=\"n\">MultisetGenerator</span><span class=\"p\">,</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"o\">&lt;</span><span class=\"n\">RerollType</span><span class=\"o\">.</span><span class=\"n\">Reroll</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Reroll&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">]]]</span>,</span><span class=\"param\">\t<span class=\"o\">/</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Outcome</span> <span class=\"o\">|</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">die</span><span class=\"o\">.</span><span class=\"n\">Die</span> <span class=\"o\">|</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"n\">multiset_expression</span><span class=\"o\">.</span><span class=\"n\">MultisetExpression</span>,</span><span class=\"param\">\t<span class=\"n\">star</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">denominator</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">multiset_generator</span><span class=\"o\">.</span><span class=\"n\">MultisetGenerator</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "icepool.typing": {"fullname": "icepool.typing", "modulename": "icepool.typing", "kind": "module", "doc": "<p></p>\n"}, "icepool.typing.S": {"fullname": "icepool.typing.S", "modulename": "icepool.typing", "qualname": "S", "kind": "variable", "doc": "<p>A sequence type.</p>\n", "default_value": "~S"}, "icepool.typing.T": {"fullname": "icepool.typing.T", "modulename": "icepool.typing", "qualname": "T", "kind": "variable", "doc": "<p>An outcome type.</p>\n", "default_value": "~T"}, "icepool.typing.T_co": {"fullname": "icepool.typing.T_co", "modulename": "icepool.typing", "qualname": "T_co", "kind": "variable", "doc": "<p>An outcome type.</p>\n", "default_value": "+T_co"}, "icepool.typing.T_contra": {"fullname": "icepool.typing.T_contra", "modulename": "icepool.typing", "qualname": "T_contra", "kind": "variable", "doc": "<p>An outcome type.</p>\n", "default_value": "-T_contra"}, "icepool.typing.U": {"fullname": "icepool.typing.U", "modulename": "icepool.typing", "qualname": "U", "kind": "variable", "doc": "<p>Another outcome type.</p>\n", "default_value": "~U"}, "icepool.typing.U_co": {"fullname": "icepool.typing.U_co", "modulename": "icepool.typing", "qualname": "U_co", "kind": "variable", "doc": "<p>Another outcome type.</p>\n", "default_value": "+U_co"}, "icepool.typing.Qs": {"fullname": "icepool.typing.Qs", "modulename": "icepool.typing", "qualname": "Qs", "kind": "variable", "doc": "<p>A tuple of count types. In this future this may be replaced with a TypeVarTuple.</p>\n", "default_value": "~Qs"}, "icepool.typing.Order": {"fullname": "icepool.typing.Order", "modulename": "icepool.typing", "qualname": "Order", "kind": "class", "doc": "<p>Can be used to define what order outcomes are seen in by MultisetEvaluators.</p>\n", "bases": "enum.IntEnum"}, "icepool.typing.Order.Ascending": {"fullname": "icepool.typing.Order.Ascending", "modulename": "icepool.typing", "qualname": "Order.Ascending", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Order.Ascending: 1&gt;"}, "icepool.typing.Order.Descending": {"fullname": "icepool.typing.Order.Descending", "modulename": "icepool.typing", "qualname": "Order.Descending", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Order.Descending: -1&gt;"}, "icepool.typing.Order.Any": {"fullname": "icepool.typing.Order.Any", "modulename": "icepool.typing", "qualname": "Order.Any", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Order.Any: 0&gt;"}, "icepool.typing.Order.merge": {"fullname": "icepool.typing.Order.merge", "modulename": "icepool.typing", "qualname": "Order.merge", "kind": "function", "doc": "<p>Merges the given Orders.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p><code>Any</code> if all arguments are <code>Any</code>.\n  <code>Ascending</code> if there is at least one <code>Ascending</code> in the arguments.\n  <code>Descending</code> if there is at least one <code>Descending</code> in the arguments.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><code>ValueError</code> if both <code>Ascending</code> and <code>Descending</code> are in the</li>\n<li>arguments.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">orders</span><span class=\"p\">:</span> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Order</span></span><span class=\"return-annotation\">) -> <span class=\"n\">icepool</span><span class=\"o\">.</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Order</span>:</span></span>", "funcdef": "def"}, "icepool.typing.RerollType": {"fullname": "icepool.typing.RerollType", "modulename": "icepool.typing", "qualname": "RerollType", "kind": "class", "doc": "<p>The type of the Reroll singleton.</p>\n", "bases": "enum.Enum"}, "icepool.typing.RerollType.Reroll": {"fullname": "icepool.typing.RerollType.Reroll", "modulename": "icepool.typing", "qualname": "RerollType.Reroll", "kind": "variable", "doc": "<p>Indicates an outcome should be rerolled (with unlimited depth).</p>\n", "default_value": "&lt;RerollType.Reroll: &#x27;Reroll&#x27;&gt;"}, "icepool.typing.Outcome": {"fullname": "icepool.typing.Outcome", "modulename": "icepool.typing", "qualname": "Outcome", "kind": "class", "doc": "<p>Protocol to attempt to verify that outcome types are hashable and sortable.</p>\n\n<p>Far from foolproof, e.g. it cannot enforce total ordering.</p>\n", "bases": "typing.Hashable, typing.Protocol[-T_contra]"}, "icepool.typing.ImplicitConversionError": {"fullname": "icepool.typing.ImplicitConversionError", "modulename": "icepool.typing", "qualname": "ImplicitConversionError", "kind": "class", "doc": "<p>Indicates that an implicit conversion failed.</p>\n", "bases": "builtins.TypeError"}, "icepool.typing.count_positional_parameters": {"fullname": "icepool.typing.count_positional_parameters", "modulename": "icepool.typing", "qualname": "count_positional_parameters", "kind": "function", "doc": "<p>Counts the number of positional parameters of the callable.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Two <code>int</code>s. The first is the number of required positional arguments;\n  the second is total number of positional arguments, or <code>None</code> if there\n  is a variadic <code>*args</code>.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">function</span><span class=\"p\">:</span> <span class=\"n\">Callable</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "icepool.typing.guess_star": {"fullname": "icepool.typing.guess_star", "modulename": "icepool.typing", "qualname": "guess_star", "kind": "function", "doc": "<p>Guesses whether the first argument should be unpacked before giving it to the function.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>arg_count:</strong>  The number of arguments that will be provided to the function.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">function</span>, </span><span class=\"param\"><span class=\"n\">arg_count</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}}, "docInfo": {"icepool": {"qualname": 0, "fullname": 1, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 110}, "icepool.d": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 45, "bases": 0, "doc": 87}, "icepool.z": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 45, "bases": 0, "doc": 25}, "icepool.coin": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 113, "bases": 0, "doc": 88}, "icepool.stochastic_round": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 73, "bases": 0, "doc": 91}, "icepool.one_hot": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 56, "bases": 0, "doc": 79}, "icepool.Outcome": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 6, "doc": 28}, "icepool.Die": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 204}, "icepool.Die.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 199, "bases": 0, "doc": 650}, "icepool.Die.unary_operator": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 109, "bases": 0, "doc": 125}, "icepool.Die.binary_operator": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 106, "bases": 0, "doc": 293}, "icepool.Die.keys": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 38, "bases": 0, "doc": 11}, "icepool.Die.values": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 29, "bases": 0, "doc": 11}, "icepool.Die.items": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 38, "bases": 0, "doc": 13}, "icepool.Die.simplify": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 38, "bases": 0, "doc": 11}, "icepool.Die.reroll": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 146, "bases": 0, "doc": 155}, "icepool.Die.filter": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 133, "bases": 0, "doc": 160}, "icepool.Die.split": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 102, "bases": 0, "doc": 123}, "icepool.Die.truncate": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 63, "bases": 0, "doc": 89}, "icepool.Die.clip": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 63, "bases": 0, "doc": 91}, "icepool.Die.set_range": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 112, "bases": 0, "doc": 110}, "icepool.Die.set_outcomes": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 57, "bases": 0, "doc": 41}, "icepool.Die.trim": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 38, "bases": 0, "doc": 8}, "icepool.Die.map": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 414, "bases": 0, "doc": 34}, "icepool.Die.map_and_time": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 248, "bases": 0, "doc": 37}, "icepool.Die.mean_time_to_sum": {"qualname": 5, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 63, "bases": 0, "doc": 67}, "icepool.Die.explode": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 158, "bases": 0, "doc": 191}, "icepool.Die.if_else": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 266, "bases": 0, "doc": 48}, "icepool.Die.is_in": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 59, "bases": 0, "doc": 19}, "icepool.Die.count": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 73, "bases": 0, "doc": 18}, "icepool.Die.pool": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 79, "bases": 0, "doc": 110}, "icepool.Die.keep": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 115, "bases": 0, "doc": 448}, "icepool.Die.lowest": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 95, "bases": 0, "doc": 188}, "icepool.Die.highest": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 104, "bases": 0, "doc": 177}, "icepool.Die.middle": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 123, "bases": 0, "doc": 138}, "icepool.Die.map_to_pool": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 329, "bases": 0, "doc": 314}, "icepool.Die.explode_to_pool": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 169, "bases": 0, "doc": 189}, "icepool.Die.reroll_to_pool": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 212, "bases": 0, "doc": 357}, "icepool.Die.abs": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 38, "bases": 0, "doc": 3}, "icepool.Die.round": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 52, "bases": 0, "doc": 3}, "icepool.Die.stochastic_round": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 67, "bases": 0, "doc": 80}, "icepool.Die.trunc": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 29, "bases": 0, "doc": 3}, "icepool.Die.floor": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 29, "bases": 0, "doc": 3}, "icepool.Die.ceil": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 29, "bases": 0, "doc": 3}, "icepool.Die.zero": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 38, "bases": 0, "doc": 59}, "icepool.Die.zero_outcome": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 17, "bases": 0, "doc": 28}, "icepool.Die.cmp": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 40, "bases": 0, "doc": 54}, "icepool.Die.sign": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 35, "bases": 0, "doc": 42}, "icepool.Die.equals": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 41, "bases": 0, "doc": 191}, "icepool.Population": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 9, "doc": 37}, "icepool.Population.keys": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 38, "bases": 0, "doc": 11}, "icepool.Population.values": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 29, "bases": 0, "doc": 11}, "icepool.Population.items": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 38, "bases": 0, "doc": 13}, "icepool.Population.outcomes": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 38, "bases": 0, "doc": 32}, "icepool.Population.common_outcome_length": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 20, "bases": 0, "doc": 26}, "icepool.Population.is_empty": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 12}, "icepool.Population.min_outcome": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 17, "bases": 0, "doc": 6}, "icepool.Population.max_outcome": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 17, "bases": 0, "doc": 6}, "icepool.Population.nearest": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 87, "bases": 0, "doc": 84}, "icepool.Population.quantity": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 125, "bases": 0, "doc": 66}, "icepool.Population.quantities": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 133, "bases": 0, "doc": 39}, "icepool.Population.denominator": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 32}, "icepool.Population.scale_quantities": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 33, "bases": 0, "doc": 9}, "icepool.Population.has_zero_quantities": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 18}, "icepool.Population.probability": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 160, "bases": 0, "doc": 11}, "icepool.Population.probabilities": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 151, "bases": 0, "doc": 43}, "icepool.Population.mode": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 24}, "icepool.Population.modal_quantity": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 10}, "icepool.Population.kolmogorov_smirnov": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 11}, "icepool.Population.cramer_von_mises": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 14}, "icepool.Population.median": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 40}, "icepool.Population.median_low": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 17, "bases": 0, "doc": 13}, "icepool.Population.median_high": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 17, "bases": 0, "doc": 13}, "icepool.Population.quantile": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 38, "bases": 0, "doc": 53}, "icepool.Population.quantile_low": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 44, "bases": 0, "doc": 24}, "icepool.Population.quantile_high": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 44, "bases": 0, "doc": 24}, "icepool.Population.mean": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 84, "bases": 0, "doc": 3}, "icepool.Population.variance": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 84, "bases": 0, "doc": 12}, "icepool.Population.standard_deviation": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 73, "bases": 0, "doc": 3}, "icepool.Population.sd": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 73, "bases": 0, "doc": 3}, "icepool.Population.standardized_moment": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 84, "bases": 0, "doc": 3}, "icepool.Population.skewness": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 73, "bases": 0, "doc": 3}, "icepool.Population.excess_kurtosis": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 73, "bases": 0, "doc": 3}, "icepool.Population.entropy": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 40}, "icepool.Population.marginals": {"qualname": 2, "fullname": 3, "annotation": 6, "default_value": 0, "signature": 0, "bases": 0, "doc": 68}, "icepool.Population.covariance": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 128, "bases": 0, "doc": 3}, "icepool.Population.correlation": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 117, "bases": 0, "doc": 3}, "icepool.Population.to_one_hot": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 53, "bases": 0, "doc": 86}, "icepool.Population.sample": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 17, "bases": 0, "doc": 45}, "icepool.Population.format": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 37, "bases": 0, "doc": 227}, "icepool.tupleize": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 112, "bases": 0, "doc": 211}, "icepool.vectorize": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 130, "bases": 0, "doc": 211}, "icepool.Vector": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 6, "doc": 24}, "icepool.Vector.unary_operator": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 80, "bases": 0, "doc": 32}, "icepool.Vector.abs": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 38, "bases": 0, "doc": 3}, "icepool.Vector.round": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 52, "bases": 0, "doc": 3}, "icepool.Vector.trunc": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 29, "bases": 0, "doc": 3}, "icepool.Vector.floor": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 29, "bases": 0, "doc": 3}, "icepool.Vector.ceil": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 29, "bases": 0, "doc": 3}, "icepool.Vector.binary_operator": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 106, "bases": 0, "doc": 144}, "icepool.Vector.reverse_binary_operator": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 86, "bases": 0, "doc": 11}, "icepool.Vector.append": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 34, "bases": 0, "doc": 3}, "icepool.Vector.concatenate": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 39, "bases": 0, "doc": 3}, "icepool.Symbols": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 680}, "icepool.Symbols.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 46, "bases": 0, "doc": 60}, "icepool.Symbols.additive_union": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 69, "bases": 0, "doc": 10}, "icepool.Symbols.difference": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 69, "bases": 0, "doc": 11}, "icepool.Symbols.intersection": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 69, "bases": 0, "doc": 9}, "icepool.Symbols.union": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 69, "bases": 0, "doc": 9}, "icepool.Symbols.symmetric_difference": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 67, "bases": 0, "doc": 13}, "icepool.Symbols.multiply_counts": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 39, "bases": 0, "doc": 9}, "icepool.Symbols.divide_counts": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 39, "bases": 0, "doc": 11}, "icepool.Symbols.count_subset": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 83, "bases": 0, "doc": 14}, "icepool.Symbols.modulo_counts": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 39, "bases": 0, "doc": 3}, "icepool.Symbols.issubset": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 50, "bases": 0, "doc": 48}, "icepool.Symbols.issuperset": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 50, "bases": 0, "doc": 48}, "icepool.Symbols.isdisjoint": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 50, "bases": 0, "doc": 32}, "icepool.Symbols.has_negative_counts": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 8}, "icepool.Symbols.count": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 8}, "icepool.Again": {"qualname": 1, "fullname": 2, "annotation": 2, "default_value": 9, "signature": 0, "bases": 0, "doc": 502}, "icepool.CountsKeysView": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 16}, "icepool.CountsKeysView.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 37, "bases": 0, "doc": 3}, "icepool.CountsValuesView": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 16}, "icepool.CountsValuesView.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 29, "bases": 0, "doc": 3}, "icepool.CountsItemsView": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 6, "doc": 16}, "icepool.CountsItemsView.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 29, "bases": 0, "doc": 3}, "icepool.from_cumulative": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 125, "bases": 0, "doc": 111}, "icepool.from_rv": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 113, "bases": 0, "doc": 111}, "icepool.lowest": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 167, "bases": 0, "doc": 213}, "icepool.highest": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 167, "bases": 0, "doc": 233}, "icepool.middle": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 189, "bases": 0, "doc": 182}, "icepool.min_outcome": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 58, "bases": 0, "doc": 9}, "icepool.max_outcome": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 58, "bases": 0, "doc": 9}, "icepool.align": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 91, "bases": 0, "doc": 55}, "icepool.align_range": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 81, "bases": 0, "doc": 59}, "icepool.commonize_denominator": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 91, "bases": 0, "doc": 59}, "icepool.reduce": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 229, "bases": 0, "doc": 143}, "icepool.accumulate": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 217, "bases": 0, "doc": 150}, "icepool.map": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 462, "bases": 0, "doc": 547}, "icepool.map_function": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 387, "bases": 0, "doc": 295}, "icepool.map_and_time": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 282, "bases": 0, "doc": 268}, "icepool.map_to_pool": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 499, "bases": 0, "doc": 264}, "icepool.Reroll": {"qualname": 1, "fullname": 2, "annotation": 2, "default_value": 9, "signature": 0, "bases": 0, "doc": 140}, "icepool.RerollType": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 9}, "icepool.RerollType.Reroll": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 9, "signature": 0, "bases": 0, "doc": 12}, "icepool.Pool": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 99}, "icepool.Pool.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 196, "bases": 0, "doc": 275}, "icepool.Pool.clear_cache": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 8}, "icepool.Pool.raw_size": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 16}, "icepool.Pool.denominator": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 12}, "icepool.Pool.unique_dice": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 41, "bases": 0, "doc": 11}, "icepool.Pool.outcomes": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 22, "bases": 0, "doc": 17}, "icepool.Pool.output_arity": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 11}, "icepool.Pool.min_outcome": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 12}, "icepool.Pool.max_outcome": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 12}, "icepool.Pool.additive_union": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 104, "bases": 0, "doc": 148}, "icepool.standard_pool": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 68, "bases": 0, "doc": 77}, "icepool.MultisetGenerator": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 8, "doc": 128}, "icepool.MultisetGenerator.outcomes": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 22, "bases": 0, "doc": 13}, "icepool.MultisetGenerator.output_arity": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 11}, "icepool.MultisetGenerator.denominator": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 12}, "icepool.MultisetGenerator.equals": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 19, "bases": 0, "doc": 12}, "icepool.MultisetGenerator.order": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 43}, "icepool.MultisetGenerator.min_outcome": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 3}, "icepool.MultisetGenerator.max_outcome": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 3}, "icepool.MultisetGenerator.sample": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 27, "bases": 0, "doc": 48}, "icepool.Alignment": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 7, "doc": 31}, "icepool.Alignment.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 22, "bases": 0, "doc": 3}, "icepool.Alignment.outcomes": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 22, "bases": 0, "doc": 13}, "icepool.Alignment.output_arity": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 11}, "icepool.Alignment.denominator": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 12}, "icepool.MultisetExpression": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 6, "doc": 890}, "icepool.MultisetExpression.order": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 43}, "icepool.MultisetExpression.additive_union": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 112, "bases": 0, "doc": 148}, "icepool.MultisetExpression.difference": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 112, "bases": 0, "doc": 191}, "icepool.MultisetExpression.intersection": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 112, "bases": 0, "doc": 170}, "icepool.MultisetExpression.union": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 112, "bases": 0, "doc": 140}, "icepool.MultisetExpression.symmetric_difference": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 122, "bases": 0, "doc": 152}, "icepool.MultisetExpression.keep_outcomes": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 122, "bases": 0, "doc": 77}, "icepool.MultisetExpression.drop_outcomes": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 122, "bases": 0, "doc": 77}, "icepool.MultisetExpression.map_counts": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 136, "bases": 0, "doc": 35}, "icepool.MultisetExpression.multiply_counts": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 58, "bases": 0, "doc": 121}, "icepool.MultisetExpression.divide_counts": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 58, "bases": 0, "doc": 81}, "icepool.MultisetExpression.modulo_counts": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 58, "bases": 0, "doc": 85}, "icepool.MultisetExpression.keep_counts": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 128, "bases": 0, "doc": 175}, "icepool.MultisetExpression.unique": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 65, "bases": 0, "doc": 105}, "icepool.MultisetExpression.keep": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 153, "bases": 0, "doc": 199}, "icepool.MultisetExpression.lowest": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 89, "bases": 0, "doc": 172}, "icepool.MultisetExpression.highest": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 89, "bases": 0, "doc": 172}, "icepool.MultisetExpression.sort_match": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 203, "bases": 0, "doc": 442}, "icepool.MultisetExpression.maximum_match": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 181, "bases": 0, "doc": 627}, "icepool.MultisetExpression.evaluate": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 158, "bases": 0, "doc": 80}, "icepool.MultisetExpression.expand": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 152, "bases": 0, "doc": 49}, "icepool.MultisetExpression.sum": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 148, "bases": 0, "doc": 9}, "icepool.MultisetExpression.count": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 76, "bases": 0, "doc": 68}, "icepool.MultisetExpression.any": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 76, "bases": 0, "doc": 13}, "icepool.MultisetExpression.highest_outcome_and_count": {"qualname": 5, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 104, "bases": 0, "doc": 32}, "icepool.MultisetExpression.all_counts": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 122, "bases": 0, "doc": 129}, "icepool.MultisetExpression.largest_count": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 76, "bases": 0, "doc": 14}, "icepool.MultisetExpression.largest_count_and_outcome": {"qualname": 5, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 104, "bases": 0, "doc": 15}, "icepool.MultisetExpression.count_subset": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 188, "bases": 0, "doc": 90}, "icepool.MultisetExpression.largest_straight": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 99, "bases": 0, "doc": 22}, "icepool.MultisetExpression.largest_straight_and_outcome": {"qualname": 5, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 119, "bases": 0, "doc": 29}, "icepool.MultisetExpression.all_straights": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 121, "bases": 0, "doc": 52}, "icepool.MultisetExpression.all_straights_reduce_counts": {"qualname": 5, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 196, "bases": 0, "doc": 45}, "icepool.MultisetExpression.argsort": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 231, "bases": 0, "doc": 198}, "icepool.MultisetExpression.issubset": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 157, "bases": 0, "doc": 109}, "icepool.MultisetExpression.issuperset": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 157, "bases": 0, "doc": 217}, "icepool.MultisetExpression.isdisjoint": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 157, "bases": 0, "doc": 43}, "icepool.MultisetExpression.compair_lt": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 142, "bases": 0, "doc": 70}, "icepool.MultisetExpression.compair_le": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 142, "bases": 0, "doc": 139}, "icepool.MultisetExpression.compair_gt": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 142, "bases": 0, "doc": 139}, "icepool.MultisetExpression.compair_ge": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 142, "bases": 0, "doc": 70}, "icepool.MultisetExpression.compair_eq": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 142, "bases": 0, "doc": 70}, "icepool.MultisetExpression.compair_ne": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 142, "bases": 0, "doc": 70}, "icepool.MultisetEvaluator": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 8, "doc": 271}, "icepool.MultisetEvaluator.next_state": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 55, "bases": 0, "doc": 385}, "icepool.MultisetEvaluator.final_outcome": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 80, "bases": 0, "doc": 144}, "icepool.MultisetEvaluator.order": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 102}, "icepool.MultisetEvaluator.alignment": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 44, "bases": 0, "doc": 159}, "icepool.MultisetEvaluator.range_alignment": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 36, "bases": 0, "doc": 124}, "icepool.MultisetEvaluator.prefix_generators": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 44, "bases": 0, "doc": 16}, "icepool.MultisetEvaluator.validate_arity": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 74}, "icepool.MultisetEvaluator.evaluate": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 159, "bases": 0, "doc": 150}, "icepool.MultisetEvaluator.sample": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 95, "bases": 0, "doc": 15}, "icepool.Order": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 16}, "icepool.Order.Ascending": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 7, "signature": 0, "bases": 0, "doc": 3}, "icepool.Order.Descending": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 7, "signature": 0, "bases": 0, "doc": 3}, "icepool.Order.Any": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 7, "signature": 0, "bases": 0, "doc": 3}, "icepool.Order.merge": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 41, "bases": 0, "doc": 85}, "icepool.Deck": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 16}, "icepool.Deck.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 71, "bases": 0, "doc": 187}, "icepool.Deck.keys": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 38, "bases": 0, "doc": 11}, "icepool.Deck.values": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 29, "bases": 0, "doc": 11}, "icepool.Deck.items": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 38, "bases": 0, "doc": 13}, "icepool.Deck.size": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 32}, "icepool.Deck.deal": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 103, "bases": 0, "doc": 22}, "icepool.Deck.additive_union": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 84, "bases": 0, "doc": 7}, "icepool.Deck.difference": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 84, "bases": 0, "doc": 17}, "icepool.Deck.intersection": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 84, "bases": 0, "doc": 9}, "icepool.Deck.union": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 84, "bases": 0, "doc": 16}, "icepool.Deck.symmetric_difference": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 82, "bases": 0, "doc": 16}, "icepool.Deck.multiply_counts": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 48, "bases": 0, "doc": 9}, "icepool.Deck.divide_counts": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 48, "bases": 0, "doc": 9}, "icepool.Deck.modulo_counts": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 48, "bases": 0, "doc": 7}, "icepool.Deck.map": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 213, "bases": 0, "doc": 119}, "icepool.Deal": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 16}, "icepool.Deal.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 48, "bases": 0, "doc": 96}, "icepool.Deal.deck": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 37, "bases": 0, "doc": 12}, "icepool.Deal.hand_sizes": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 27, "bases": 0, "doc": 14}, "icepool.Deal.total_cards_dealt": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 9}, "icepool.Deal.outcomes": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 37, "bases": 0, "doc": 41}, "icepool.Deal.output_arity": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 11}, "icepool.Deal.denominator": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 12}, "icepool.MultiDeal": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 6, "doc": 15}, "icepool.MultiDeal.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 50, "bases": 0, "doc": 136}, "icepool.MultiDeal.deck": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 37, "bases": 0, "doc": 12}, "icepool.MultiDeal.hand_sizes": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 14}, "icepool.MultiDeal.total_cards_dealt": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 9}, "icepool.MultiDeal.outcomes": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 37, "bases": 0, "doc": 41}, "icepool.MultiDeal.output_arity": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 11}, "icepool.MultiDeal.denominator": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 12}, "icepool.multiset_function": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 259, "bases": 0, "doc": 526}, "icepool.evaluator": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 6}, "icepool.evaluator.JointEvaluator": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 8, "doc": 19}, "icepool.evaluator.JointEvaluator.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 3}, "icepool.evaluator.JointEvaluator.next_state": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 28, "bases": 0, "doc": 44}, "icepool.evaluator.JointEvaluator.final_outcome": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 36, "bases": 0, "doc": 45}, "icepool.evaluator.JointEvaluator.order": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 39}, "icepool.evaluator.JointEvaluator.alignment": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 29, "bases": 0, "doc": 159}, "icepool.evaluator.JointEvaluator.prefix_generators": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 44, "bases": 0, "doc": 16}, "icepool.evaluator.JointEvaluator.validate_arity": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 74}, "icepool.evaluator.ExpandEvaluator": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 7, "doc": 35}, "icepool.evaluator.ExpandEvaluator.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 49, "bases": 0, "doc": 3}, "icepool.evaluator.ExpandEvaluator.next_state": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 4}, "icepool.evaluator.ExpandEvaluator.order": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 38, "bases": 0, "doc": 6}, "icepool.evaluator.ExpandEvaluator.final_outcome": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 20, "bases": 0, "doc": 4}, "icepool.evaluator.SumEvaluator": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 8, "doc": 6}, "icepool.evaluator.SumEvaluator.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 39, "bases": 0, "doc": 20}, "icepool.evaluator.SumEvaluator.next_state": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 4}, "icepool.evaluator.SumEvaluator.order": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 38, "bases": 0, "doc": 6}, "icepool.evaluator.sum_evaluator": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 9, "signature": 0, "bases": 0, "doc": 3}, "icepool.evaluator.CountEvaluator": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 7, "doc": 26}, "icepool.evaluator.CountEvaluator.next_state": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 4}, "icepool.evaluator.CountEvaluator.final_outcome": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 20, "bases": 0, "doc": 4}, "icepool.evaluator.CountEvaluator.order": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 38, "bases": 0, "doc": 6}, "icepool.evaluator.count_evaluator": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 9, "signature": 0, "bases": 0, "doc": 3}, "icepool.evaluator.AnyEvaluator": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 7, "doc": 14}, "icepool.evaluator.AnyEvaluator.next_state": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 4}, "icepool.evaluator.AnyEvaluator.final_outcome": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 20, "bases": 0, "doc": 4}, "icepool.evaluator.AnyEvaluator.order": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 38, "bases": 0, "doc": 6}, "icepool.evaluator.any_evaluator": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 9, "signature": 0, "bases": 0, "doc": 3}, "icepool.evaluator.HighestOutcomeAndCountEvaluator": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 9, "doc": 34}, "icepool.evaluator.HighestOutcomeAndCountEvaluator.next_state": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 4}, "icepool.evaluator.HighestOutcomeAndCountEvaluator.order": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 38, "bases": 0, "doc": 6}, "icepool.evaluator.HighestOutcomeAndCountEvaluator.alignment": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 7}, "icepool.evaluator.LargestCountEvaluator": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 7, "doc": 9}, "icepool.evaluator.LargestCountEvaluator.next_state": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 27, "bases": 0, "doc": 4}, "icepool.evaluator.LargestCountEvaluator.order": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 38, "bases": 0, "doc": 6}, "icepool.evaluator.LargestCountAndOutcomeEvaluator": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 9, "doc": 13}, "icepool.evaluator.LargestCountAndOutcomeEvaluator.next_state": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 4}, "icepool.evaluator.LargestCountAndOutcomeEvaluator.order": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 38, "bases": 0, "doc": 6}, "icepool.evaluator.CountSubsetEvaluator": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 7, "doc": 16}, "icepool.evaluator.CountSubsetEvaluator.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 33, "bases": 0, "doc": 38}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 385}, "icepool.evaluator.CountSubsetEvaluator.order": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 38, "bases": 0, "doc": 6}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 17, "bases": 0, "doc": 144}, "icepool.evaluator.AllCountsEvaluator": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 8, "doc": 24}, "icepool.evaluator.AllCountsEvaluator.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 45}, "icepool.evaluator.AllCountsEvaluator.next_state": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 4}, "icepool.evaluator.AllCountsEvaluator.final_outcome": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 20, "bases": 0, "doc": 4}, "icepool.evaluator.AllCountsEvaluator.order": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 38, "bases": 0, "doc": 6}, "icepool.evaluator.AllCountsEvaluator.alignment": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 7}, "icepool.evaluator.LargestStraightEvaluator": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 6, "doc": 9}, "icepool.evaluator.LargestStraightEvaluator.next_state": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 27, "bases": 0, "doc": 4}, "icepool.evaluator.LargestStraightEvaluator.final_outcome": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 20, "bases": 0, "doc": 4}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 36, "bases": 0, "doc": 124}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 7, "doc": 17}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.next_state": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 4}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.final_outcome": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 4}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.order": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 38, "bases": 0, "doc": 5}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 36, "bases": 0, "doc": 124}, "icepool.evaluator.AllStraightsEvaluator": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 7, "doc": 43}, "icepool.evaluator.AllStraightsEvaluator.next_state": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 27, "bases": 0, "doc": 4}, "icepool.evaluator.AllStraightsEvaluator.final_outcome": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 33, "bases": 0, "doc": 4}, "icepool.evaluator.AllStraightsEvaluator.order": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 38, "bases": 0, "doc": 5}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 36, "bases": 0, "doc": 124}, "icepool.evaluator.AllStraightsReduceCountsEvaluator": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 8, "doc": 44}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 58, "bases": 0, "doc": 47}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.next_state": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 27, "bases": 0, "doc": 4}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.final_outcome": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 43, "bases": 0, "doc": 4}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 36, "bases": 0, "doc": 124}, "icepool.evaluator.ComparisonEvaluator": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 7, "doc": 10}, "icepool.evaluator.ComparisonEvaluator.any_all": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 46, "bases": 0, "doc": 36}, "icepool.evaluator.ComparisonEvaluator.default_outcome": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 10, "bases": 0, "doc": 14}, "icepool.evaluator.ComparisonEvaluator.next_state": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 4}, "icepool.evaluator.ComparisonEvaluator.final_outcome": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 20, "bases": 0, "doc": 4}, "icepool.evaluator.ComparisonEvaluator.order": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 38, "bases": 0, "doc": 6}, "icepool.evaluator.IsSubsetEvaluator": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 7, "doc": 10}, "icepool.evaluator.IsSubsetEvaluator.any_all": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 46, "bases": 0, "doc": 36}, "icepool.evaluator.IsSubsetEvaluator.default_outcome": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 10, "bases": 0, "doc": 14}, "icepool.evaluator.IsProperSubsetEvaluator": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 7, "doc": 10}, "icepool.evaluator.IsProperSubsetEvaluator.any_all": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 46, "bases": 0, "doc": 36}, "icepool.evaluator.IsProperSubsetEvaluator.default_outcome": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 10, "bases": 0, "doc": 14}, "icepool.evaluator.IsSupersetEvaluator": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 7, "doc": 10}, "icepool.evaluator.IsSupersetEvaluator.any_all": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 46, "bases": 0, "doc": 36}, "icepool.evaluator.IsSupersetEvaluator.default_outcome": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 10, "bases": 0, "doc": 14}, "icepool.evaluator.IsProperSupersetEvaluator": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 7, "doc": 10}, "icepool.evaluator.IsProperSupersetEvaluator.any_all": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 46, "bases": 0, "doc": 36}, "icepool.evaluator.IsProperSupersetEvaluator.default_outcome": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 10, "bases": 0, "doc": 14}, "icepool.evaluator.IsEqualSetEvaluator": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 7, "doc": 10}, "icepool.evaluator.IsEqualSetEvaluator.any_all": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 46, "bases": 0, "doc": 36}, "icepool.evaluator.IsEqualSetEvaluator.default_outcome": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 10, "bases": 0, "doc": 14}, "icepool.evaluator.IsNotEqualSetEvaluator": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 7, "doc": 10}, "icepool.evaluator.IsNotEqualSetEvaluator.any_all": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 46, "bases": 0, "doc": 36}, "icepool.evaluator.IsNotEqualSetEvaluator.default_outcome": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 10, "bases": 0, "doc": 14}, "icepool.evaluator.IsDisjointSetEvaluator": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 7, "doc": 10}, "icepool.evaluator.IsDisjointSetEvaluator.any_all": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 46, "bases": 0, "doc": 36}, "icepool.evaluator.IsDisjointSetEvaluator.default_outcome": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 10, "bases": 0, "doc": 14}, "icepool.evaluator.ConstantEvaluator": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 8, "doc": 14}, "icepool.evaluator.ConstantEvaluator.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 38, "bases": 0, "doc": 3}, "icepool.evaluator.ConstantEvaluator.next_state": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 28, "bases": 0, "doc": 385}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 44, "bases": 0, "doc": 144}, "icepool.evaluator.KeepEvaluator": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 8, "doc": 34}, "icepool.evaluator.KeepEvaluator.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 27, "bases": 0, "doc": 59}, "icepool.evaluator.KeepEvaluator.next_state": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 4}, "icepool.evaluator.KeepEvaluator.final_outcome": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 17, "bases": 0, "doc": 4}, "icepool.evaluator.KeepEvaluator.order": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 14}, "icepool.evaluator.ArgsortEvaluator": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 9, "doc": 17}, "icepool.evaluator.ArgsortEvaluator.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 83, "bases": 0, "doc": 3}, "icepool.evaluator.ArgsortEvaluator.next_state": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 29, "bases": 0, "doc": 4}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 17, "bases": 0, "doc": 144}, "icepool.evaluator.ArgsortEvaluator.order": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 102}, "icepool.evaluator.CompairEvalautor": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 7, "doc": 29}, "icepool.evaluator.CompairEvalautor.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 115, "bases": 0, "doc": 145}, "icepool.evaluator.CompairEvalautor.next_state": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 385}, "icepool.evaluator.CompairEvalautor.final_outcome": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 17, "bases": 0, "doc": 144}, "icepool.evaluator.CompairEvalautor.order": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 102}, "icepool.evaluator.ExpressionEvaluator": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 9, "doc": 16}, "icepool.evaluator.ExpressionEvaluator.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 114, "bases": 0, "doc": 3}, "icepool.evaluator.ExpressionEvaluator.next_state": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 28, "bases": 0, "doc": 10}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 75, "bases": 0, "doc": 144}, "icepool.evaluator.ExpressionEvaluator.order": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 6}, "icepool.evaluator.ExpressionEvaluator.alignment": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 6}, "icepool.evaluator.ExpressionEvaluator.prefix_generators": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 44, "bases": 0, "doc": 16}, "icepool.evaluator.ExpressionEvaluator.validate_arity": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 74}, "icepool.function": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 5}, "icepool.function.d": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 45, "bases": 0, "doc": 87}, "icepool.function.z": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 45, "bases": 0, "doc": 25}, "icepool.function.coin": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 113, "bases": 0, "doc": 88}, "icepool.function.stochastic_round": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 73, "bases": 0, "doc": 91}, "icepool.function.one_hot": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 56, "bases": 0, "doc": 79}, "icepool.function.from_cumulative": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 125, "bases": 0, "doc": 111}, "icepool.function.from_rv": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 113, "bases": 0, "doc": 111}, "icepool.function.min_outcome": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 58, "bases": 0, "doc": 9}, "icepool.function.max_outcome": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 58, "bases": 0, "doc": 9}, "icepool.function.align": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 91, "bases": 0, "doc": 55}, "icepool.function.align_range": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 81, "bases": 0, "doc": 59}, "icepool.function.commonize_denominator": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 91, "bases": 0, "doc": 59}, "icepool.function.reduce": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 229, "bases": 0, "doc": 143}, "icepool.function.accumulate": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 217, "bases": 0, "doc": 150}, "icepool.function.map": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 462, "bases": 0, "doc": 547}, "icepool.function.map_function": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 387, "bases": 0, "doc": 295}, "icepool.function.map_and_time": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 282, "bases": 0, "doc": 268}, "icepool.function.map_to_pool": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 499, "bases": 0, "doc": 264}, "icepool.typing": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "icepool.typing.S": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 1, "signature": 0, "bases": 0, "doc": 6}, "icepool.typing.T": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 1, "signature": 0, "bases": 0, "doc": 6}, "icepool.typing.T_co": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 2, "signature": 0, "bases": 0, "doc": 6}, "icepool.typing.T_contra": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 3, "signature": 0, "bases": 0, "doc": 6}, "icepool.typing.U": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 1, "signature": 0, "bases": 0, "doc": 6}, "icepool.typing.U_co": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 2, "signature": 0, "bases": 0, "doc": 6}, "icepool.typing.Qs": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 1, "signature": 0, "bases": 0, "doc": 18}, "icepool.typing.Order": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 16}, "icepool.typing.Order.Ascending": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 7, "signature": 0, "bases": 0, "doc": 3}, "icepool.typing.Order.Descending": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 7, "signature": 0, "bases": 0, "doc": 3}, "icepool.typing.Order.Any": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 7, "signature": 0, "bases": 0, "doc": 3}, "icepool.typing.Order.merge": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 41, "bases": 0, "doc": 85}, "icepool.typing.RerollType": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 9}, "icepool.typing.RerollType.Reroll": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 9, "signature": 0, "bases": 0, "doc": 12}, "icepool.typing.Outcome": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 6, "doc": 28}, "icepool.typing.ImplicitConversionError": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 9}, "icepool.typing.count_positional_parameters": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 37, "bases": 0, "doc": 55}, "icepool.typing.guess_star": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 25, "bases": 0, "doc": 42}}, "length": 424, "save": true}, "index": {"qualname": {"root": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Symbols.__init__": {"tf": 1}, "icepool.CountsKeysView.__init__": {"tf": 1}, "icepool.CountsValuesView.__init__": {"tf": 1}, "icepool.CountsItemsView.__init__": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.Alignment.__init__": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1}, "icepool.MultiDeal.__init__": {"tf": 1}, "icepool.evaluator.JointEvaluator.__init__": {"tf": 1}, "icepool.evaluator.ExpandEvaluator.__init__": {"tf": 1}, "icepool.evaluator.SumEvaluator.__init__": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.__init__": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.__init__": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.__init__": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.__init__": {"tf": 1}, "icepool.evaluator.KeepEvaluator.__init__": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.__init__": {"tf": 1}, "icepool.evaluator.CompairEvalautor.__init__": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.__init__": {"tf": 1}}, "df": 21, "d": {"docs": {"icepool.d": {"tf": 1}, "icepool.function.d": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die": {"tf": 1}, "icepool.Die.__init__": {"tf": 1}, "icepool.Die.unary_operator": {"tf": 1}, "icepool.Die.binary_operator": {"tf": 1}, "icepool.Die.keys": {"tf": 1}, "icepool.Die.values": {"tf": 1}, "icepool.Die.items": {"tf": 1}, "icepool.Die.simplify": {"tf": 1}, "icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.split": {"tf": 1}, "icepool.Die.truncate": {"tf": 1}, "icepool.Die.clip": {"tf": 1}, "icepool.Die.set_range": {"tf": 1}, "icepool.Die.set_outcomes": {"tf": 1}, "icepool.Die.trim": {"tf": 1}, "icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Die.mean_time_to_sum": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.if_else": {"tf": 1}, "icepool.Die.is_in": {"tf": 1}, "icepool.Die.count": {"tf": 1}, "icepool.Die.pool": {"tf": 1}, "icepool.Die.keep": {"tf": 1}, "icepool.Die.lowest": {"tf": 1}, "icepool.Die.highest": {"tf": 1}, "icepool.Die.middle": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.Die.explode_to_pool": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.Die.abs": {"tf": 1}, "icepool.Die.round": {"tf": 1}, "icepool.Die.stochastic_round": {"tf": 1}, "icepool.Die.trunc": {"tf": 1}, "icepool.Die.floor": {"tf": 1}, "icepool.Die.ceil": {"tf": 1}, "icepool.Die.zero": {"tf": 1}, "icepool.Die.zero_outcome": {"tf": 1}, "icepool.Die.cmp": {"tf": 1}, "icepool.Die.sign": {"tf": 1}, "icepool.Die.equals": {"tf": 1}}, "df": 42}, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Symbols.difference": {"tf": 1}, "icepool.Symbols.symmetric_difference": {"tf": 1}, "icepool.MultisetExpression.difference": {"tf": 1}, "icepool.MultisetExpression.symmetric_difference": {"tf": 1}, "icepool.Deck.difference": {"tf": 1}, "icepool.Deck.symmetric_difference": {"tf": 1}}, "df": 6}}}}}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Symbols.divide_counts": {"tf": 1}, "icepool.MultisetExpression.divide_counts": {"tf": 1}, "icepool.Deck.divide_counts": {"tf": 1}}, "df": 3}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Pool.unique_dice": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Population.denominator": {"tf": 1}, "icepool.commonize_denominator": {"tf": 1}, "icepool.Pool.denominator": {"tf": 1}, "icepool.MultisetGenerator.denominator": {"tf": 1}, "icepool.Alignment.denominator": {"tf": 1}, "icepool.Deal.denominator": {"tf": 1}, "icepool.MultiDeal.denominator": {"tf": 1}, "icepool.function.commonize_denominator": {"tf": 1}}, "df": 8}}}}}}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Population.standard_deviation": {"tf": 1}}, "df": 1}}}}}}}, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Order.Descending": {"tf": 1}, "icepool.typing.Order.Descending": {"tf": 1}}, "df": 2}}}}}}}}, "c": {"docs": {}, "df": 0, "k": {"docs": {"icepool.Deck": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}, "icepool.Deck.keys": {"tf": 1}, "icepool.Deck.values": {"tf": 1}, "icepool.Deck.items": {"tf": 1}, "icepool.Deck.size": {"tf": 1}, "icepool.Deck.deal": {"tf": 1}, "icepool.Deck.additive_union": {"tf": 1}, "icepool.Deck.difference": {"tf": 1}, "icepool.Deck.intersection": {"tf": 1}, "icepool.Deck.union": {"tf": 1}, "icepool.Deck.symmetric_difference": {"tf": 1}, "icepool.Deck.multiply_counts": {"tf": 1}, "icepool.Deck.divide_counts": {"tf": 1}, "icepool.Deck.modulo_counts": {"tf": 1}, "icepool.Deck.map": {"tf": 1}, "icepool.Deal.deck": {"tf": 1}, "icepool.MultiDeal.deck": {"tf": 1}}, "df": 18}}, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Deck.deal": {"tf": 1}, "icepool.Deal": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1}, "icepool.Deal.deck": {"tf": 1}, "icepool.Deal.hand_sizes": {"tf": 1}, "icepool.Deal.total_cards_dealt": {"tf": 1}, "icepool.Deal.outcomes": {"tf": 1}, "icepool.Deal.output_arity": {"tf": 1}, "icepool.Deal.denominator": {"tf": 1}}, "df": 9, "t": {"docs": {"icepool.Deal.total_cards_dealt": {"tf": 1}, "icepool.MultiDeal.total_cards_dealt": {"tf": 1}}, "df": 2}}}, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"icepool.evaluator.ComparisonEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsSubsetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsProperSubsetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsSupersetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsProperSupersetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsEqualSetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsNotEqualSetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsDisjointSetEvaluator.default_outcome": {"tf": 1}}, "df": 8}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {"icepool.MultisetExpression.drop_outcomes": {"tf": 1}}, "df": 1}}}}, "z": {"docs": {"icepool.z": {"tf": 1}, "icepool.function.z": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {"icepool.Die.zero": {"tf": 1}, "icepool.Die.zero_outcome": {"tf": 1}, "icepool.Population.has_zero_quantities": {"tf": 1}}, "df": 3}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {"icepool.typing.T_co": {"tf": 1}, "icepool.typing.U_co": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "n": {"docs": {"icepool.coin": {"tf": 1}, "icepool.function.coin": {"tf": 1}}, "df": 2}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.count": {"tf": 1}, "icepool.Symbols.count_subset": {"tf": 1}, "icepool.Symbols.count": {"tf": 1}, "icepool.MultisetExpression.count": {"tf": 1}, "icepool.MultisetExpression.highest_outcome_and_count": {"tf": 1}, "icepool.MultisetExpression.largest_count": {"tf": 1}, "icepool.MultisetExpression.largest_count_and_outcome": {"tf": 1}, "icepool.MultisetExpression.count_subset": {"tf": 1}, "icepool.evaluator.count_evaluator": {"tf": 1}, "icepool.typing.count_positional_parameters": {"tf": 1}}, "df": 10, "s": {"docs": {"icepool.Symbols.multiply_counts": {"tf": 1}, "icepool.Symbols.divide_counts": {"tf": 1}, "icepool.Symbols.modulo_counts": {"tf": 1}, "icepool.Symbols.has_negative_counts": {"tf": 1}, "icepool.MultisetExpression.map_counts": {"tf": 1}, "icepool.MultisetExpression.multiply_counts": {"tf": 1}, "icepool.MultisetExpression.divide_counts": {"tf": 1}, "icepool.MultisetExpression.modulo_counts": {"tf": 1}, "icepool.MultisetExpression.keep_counts": {"tf": 1}, "icepool.MultisetExpression.all_counts": {"tf": 1}, "icepool.MultisetExpression.all_straights_reduce_counts": {"tf": 1}, "icepool.Deck.multiply_counts": {"tf": 1}, "icepool.Deck.divide_counts": {"tf": 1}, "icepool.Deck.modulo_counts": {"tf": 1}}, "df": 14, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {"icepool.CountsKeysView": {"tf": 1}, "icepool.CountsKeysView.__init__": {"tf": 1}}, "df": 2}}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {"icepool.CountsValuesView": {"tf": 1}, "icepool.CountsValuesView.__init__": {"tf": 1}}, "df": 2}}}}}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {"icepool.CountsItemsView": {"tf": 1}, "icepool.CountsItemsView.__init__": {"tf": 1}}, "df": 2}}}}}}}}}, "u": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.evaluator.CountSubsetEvaluator": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.__init__": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.order": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 1}}, "df": 5}}}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.evaluator.CountEvaluator": {"tf": 1}, "icepool.evaluator.CountEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CountEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CountEvaluator.order": {"tf": 1}}, "df": 4}}}}}}}}}}}}, "m": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Population.common_outcome_length": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"icepool.commonize_denominator": {"tf": 1}, "icepool.function.commonize_denominator": {"tf": 1}}, "df": 2}}}}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {"icepool.MultisetExpression.compair_lt": {"tf": 1}, "icepool.MultisetExpression.compair_le": {"tf": 1}, "icepool.MultisetExpression.compair_gt": {"tf": 1}, "icepool.MultisetExpression.compair_ge": {"tf": 1}, "icepool.MultisetExpression.compair_eq": {"tf": 1}, "icepool.MultisetExpression.compair_ne": {"tf": 1}}, "df": 6, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.evaluator.CompairEvalautor": {"tf": 1}, "icepool.evaluator.CompairEvalautor.__init__": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 1}, "icepool.evaluator.CompairEvalautor.order": {"tf": 1}}, "df": 5}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.evaluator.ComparisonEvaluator": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.any_all": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.order": {"tf": 1}}, "df": 6}}}}}}}}}}}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Population.covariance": {"tf": 1}}, "df": 1}}}}}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Population.correlation": {"tf": 1}}, "df": 1}}}}}}}}}, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Vector.concatenate": {"tf": 1}}, "df": 1}}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.evaluator.ConstantEvaluator": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.__init__": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 1}}, "df": 4}}}}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {"icepool.typing.T_contra": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {"icepool.Die.clip": {"tf": 1}}, "df": 1}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Pool.clear_cache": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Die.ceil": {"tf": 1}, "icepool.Vector.ceil": {"tf": 1}}, "df": 2}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {"icepool.Die.cmp": {"tf": 1}}, "df": 1}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Population.cramer_von_mises": {"tf": 1}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"icepool.from_cumulative": {"tf": 1}, "icepool.function.from_cumulative": {"tf": 1}}, "df": 2}}}}}}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Pool.clear_cache": {"tf": 1}}, "df": 1}}}, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Deal.total_cards_dealt": {"tf": 1}, "icepool.MultiDeal.total_cards_dealt": {"tf": 1}}, "df": 2}}}}}, "s": {"docs": {"icepool.typing.S": {"tf": 1}}, "df": 1, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"icepool.stochastic_round": {"tf": 1}, "icepool.Die.stochastic_round": {"tf": 1}, "icepool.function.stochastic_round": {"tf": 1}}, "df": 3}}}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Population.standard_deviation": {"tf": 1}, "icepool.standard_pool": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Population.standardized_moment": {"tf": 1}}, "df": 1}}}}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {"icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.JointEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ExpandEvaluator.next_state": {"tf": 1}, "icepool.evaluator.SumEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CountEvaluator.next_state": {"tf": 1}, "icepool.evaluator.AnyEvaluator.next_state": {"tf": 1}, "icepool.evaluator.HighestOutcomeAndCountEvaluator.next_state": {"tf": 1}, "icepool.evaluator.LargestCountEvaluator.next_state": {"tf": 1}, "icepool.evaluator.LargestCountAndOutcomeEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.next_state": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.next_state": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.next_state": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.next_state": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.KeepEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.next_state": {"tf": 1}}, "df": 21}}, "r": {"docs": {"icepool.typing.guess_star": {"tf": 1}}, "df": 1}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"icepool.MultisetExpression.largest_straight": {"tf": 1}, "icepool.MultisetExpression.largest_straight_and_outcome": {"tf": 1}}, "df": 2, "s": {"docs": {"icepool.MultisetExpression.all_straights": {"tf": 1}, "icepool.MultisetExpression.all_straights_reduce_counts": {"tf": 1}}, "df": 2}}}}}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die.simplify": {"tf": 1}}, "df": 1}}}}}}, "g": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Die.sign": {"tf": 1}}, "df": 1}}, "z": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Pool.raw_size": {"tf": 1}, "icepool.Deck.size": {"tf": 1}}, "df": 2, "s": {"docs": {"icepool.Deal.hand_sizes": {"tf": 1}, "icepool.MultiDeal.hand_sizes": {"tf": 1}}, "df": 2}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.split": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.set_range": {"tf": 1}, "icepool.Die.set_outcomes": {"tf": 1}}, "df": 2}}, "u": {"docs": {}, "df": 0, "m": {"docs": {"icepool.Die.mean_time_to_sum": {"tf": 1}, "icepool.MultisetExpression.sum": {"tf": 1}, "icepool.evaluator.sum_evaluator": {"tf": 1}}, "df": 3, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.evaluator.SumEvaluator": {"tf": 1}, "icepool.evaluator.SumEvaluator.__init__": {"tf": 1}, "icepool.evaluator.SumEvaluator.next_state": {"tf": 1}, "icepool.evaluator.SumEvaluator.order": {"tf": 1}}, "df": 4}}}}}}}}}}, "b": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Symbols.count_subset": {"tf": 1}, "icepool.MultisetExpression.count_subset": {"tf": 1}}, "df": 2}}}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Population.scale_quantities": {"tf": 1}}, "df": 1}}}}, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {"icepool.Population.kolmogorov_smirnov": {"tf": 1}}, "df": 1}}}}}}, "d": {"docs": {"icepool.Population.sd": {"tf": 1}}, "df": 1}, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Population.skewness": {"tf": 1}}, "df": 1}}}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Population.sample": {"tf": 1}, "icepool.MultisetGenerator.sample": {"tf": 1}, "icepool.MultisetEvaluator.sample": {"tf": 1}}, "df": 3}}}}}, "y": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Symbols": {"tf": 1}, "icepool.Symbols.__init__": {"tf": 1}, "icepool.Symbols.additive_union": {"tf": 1}, "icepool.Symbols.difference": {"tf": 1}, "icepool.Symbols.intersection": {"tf": 1}, "icepool.Symbols.union": {"tf": 1}, "icepool.Symbols.symmetric_difference": {"tf": 1}, "icepool.Symbols.multiply_counts": {"tf": 1}, "icepool.Symbols.divide_counts": {"tf": 1}, "icepool.Symbols.count_subset": {"tf": 1}, "icepool.Symbols.modulo_counts": {"tf": 1}, "icepool.Symbols.issubset": {"tf": 1}, "icepool.Symbols.issuperset": {"tf": 1}, "icepool.Symbols.isdisjoint": {"tf": 1}, "icepool.Symbols.has_negative_counts": {"tf": 1}, "icepool.Symbols.count": {"tf": 1}}, "df": 16}}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"icepool.Symbols.symmetric_difference": {"tf": 1}, "icepool.MultisetExpression.symmetric_difference": {"tf": 1}, "icepool.Deck.symmetric_difference": {"tf": 1}}, "df": 3}}}}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"icepool.MultisetExpression.sort_match": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"icepool.stochastic_round": {"tf": 1}, "icepool.Die.round": {"tf": 1}, "icepool.Die.stochastic_round": {"tf": 1}, "icepool.Vector.round": {"tf": 1}, "icepool.function.stochastic_round": {"tf": 1}}, "df": 5}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Die.reroll": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.Reroll": {"tf": 1}, "icepool.RerollType.Reroll": {"tf": 1}, "icepool.typing.RerollType.Reroll": {"tf": 1}}, "df": 5, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"icepool.RerollType": {"tf": 1}, "icepool.RerollType.Reroll": {"tf": 1}, "icepool.typing.RerollType": {"tf": 1}, "icepool.typing.RerollType.Reroll": {"tf": 1}}, "df": 4}}}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Vector.reverse_binary_operator": {"tf": 1}}, "df": 1}}}}}, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"icepool.reduce": {"tf": 1}, "icepool.MultisetExpression.all_straights_reduce_counts": {"tf": 1}, "icepool.function.reduce": {"tf": 1}}, "df": 3}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.set_range": {"tf": 1}, "icepool.align_range": {"tf": 1}, "icepool.MultisetEvaluator.range_alignment": {"tf": 1}, "icepool.function.align_range": {"tf": 1}}, "df": 4}}}, "w": {"docs": {"icepool.Pool.raw_size": {"tf": 1}}, "df": 1}}, "v": {"docs": {"icepool.from_rv": {"tf": 1}, "icepool.function.from_rv": {"tf": 1}}, "df": 2}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"icepool.one_hot": {"tf": 1}, "icepool.Population.to_one_hot": {"tf": 1}, "icepool.function.one_hot": {"tf": 1}}, "df": 3}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Outcome": {"tf": 1}, "icepool.Die.zero_outcome": {"tf": 1}, "icepool.Population.common_outcome_length": {"tf": 1}, "icepool.Population.min_outcome": {"tf": 1}, "icepool.Population.max_outcome": {"tf": 1}, "icepool.min_outcome": {"tf": 1}, "icepool.max_outcome": {"tf": 1}, "icepool.Pool.min_outcome": {"tf": 1}, "icepool.Pool.max_outcome": {"tf": 1}, "icepool.MultisetGenerator.min_outcome": {"tf": 1}, "icepool.MultisetGenerator.max_outcome": {"tf": 1}, "icepool.MultisetExpression.highest_outcome_and_count": {"tf": 1}, "icepool.MultisetExpression.largest_count_and_outcome": {"tf": 1}, "icepool.MultisetExpression.largest_straight_and_outcome": {"tf": 1}, "icepool.MultisetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.JointEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ExpandEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CountEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.AnyEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.IsSubsetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsProperSubsetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsSupersetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsProperSupersetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsEqualSetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsNotEqualSetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsDisjointSetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.KeepEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1}, "icepool.function.min_outcome": {"tf": 1}, "icepool.function.max_outcome": {"tf": 1}, "icepool.typing.Outcome": {"tf": 1}}, "df": 42, "s": {"docs": {"icepool.Die.set_outcomes": {"tf": 1}, "icepool.Population.outcomes": {"tf": 1}, "icepool.Pool.outcomes": {"tf": 1}, "icepool.MultisetGenerator.outcomes": {"tf": 1}, "icepool.Alignment.outcomes": {"tf": 1}, "icepool.MultisetExpression.keep_outcomes": {"tf": 1}, "icepool.MultisetExpression.drop_outcomes": {"tf": 1}, "icepool.Deal.outcomes": {"tf": 1}, "icepool.MultiDeal.outcomes": {"tf": 1}}, "df": 9}}}}}, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Pool.output_arity": {"tf": 1}, "icepool.MultisetGenerator.output_arity": {"tf": 1}, "icepool.Alignment.output_arity": {"tf": 1}, "icepool.Deal.output_arity": {"tf": 1}, "icepool.MultiDeal.output_arity": {"tf": 1}}, "df": 5}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die.unary_operator": {"tf": 1}, "icepool.Die.binary_operator": {"tf": 1}, "icepool.Vector.unary_operator": {"tf": 1}, "icepool.Vector.binary_operator": {"tf": 1}, "icepool.Vector.reverse_binary_operator": {"tf": 1}}, "df": 5}}}}}}}, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.MultisetGenerator.order": {"tf": 1}, "icepool.MultisetExpression.order": {"tf": 1}, "icepool.MultisetEvaluator.order": {"tf": 1}, "icepool.Order": {"tf": 1}, "icepool.Order.Ascending": {"tf": 1}, "icepool.Order.Descending": {"tf": 1}, "icepool.Order.Any": {"tf": 1}, "icepool.Order.merge": {"tf": 1}, "icepool.evaluator.JointEvaluator.order": {"tf": 1}, "icepool.evaluator.ExpandEvaluator.order": {"tf": 1}, "icepool.evaluator.SumEvaluator.order": {"tf": 1}, "icepool.evaluator.CountEvaluator.order": {"tf": 1}, "icepool.evaluator.AnyEvaluator.order": {"tf": 1}, "icepool.evaluator.HighestOutcomeAndCountEvaluator.order": {"tf": 1}, "icepool.evaluator.LargestCountEvaluator.order": {"tf": 1}, "icepool.evaluator.LargestCountAndOutcomeEvaluator.order": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.order": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.order": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.order": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.order": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.order": {"tf": 1}, "icepool.evaluator.KeepEvaluator.order": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.order": {"tf": 1}, "icepool.evaluator.CompairEvalautor.order": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.order": {"tf": 1}, "icepool.typing.Order": {"tf": 1}, "icepool.typing.Order.Ascending": {"tf": 1}, "icepool.typing.Order.Descending": {"tf": 1}, "icepool.typing.Order.Any": {"tf": 1}, "icepool.typing.Order.merge": {"tf": 1}}, "df": 30}}}}}, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"icepool.one_hot": {"tf": 1}, "icepool.Population.to_one_hot": {"tf": 1}, "icepool.function.one_hot": {"tf": 1}}, "df": 3}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {"icepool.Population.median_high": {"tf": 1}, "icepool.Population.quantile_high": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.highest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.MultisetExpression.highest": {"tf": 1}, "icepool.MultisetExpression.highest_outcome_and_count": {"tf": 1}}, "df": 4, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.evaluator.HighestOutcomeAndCountEvaluator": {"tf": 1}, "icepool.evaluator.HighestOutcomeAndCountEvaluator.next_state": {"tf": 1}, "icepool.evaluator.HighestOutcomeAndCountEvaluator.order": {"tf": 1}, "icepool.evaluator.HighestOutcomeAndCountEvaluator.alignment": {"tf": 1}}, "df": 4}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Population.has_zero_quantities": {"tf": 1}, "icepool.Symbols.has_negative_counts": {"tf": 1}}, "df": 2}, "n": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Deal.hand_sizes": {"tf": 1}, "icepool.MultiDeal.hand_sizes": {"tf": 1}}, "df": 2}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Die.is_in": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Symbols.__init__": {"tf": 1}, "icepool.CountsKeysView.__init__": {"tf": 1}, "icepool.CountsValuesView.__init__": {"tf": 1}, "icepool.CountsItemsView.__init__": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.Alignment.__init__": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1}, "icepool.MultiDeal.__init__": {"tf": 1}, "icepool.evaluator.JointEvaluator.__init__": {"tf": 1}, "icepool.evaluator.ExpandEvaluator.__init__": {"tf": 1}, "icepool.evaluator.SumEvaluator.__init__": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.__init__": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.__init__": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.__init__": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.__init__": {"tf": 1}, "icepool.evaluator.KeepEvaluator.__init__": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.__init__": {"tf": 1}, "icepool.evaluator.CompairEvalautor.__init__": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.__init__": {"tf": 1}}, "df": 21}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Symbols.intersection": {"tf": 1}, "icepool.MultisetExpression.intersection": {"tf": 1}, "icepool.Deck.intersection": {"tf": 1}}, "df": 3}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die.items": {"tf": 1}, "icepool.Population.items": {"tf": 1}, "icepool.Deck.items": {"tf": 1}}, "df": 3}}}}, "f": {"docs": {"icepool.Die.if_else": {"tf": 1}}, "df": 1}, "s": {"docs": {"icepool.Die.is_in": {"tf": 1}, "icepool.Population.is_empty": {"tf": 1}}, "df": 2, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Symbols.issubset": {"tf": 1}, "icepool.MultisetExpression.issubset": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.evaluator.IsSubsetEvaluator": {"tf": 1}, "icepool.evaluator.IsSubsetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsSubsetEvaluator.default_outcome": {"tf": 1}}, "df": 3}}}}}}}}}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Symbols.issuperset": {"tf": 1}, "icepool.MultisetExpression.issuperset": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.evaluator.IsSupersetEvaluator": {"tf": 1}, "icepool.evaluator.IsSupersetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsSupersetEvaluator.default_outcome": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "j": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Symbols.isdisjoint": {"tf": 1}, "icepool.MultisetExpression.isdisjoint": {"tf": 1}}, "df": 2, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.evaluator.IsDisjointSetEvaluator": {"tf": 1}, "icepool.evaluator.IsDisjointSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsDisjointSetEvaluator.default_outcome": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.evaluator.IsProperSubsetEvaluator": {"tf": 1}, "icepool.evaluator.IsProperSubsetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsProperSubsetEvaluator.default_outcome": {"tf": 1}}, "df": 3}}}}}}}}}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.evaluator.IsProperSupersetEvaluator": {"tf": 1}, "icepool.evaluator.IsProperSupersetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsProperSupersetEvaluator.default_outcome": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.evaluator.IsEqualSetEvaluator": {"tf": 1}, "icepool.evaluator.IsEqualSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsEqualSetEvaluator.default_outcome": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.evaluator.IsNotEqualSetEvaluator": {"tf": 1}, "icepool.evaluator.IsNotEqualSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsNotEqualSetEvaluator.default_outcome": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.typing.ImplicitConversionError": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}}}}}, "u": {"docs": {"icepool.typing.U": {"tf": 1}, "icepool.typing.U_co": {"tf": 1}}, "df": 2, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die.unary_operator": {"tf": 1}, "icepool.Vector.unary_operator": {"tf": 1}}, "df": 2}}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Symbols.additive_union": {"tf": 1}, "icepool.Symbols.union": {"tf": 1}, "icepool.Pool.additive_union": {"tf": 1}, "icepool.MultisetExpression.additive_union": {"tf": 1}, "icepool.MultisetExpression.union": {"tf": 1}, "icepool.Deck.additive_union": {"tf": 1}, "icepool.Deck.union": {"tf": 1}}, "df": 7}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Pool.unique_dice": {"tf": 1}, "icepool.MultisetExpression.unique": {"tf": 1}}, "df": 2}}}}}}, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die.binary_operator": {"tf": 1}, "icepool.Vector.binary_operator": {"tf": 1}, "icepool.Vector.reverse_binary_operator": {"tf": 1}}, "df": 3}}}}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die.keys": {"tf": 1}, "icepool.Population.keys": {"tf": 1}, "icepool.Deck.keys": {"tf": 1}}, "df": 3}}, "e": {"docs": {}, "df": 0, "p": {"docs": {"icepool.Die.keep": {"tf": 1}, "icepool.MultisetExpression.keep_outcomes": {"tf": 1}, "icepool.MultisetExpression.keep_counts": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1}}, "df": 4, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.evaluator.KeepEvaluator": {"tf": 1}, "icepool.evaluator.KeepEvaluator.__init__": {"tf": 1}, "icepool.evaluator.KeepEvaluator.next_state": {"tf": 1}, "icepool.evaluator.KeepEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.KeepEvaluator.order": {"tf": 1}}, "df": 5}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {"icepool.Population.kolmogorov_smirnov": {"tf": 1}}, "df": 1}}}}}}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Population.excess_kurtosis": {"tf": 1}}, "df": 1}}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die.values": {"tf": 1}, "icepool.Population.values": {"tf": 1}, "icepool.Deck.values": {"tf": 1}}, "df": 3}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"icepool.MultisetEvaluator.validate_arity": {"tf": 1}, "icepool.evaluator.JointEvaluator.validate_arity": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.validate_arity": {"tf": 1}}, "df": 3}}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Population.variance": {"tf": 1}}, "df": 1}}}}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Population.cramer_von_mises": {"tf": 1}}, "df": 1}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Vector": {"tf": 1}, "icepool.Vector.unary_operator": {"tf": 1}, "icepool.Vector.abs": {"tf": 1}, "icepool.Vector.round": {"tf": 1}, "icepool.Vector.trunc": {"tf": 1}, "icepool.Vector.floor": {"tf": 1}, "icepool.Vector.ceil": {"tf": 1}, "icepool.Vector.binary_operator": {"tf": 1}, "icepool.Vector.reverse_binary_operator": {"tf": 1}, "icepool.Vector.append": {"tf": 1}, "icepool.Vector.concatenate": {"tf": 1}}, "df": 11, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"icepool.vectorize": {"tf": 1}}, "df": 1}}}}}}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die.filter": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.MultisetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.JointEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ExpandEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CountEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.AnyEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.KeepEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1}}, "df": 17}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die.floor": {"tf": 1}, "icepool.Vector.floor": {"tf": 1}}, "df": 2}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Population.format": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"icepool.from_cumulative": {"tf": 1}, "icepool.from_rv": {"tf": 1}, "icepool.function.from_cumulative": {"tf": 1}, "icepool.function.from_rv": {"tf": 1}}, "df": 4}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.map_function": {"tf": 1}, "icepool.multiset_function": {"tf": 1}, "icepool.function.map_function": {"tf": 1}}, "df": 3}}}}}}}}, "t": {"docs": {"icepool.typing.T": {"tf": 1}, "icepool.typing.T_co": {"tf": 1}, "icepool.typing.T_contra": {"tf": 1}}, "df": 3, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"icepool.Die.trunc": {"tf": 1}, "icepool.Vector.trunc": {"tf": 1}}, "df": 2, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.truncate": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {"icepool.Die.trim": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.map_and_time": {"tf": 1}, "icepool.Die.mean_time_to_sum": {"tf": 1}, "icepool.map_and_time": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}}, "df": 4}}}, "o": {"docs": {"icepool.Die.mean_time_to_sum": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.Die.explode_to_pool": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.Population.to_one_hot": {"tf": 1}, "icepool.map_to_pool": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1}}, "df": 7, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Deal.total_cards_dealt": {"tf": 1}, "icepool.MultiDeal.total_cards_dealt": {"tf": 1}}, "df": 2}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"icepool.tupleize": {"tf": 1}}, "df": 1}}}}}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {"icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.map_function": {"tf": 1}, "icepool.map_and_time": {"tf": 1}, "icepool.map_to_pool": {"tf": 1}, "icepool.MultisetExpression.map_counts": {"tf": 1}, "icepool.Deck.map": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.function.map_function": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1}}, "df": 13}, "x": {"docs": {"icepool.Population.max_outcome": {"tf": 1}, "icepool.max_outcome": {"tf": 1}, "icepool.Pool.max_outcome": {"tf": 1}, "icepool.MultisetGenerator.max_outcome": {"tf": 1}, "icepool.function.max_outcome": {"tf": 1}}, "df": 5, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {"icepool.MultisetExpression.maximum_match": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Population.marginals": {"tf": 1}}, "df": 1}}}}}}}, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"icepool.MultisetExpression.sort_match": {"tf": 1}, "icepool.MultisetExpression.maximum_match": {"tf": 1}}, "df": 2}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Die.mean_time_to_sum": {"tf": 1}, "icepool.Population.mean": {"tf": 1}}, "df": 2}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Population.median": {"tf": 1}, "icepool.Population.median_low": {"tf": 1}, "icepool.Population.median_high": {"tf": 1}}, "df": 3}}}}, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Order.merge": {"tf": 1}, "icepool.typing.Order.merge": {"tf": 1}}, "df": 2}}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.middle": {"tf": 1}, "icepool.middle": {"tf": 1}}, "df": 2}}}}, "n": {"docs": {"icepool.Population.min_outcome": {"tf": 1}, "icepool.min_outcome": {"tf": 1}, "icepool.Pool.min_outcome": {"tf": 1}, "icepool.MultisetGenerator.min_outcome": {"tf": 1}, "icepool.function.min_outcome": {"tf": 1}}, "df": 5}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Population.cramer_von_mises": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Population.mode": {"tf": 1}}, "df": 1}, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Population.modal_quantity": {"tf": 1}}, "df": 1}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {"icepool.Symbols.modulo_counts": {"tf": 1}, "icepool.MultisetExpression.modulo_counts": {"tf": 1}, "icepool.Deck.modulo_counts": {"tf": 1}}, "df": 3}}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Population.standardized_moment": {"tf": 1}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Symbols.multiply_counts": {"tf": 1}, "icepool.MultisetExpression.multiply_counts": {"tf": 1}, "icepool.Deck.multiply_counts": {"tf": 1}}, "df": 3}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"icepool.multiset_function": {"tf": 1}}, "df": 1, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.MultisetGenerator": {"tf": 1}, "icepool.MultisetGenerator.outcomes": {"tf": 1}, "icepool.MultisetGenerator.output_arity": {"tf": 1}, "icepool.MultisetGenerator.denominator": {"tf": 1}, "icepool.MultisetGenerator.equals": {"tf": 1}, "icepool.MultisetGenerator.order": {"tf": 1}, "icepool.MultisetGenerator.min_outcome": {"tf": 1}, "icepool.MultisetGenerator.max_outcome": {"tf": 1}, "icepool.MultisetGenerator.sample": {"tf": 1}}, "df": 9}}}}}}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.MultisetExpression": {"tf": 1}, "icepool.MultisetExpression.order": {"tf": 1}, "icepool.MultisetExpression.additive_union": {"tf": 1}, "icepool.MultisetExpression.difference": {"tf": 1}, "icepool.MultisetExpression.intersection": {"tf": 1}, "icepool.MultisetExpression.union": {"tf": 1}, "icepool.MultisetExpression.symmetric_difference": {"tf": 1}, "icepool.MultisetExpression.keep_outcomes": {"tf": 1}, "icepool.MultisetExpression.drop_outcomes": {"tf": 1}, "icepool.MultisetExpression.map_counts": {"tf": 1}, "icepool.MultisetExpression.multiply_counts": {"tf": 1}, "icepool.MultisetExpression.divide_counts": {"tf": 1}, "icepool.MultisetExpression.modulo_counts": {"tf": 1}, "icepool.MultisetExpression.keep_counts": {"tf": 1}, "icepool.MultisetExpression.unique": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1}, "icepool.MultisetExpression.lowest": {"tf": 1}, "icepool.MultisetExpression.highest": {"tf": 1}, "icepool.MultisetExpression.sort_match": {"tf": 1}, "icepool.MultisetExpression.maximum_match": {"tf": 1}, "icepool.MultisetExpression.evaluate": {"tf": 1}, "icepool.MultisetExpression.expand": {"tf": 1}, "icepool.MultisetExpression.sum": {"tf": 1}, "icepool.MultisetExpression.count": {"tf": 1}, "icepool.MultisetExpression.any": {"tf": 1}, "icepool.MultisetExpression.highest_outcome_and_count": {"tf": 1}, "icepool.MultisetExpression.all_counts": {"tf": 1}, "icepool.MultisetExpression.largest_count": {"tf": 1}, "icepool.MultisetExpression.largest_count_and_outcome": {"tf": 1}, "icepool.MultisetExpression.count_subset": {"tf": 1}, "icepool.MultisetExpression.largest_straight": {"tf": 1}, "icepool.MultisetExpression.largest_straight_and_outcome": {"tf": 1}, "icepool.MultisetExpression.all_straights": {"tf": 1}, "icepool.MultisetExpression.all_straights_reduce_counts": {"tf": 1}, "icepool.MultisetExpression.argsort": {"tf": 1}, "icepool.MultisetExpression.issubset": {"tf": 1}, "icepool.MultisetExpression.issuperset": {"tf": 1}, "icepool.MultisetExpression.isdisjoint": {"tf": 1}, "icepool.MultisetExpression.compair_lt": {"tf": 1}, "icepool.MultisetExpression.compair_le": {"tf": 1}, "icepool.MultisetExpression.compair_gt": {"tf": 1}, "icepool.MultisetExpression.compair_ge": {"tf": 1}, "icepool.MultisetExpression.compair_eq": {"tf": 1}, "icepool.MultisetExpression.compair_ne": {"tf": 1}}, "df": 44}}}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.MultisetEvaluator": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.MultisetEvaluator.final_outcome": {"tf": 1}, "icepool.MultisetEvaluator.order": {"tf": 1}, "icepool.MultisetEvaluator.alignment": {"tf": 1}, "icepool.MultisetEvaluator.range_alignment": {"tf": 1}, "icepool.MultisetEvaluator.prefix_generators": {"tf": 1}, "icepool.MultisetEvaluator.validate_arity": {"tf": 1}, "icepool.MultisetEvaluator.evaluate": {"tf": 1}, "icepool.MultisetEvaluator.sample": {"tf": 1}}, "df": 10}}}}}}}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.MultiDeal": {"tf": 1}, "icepool.MultiDeal.__init__": {"tf": 1}, "icepool.MultiDeal.deck": {"tf": 1}, "icepool.MultiDeal.hand_sizes": {"tf": 1}, "icepool.MultiDeal.total_cards_dealt": {"tf": 1}, "icepool.MultiDeal.outcomes": {"tf": 1}, "icepool.MultiDeal.output_arity": {"tf": 1}, "icepool.MultiDeal.denominator": {"tf": 1}}, "df": 8}}}}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.map_and_time": {"tf": 1}, "icepool.map_and_time": {"tf": 1}, "icepool.MultisetExpression.highest_outcome_and_count": {"tf": 1}, "icepool.MultisetExpression.largest_count_and_outcome": {"tf": 1}, "icepool.MultisetExpression.largest_straight_and_outcome": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}}, "df": 6}, "y": {"docs": {"icepool.MultisetExpression.any": {"tf": 1}, "icepool.Order.Any": {"tf": 1}, "icepool.evaluator.any_evaluator": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsSubsetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsProperSubsetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsSupersetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsProperSupersetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsEqualSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsNotEqualSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsDisjointSetEvaluator.any_all": {"tf": 1}, "icepool.typing.Order.Any": {"tf": 1}}, "df": 12, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.evaluator.AnyEvaluator": {"tf": 1}, "icepool.evaluator.AnyEvaluator.next_state": {"tf": 1}, "icepool.evaluator.AnyEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.AnyEvaluator.order": {"tf": 1}}, "df": 4}}}}}}}}}}}, "b": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die.abs": {"tf": 1}, "icepool.Vector.abs": {"tf": 1}}, "df": 2}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Vector.append": {"tf": 1}}, "df": 1}}}}}, "d": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Symbols.additive_union": {"tf": 1}, "icepool.Pool.additive_union": {"tf": 1}, "icepool.MultisetExpression.additive_union": {"tf": 1}, "icepool.Deck.additive_union": {"tf": 1}}, "df": 4}}}}}}}, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Again": {"tf": 1}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {"icepool.align": {"tf": 1}, "icepool.align_range": {"tf": 1}, "icepool.function.align": {"tf": 1}, "icepool.function.align_range": {"tf": 1}}, "df": 4, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Alignment": {"tf": 1}, "icepool.Alignment.__init__": {"tf": 1}, "icepool.Alignment.outcomes": {"tf": 1}, "icepool.Alignment.output_arity": {"tf": 1}, "icepool.Alignment.denominator": {"tf": 1}, "icepool.MultisetEvaluator.alignment": {"tf": 1}, "icepool.MultisetEvaluator.range_alignment": {"tf": 1}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 1}, "icepool.evaluator.HighestOutcomeAndCountEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.alignment": {"tf": 1}}, "df": 15}}}}}}}, "l": {"docs": {"icepool.MultisetExpression.all_counts": {"tf": 1}, "icepool.MultisetExpression.all_straights": {"tf": 1}, "icepool.MultisetExpression.all_straights_reduce_counts": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsSubsetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsProperSubsetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsSupersetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsProperSupersetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsEqualSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsNotEqualSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsDisjointSetEvaluator.any_all": {"tf": 1}}, "df": 11, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.evaluator.AllCountsEvaluator": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.__init__": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.next_state": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.order": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.alignment": {"tf": 1}}, "df": 6}}}}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.evaluator.AllStraightsEvaluator": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.next_state": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.order": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"tf": 1}}, "df": 5}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.evaluator.AllStraightsReduceCountsEvaluator": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.__init__": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.next_state": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"tf": 1}}, "df": 5}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"icepool.accumulate": {"tf": 1}, "icepool.function.accumulate": {"tf": 1}}, "df": 2}}}}}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Pool.output_arity": {"tf": 1}, "icepool.MultisetGenerator.output_arity": {"tf": 1}, "icepool.Alignment.output_arity": {"tf": 1}, "icepool.MultisetEvaluator.validate_arity": {"tf": 1}, "icepool.Deal.output_arity": {"tf": 1}, "icepool.MultiDeal.output_arity": {"tf": 1}, "icepool.evaluator.JointEvaluator.validate_arity": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.validate_arity": {"tf": 1}}, "df": 8}}}, "g": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"icepool.MultisetExpression.argsort": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.evaluator.ArgsortEvaluator": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.__init__": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.order": {"tf": 1}}, "df": 5}}}}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Order.Ascending": {"tf": 1}, "icepool.typing.Order.Ascending": {"tf": 1}}, "df": 2}}}}}}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.explode": {"tf": 1}, "icepool.Die.explode_to_pool": {"tf": 1}}, "df": 2}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"icepool.MultisetExpression.expand": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.evaluator.ExpandEvaluator": {"tf": 1}, "icepool.evaluator.ExpandEvaluator.__init__": {"tf": 1}, "icepool.evaluator.ExpandEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ExpandEvaluator.order": {"tf": 1}, "icepool.evaluator.ExpandEvaluator.final_outcome": {"tf": 1}}, "df": 5}}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.evaluator.ExpressionEvaluator": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.__init__": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.order": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.alignment": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.prefix_generators": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.validate_arity": {"tf": 1}}, "df": 8}}}}}}}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Population.excess_kurtosis": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.if_else": {"tf": 1}}, "df": 1}}}, "q": {"docs": {"icepool.MultisetExpression.compair_eq": {"tf": 1}}, "df": 1, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die.equals": {"tf": 1}, "icepool.MultisetGenerator.equals": {"tf": 1}}, "df": 2}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Population.is_empty": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Population.entropy": {"tf": 1}}, "df": 1}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"icepool.MultisetExpression.evaluate": {"tf": 1}, "icepool.MultisetEvaluator.evaluate": {"tf": 1}}, "df": 2}, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.evaluator.sum_evaluator": {"tf": 1}, "icepool.evaluator.count_evaluator": {"tf": 1}, "icepool.evaluator.any_evaluator": {"tf": 1}}, "df": 3}}}}}}}}}, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Die.pool": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.Die.explode_to_pool": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.map_to_pool": {"tf": 1}, "icepool.Pool": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.Pool.clear_cache": {"tf": 1}, "icepool.Pool.raw_size": {"tf": 1}, "icepool.Pool.denominator": {"tf": 1}, "icepool.Pool.unique_dice": {"tf": 1}, "icepool.Pool.outcomes": {"tf": 1}, "icepool.Pool.output_arity": {"tf": 1}, "icepool.Pool.min_outcome": {"tf": 1}, "icepool.Pool.max_outcome": {"tf": 1}, "icepool.Pool.additive_union": {"tf": 1}, "icepool.standard_pool": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1}}, "df": 18}}, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Population": {"tf": 1}, "icepool.Population.keys": {"tf": 1}, "icepool.Population.values": {"tf": 1}, "icepool.Population.items": {"tf": 1}, "icepool.Population.outcomes": {"tf": 1}, "icepool.Population.common_outcome_length": {"tf": 1}, "icepool.Population.is_empty": {"tf": 1}, "icepool.Population.min_outcome": {"tf": 1}, "icepool.Population.max_outcome": {"tf": 1}, "icepool.Population.nearest": {"tf": 1}, "icepool.Population.quantity": {"tf": 1}, "icepool.Population.quantities": {"tf": 1}, "icepool.Population.denominator": {"tf": 1}, "icepool.Population.scale_quantities": {"tf": 1}, "icepool.Population.has_zero_quantities": {"tf": 1}, "icepool.Population.probability": {"tf": 1}, "icepool.Population.probabilities": {"tf": 1}, "icepool.Population.mode": {"tf": 1}, "icepool.Population.modal_quantity": {"tf": 1}, "icepool.Population.kolmogorov_smirnov": {"tf": 1}, "icepool.Population.cramer_von_mises": {"tf": 1}, "icepool.Population.median": {"tf": 1}, "icepool.Population.median_low": {"tf": 1}, "icepool.Population.median_high": {"tf": 1}, "icepool.Population.quantile": {"tf": 1}, "icepool.Population.quantile_low": {"tf": 1}, "icepool.Population.quantile_high": {"tf": 1}, "icepool.Population.mean": {"tf": 1}, "icepool.Population.variance": {"tf": 1}, "icepool.Population.standard_deviation": {"tf": 1}, "icepool.Population.sd": {"tf": 1}, "icepool.Population.standardized_moment": {"tf": 1}, "icepool.Population.skewness": {"tf": 1}, "icepool.Population.excess_kurtosis": {"tf": 1}, "icepool.Population.entropy": {"tf": 1}, "icepool.Population.marginals": {"tf": 1}, "icepool.Population.covariance": {"tf": 1}, "icepool.Population.correlation": {"tf": 1}, "icepool.Population.to_one_hot": {"tf": 1}, "icepool.Population.sample": {"tf": 1}, "icepool.Population.format": {"tf": 1}}, "df": 41}}}}}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.typing.count_positional_parameters": {"tf": 1}}, "df": 1}}}}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Population.probability": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Population.probabilities": {"tf": 1}}, "df": 1}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "x": {"docs": {"icepool.MultisetEvaluator.prefix_generators": {"tf": 1}, "icepool.evaluator.JointEvaluator.prefix_generators": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.prefix_generators": {"tf": 1}}, "df": 3}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"icepool.typing.count_positional_parameters": {"tf": 1}}, "df": 1}}}}}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {"icepool.Population.median_low": {"tf": 1}, "icepool.Population.quantile_low": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.lowest": {"tf": 1}, "icepool.lowest": {"tf": 1}, "icepool.MultisetExpression.lowest": {"tf": 1}}, "df": 3}}}}}, "e": {"docs": {"icepool.MultisetExpression.compair_le": {"tf": 1}}, "df": 1, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"icepool.Population.common_outcome_length": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"icepool.MultisetExpression.largest_count": {"tf": 1}, "icepool.MultisetExpression.largest_count_and_outcome": {"tf": 1}, "icepool.MultisetExpression.largest_straight": {"tf": 1}, "icepool.MultisetExpression.largest_straight_and_outcome": {"tf": 1}}, "df": 4, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.evaluator.LargestCountEvaluator": {"tf": 1}, "icepool.evaluator.LargestCountEvaluator.next_state": {"tf": 1}, "icepool.evaluator.LargestCountEvaluator.order": {"tf": 1}}, "df": 3}}}}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.evaluator.LargestCountAndOutcomeEvaluator": {"tf": 1}, "icepool.evaluator.LargestCountAndOutcomeEvaluator.next_state": {"tf": 1}, "icepool.evaluator.LargestCountAndOutcomeEvaluator.order": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.evaluator.LargestStraightEvaluator": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.next_state": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"tf": 1}}, "df": 4}}}}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.evaluator.LargestStraightAndOutcomeEvaluator": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.next_state": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.order": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"tf": 1}}, "df": 5}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, "t": {"docs": {"icepool.MultisetExpression.compair_lt": {"tf": 1}}, "df": 1}}, "n": {"docs": {}, "df": 0, "e": {"docs": {"icepool.MultisetExpression.compair_ne": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Population.nearest": {"tf": 1}}, "df": 1}}}}}, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Symbols.has_negative_counts": {"tf": 1}}, "df": 1}}}}}}, "x": {"docs": {}, "df": 0, "t": {"docs": {"icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.JointEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ExpandEvaluator.next_state": {"tf": 1}, "icepool.evaluator.SumEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CountEvaluator.next_state": {"tf": 1}, "icepool.evaluator.AnyEvaluator.next_state": {"tf": 1}, "icepool.evaluator.HighestOutcomeAndCountEvaluator.next_state": {"tf": 1}, "icepool.evaluator.LargestCountEvaluator.next_state": {"tf": 1}, "icepool.evaluator.LargestCountAndOutcomeEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.next_state": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.next_state": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.next_state": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.next_state": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.KeepEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.next_state": {"tf": 1}}, "df": 21}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Population.quantity": {"tf": 1}, "icepool.Population.modal_quantity": {"tf": 1}}, "df": 2}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Population.quantities": {"tf": 1}, "icepool.Population.scale_quantities": {"tf": 1}, "icepool.Population.has_zero_quantities": {"tf": 1}}, "df": 3}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Population.quantile": {"tf": 1}, "icepool.Population.quantile_low": {"tf": 1}, "icepool.Population.quantile_high": {"tf": 1}}, "df": 3}}}}}}}, "s": {"docs": {"icepool.typing.Qs": {"tf": 1}}, "df": 1}}, "g": {"docs": {}, "df": 0, "t": {"docs": {"icepool.MultisetExpression.compair_gt": {"tf": 1}}, "df": 1}, "e": {"docs": {"icepool.MultisetExpression.compair_ge": {"tf": 1}}, "df": 1, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"icepool.MultisetEvaluator.prefix_generators": {"tf": 1}, "icepool.evaluator.JointEvaluator.prefix_generators": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.prefix_generators": {"tf": 1}}, "df": 3}}}}}}}}}, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"icepool.typing.guess_star": {"tf": 1}}, "df": 1}}}}}, "j": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.evaluator.JointEvaluator": {"tf": 1}, "icepool.evaluator.JointEvaluator.__init__": {"tf": 1}, "icepool.evaluator.JointEvaluator.next_state": {"tf": 1}, "icepool.evaluator.JointEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.JointEvaluator.order": {"tf": 1}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 1}, "icepool.evaluator.JointEvaluator.prefix_generators": {"tf": 1}, "icepool.evaluator.JointEvaluator.validate_arity": {"tf": 1}}, "df": 8}}}}}}}}}}}}}}}}, "fullname": {"root": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Symbols.__init__": {"tf": 1}, "icepool.CountsKeysView.__init__": {"tf": 1}, "icepool.CountsValuesView.__init__": {"tf": 1}, "icepool.CountsItemsView.__init__": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.Alignment.__init__": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1}, "icepool.MultiDeal.__init__": {"tf": 1}, "icepool.evaluator.JointEvaluator.__init__": {"tf": 1}, "icepool.evaluator.ExpandEvaluator.__init__": {"tf": 1}, "icepool.evaluator.SumEvaluator.__init__": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.__init__": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.__init__": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.__init__": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.__init__": {"tf": 1}, "icepool.evaluator.KeepEvaluator.__init__": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.__init__": {"tf": 1}, "icepool.evaluator.CompairEvalautor.__init__": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.__init__": {"tf": 1}}, "df": 21, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"icepool": {"tf": 1}, "icepool.d": {"tf": 1}, "icepool.z": {"tf": 1}, "icepool.coin": {"tf": 1}, "icepool.stochastic_round": {"tf": 1}, "icepool.one_hot": {"tf": 1}, "icepool.Outcome": {"tf": 1}, "icepool.Die": {"tf": 1}, "icepool.Die.__init__": {"tf": 1}, "icepool.Die.unary_operator": {"tf": 1}, "icepool.Die.binary_operator": {"tf": 1}, "icepool.Die.keys": {"tf": 1}, "icepool.Die.values": {"tf": 1}, "icepool.Die.items": {"tf": 1}, "icepool.Die.simplify": {"tf": 1}, "icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.split": {"tf": 1}, "icepool.Die.truncate": {"tf": 1}, "icepool.Die.clip": {"tf": 1}, "icepool.Die.set_range": {"tf": 1}, "icepool.Die.set_outcomes": {"tf": 1}, "icepool.Die.trim": {"tf": 1}, "icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Die.mean_time_to_sum": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.if_else": {"tf": 1}, "icepool.Die.is_in": {"tf": 1}, "icepool.Die.count": {"tf": 1}, "icepool.Die.pool": {"tf": 1}, "icepool.Die.keep": {"tf": 1}, "icepool.Die.lowest": {"tf": 1}, "icepool.Die.highest": {"tf": 1}, "icepool.Die.middle": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.Die.explode_to_pool": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.Die.abs": {"tf": 1}, "icepool.Die.round": {"tf": 1}, "icepool.Die.stochastic_round": {"tf": 1}, "icepool.Die.trunc": {"tf": 1}, "icepool.Die.floor": {"tf": 1}, "icepool.Die.ceil": {"tf": 1}, "icepool.Die.zero": {"tf": 1}, "icepool.Die.zero_outcome": {"tf": 1}, "icepool.Die.cmp": {"tf": 1}, "icepool.Die.sign": {"tf": 1}, "icepool.Die.equals": {"tf": 1}, "icepool.Population": {"tf": 1}, "icepool.Population.keys": {"tf": 1}, "icepool.Population.values": {"tf": 1}, "icepool.Population.items": {"tf": 1}, "icepool.Population.outcomes": {"tf": 1}, "icepool.Population.common_outcome_length": {"tf": 1}, "icepool.Population.is_empty": {"tf": 1}, "icepool.Population.min_outcome": {"tf": 1}, "icepool.Population.max_outcome": {"tf": 1}, "icepool.Population.nearest": {"tf": 1}, "icepool.Population.quantity": {"tf": 1}, "icepool.Population.quantities": {"tf": 1}, "icepool.Population.denominator": {"tf": 1}, "icepool.Population.scale_quantities": {"tf": 1}, "icepool.Population.has_zero_quantities": {"tf": 1}, "icepool.Population.probability": {"tf": 1}, "icepool.Population.probabilities": {"tf": 1}, "icepool.Population.mode": {"tf": 1}, "icepool.Population.modal_quantity": {"tf": 1}, "icepool.Population.kolmogorov_smirnov": {"tf": 1}, "icepool.Population.cramer_von_mises": {"tf": 1}, "icepool.Population.median": {"tf": 1}, "icepool.Population.median_low": {"tf": 1}, "icepool.Population.median_high": {"tf": 1}, "icepool.Population.quantile": {"tf": 1}, "icepool.Population.quantile_low": {"tf": 1}, "icepool.Population.quantile_high": {"tf": 1}, "icepool.Population.mean": {"tf": 1}, "icepool.Population.variance": {"tf": 1}, "icepool.Population.standard_deviation": {"tf": 1}, "icepool.Population.sd": {"tf": 1}, "icepool.Population.standardized_moment": {"tf": 1}, "icepool.Population.skewness": {"tf": 1}, "icepool.Population.excess_kurtosis": {"tf": 1}, "icepool.Population.entropy": {"tf": 1}, "icepool.Population.marginals": {"tf": 1}, "icepool.Population.covariance": {"tf": 1}, "icepool.Population.correlation": {"tf": 1}, "icepool.Population.to_one_hot": {"tf": 1}, "icepool.Population.sample": {"tf": 1}, "icepool.Population.format": {"tf": 1}, "icepool.tupleize": {"tf": 1}, "icepool.vectorize": {"tf": 1}, "icepool.Vector": {"tf": 1}, "icepool.Vector.unary_operator": {"tf": 1}, "icepool.Vector.abs": {"tf": 1}, "icepool.Vector.round": {"tf": 1}, "icepool.Vector.trunc": {"tf": 1}, "icepool.Vector.floor": {"tf": 1}, "icepool.Vector.ceil": {"tf": 1}, "icepool.Vector.binary_operator": {"tf": 1}, "icepool.Vector.reverse_binary_operator": {"tf": 1}, "icepool.Vector.append": {"tf": 1}, "icepool.Vector.concatenate": {"tf": 1}, "icepool.Symbols": {"tf": 1}, "icepool.Symbols.__init__": {"tf": 1}, "icepool.Symbols.additive_union": {"tf": 1}, "icepool.Symbols.difference": {"tf": 1}, "icepool.Symbols.intersection": {"tf": 1}, "icepool.Symbols.union": {"tf": 1}, "icepool.Symbols.symmetric_difference": {"tf": 1}, "icepool.Symbols.multiply_counts": {"tf": 1}, "icepool.Symbols.divide_counts": {"tf": 1}, "icepool.Symbols.count_subset": {"tf": 1}, "icepool.Symbols.modulo_counts": {"tf": 1}, "icepool.Symbols.issubset": {"tf": 1}, "icepool.Symbols.issuperset": {"tf": 1}, "icepool.Symbols.isdisjoint": {"tf": 1}, "icepool.Symbols.has_negative_counts": {"tf": 1}, "icepool.Symbols.count": {"tf": 1}, "icepool.Again": {"tf": 1}, "icepool.CountsKeysView": {"tf": 1}, "icepool.CountsKeysView.__init__": {"tf": 1}, "icepool.CountsValuesView": {"tf": 1}, "icepool.CountsValuesView.__init__": {"tf": 1}, "icepool.CountsItemsView": {"tf": 1}, "icepool.CountsItemsView.__init__": {"tf": 1}, "icepool.from_cumulative": {"tf": 1}, "icepool.from_rv": {"tf": 1}, "icepool.lowest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.middle": {"tf": 1}, "icepool.min_outcome": {"tf": 1}, "icepool.max_outcome": {"tf": 1}, "icepool.align": {"tf": 1}, "icepool.align_range": {"tf": 1}, "icepool.commonize_denominator": {"tf": 1}, "icepool.reduce": {"tf": 1}, "icepool.accumulate": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.map_function": {"tf": 1}, "icepool.map_and_time": {"tf": 1}, "icepool.map_to_pool": {"tf": 1}, "icepool.Reroll": {"tf": 1}, "icepool.RerollType": {"tf": 1}, "icepool.RerollType.Reroll": {"tf": 1}, "icepool.Pool": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.Pool.clear_cache": {"tf": 1}, "icepool.Pool.raw_size": {"tf": 1}, "icepool.Pool.denominator": {"tf": 1}, "icepool.Pool.unique_dice": {"tf": 1}, "icepool.Pool.outcomes": {"tf": 1}, "icepool.Pool.output_arity": {"tf": 1}, "icepool.Pool.min_outcome": {"tf": 1}, "icepool.Pool.max_outcome": {"tf": 1}, "icepool.Pool.additive_union": {"tf": 1}, "icepool.standard_pool": {"tf": 1}, "icepool.MultisetGenerator": {"tf": 1}, "icepool.MultisetGenerator.outcomes": {"tf": 1}, "icepool.MultisetGenerator.output_arity": {"tf": 1}, "icepool.MultisetGenerator.denominator": {"tf": 1}, "icepool.MultisetGenerator.equals": {"tf": 1}, "icepool.MultisetGenerator.order": {"tf": 1}, "icepool.MultisetGenerator.min_outcome": {"tf": 1}, "icepool.MultisetGenerator.max_outcome": {"tf": 1}, "icepool.MultisetGenerator.sample": {"tf": 1}, "icepool.Alignment": {"tf": 1}, "icepool.Alignment.__init__": {"tf": 1}, "icepool.Alignment.outcomes": {"tf": 1}, "icepool.Alignment.output_arity": {"tf": 1}, "icepool.Alignment.denominator": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1}, "icepool.MultisetExpression.order": {"tf": 1}, "icepool.MultisetExpression.additive_union": {"tf": 1}, "icepool.MultisetExpression.difference": {"tf": 1}, "icepool.MultisetExpression.intersection": {"tf": 1}, "icepool.MultisetExpression.union": {"tf": 1}, "icepool.MultisetExpression.symmetric_difference": {"tf": 1}, "icepool.MultisetExpression.keep_outcomes": {"tf": 1}, "icepool.MultisetExpression.drop_outcomes": {"tf": 1}, "icepool.MultisetExpression.map_counts": {"tf": 1}, "icepool.MultisetExpression.multiply_counts": {"tf": 1}, "icepool.MultisetExpression.divide_counts": {"tf": 1}, "icepool.MultisetExpression.modulo_counts": {"tf": 1}, "icepool.MultisetExpression.keep_counts": {"tf": 1}, "icepool.MultisetExpression.unique": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1}, "icepool.MultisetExpression.lowest": {"tf": 1}, "icepool.MultisetExpression.highest": {"tf": 1}, "icepool.MultisetExpression.sort_match": {"tf": 1}, "icepool.MultisetExpression.maximum_match": {"tf": 1}, "icepool.MultisetExpression.evaluate": {"tf": 1}, "icepool.MultisetExpression.expand": {"tf": 1}, "icepool.MultisetExpression.sum": {"tf": 1}, "icepool.MultisetExpression.count": {"tf": 1}, "icepool.MultisetExpression.any": {"tf": 1}, "icepool.MultisetExpression.highest_outcome_and_count": {"tf": 1}, "icepool.MultisetExpression.all_counts": {"tf": 1}, "icepool.MultisetExpression.largest_count": {"tf": 1}, "icepool.MultisetExpression.largest_count_and_outcome": {"tf": 1}, "icepool.MultisetExpression.count_subset": {"tf": 1}, "icepool.MultisetExpression.largest_straight": {"tf": 1}, "icepool.MultisetExpression.largest_straight_and_outcome": {"tf": 1}, "icepool.MultisetExpression.all_straights": {"tf": 1}, "icepool.MultisetExpression.all_straights_reduce_counts": {"tf": 1}, "icepool.MultisetExpression.argsort": {"tf": 1}, "icepool.MultisetExpression.issubset": {"tf": 1}, "icepool.MultisetExpression.issuperset": {"tf": 1}, "icepool.MultisetExpression.isdisjoint": {"tf": 1}, "icepool.MultisetExpression.compair_lt": {"tf": 1}, "icepool.MultisetExpression.compair_le": {"tf": 1}, "icepool.MultisetExpression.compair_gt": {"tf": 1}, "icepool.MultisetExpression.compair_ge": {"tf": 1}, "icepool.MultisetExpression.compair_eq": {"tf": 1}, "icepool.MultisetExpression.compair_ne": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.MultisetEvaluator.final_outcome": {"tf": 1}, "icepool.MultisetEvaluator.order": {"tf": 1}, "icepool.MultisetEvaluator.alignment": {"tf": 1}, "icepool.MultisetEvaluator.range_alignment": {"tf": 1}, "icepool.MultisetEvaluator.prefix_generators": {"tf": 1}, "icepool.MultisetEvaluator.validate_arity": {"tf": 1}, "icepool.MultisetEvaluator.evaluate": {"tf": 1}, "icepool.MultisetEvaluator.sample": {"tf": 1}, "icepool.Order": {"tf": 1}, "icepool.Order.Ascending": {"tf": 1}, "icepool.Order.Descending": {"tf": 1}, "icepool.Order.Any": {"tf": 1}, "icepool.Order.merge": {"tf": 1}, "icepool.Deck": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}, "icepool.Deck.keys": {"tf": 1}, "icepool.Deck.values": {"tf": 1}, "icepool.Deck.items": {"tf": 1}, "icepool.Deck.size": {"tf": 1}, "icepool.Deck.deal": {"tf": 1}, "icepool.Deck.additive_union": {"tf": 1}, "icepool.Deck.difference": {"tf": 1}, "icepool.Deck.intersection": {"tf": 1}, "icepool.Deck.union": {"tf": 1}, "icepool.Deck.symmetric_difference": {"tf": 1}, "icepool.Deck.multiply_counts": {"tf": 1}, "icepool.Deck.divide_counts": {"tf": 1}, "icepool.Deck.modulo_counts": {"tf": 1}, "icepool.Deck.map": {"tf": 1}, "icepool.Deal": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1}, "icepool.Deal.deck": {"tf": 1}, "icepool.Deal.hand_sizes": {"tf": 1}, "icepool.Deal.total_cards_dealt": {"tf": 1}, "icepool.Deal.outcomes": {"tf": 1}, "icepool.Deal.output_arity": {"tf": 1}, "icepool.Deal.denominator": {"tf": 1}, "icepool.MultiDeal": {"tf": 1}, "icepool.MultiDeal.__init__": {"tf": 1}, "icepool.MultiDeal.deck": {"tf": 1}, "icepool.MultiDeal.hand_sizes": {"tf": 1}, "icepool.MultiDeal.total_cards_dealt": {"tf": 1}, "icepool.MultiDeal.outcomes": {"tf": 1}, "icepool.MultiDeal.output_arity": {"tf": 1}, "icepool.MultiDeal.denominator": {"tf": 1}, "icepool.multiset_function": {"tf": 1}, "icepool.evaluator": {"tf": 1}, "icepool.evaluator.JointEvaluator": {"tf": 1}, "icepool.evaluator.JointEvaluator.__init__": {"tf": 1}, "icepool.evaluator.JointEvaluator.next_state": {"tf": 1}, "icepool.evaluator.JointEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.JointEvaluator.order": {"tf": 1}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 1}, "icepool.evaluator.JointEvaluator.prefix_generators": {"tf": 1}, "icepool.evaluator.JointEvaluator.validate_arity": {"tf": 1}, "icepool.evaluator.ExpandEvaluator": {"tf": 1}, "icepool.evaluator.ExpandEvaluator.__init__": {"tf": 1}, "icepool.evaluator.ExpandEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ExpandEvaluator.order": {"tf": 1}, "icepool.evaluator.ExpandEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.SumEvaluator": {"tf": 1}, "icepool.evaluator.SumEvaluator.__init__": {"tf": 1}, "icepool.evaluator.SumEvaluator.next_state": {"tf": 1}, "icepool.evaluator.SumEvaluator.order": {"tf": 1}, "icepool.evaluator.sum_evaluator": {"tf": 1}, "icepool.evaluator.CountEvaluator": {"tf": 1}, "icepool.evaluator.CountEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CountEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CountEvaluator.order": {"tf": 1}, "icepool.evaluator.count_evaluator": {"tf": 1}, "icepool.evaluator.AnyEvaluator": {"tf": 1}, "icepool.evaluator.AnyEvaluator.next_state": {"tf": 1}, "icepool.evaluator.AnyEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.AnyEvaluator.order": {"tf": 1}, "icepool.evaluator.any_evaluator": {"tf": 1}, "icepool.evaluator.HighestOutcomeAndCountEvaluator": {"tf": 1}, "icepool.evaluator.HighestOutcomeAndCountEvaluator.next_state": {"tf": 1}, "icepool.evaluator.HighestOutcomeAndCountEvaluator.order": {"tf": 1}, "icepool.evaluator.HighestOutcomeAndCountEvaluator.alignment": {"tf": 1}, "icepool.evaluator.LargestCountEvaluator": {"tf": 1}, "icepool.evaluator.LargestCountEvaluator.next_state": {"tf": 1}, "icepool.evaluator.LargestCountEvaluator.order": {"tf": 1}, "icepool.evaluator.LargestCountAndOutcomeEvaluator": {"tf": 1}, "icepool.evaluator.LargestCountAndOutcomeEvaluator.next_state": {"tf": 1}, "icepool.evaluator.LargestCountAndOutcomeEvaluator.order": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.__init__": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.order": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.__init__": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.next_state": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.order": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.next_state": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.next_state": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.order": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.next_state": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.order": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.__init__": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.next_state": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.any_all": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.order": {"tf": 1}, "icepool.evaluator.IsSubsetEvaluator": {"tf": 1}, "icepool.evaluator.IsSubsetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsSubsetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsProperSubsetEvaluator": {"tf": 1}, "icepool.evaluator.IsProperSubsetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsProperSubsetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsSupersetEvaluator": {"tf": 1}, "icepool.evaluator.IsSupersetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsSupersetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsProperSupersetEvaluator": {"tf": 1}, "icepool.evaluator.IsProperSupersetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsProperSupersetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsEqualSetEvaluator": {"tf": 1}, "icepool.evaluator.IsEqualSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsEqualSetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsNotEqualSetEvaluator": {"tf": 1}, "icepool.evaluator.IsNotEqualSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsNotEqualSetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsDisjointSetEvaluator": {"tf": 1}, "icepool.evaluator.IsDisjointSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsDisjointSetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.ConstantEvaluator": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.__init__": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.KeepEvaluator": {"tf": 1}, "icepool.evaluator.KeepEvaluator.__init__": {"tf": 1}, "icepool.evaluator.KeepEvaluator.next_state": {"tf": 1}, "icepool.evaluator.KeepEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.KeepEvaluator.order": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.__init__": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.order": {"tf": 1}, "icepool.evaluator.CompairEvalautor": {"tf": 1}, "icepool.evaluator.CompairEvalautor.__init__": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 1}, "icepool.evaluator.CompairEvalautor.order": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.__init__": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.order": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.alignment": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.prefix_generators": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.validate_arity": {"tf": 1}, "icepool.function": {"tf": 1}, "icepool.function.d": {"tf": 1}, "icepool.function.z": {"tf": 1}, "icepool.function.coin": {"tf": 1}, "icepool.function.stochastic_round": {"tf": 1}, "icepool.function.one_hot": {"tf": 1}, "icepool.function.from_cumulative": {"tf": 1}, "icepool.function.from_rv": {"tf": 1}, "icepool.function.min_outcome": {"tf": 1}, "icepool.function.max_outcome": {"tf": 1}, "icepool.function.align": {"tf": 1}, "icepool.function.align_range": {"tf": 1}, "icepool.function.commonize_denominator": {"tf": 1}, "icepool.function.reduce": {"tf": 1}, "icepool.function.accumulate": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.function.map_function": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1}, "icepool.typing": {"tf": 1}, "icepool.typing.S": {"tf": 1}, "icepool.typing.T": {"tf": 1}, "icepool.typing.T_co": {"tf": 1}, "icepool.typing.T_contra": {"tf": 1}, "icepool.typing.U": {"tf": 1}, "icepool.typing.U_co": {"tf": 1}, "icepool.typing.Qs": {"tf": 1}, "icepool.typing.Order": {"tf": 1}, "icepool.typing.Order.Ascending": {"tf": 1}, "icepool.typing.Order.Descending": {"tf": 1}, "icepool.typing.Order.Any": {"tf": 1}, "icepool.typing.Order.merge": {"tf": 1}, "icepool.typing.RerollType": {"tf": 1}, "icepool.typing.RerollType.Reroll": {"tf": 1}, "icepool.typing.Outcome": {"tf": 1}, "icepool.typing.ImplicitConversionError": {"tf": 1}, "icepool.typing.count_positional_parameters": {"tf": 1}, "icepool.typing.guess_star": {"tf": 1}}, "df": 424}}}}}}, "n": {"docs": {"icepool.Die.is_in": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Symbols.__init__": {"tf": 1}, "icepool.CountsKeysView.__init__": {"tf": 1}, "icepool.CountsValuesView.__init__": {"tf": 1}, "icepool.CountsItemsView.__init__": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.Alignment.__init__": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1}, "icepool.MultiDeal.__init__": {"tf": 1}, "icepool.evaluator.JointEvaluator.__init__": {"tf": 1}, "icepool.evaluator.ExpandEvaluator.__init__": {"tf": 1}, "icepool.evaluator.SumEvaluator.__init__": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.__init__": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.__init__": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.__init__": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.__init__": {"tf": 1}, "icepool.evaluator.KeepEvaluator.__init__": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.__init__": {"tf": 1}, "icepool.evaluator.CompairEvalautor.__init__": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.__init__": {"tf": 1}}, "df": 21}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Symbols.intersection": {"tf": 1}, "icepool.MultisetExpression.intersection": {"tf": 1}, "icepool.Deck.intersection": {"tf": 1}}, "df": 3}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die.items": {"tf": 1}, "icepool.Population.items": {"tf": 1}, "icepool.Deck.items": {"tf": 1}}, "df": 3}}}}, "f": {"docs": {"icepool.Die.if_else": {"tf": 1}}, "df": 1}, "s": {"docs": {"icepool.Die.is_in": {"tf": 1}, "icepool.Population.is_empty": {"tf": 1}}, "df": 2, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Symbols.issubset": {"tf": 1}, "icepool.MultisetExpression.issubset": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.evaluator.IsSubsetEvaluator": {"tf": 1}, "icepool.evaluator.IsSubsetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsSubsetEvaluator.default_outcome": {"tf": 1}}, "df": 3}}}}}}}}}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Symbols.issuperset": {"tf": 1}, "icepool.MultisetExpression.issuperset": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.evaluator.IsSupersetEvaluator": {"tf": 1}, "icepool.evaluator.IsSupersetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsSupersetEvaluator.default_outcome": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "j": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Symbols.isdisjoint": {"tf": 1}, "icepool.MultisetExpression.isdisjoint": {"tf": 1}}, "df": 2, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.evaluator.IsDisjointSetEvaluator": {"tf": 1}, "icepool.evaluator.IsDisjointSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsDisjointSetEvaluator.default_outcome": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.evaluator.IsProperSubsetEvaluator": {"tf": 1}, "icepool.evaluator.IsProperSubsetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsProperSubsetEvaluator.default_outcome": {"tf": 1}}, "df": 3}}}}}}}}}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.evaluator.IsProperSupersetEvaluator": {"tf": 1}, "icepool.evaluator.IsProperSupersetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsProperSupersetEvaluator.default_outcome": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.evaluator.IsEqualSetEvaluator": {"tf": 1}, "icepool.evaluator.IsEqualSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsEqualSetEvaluator.default_outcome": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.evaluator.IsNotEqualSetEvaluator": {"tf": 1}, "icepool.evaluator.IsNotEqualSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsNotEqualSetEvaluator.default_outcome": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.typing.ImplicitConversionError": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}}}}}, "d": {"docs": {"icepool.d": {"tf": 1}, "icepool.function.d": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die": {"tf": 1}, "icepool.Die.__init__": {"tf": 1}, "icepool.Die.unary_operator": {"tf": 1}, "icepool.Die.binary_operator": {"tf": 1}, "icepool.Die.keys": {"tf": 1}, "icepool.Die.values": {"tf": 1}, "icepool.Die.items": {"tf": 1}, "icepool.Die.simplify": {"tf": 1}, "icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.split": {"tf": 1}, "icepool.Die.truncate": {"tf": 1}, "icepool.Die.clip": {"tf": 1}, "icepool.Die.set_range": {"tf": 1}, "icepool.Die.set_outcomes": {"tf": 1}, "icepool.Die.trim": {"tf": 1}, "icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Die.mean_time_to_sum": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.if_else": {"tf": 1}, "icepool.Die.is_in": {"tf": 1}, "icepool.Die.count": {"tf": 1}, "icepool.Die.pool": {"tf": 1}, "icepool.Die.keep": {"tf": 1}, "icepool.Die.lowest": {"tf": 1}, "icepool.Die.highest": {"tf": 1}, "icepool.Die.middle": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.Die.explode_to_pool": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.Die.abs": {"tf": 1}, "icepool.Die.round": {"tf": 1}, "icepool.Die.stochastic_round": {"tf": 1}, "icepool.Die.trunc": {"tf": 1}, "icepool.Die.floor": {"tf": 1}, "icepool.Die.ceil": {"tf": 1}, "icepool.Die.zero": {"tf": 1}, "icepool.Die.zero_outcome": {"tf": 1}, "icepool.Die.cmp": {"tf": 1}, "icepool.Die.sign": {"tf": 1}, "icepool.Die.equals": {"tf": 1}}, "df": 42}, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Symbols.difference": {"tf": 1}, "icepool.Symbols.symmetric_difference": {"tf": 1}, "icepool.MultisetExpression.difference": {"tf": 1}, "icepool.MultisetExpression.symmetric_difference": {"tf": 1}, "icepool.Deck.difference": {"tf": 1}, "icepool.Deck.symmetric_difference": {"tf": 1}}, "df": 6}}}}}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Symbols.divide_counts": {"tf": 1}, "icepool.MultisetExpression.divide_counts": {"tf": 1}, "icepool.Deck.divide_counts": {"tf": 1}}, "df": 3}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Pool.unique_dice": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Population.denominator": {"tf": 1}, "icepool.commonize_denominator": {"tf": 1}, "icepool.Pool.denominator": {"tf": 1}, "icepool.MultisetGenerator.denominator": {"tf": 1}, "icepool.Alignment.denominator": {"tf": 1}, "icepool.Deal.denominator": {"tf": 1}, "icepool.MultiDeal.denominator": {"tf": 1}, "icepool.function.commonize_denominator": {"tf": 1}}, "df": 8}}}}}}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Population.standard_deviation": {"tf": 1}}, "df": 1}}}}}}}, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Order.Descending": {"tf": 1}, "icepool.typing.Order.Descending": {"tf": 1}}, "df": 2}}}}}}}}, "c": {"docs": {}, "df": 0, "k": {"docs": {"icepool.Deck": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}, "icepool.Deck.keys": {"tf": 1}, "icepool.Deck.values": {"tf": 1}, "icepool.Deck.items": {"tf": 1}, "icepool.Deck.size": {"tf": 1}, "icepool.Deck.deal": {"tf": 1}, "icepool.Deck.additive_union": {"tf": 1}, "icepool.Deck.difference": {"tf": 1}, "icepool.Deck.intersection": {"tf": 1}, "icepool.Deck.union": {"tf": 1}, "icepool.Deck.symmetric_difference": {"tf": 1}, "icepool.Deck.multiply_counts": {"tf": 1}, "icepool.Deck.divide_counts": {"tf": 1}, "icepool.Deck.modulo_counts": {"tf": 1}, "icepool.Deck.map": {"tf": 1}, "icepool.Deal.deck": {"tf": 1}, "icepool.MultiDeal.deck": {"tf": 1}}, "df": 18}}, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Deck.deal": {"tf": 1}, "icepool.Deal": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1}, "icepool.Deal.deck": {"tf": 1}, "icepool.Deal.hand_sizes": {"tf": 1}, "icepool.Deal.total_cards_dealt": {"tf": 1}, "icepool.Deal.outcomes": {"tf": 1}, "icepool.Deal.output_arity": {"tf": 1}, "icepool.Deal.denominator": {"tf": 1}}, "df": 9, "t": {"docs": {"icepool.Deal.total_cards_dealt": {"tf": 1}, "icepool.MultiDeal.total_cards_dealt": {"tf": 1}}, "df": 2}}}, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"icepool.evaluator.ComparisonEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsSubsetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsProperSubsetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsSupersetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsProperSupersetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsEqualSetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsNotEqualSetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsDisjointSetEvaluator.default_outcome": {"tf": 1}}, "df": 8}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {"icepool.MultisetExpression.drop_outcomes": {"tf": 1}}, "df": 1}}}}, "z": {"docs": {"icepool.z": {"tf": 1}, "icepool.function.z": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {"icepool.Die.zero": {"tf": 1}, "icepool.Die.zero_outcome": {"tf": 1}, "icepool.Population.has_zero_quantities": {"tf": 1}}, "df": 3}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {"icepool.typing.T_co": {"tf": 1}, "icepool.typing.U_co": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "n": {"docs": {"icepool.coin": {"tf": 1}, "icepool.function.coin": {"tf": 1}}, "df": 2}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.count": {"tf": 1}, "icepool.Symbols.count_subset": {"tf": 1}, "icepool.Symbols.count": {"tf": 1}, "icepool.MultisetExpression.count": {"tf": 1}, "icepool.MultisetExpression.highest_outcome_and_count": {"tf": 1}, "icepool.MultisetExpression.largest_count": {"tf": 1}, "icepool.MultisetExpression.largest_count_and_outcome": {"tf": 1}, "icepool.MultisetExpression.count_subset": {"tf": 1}, "icepool.evaluator.count_evaluator": {"tf": 1}, "icepool.typing.count_positional_parameters": {"tf": 1}}, "df": 10, "s": {"docs": {"icepool.Symbols.multiply_counts": {"tf": 1}, "icepool.Symbols.divide_counts": {"tf": 1}, "icepool.Symbols.modulo_counts": {"tf": 1}, "icepool.Symbols.has_negative_counts": {"tf": 1}, "icepool.MultisetExpression.map_counts": {"tf": 1}, "icepool.MultisetExpression.multiply_counts": {"tf": 1}, "icepool.MultisetExpression.divide_counts": {"tf": 1}, "icepool.MultisetExpression.modulo_counts": {"tf": 1}, "icepool.MultisetExpression.keep_counts": {"tf": 1}, "icepool.MultisetExpression.all_counts": {"tf": 1}, "icepool.MultisetExpression.all_straights_reduce_counts": {"tf": 1}, "icepool.Deck.multiply_counts": {"tf": 1}, "icepool.Deck.divide_counts": {"tf": 1}, "icepool.Deck.modulo_counts": {"tf": 1}}, "df": 14, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {"icepool.CountsKeysView": {"tf": 1}, "icepool.CountsKeysView.__init__": {"tf": 1}}, "df": 2}}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {"icepool.CountsValuesView": {"tf": 1}, "icepool.CountsValuesView.__init__": {"tf": 1}}, "df": 2}}}}}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {"icepool.CountsItemsView": {"tf": 1}, "icepool.CountsItemsView.__init__": {"tf": 1}}, "df": 2}}}}}}}}}, "u": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.evaluator.CountSubsetEvaluator": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.__init__": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.order": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 1}}, "df": 5}}}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.evaluator.CountEvaluator": {"tf": 1}, "icepool.evaluator.CountEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CountEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CountEvaluator.order": {"tf": 1}}, "df": 4}}}}}}}}}}}}, "m": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Population.common_outcome_length": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"icepool.commonize_denominator": {"tf": 1}, "icepool.function.commonize_denominator": {"tf": 1}}, "df": 2}}}}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {"icepool.MultisetExpression.compair_lt": {"tf": 1}, "icepool.MultisetExpression.compair_le": {"tf": 1}, "icepool.MultisetExpression.compair_gt": {"tf": 1}, "icepool.MultisetExpression.compair_ge": {"tf": 1}, "icepool.MultisetExpression.compair_eq": {"tf": 1}, "icepool.MultisetExpression.compair_ne": {"tf": 1}}, "df": 6, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.evaluator.CompairEvalautor": {"tf": 1}, "icepool.evaluator.CompairEvalautor.__init__": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 1}, "icepool.evaluator.CompairEvalautor.order": {"tf": 1}}, "df": 5}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.evaluator.ComparisonEvaluator": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.any_all": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.order": {"tf": 1}}, "df": 6}}}}}}}}}}}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Population.covariance": {"tf": 1}}, "df": 1}}}}}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Population.correlation": {"tf": 1}}, "df": 1}}}}}}}}}, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Vector.concatenate": {"tf": 1}}, "df": 1}}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.evaluator.ConstantEvaluator": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.__init__": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 1}}, "df": 4}}}}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {"icepool.typing.T_contra": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {"icepool.Die.clip": {"tf": 1}}, "df": 1}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Pool.clear_cache": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Die.ceil": {"tf": 1}, "icepool.Vector.ceil": {"tf": 1}}, "df": 2}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {"icepool.Die.cmp": {"tf": 1}}, "df": 1}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Population.cramer_von_mises": {"tf": 1}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"icepool.from_cumulative": {"tf": 1}, "icepool.function.from_cumulative": {"tf": 1}}, "df": 2}}}}}}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Pool.clear_cache": {"tf": 1}}, "df": 1}}}, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Deal.total_cards_dealt": {"tf": 1}, "icepool.MultiDeal.total_cards_dealt": {"tf": 1}}, "df": 2}}}}}, "s": {"docs": {"icepool.typing.S": {"tf": 1}}, "df": 1, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"icepool.stochastic_round": {"tf": 1}, "icepool.Die.stochastic_round": {"tf": 1}, "icepool.function.stochastic_round": {"tf": 1}}, "df": 3}}}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Population.standard_deviation": {"tf": 1}, "icepool.standard_pool": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Population.standardized_moment": {"tf": 1}}, "df": 1}}}}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {"icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.JointEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ExpandEvaluator.next_state": {"tf": 1}, "icepool.evaluator.SumEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CountEvaluator.next_state": {"tf": 1}, "icepool.evaluator.AnyEvaluator.next_state": {"tf": 1}, "icepool.evaluator.HighestOutcomeAndCountEvaluator.next_state": {"tf": 1}, "icepool.evaluator.LargestCountEvaluator.next_state": {"tf": 1}, "icepool.evaluator.LargestCountAndOutcomeEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.next_state": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.next_state": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.next_state": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.next_state": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.KeepEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.next_state": {"tf": 1}}, "df": 21}}, "r": {"docs": {"icepool.typing.guess_star": {"tf": 1}}, "df": 1}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"icepool.MultisetExpression.largest_straight": {"tf": 1}, "icepool.MultisetExpression.largest_straight_and_outcome": {"tf": 1}}, "df": 2, "s": {"docs": {"icepool.MultisetExpression.all_straights": {"tf": 1}, "icepool.MultisetExpression.all_straights_reduce_counts": {"tf": 1}}, "df": 2}}}}}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die.simplify": {"tf": 1}}, "df": 1}}}}}}, "g": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Die.sign": {"tf": 1}}, "df": 1}}, "z": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Pool.raw_size": {"tf": 1}, "icepool.Deck.size": {"tf": 1}}, "df": 2, "s": {"docs": {"icepool.Deal.hand_sizes": {"tf": 1}, "icepool.MultiDeal.hand_sizes": {"tf": 1}}, "df": 2}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.split": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.set_range": {"tf": 1}, "icepool.Die.set_outcomes": {"tf": 1}}, "df": 2}}, "u": {"docs": {}, "df": 0, "m": {"docs": {"icepool.Die.mean_time_to_sum": {"tf": 1}, "icepool.MultisetExpression.sum": {"tf": 1}, "icepool.evaluator.sum_evaluator": {"tf": 1}}, "df": 3, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.evaluator.SumEvaluator": {"tf": 1}, "icepool.evaluator.SumEvaluator.__init__": {"tf": 1}, "icepool.evaluator.SumEvaluator.next_state": {"tf": 1}, "icepool.evaluator.SumEvaluator.order": {"tf": 1}}, "df": 4}}}}}}}}}}, "b": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Symbols.count_subset": {"tf": 1}, "icepool.MultisetExpression.count_subset": {"tf": 1}}, "df": 2}}}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Population.scale_quantities": {"tf": 1}}, "df": 1}}}}, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {"icepool.Population.kolmogorov_smirnov": {"tf": 1}}, "df": 1}}}}}}, "d": {"docs": {"icepool.Population.sd": {"tf": 1}}, "df": 1}, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Population.skewness": {"tf": 1}}, "df": 1}}}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Population.sample": {"tf": 1}, "icepool.MultisetGenerator.sample": {"tf": 1}, "icepool.MultisetEvaluator.sample": {"tf": 1}}, "df": 3}}}}}, "y": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Symbols": {"tf": 1}, "icepool.Symbols.__init__": {"tf": 1}, "icepool.Symbols.additive_union": {"tf": 1}, "icepool.Symbols.difference": {"tf": 1}, "icepool.Symbols.intersection": {"tf": 1}, "icepool.Symbols.union": {"tf": 1}, "icepool.Symbols.symmetric_difference": {"tf": 1}, "icepool.Symbols.multiply_counts": {"tf": 1}, "icepool.Symbols.divide_counts": {"tf": 1}, "icepool.Symbols.count_subset": {"tf": 1}, "icepool.Symbols.modulo_counts": {"tf": 1}, "icepool.Symbols.issubset": {"tf": 1}, "icepool.Symbols.issuperset": {"tf": 1}, "icepool.Symbols.isdisjoint": {"tf": 1}, "icepool.Symbols.has_negative_counts": {"tf": 1}, "icepool.Symbols.count": {"tf": 1}}, "df": 16}}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"icepool.Symbols.symmetric_difference": {"tf": 1}, "icepool.MultisetExpression.symmetric_difference": {"tf": 1}, "icepool.Deck.symmetric_difference": {"tf": 1}}, "df": 3}}}}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"icepool.MultisetExpression.sort_match": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"icepool.stochastic_round": {"tf": 1}, "icepool.Die.round": {"tf": 1}, "icepool.Die.stochastic_round": {"tf": 1}, "icepool.Vector.round": {"tf": 1}, "icepool.function.stochastic_round": {"tf": 1}}, "df": 5}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Die.reroll": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.Reroll": {"tf": 1}, "icepool.RerollType.Reroll": {"tf": 1}, "icepool.typing.RerollType.Reroll": {"tf": 1}}, "df": 5, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"icepool.RerollType": {"tf": 1}, "icepool.RerollType.Reroll": {"tf": 1}, "icepool.typing.RerollType": {"tf": 1}, "icepool.typing.RerollType.Reroll": {"tf": 1}}, "df": 4}}}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Vector.reverse_binary_operator": {"tf": 1}}, "df": 1}}}}}, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"icepool.reduce": {"tf": 1}, "icepool.MultisetExpression.all_straights_reduce_counts": {"tf": 1}, "icepool.function.reduce": {"tf": 1}}, "df": 3}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.set_range": {"tf": 1}, "icepool.align_range": {"tf": 1}, "icepool.MultisetEvaluator.range_alignment": {"tf": 1}, "icepool.function.align_range": {"tf": 1}}, "df": 4}}}, "w": {"docs": {"icepool.Pool.raw_size": {"tf": 1}}, "df": 1}}, "v": {"docs": {"icepool.from_rv": {"tf": 1}, "icepool.function.from_rv": {"tf": 1}}, "df": 2}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"icepool.one_hot": {"tf": 1}, "icepool.Population.to_one_hot": {"tf": 1}, "icepool.function.one_hot": {"tf": 1}}, "df": 3}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Outcome": {"tf": 1}, "icepool.Die.zero_outcome": {"tf": 1}, "icepool.Population.common_outcome_length": {"tf": 1}, "icepool.Population.min_outcome": {"tf": 1}, "icepool.Population.max_outcome": {"tf": 1}, "icepool.min_outcome": {"tf": 1}, "icepool.max_outcome": {"tf": 1}, "icepool.Pool.min_outcome": {"tf": 1}, "icepool.Pool.max_outcome": {"tf": 1}, "icepool.MultisetGenerator.min_outcome": {"tf": 1}, "icepool.MultisetGenerator.max_outcome": {"tf": 1}, "icepool.MultisetExpression.highest_outcome_and_count": {"tf": 1}, "icepool.MultisetExpression.largest_count_and_outcome": {"tf": 1}, "icepool.MultisetExpression.largest_straight_and_outcome": {"tf": 1}, "icepool.MultisetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.JointEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ExpandEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CountEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.AnyEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.IsSubsetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsProperSubsetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsSupersetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsProperSupersetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsEqualSetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsNotEqualSetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsDisjointSetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.KeepEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1}, "icepool.function.min_outcome": {"tf": 1}, "icepool.function.max_outcome": {"tf": 1}, "icepool.typing.Outcome": {"tf": 1}}, "df": 42, "s": {"docs": {"icepool.Die.set_outcomes": {"tf": 1}, "icepool.Population.outcomes": {"tf": 1}, "icepool.Pool.outcomes": {"tf": 1}, "icepool.MultisetGenerator.outcomes": {"tf": 1}, "icepool.Alignment.outcomes": {"tf": 1}, "icepool.MultisetExpression.keep_outcomes": {"tf": 1}, "icepool.MultisetExpression.drop_outcomes": {"tf": 1}, "icepool.Deal.outcomes": {"tf": 1}, "icepool.MultiDeal.outcomes": {"tf": 1}}, "df": 9}}}}}, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Pool.output_arity": {"tf": 1}, "icepool.MultisetGenerator.output_arity": {"tf": 1}, "icepool.Alignment.output_arity": {"tf": 1}, "icepool.Deal.output_arity": {"tf": 1}, "icepool.MultiDeal.output_arity": {"tf": 1}}, "df": 5}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die.unary_operator": {"tf": 1}, "icepool.Die.binary_operator": {"tf": 1}, "icepool.Vector.unary_operator": {"tf": 1}, "icepool.Vector.binary_operator": {"tf": 1}, "icepool.Vector.reverse_binary_operator": {"tf": 1}}, "df": 5}}}}}}}, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.MultisetGenerator.order": {"tf": 1}, "icepool.MultisetExpression.order": {"tf": 1}, "icepool.MultisetEvaluator.order": {"tf": 1}, "icepool.Order": {"tf": 1}, "icepool.Order.Ascending": {"tf": 1}, "icepool.Order.Descending": {"tf": 1}, "icepool.Order.Any": {"tf": 1}, "icepool.Order.merge": {"tf": 1}, "icepool.evaluator.JointEvaluator.order": {"tf": 1}, "icepool.evaluator.ExpandEvaluator.order": {"tf": 1}, "icepool.evaluator.SumEvaluator.order": {"tf": 1}, "icepool.evaluator.CountEvaluator.order": {"tf": 1}, "icepool.evaluator.AnyEvaluator.order": {"tf": 1}, "icepool.evaluator.HighestOutcomeAndCountEvaluator.order": {"tf": 1}, "icepool.evaluator.LargestCountEvaluator.order": {"tf": 1}, "icepool.evaluator.LargestCountAndOutcomeEvaluator.order": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.order": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.order": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.order": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.order": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.order": {"tf": 1}, "icepool.evaluator.KeepEvaluator.order": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.order": {"tf": 1}, "icepool.evaluator.CompairEvalautor.order": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.order": {"tf": 1}, "icepool.typing.Order": {"tf": 1}, "icepool.typing.Order.Ascending": {"tf": 1}, "icepool.typing.Order.Descending": {"tf": 1}, "icepool.typing.Order.Any": {"tf": 1}, "icepool.typing.Order.merge": {"tf": 1}}, "df": 30}}}}}, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"icepool.one_hot": {"tf": 1}, "icepool.Population.to_one_hot": {"tf": 1}, "icepool.function.one_hot": {"tf": 1}}, "df": 3}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {"icepool.Population.median_high": {"tf": 1}, "icepool.Population.quantile_high": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.highest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.MultisetExpression.highest": {"tf": 1}, "icepool.MultisetExpression.highest_outcome_and_count": {"tf": 1}}, "df": 4, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.evaluator.HighestOutcomeAndCountEvaluator": {"tf": 1}, "icepool.evaluator.HighestOutcomeAndCountEvaluator.next_state": {"tf": 1}, "icepool.evaluator.HighestOutcomeAndCountEvaluator.order": {"tf": 1}, "icepool.evaluator.HighestOutcomeAndCountEvaluator.alignment": {"tf": 1}}, "df": 4}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Population.has_zero_quantities": {"tf": 1}, "icepool.Symbols.has_negative_counts": {"tf": 1}}, "df": 2}, "n": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Deal.hand_sizes": {"tf": 1}, "icepool.MultiDeal.hand_sizes": {"tf": 1}}, "df": 2}}}}, "u": {"docs": {"icepool.typing.U": {"tf": 1}, "icepool.typing.U_co": {"tf": 1}}, "df": 2, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die.unary_operator": {"tf": 1}, "icepool.Vector.unary_operator": {"tf": 1}}, "df": 2}}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Symbols.additive_union": {"tf": 1}, "icepool.Symbols.union": {"tf": 1}, "icepool.Pool.additive_union": {"tf": 1}, "icepool.MultisetExpression.additive_union": {"tf": 1}, "icepool.MultisetExpression.union": {"tf": 1}, "icepool.Deck.additive_union": {"tf": 1}, "icepool.Deck.union": {"tf": 1}}, "df": 7}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Pool.unique_dice": {"tf": 1}, "icepool.MultisetExpression.unique": {"tf": 1}}, "df": 2}}}}}}, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die.binary_operator": {"tf": 1}, "icepool.Vector.binary_operator": {"tf": 1}, "icepool.Vector.reverse_binary_operator": {"tf": 1}}, "df": 3}}}}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die.keys": {"tf": 1}, "icepool.Population.keys": {"tf": 1}, "icepool.Deck.keys": {"tf": 1}}, "df": 3}}, "e": {"docs": {}, "df": 0, "p": {"docs": {"icepool.Die.keep": {"tf": 1}, "icepool.MultisetExpression.keep_outcomes": {"tf": 1}, "icepool.MultisetExpression.keep_counts": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1}}, "df": 4, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.evaluator.KeepEvaluator": {"tf": 1}, "icepool.evaluator.KeepEvaluator.__init__": {"tf": 1}, "icepool.evaluator.KeepEvaluator.next_state": {"tf": 1}, "icepool.evaluator.KeepEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.KeepEvaluator.order": {"tf": 1}}, "df": 5}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {"icepool.Population.kolmogorov_smirnov": {"tf": 1}}, "df": 1}}}}}}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Population.excess_kurtosis": {"tf": 1}}, "df": 1}}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die.values": {"tf": 1}, "icepool.Population.values": {"tf": 1}, "icepool.Deck.values": {"tf": 1}}, "df": 3}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"icepool.MultisetEvaluator.validate_arity": {"tf": 1}, "icepool.evaluator.JointEvaluator.validate_arity": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.validate_arity": {"tf": 1}}, "df": 3}}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Population.variance": {"tf": 1}}, "df": 1}}}}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Population.cramer_von_mises": {"tf": 1}}, "df": 1}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Vector": {"tf": 1}, "icepool.Vector.unary_operator": {"tf": 1}, "icepool.Vector.abs": {"tf": 1}, "icepool.Vector.round": {"tf": 1}, "icepool.Vector.trunc": {"tf": 1}, "icepool.Vector.floor": {"tf": 1}, "icepool.Vector.ceil": {"tf": 1}, "icepool.Vector.binary_operator": {"tf": 1}, "icepool.Vector.reverse_binary_operator": {"tf": 1}, "icepool.Vector.append": {"tf": 1}, "icepool.Vector.concatenate": {"tf": 1}}, "df": 11, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"icepool.vectorize": {"tf": 1}}, "df": 1}}}}}}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die.filter": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.MultisetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.JointEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ExpandEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CountEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.AnyEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.KeepEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1}}, "df": 17}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die.floor": {"tf": 1}, "icepool.Vector.floor": {"tf": 1}}, "df": 2}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Population.format": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"icepool.from_cumulative": {"tf": 1}, "icepool.from_rv": {"tf": 1}, "icepool.function.from_cumulative": {"tf": 1}, "icepool.function.from_rv": {"tf": 1}}, "df": 4}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.map_function": {"tf": 1}, "icepool.multiset_function": {"tf": 1}, "icepool.function": {"tf": 1}, "icepool.function.d": {"tf": 1}, "icepool.function.z": {"tf": 1}, "icepool.function.coin": {"tf": 1}, "icepool.function.stochastic_round": {"tf": 1}, "icepool.function.one_hot": {"tf": 1}, "icepool.function.from_cumulative": {"tf": 1}, "icepool.function.from_rv": {"tf": 1}, "icepool.function.min_outcome": {"tf": 1}, "icepool.function.max_outcome": {"tf": 1}, "icepool.function.align": {"tf": 1}, "icepool.function.align_range": {"tf": 1}, "icepool.function.commonize_denominator": {"tf": 1}, "icepool.function.reduce": {"tf": 1}, "icepool.function.accumulate": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.function.map_function": {"tf": 1.4142135623730951}, "icepool.function.map_and_time": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1}}, "df": 21}}}}}}}}, "t": {"docs": {"icepool.typing.T": {"tf": 1}, "icepool.typing.T_co": {"tf": 1}, "icepool.typing.T_contra": {"tf": 1}}, "df": 3, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"icepool.Die.trunc": {"tf": 1}, "icepool.Vector.trunc": {"tf": 1}}, "df": 2, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.truncate": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {"icepool.Die.trim": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.map_and_time": {"tf": 1}, "icepool.Die.mean_time_to_sum": {"tf": 1}, "icepool.map_and_time": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}}, "df": 4}}}, "o": {"docs": {"icepool.Die.mean_time_to_sum": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.Die.explode_to_pool": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.Population.to_one_hot": {"tf": 1}, "icepool.map_to_pool": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1}}, "df": 7, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Deal.total_cards_dealt": {"tf": 1}, "icepool.MultiDeal.total_cards_dealt": {"tf": 1}}, "df": 2}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"icepool.tupleize": {"tf": 1}}, "df": 1}}}}}}}, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.typing": {"tf": 1}, "icepool.typing.S": {"tf": 1}, "icepool.typing.T": {"tf": 1}, "icepool.typing.T_co": {"tf": 1}, "icepool.typing.T_contra": {"tf": 1}, "icepool.typing.U": {"tf": 1}, "icepool.typing.U_co": {"tf": 1}, "icepool.typing.Qs": {"tf": 1}, "icepool.typing.Order": {"tf": 1}, "icepool.typing.Order.Ascending": {"tf": 1}, "icepool.typing.Order.Descending": {"tf": 1}, "icepool.typing.Order.Any": {"tf": 1}, "icepool.typing.Order.merge": {"tf": 1}, "icepool.typing.RerollType": {"tf": 1}, "icepool.typing.RerollType.Reroll": {"tf": 1}, "icepool.typing.Outcome": {"tf": 1}, "icepool.typing.ImplicitConversionError": {"tf": 1}, "icepool.typing.count_positional_parameters": {"tf": 1}, "icepool.typing.guess_star": {"tf": 1}}, "df": 19}}}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {"icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.map_function": {"tf": 1}, "icepool.map_and_time": {"tf": 1}, "icepool.map_to_pool": {"tf": 1}, "icepool.MultisetExpression.map_counts": {"tf": 1}, "icepool.Deck.map": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.function.map_function": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1}}, "df": 13}, "x": {"docs": {"icepool.Population.max_outcome": {"tf": 1}, "icepool.max_outcome": {"tf": 1}, "icepool.Pool.max_outcome": {"tf": 1}, "icepool.MultisetGenerator.max_outcome": {"tf": 1}, "icepool.function.max_outcome": {"tf": 1}}, "df": 5, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {"icepool.MultisetExpression.maximum_match": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Population.marginals": {"tf": 1}}, "df": 1}}}}}}}, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"icepool.MultisetExpression.sort_match": {"tf": 1}, "icepool.MultisetExpression.maximum_match": {"tf": 1}}, "df": 2}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Die.mean_time_to_sum": {"tf": 1}, "icepool.Population.mean": {"tf": 1}}, "df": 2}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Population.median": {"tf": 1}, "icepool.Population.median_low": {"tf": 1}, "icepool.Population.median_high": {"tf": 1}}, "df": 3}}}}, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Order.merge": {"tf": 1}, "icepool.typing.Order.merge": {"tf": 1}}, "df": 2}}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.middle": {"tf": 1}, "icepool.middle": {"tf": 1}}, "df": 2}}}}, "n": {"docs": {"icepool.Population.min_outcome": {"tf": 1}, "icepool.min_outcome": {"tf": 1}, "icepool.Pool.min_outcome": {"tf": 1}, "icepool.MultisetGenerator.min_outcome": {"tf": 1}, "icepool.function.min_outcome": {"tf": 1}}, "df": 5}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Population.cramer_von_mises": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Population.mode": {"tf": 1}}, "df": 1}, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Population.modal_quantity": {"tf": 1}}, "df": 1}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {"icepool.Symbols.modulo_counts": {"tf": 1}, "icepool.MultisetExpression.modulo_counts": {"tf": 1}, "icepool.Deck.modulo_counts": {"tf": 1}}, "df": 3}}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Population.standardized_moment": {"tf": 1}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Symbols.multiply_counts": {"tf": 1}, "icepool.MultisetExpression.multiply_counts": {"tf": 1}, "icepool.Deck.multiply_counts": {"tf": 1}}, "df": 3}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"icepool.multiset_function": {"tf": 1}}, "df": 1, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.MultisetGenerator": {"tf": 1}, "icepool.MultisetGenerator.outcomes": {"tf": 1}, "icepool.MultisetGenerator.output_arity": {"tf": 1}, "icepool.MultisetGenerator.denominator": {"tf": 1}, "icepool.MultisetGenerator.equals": {"tf": 1}, "icepool.MultisetGenerator.order": {"tf": 1}, "icepool.MultisetGenerator.min_outcome": {"tf": 1}, "icepool.MultisetGenerator.max_outcome": {"tf": 1}, "icepool.MultisetGenerator.sample": {"tf": 1}}, "df": 9}}}}}}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.MultisetExpression": {"tf": 1}, "icepool.MultisetExpression.order": {"tf": 1}, "icepool.MultisetExpression.additive_union": {"tf": 1}, "icepool.MultisetExpression.difference": {"tf": 1}, "icepool.MultisetExpression.intersection": {"tf": 1}, "icepool.MultisetExpression.union": {"tf": 1}, "icepool.MultisetExpression.symmetric_difference": {"tf": 1}, "icepool.MultisetExpression.keep_outcomes": {"tf": 1}, "icepool.MultisetExpression.drop_outcomes": {"tf": 1}, "icepool.MultisetExpression.map_counts": {"tf": 1}, "icepool.MultisetExpression.multiply_counts": {"tf": 1}, "icepool.MultisetExpression.divide_counts": {"tf": 1}, "icepool.MultisetExpression.modulo_counts": {"tf": 1}, "icepool.MultisetExpression.keep_counts": {"tf": 1}, "icepool.MultisetExpression.unique": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1}, "icepool.MultisetExpression.lowest": {"tf": 1}, "icepool.MultisetExpression.highest": {"tf": 1}, "icepool.MultisetExpression.sort_match": {"tf": 1}, "icepool.MultisetExpression.maximum_match": {"tf": 1}, "icepool.MultisetExpression.evaluate": {"tf": 1}, "icepool.MultisetExpression.expand": {"tf": 1}, "icepool.MultisetExpression.sum": {"tf": 1}, "icepool.MultisetExpression.count": {"tf": 1}, "icepool.MultisetExpression.any": {"tf": 1}, "icepool.MultisetExpression.highest_outcome_and_count": {"tf": 1}, "icepool.MultisetExpression.all_counts": {"tf": 1}, "icepool.MultisetExpression.largest_count": {"tf": 1}, "icepool.MultisetExpression.largest_count_and_outcome": {"tf": 1}, "icepool.MultisetExpression.count_subset": {"tf": 1}, "icepool.MultisetExpression.largest_straight": {"tf": 1}, "icepool.MultisetExpression.largest_straight_and_outcome": {"tf": 1}, "icepool.MultisetExpression.all_straights": {"tf": 1}, "icepool.MultisetExpression.all_straights_reduce_counts": {"tf": 1}, "icepool.MultisetExpression.argsort": {"tf": 1}, "icepool.MultisetExpression.issubset": {"tf": 1}, "icepool.MultisetExpression.issuperset": {"tf": 1}, "icepool.MultisetExpression.isdisjoint": {"tf": 1}, "icepool.MultisetExpression.compair_lt": {"tf": 1}, "icepool.MultisetExpression.compair_le": {"tf": 1}, "icepool.MultisetExpression.compair_gt": {"tf": 1}, "icepool.MultisetExpression.compair_ge": {"tf": 1}, "icepool.MultisetExpression.compair_eq": {"tf": 1}, "icepool.MultisetExpression.compair_ne": {"tf": 1}}, "df": 44}}}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.MultisetEvaluator": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.MultisetEvaluator.final_outcome": {"tf": 1}, "icepool.MultisetEvaluator.order": {"tf": 1}, "icepool.MultisetEvaluator.alignment": {"tf": 1}, "icepool.MultisetEvaluator.range_alignment": {"tf": 1}, "icepool.MultisetEvaluator.prefix_generators": {"tf": 1}, "icepool.MultisetEvaluator.validate_arity": {"tf": 1}, "icepool.MultisetEvaluator.evaluate": {"tf": 1}, "icepool.MultisetEvaluator.sample": {"tf": 1}}, "df": 10}}}}}}}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.MultiDeal": {"tf": 1}, "icepool.MultiDeal.__init__": {"tf": 1}, "icepool.MultiDeal.deck": {"tf": 1}, "icepool.MultiDeal.hand_sizes": {"tf": 1}, "icepool.MultiDeal.total_cards_dealt": {"tf": 1}, "icepool.MultiDeal.outcomes": {"tf": 1}, "icepool.MultiDeal.output_arity": {"tf": 1}, "icepool.MultiDeal.denominator": {"tf": 1}}, "df": 8}}}}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.map_and_time": {"tf": 1}, "icepool.map_and_time": {"tf": 1}, "icepool.MultisetExpression.highest_outcome_and_count": {"tf": 1}, "icepool.MultisetExpression.largest_count_and_outcome": {"tf": 1}, "icepool.MultisetExpression.largest_straight_and_outcome": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}}, "df": 6}, "y": {"docs": {"icepool.MultisetExpression.any": {"tf": 1}, "icepool.Order.Any": {"tf": 1}, "icepool.evaluator.any_evaluator": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsSubsetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsProperSubsetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsSupersetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsProperSupersetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsEqualSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsNotEqualSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsDisjointSetEvaluator.any_all": {"tf": 1}, "icepool.typing.Order.Any": {"tf": 1}}, "df": 12, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.evaluator.AnyEvaluator": {"tf": 1}, "icepool.evaluator.AnyEvaluator.next_state": {"tf": 1}, "icepool.evaluator.AnyEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.AnyEvaluator.order": {"tf": 1}}, "df": 4}}}}}}}}}}}, "b": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die.abs": {"tf": 1}, "icepool.Vector.abs": {"tf": 1}}, "df": 2}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Vector.append": {"tf": 1}}, "df": 1}}}}}, "d": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Symbols.additive_union": {"tf": 1}, "icepool.Pool.additive_union": {"tf": 1}, "icepool.MultisetExpression.additive_union": {"tf": 1}, "icepool.Deck.additive_union": {"tf": 1}}, "df": 4}}}}}}}, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Again": {"tf": 1}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {"icepool.align": {"tf": 1}, "icepool.align_range": {"tf": 1}, "icepool.function.align": {"tf": 1}, "icepool.function.align_range": {"tf": 1}}, "df": 4, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Alignment": {"tf": 1}, "icepool.Alignment.__init__": {"tf": 1}, "icepool.Alignment.outcomes": {"tf": 1}, "icepool.Alignment.output_arity": {"tf": 1}, "icepool.Alignment.denominator": {"tf": 1}, "icepool.MultisetEvaluator.alignment": {"tf": 1}, "icepool.MultisetEvaluator.range_alignment": {"tf": 1}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 1}, "icepool.evaluator.HighestOutcomeAndCountEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.alignment": {"tf": 1}}, "df": 15}}}}}}}, "l": {"docs": {"icepool.MultisetExpression.all_counts": {"tf": 1}, "icepool.MultisetExpression.all_straights": {"tf": 1}, "icepool.MultisetExpression.all_straights_reduce_counts": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsSubsetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsProperSubsetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsSupersetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsProperSupersetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsEqualSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsNotEqualSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsDisjointSetEvaluator.any_all": {"tf": 1}}, "df": 11, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.evaluator.AllCountsEvaluator": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.__init__": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.next_state": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.order": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.alignment": {"tf": 1}}, "df": 6}}}}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.evaluator.AllStraightsEvaluator": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.next_state": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.order": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"tf": 1}}, "df": 5}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.evaluator.AllStraightsReduceCountsEvaluator": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.__init__": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.next_state": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"tf": 1}}, "df": 5}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"icepool.accumulate": {"tf": 1}, "icepool.function.accumulate": {"tf": 1}}, "df": 2}}}}}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Pool.output_arity": {"tf": 1}, "icepool.MultisetGenerator.output_arity": {"tf": 1}, "icepool.Alignment.output_arity": {"tf": 1}, "icepool.MultisetEvaluator.validate_arity": {"tf": 1}, "icepool.Deal.output_arity": {"tf": 1}, "icepool.MultiDeal.output_arity": {"tf": 1}, "icepool.evaluator.JointEvaluator.validate_arity": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.validate_arity": {"tf": 1}}, "df": 8}}}, "g": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"icepool.MultisetExpression.argsort": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.evaluator.ArgsortEvaluator": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.__init__": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.order": {"tf": 1}}, "df": 5}}}}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Order.Ascending": {"tf": 1}, "icepool.typing.Order.Ascending": {"tf": 1}}, "df": 2}}}}}}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.explode": {"tf": 1}, "icepool.Die.explode_to_pool": {"tf": 1}}, "df": 2}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"icepool.MultisetExpression.expand": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.evaluator.ExpandEvaluator": {"tf": 1}, "icepool.evaluator.ExpandEvaluator.__init__": {"tf": 1}, "icepool.evaluator.ExpandEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ExpandEvaluator.order": {"tf": 1}, "icepool.evaluator.ExpandEvaluator.final_outcome": {"tf": 1}}, "df": 5}}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.evaluator.ExpressionEvaluator": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.__init__": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.order": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.alignment": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.prefix_generators": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.validate_arity": {"tf": 1}}, "df": 8}}}}}}}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Population.excess_kurtosis": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.if_else": {"tf": 1}}, "df": 1}}}, "q": {"docs": {"icepool.MultisetExpression.compair_eq": {"tf": 1}}, "df": 1, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die.equals": {"tf": 1}, "icepool.MultisetGenerator.equals": {"tf": 1}}, "df": 2}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Population.is_empty": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Population.entropy": {"tf": 1}}, "df": 1}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"icepool.MultisetExpression.evaluate": {"tf": 1}, "icepool.MultisetEvaluator.evaluate": {"tf": 1}}, "df": 2}, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.evaluator": {"tf": 1}, "icepool.evaluator.JointEvaluator": {"tf": 1}, "icepool.evaluator.JointEvaluator.__init__": {"tf": 1}, "icepool.evaluator.JointEvaluator.next_state": {"tf": 1}, "icepool.evaluator.JointEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.JointEvaluator.order": {"tf": 1}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 1}, "icepool.evaluator.JointEvaluator.prefix_generators": {"tf": 1}, "icepool.evaluator.JointEvaluator.validate_arity": {"tf": 1}, "icepool.evaluator.ExpandEvaluator": {"tf": 1}, "icepool.evaluator.ExpandEvaluator.__init__": {"tf": 1}, "icepool.evaluator.ExpandEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ExpandEvaluator.order": {"tf": 1}, "icepool.evaluator.ExpandEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.SumEvaluator": {"tf": 1}, "icepool.evaluator.SumEvaluator.__init__": {"tf": 1}, "icepool.evaluator.SumEvaluator.next_state": {"tf": 1}, "icepool.evaluator.SumEvaluator.order": {"tf": 1}, "icepool.evaluator.sum_evaluator": {"tf": 1.4142135623730951}, "icepool.evaluator.CountEvaluator": {"tf": 1}, "icepool.evaluator.CountEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CountEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CountEvaluator.order": {"tf": 1}, "icepool.evaluator.count_evaluator": {"tf": 1.4142135623730951}, "icepool.evaluator.AnyEvaluator": {"tf": 1}, "icepool.evaluator.AnyEvaluator.next_state": {"tf": 1}, "icepool.evaluator.AnyEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.AnyEvaluator.order": {"tf": 1}, "icepool.evaluator.any_evaluator": {"tf": 1.4142135623730951}, "icepool.evaluator.HighestOutcomeAndCountEvaluator": {"tf": 1}, "icepool.evaluator.HighestOutcomeAndCountEvaluator.next_state": {"tf": 1}, "icepool.evaluator.HighestOutcomeAndCountEvaluator.order": {"tf": 1}, "icepool.evaluator.HighestOutcomeAndCountEvaluator.alignment": {"tf": 1}, "icepool.evaluator.LargestCountEvaluator": {"tf": 1}, "icepool.evaluator.LargestCountEvaluator.next_state": {"tf": 1}, "icepool.evaluator.LargestCountEvaluator.order": {"tf": 1}, "icepool.evaluator.LargestCountAndOutcomeEvaluator": {"tf": 1}, "icepool.evaluator.LargestCountAndOutcomeEvaluator.next_state": {"tf": 1}, "icepool.evaluator.LargestCountAndOutcomeEvaluator.order": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.__init__": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.order": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.__init__": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.next_state": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.order": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.next_state": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.next_state": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.order": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.next_state": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.order": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.__init__": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.next_state": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.any_all": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.order": {"tf": 1}, "icepool.evaluator.IsSubsetEvaluator": {"tf": 1}, "icepool.evaluator.IsSubsetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsSubsetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsProperSubsetEvaluator": {"tf": 1}, "icepool.evaluator.IsProperSubsetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsProperSubsetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsSupersetEvaluator": {"tf": 1}, "icepool.evaluator.IsSupersetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsSupersetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsProperSupersetEvaluator": {"tf": 1}, "icepool.evaluator.IsProperSupersetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsProperSupersetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsEqualSetEvaluator": {"tf": 1}, "icepool.evaluator.IsEqualSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsEqualSetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsNotEqualSetEvaluator": {"tf": 1}, "icepool.evaluator.IsNotEqualSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsNotEqualSetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsDisjointSetEvaluator": {"tf": 1}, "icepool.evaluator.IsDisjointSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsDisjointSetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.ConstantEvaluator": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.__init__": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.KeepEvaluator": {"tf": 1}, "icepool.evaluator.KeepEvaluator.__init__": {"tf": 1}, "icepool.evaluator.KeepEvaluator.next_state": {"tf": 1}, "icepool.evaluator.KeepEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.KeepEvaluator.order": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.__init__": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.order": {"tf": 1}, "icepool.evaluator.CompairEvalautor": {"tf": 1}, "icepool.evaluator.CompairEvalautor.__init__": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 1}, "icepool.evaluator.CompairEvalautor.order": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.__init__": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.order": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.alignment": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.prefix_generators": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.validate_arity": {"tf": 1}}, "df": 123}}}}}}}}}, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Die.pool": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.Die.explode_to_pool": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.map_to_pool": {"tf": 1}, "icepool.Pool": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.Pool.clear_cache": {"tf": 1}, "icepool.Pool.raw_size": {"tf": 1}, "icepool.Pool.denominator": {"tf": 1}, "icepool.Pool.unique_dice": {"tf": 1}, "icepool.Pool.outcomes": {"tf": 1}, "icepool.Pool.output_arity": {"tf": 1}, "icepool.Pool.min_outcome": {"tf": 1}, "icepool.Pool.max_outcome": {"tf": 1}, "icepool.Pool.additive_union": {"tf": 1}, "icepool.standard_pool": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1}}, "df": 18}}, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Population": {"tf": 1}, "icepool.Population.keys": {"tf": 1}, "icepool.Population.values": {"tf": 1}, "icepool.Population.items": {"tf": 1}, "icepool.Population.outcomes": {"tf": 1}, "icepool.Population.common_outcome_length": {"tf": 1}, "icepool.Population.is_empty": {"tf": 1}, "icepool.Population.min_outcome": {"tf": 1}, "icepool.Population.max_outcome": {"tf": 1}, "icepool.Population.nearest": {"tf": 1}, "icepool.Population.quantity": {"tf": 1}, "icepool.Population.quantities": {"tf": 1}, "icepool.Population.denominator": {"tf": 1}, "icepool.Population.scale_quantities": {"tf": 1}, "icepool.Population.has_zero_quantities": {"tf": 1}, "icepool.Population.probability": {"tf": 1}, "icepool.Population.probabilities": {"tf": 1}, "icepool.Population.mode": {"tf": 1}, "icepool.Population.modal_quantity": {"tf": 1}, "icepool.Population.kolmogorov_smirnov": {"tf": 1}, "icepool.Population.cramer_von_mises": {"tf": 1}, "icepool.Population.median": {"tf": 1}, "icepool.Population.median_low": {"tf": 1}, "icepool.Population.median_high": {"tf": 1}, "icepool.Population.quantile": {"tf": 1}, "icepool.Population.quantile_low": {"tf": 1}, "icepool.Population.quantile_high": {"tf": 1}, "icepool.Population.mean": {"tf": 1}, "icepool.Population.variance": {"tf": 1}, "icepool.Population.standard_deviation": {"tf": 1}, "icepool.Population.sd": {"tf": 1}, "icepool.Population.standardized_moment": {"tf": 1}, "icepool.Population.skewness": {"tf": 1}, "icepool.Population.excess_kurtosis": {"tf": 1}, "icepool.Population.entropy": {"tf": 1}, "icepool.Population.marginals": {"tf": 1}, "icepool.Population.covariance": {"tf": 1}, "icepool.Population.correlation": {"tf": 1}, "icepool.Population.to_one_hot": {"tf": 1}, "icepool.Population.sample": {"tf": 1}, "icepool.Population.format": {"tf": 1}}, "df": 41}}}}}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.typing.count_positional_parameters": {"tf": 1}}, "df": 1}}}}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Population.probability": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Population.probabilities": {"tf": 1}}, "df": 1}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "x": {"docs": {"icepool.MultisetEvaluator.prefix_generators": {"tf": 1}, "icepool.evaluator.JointEvaluator.prefix_generators": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.prefix_generators": {"tf": 1}}, "df": 3}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"icepool.typing.count_positional_parameters": {"tf": 1}}, "df": 1}}}}}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {"icepool.Population.median_low": {"tf": 1}, "icepool.Population.quantile_low": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.lowest": {"tf": 1}, "icepool.lowest": {"tf": 1}, "icepool.MultisetExpression.lowest": {"tf": 1}}, "df": 3}}}}}, "e": {"docs": {"icepool.MultisetExpression.compair_le": {"tf": 1}}, "df": 1, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"icepool.Population.common_outcome_length": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"icepool.MultisetExpression.largest_count": {"tf": 1}, "icepool.MultisetExpression.largest_count_and_outcome": {"tf": 1}, "icepool.MultisetExpression.largest_straight": {"tf": 1}, "icepool.MultisetExpression.largest_straight_and_outcome": {"tf": 1}}, "df": 4, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.evaluator.LargestCountEvaluator": {"tf": 1}, "icepool.evaluator.LargestCountEvaluator.next_state": {"tf": 1}, "icepool.evaluator.LargestCountEvaluator.order": {"tf": 1}}, "df": 3}}}}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.evaluator.LargestCountAndOutcomeEvaluator": {"tf": 1}, "icepool.evaluator.LargestCountAndOutcomeEvaluator.next_state": {"tf": 1}, "icepool.evaluator.LargestCountAndOutcomeEvaluator.order": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.evaluator.LargestStraightEvaluator": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.next_state": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"tf": 1}}, "df": 4}}}}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.evaluator.LargestStraightAndOutcomeEvaluator": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.next_state": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.order": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"tf": 1}}, "df": 5}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, "t": {"docs": {"icepool.MultisetExpression.compair_lt": {"tf": 1}}, "df": 1}}, "n": {"docs": {}, "df": 0, "e": {"docs": {"icepool.MultisetExpression.compair_ne": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Population.nearest": {"tf": 1}}, "df": 1}}}}}, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Symbols.has_negative_counts": {"tf": 1}}, "df": 1}}}}}}, "x": {"docs": {}, "df": 0, "t": {"docs": {"icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.JointEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ExpandEvaluator.next_state": {"tf": 1}, "icepool.evaluator.SumEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CountEvaluator.next_state": {"tf": 1}, "icepool.evaluator.AnyEvaluator.next_state": {"tf": 1}, "icepool.evaluator.HighestOutcomeAndCountEvaluator.next_state": {"tf": 1}, "icepool.evaluator.LargestCountEvaluator.next_state": {"tf": 1}, "icepool.evaluator.LargestCountAndOutcomeEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.next_state": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.next_state": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.next_state": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.next_state": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.KeepEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.next_state": {"tf": 1}}, "df": 21}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Population.quantity": {"tf": 1}, "icepool.Population.modal_quantity": {"tf": 1}}, "df": 2}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Population.quantities": {"tf": 1}, "icepool.Population.scale_quantities": {"tf": 1}, "icepool.Population.has_zero_quantities": {"tf": 1}}, "df": 3}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Population.quantile": {"tf": 1}, "icepool.Population.quantile_low": {"tf": 1}, "icepool.Population.quantile_high": {"tf": 1}}, "df": 3}}}}}}}, "s": {"docs": {"icepool.typing.Qs": {"tf": 1}}, "df": 1}}, "g": {"docs": {}, "df": 0, "t": {"docs": {"icepool.MultisetExpression.compair_gt": {"tf": 1}}, "df": 1}, "e": {"docs": {"icepool.MultisetExpression.compair_ge": {"tf": 1}}, "df": 1, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"icepool.MultisetEvaluator.prefix_generators": {"tf": 1}, "icepool.evaluator.JointEvaluator.prefix_generators": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.prefix_generators": {"tf": 1}}, "df": 3}}}}}}}}}, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"icepool.typing.guess_star": {"tf": 1}}, "df": 1}}}}}, "j": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.evaluator.JointEvaluator": {"tf": 1}, "icepool.evaluator.JointEvaluator.__init__": {"tf": 1}, "icepool.evaluator.JointEvaluator.next_state": {"tf": 1}, "icepool.evaluator.JointEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.JointEvaluator.order": {"tf": 1}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 1}, "icepool.evaluator.JointEvaluator.prefix_generators": {"tf": 1}, "icepool.evaluator.JointEvaluator.validate_arity": {"tf": 1}}, "df": 8}}}}}}}}}}}}}}}}, "annotation": {"root": {"docs": {"icepool.Population.marginals": {"tf": 1}, "icepool.Again": {"tf": 1}, "icepool.Reroll": {"tf": 1}}, "df": 3, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Population.marginals": {"tf": 1}}, "df": 1}}}}}}}, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Population.marginals": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Population.marginals": {"tf": 1}}, "df": 1}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "~": {"docs": {}, "df": 0, "c": {"docs": {"icepool.Population.marginals": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Again": {"tf": 1}, "icepool.Reroll": {"tf": 1}}, "df": 2}}}}}}}, "default_value": {"root": {"0": {"docs": {"icepool.Order.Any": {"tf": 1}, "icepool.typing.Order.Any": {"tf": 1}}, "df": 2}, "1": {"docs": {"icepool.Order.Ascending": {"tf": 1}, "icepool.Order.Descending": {"tf": 1}, "icepool.typing.Order.Ascending": {"tf": 1}, "icepool.typing.Order.Descending": {"tf": 1}}, "df": 4}, "docs": {"icepool.Again": {"tf": 1.4142135623730951}, "icepool.Reroll": {"tf": 1.4142135623730951}, "icepool.RerollType.Reroll": {"tf": 1.4142135623730951}, "icepool.Order.Ascending": {"tf": 1.4142135623730951}, "icepool.Order.Descending": {"tf": 1.4142135623730951}, "icepool.Order.Any": {"tf": 1.4142135623730951}, "icepool.evaluator.sum_evaluator": {"tf": 1.4142135623730951}, "icepool.evaluator.count_evaluator": {"tf": 1.4142135623730951}, "icepool.evaluator.any_evaluator": {"tf": 1.4142135623730951}, "icepool.typing.T_contra": {"tf": 1}, "icepool.typing.Order.Ascending": {"tf": 1.4142135623730951}, "icepool.typing.Order.Descending": {"tf": 1.4142135623730951}, "icepool.typing.Order.Any": {"tf": 1.4142135623730951}, "icepool.typing.RerollType.Reroll": {"tf": 1.4142135623730951}}, "df": 14, "l": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Again": {"tf": 1}, "icepool.Reroll": {"tf": 1}, "icepool.RerollType.Reroll": {"tf": 1}, "icepool.Order.Ascending": {"tf": 1}, "icepool.Order.Descending": {"tf": 1}, "icepool.Order.Any": {"tf": 1}, "icepool.evaluator.sum_evaluator": {"tf": 1}, "icepool.evaluator.count_evaluator": {"tf": 1}, "icepool.evaluator.any_evaluator": {"tf": 1}, "icepool.typing.Order.Ascending": {"tf": 1}, "icepool.typing.Order.Descending": {"tf": 1}, "icepool.typing.Order.Any": {"tf": 1}, "icepool.typing.RerollType.Reroll": {"tf": 1}}, "df": 13}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Again": {"tf": 1}, "icepool.evaluator.sum_evaluator": {"tf": 1}, "icepool.evaluator.count_evaluator": {"tf": 1}, "icepool.evaluator.any_evaluator": {"tf": 1}}, "df": 4}}}}}}}, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Again": {"tf": 1}}, "df": 1}}}}}}}}}}, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Again": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Again": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Order.Ascending": {"tf": 1}, "icepool.typing.Order.Ascending": {"tf": 1}}, "df": 2}}}}}}}}, "n": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Order.Any": {"tf": 1}, "icepool.typing.Order.Any": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.evaluator.any_evaluator": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "j": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Again": {"tf": 1}, "icepool.evaluator.sum_evaluator": {"tf": 1}, "icepool.evaluator.count_evaluator": {"tf": 1}, "icepool.evaluator.any_evaluator": {"tf": 1}}, "df": 4}}}}}, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Order.Ascending": {"tf": 1}, "icepool.Order.Descending": {"tf": 1}, "icepool.Order.Any": {"tf": 1}, "icepool.typing.Order.Ascending": {"tf": 1}, "icepool.typing.Order.Descending": {"tf": 1}, "icepool.typing.Order.Any": {"tf": 1}}, "df": 6}}}}}, "g": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Again": {"tf": 1}, "icepool.Reroll": {"tf": 1}, "icepool.RerollType.Reroll": {"tf": 1}, "icepool.Order.Ascending": {"tf": 1}, "icepool.Order.Descending": {"tf": 1}, "icepool.Order.Any": {"tf": 1}, "icepool.evaluator.sum_evaluator": {"tf": 1}, "icepool.evaluator.count_evaluator": {"tf": 1}, "icepool.evaluator.any_evaluator": {"tf": 1}, "icepool.typing.Order.Ascending": {"tf": 1}, "icepool.typing.Order.Descending": {"tf": 1}, "icepool.typing.Order.Any": {"tf": 1}, "icepool.typing.RerollType.Reroll": {"tf": 1}}, "df": 13}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Reroll": {"tf": 1.4142135623730951}, "icepool.RerollType.Reroll": {"tf": 1.4142135623730951}, "icepool.typing.RerollType.Reroll": {"tf": 1.4142135623730951}}, "df": 3, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Reroll": {"tf": 1}, "icepool.RerollType.Reroll": {"tf": 1}, "icepool.typing.RerollType.Reroll": {"tf": 1}}, "df": 3}}}}}}}}}}, "x": {"2": {"7": {"docs": {"icepool.Reroll": {"tf": 1.4142135623730951}, "icepool.RerollType.Reroll": {"tf": 1.4142135623730951}, "icepool.typing.RerollType.Reroll": {"tf": 1.4142135623730951}}, "df": 3}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Order.Descending": {"tf": 1}, "icepool.typing.Order.Descending": {"tf": 1}}, "df": 2}}}}}}}}}}, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.evaluator.sum_evaluator": {"tf": 1}, "icepool.evaluator.count_evaluator": {"tf": 1}, "icepool.evaluator.any_evaluator": {"tf": 1}}, "df": 3}}}}}}}}}, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"icepool.evaluator.sum_evaluator": {"tf": 1}, "icepool.evaluator.count_evaluator": {"tf": 1}, "icepool.evaluator.any_evaluator": {"tf": 1}}, "df": 3}}}}}, "s": {"docs": {"icepool.typing.S": {"tf": 1}}, "df": 1, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.evaluator.sum_evaluator": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {"icepool.typing.T_co": {"tf": 1}, "icepool.typing.U_co": {"tf": 1}}, "df": 2, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.evaluator.count_evaluator": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {"icepool.typing.T_contra": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {"icepool.typing.T": {"tf": 1}, "icepool.typing.T_co": {"tf": 1}, "icepool.typing.T_contra": {"tf": 1}}, "df": 3}, "u": {"docs": {"icepool.typing.U": {"tf": 1}, "icepool.typing.U_co": {"tf": 1}}, "df": 2}, "q": {"docs": {}, "df": 0, "s": {"docs": {"icepool.typing.Qs": {"tf": 1}}, "df": 1}}}}, "signature": {"root": {"0": {"docs": {"icepool.Population.entropy": {"tf": 1}, "icepool.evaluator.ExpandEvaluator.order": {"tf": 1}, "icepool.evaluator.SumEvaluator.order": {"tf": 1}, "icepool.evaluator.CountEvaluator.order": {"tf": 1}, "icepool.evaluator.AnyEvaluator.order": {"tf": 1}, "icepool.evaluator.HighestOutcomeAndCountEvaluator.order": {"tf": 1}, "icepool.evaluator.LargestCountEvaluator.order": {"tf": 1}, "icepool.evaluator.LargestCountAndOutcomeEvaluator.order": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.order": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.order": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.order": {"tf": 1}, "icepool.evaluator.CompairEvalautor.__init__": {"tf": 1.7320508075688772}}, "df": 12}, "1": {"0": {"0": {"docs": {"icepool.Population.quantile": {"tf": 1}, "icepool.Population.quantile_low": {"tf": 1}, "icepool.Population.quantile_high": {"tf": 1}}, "df": 3}, "docs": {}, "df": 0}, "docs": {"icepool.coin": {"tf": 1}, "icepool.Die.__init__": {"tf": 1}, "icepool.Die.map": {"tf": 1}, "icepool.Die.pool": {"tf": 1}, "icepool.Die.middle": {"tf": 1}, "icepool.middle": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.map_function": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.MultisetExpression.unique": {"tf": 1}, "icepool.MultisetExpression.sort_match": {"tf": 1}, "icepool.MultisetExpression.expand": {"tf": 1}, "icepool.MultisetExpression.all_counts": {"tf": 1}, "icepool.MultisetExpression.argsort": {"tf": 1}, "icepool.MultisetExpression.compair_lt": {"tf": 1}, "icepool.MultisetExpression.compair_le": {"tf": 1}, "icepool.MultisetExpression.compair_gt": {"tf": 1}, "icepool.MultisetExpression.compair_ge": {"tf": 1}, "icepool.MultisetExpression.compair_eq": {"tf": 1}, "icepool.MultisetExpression.compair_ne": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}, "icepool.evaluator.ExpandEvaluator.__init__": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.__init__": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.order": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.order": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.__init__": {"tf": 1}, "icepool.evaluator.CompairEvalautor.__init__": {"tf": 1}, "icepool.function.coin": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.function.map_function": {"tf": 1}, "icepool.typing.guess_star": {"tf": 1}}, "df": 31}, "2": {"docs": {"icepool.Population.entropy": {"tf": 1}}, "df": 1}, "3": {"9": {"docs": {"icepool.Die.middle": {"tf": 2.8284271247461903}, "icepool.Die.map_to_pool": {"tf": 1.4142135623730951}, "icepool.Die.reroll_to_pool": {"tf": 3.1622776601683795}, "icepool.Population.nearest": {"tf": 2.8284271247461903}, "icepool.Population.quantity": {"tf": 3.4641016151377544}, "icepool.Population.quantities": {"tf": 3.4641016151377544}, "icepool.Population.probability": {"tf": 3.4641016151377544}, "icepool.Population.probabilities": {"tf": 3.4641016151377544}, "icepool.middle": {"tf": 2.8284271247461903}, "icepool.map_to_pool": {"tf": 2}, "icepool.MultisetExpression.keep_counts": {"tf": 3.4641016151377544}, "icepool.MultisetExpression.sort_match": {"tf": 3.4641016151377544}, "icepool.MultisetExpression.maximum_match": {"tf": 3.7416573867739413}, "icepool.multiset_function": {"tf": 2}, "icepool.function.map_to_pool": {"tf": 2}}, "df": 15}, "docs": {}, "df": 0}, "9": {"docs": {"icepool.Die.explode": {"tf": 1}, "icepool.Die.explode_to_pool": {"tf": 1}}, "df": 2}, "docs": {"icepool.d": {"tf": 6.164414002968976}, "icepool.z": {"tf": 6.164414002968976}, "icepool.coin": {"tf": 9.746794344808963}, "icepool.stochastic_round": {"tf": 7.874007874011811}, "icepool.one_hot": {"tf": 6.928203230275509}, "icepool.Die.__init__": {"tf": 12.767145334803704}, "icepool.Die.unary_operator": {"tf": 9.591663046625438}, "icepool.Die.binary_operator": {"tf": 9.486832980505138}, "icepool.Die.keys": {"tf": 5.5677643628300215}, "icepool.Die.values": {"tf": 4.898979485566356}, "icepool.Die.items": {"tf": 5.5677643628300215}, "icepool.Die.simplify": {"tf": 5.5677643628300215}, "icepool.Die.reroll": {"tf": 11.090536506409418}, "icepool.Die.filter": {"tf": 10.583005244258363}, "icepool.Die.split": {"tf": 9.38083151964686}, "icepool.Die.truncate": {"tf": 7.0710678118654755}, "icepool.Die.clip": {"tf": 7.0710678118654755}, "icepool.Die.set_range": {"tf": 9.539392014169456}, "icepool.Die.set_outcomes": {"tf": 6.782329983125268}, "icepool.Die.trim": {"tf": 5.5677643628300215}, "icepool.Die.map": {"tf": 18.439088914585774}, "icepool.Die.map_and_time": {"tf": 14.177446878757825}, "icepool.Die.mean_time_to_sum": {"tf": 7.280109889280518}, "icepool.Die.explode": {"tf": 11.532562594670797}, "icepool.Die.if_else": {"tf": 14.696938456699069}, "icepool.Die.is_in": {"tf": 7}, "icepool.Die.count": {"tf": 7.810249675906654}, "icepool.Die.pool": {"tf": 8.12403840463596}, "icepool.Die.keep": {"tf": 9.797958971132712}, "icepool.Die.lowest": {"tf": 8.94427190999916}, "icepool.Die.highest": {"tf": 9.327379053088816}, "icepool.Die.middle": {"tf": 9.9498743710662}, "icepool.Die.map_to_pool": {"tf": 16.3707055437449}, "icepool.Die.explode_to_pool": {"tf": 11.874342087037917}, "icepool.Die.reroll_to_pool": {"tf": 13}, "icepool.Die.abs": {"tf": 5.5677643628300215}, "icepool.Die.round": {"tf": 6.557438524302}, "icepool.Die.stochastic_round": {"tf": 7.483314773547883}, "icepool.Die.trunc": {"tf": 4.898979485566356}, "icepool.Die.floor": {"tf": 4.898979485566356}, "icepool.Die.ceil": {"tf": 4.898979485566356}, "icepool.Die.zero": {"tf": 5.5677643628300215}, "icepool.Die.zero_outcome": {"tf": 3.7416573867739413}, "icepool.Die.cmp": {"tf": 5.744562646538029}, "icepool.Die.sign": {"tf": 5.385164807134504}, "icepool.Die.equals": {"tf": 5.916079783099616}, "icepool.Population.keys": {"tf": 5.5677643628300215}, "icepool.Population.values": {"tf": 4.898979485566356}, "icepool.Population.items": {"tf": 5.5677643628300215}, "icepool.Population.outcomes": {"tf": 5.5677643628300215}, "icepool.Population.common_outcome_length": {"tf": 4.123105625617661}, "icepool.Population.is_empty": {"tf": 3.4641016151377544}, "icepool.Population.min_outcome": {"tf": 3.7416573867739413}, "icepool.Population.max_outcome": {"tf": 3.7416573867739413}, "icepool.Population.nearest": {"tf": 8.246211251235321}, "icepool.Population.quantity": {"tf": 9.9498743710662}, "icepool.Population.quantities": {"tf": 10.246950765959598}, "icepool.Population.denominator": {"tf": 3.4641016151377544}, "icepool.Population.scale_quantities": {"tf": 5.291502622129181}, "icepool.Population.has_zero_quantities": {"tf": 3.4641016151377544}, "icepool.Population.probability": {"tf": 11.357816691600547}, "icepool.Population.probabilities": {"tf": 11}, "icepool.Population.mode": {"tf": 3.4641016151377544}, "icepool.Population.modal_quantity": {"tf": 3.4641016151377544}, "icepool.Population.kolmogorov_smirnov": {"tf": 4.47213595499958}, "icepool.Population.cramer_von_mises": {"tf": 4.47213595499958}, "icepool.Population.median": {"tf": 3.1622776601683795}, "icepool.Population.median_low": {"tf": 3.7416573867739413}, "icepool.Population.median_high": {"tf": 3.7416573867739413}, "icepool.Population.quantile": {"tf": 5.656854249492381}, "icepool.Population.quantile_low": {"tf": 6}, "icepool.Population.quantile_high": {"tf": 6}, "icepool.Population.mean": {"tf": 8.306623862918075}, "icepool.Population.variance": {"tf": 8.306623862918075}, "icepool.Population.standard_deviation": {"tf": 7.745966692414834}, "icepool.Population.sd": {"tf": 7.745966692414834}, "icepool.Population.standardized_moment": {"tf": 8.306623862918075}, "icepool.Population.skewness": {"tf": 7.745966692414834}, "icepool.Population.excess_kurtosis": {"tf": 7.745966692414834}, "icepool.Population.entropy": {"tf": 5.0990195135927845}, "icepool.Population.covariance": {"tf": 10.344080432788601}, "icepool.Population.correlation": {"tf": 9.899494936611665}, "icepool.Population.to_one_hot": {"tf": 6.6332495807108}, "icepool.Population.sample": {"tf": 3.7416573867739413}, "icepool.Population.format": {"tf": 5.5677643628300215}, "icepool.tupleize": {"tf": 9.797958971132712}, "icepool.vectorize": {"tf": 10.344080432788601}, "icepool.Vector.unary_operator": {"tf": 8.306623862918075}, "icepool.Vector.abs": {"tf": 5.5677643628300215}, "icepool.Vector.round": {"tf": 6.557438524302}, "icepool.Vector.trunc": {"tf": 4.898979485566356}, "icepool.Vector.floor": {"tf": 4.898979485566356}, "icepool.Vector.ceil": {"tf": 4.898979485566356}, "icepool.Vector.binary_operator": {"tf": 9.433981132056603}, "icepool.Vector.reverse_binary_operator": {"tf": 8.602325267042627}, "icepool.Vector.append": {"tf": 5.291502622129181}, "icepool.Vector.concatenate": {"tf": 5.656854249492381}, "icepool.Symbols.__init__": {"tf": 6.164414002968976}, "icepool.Symbols.additive_union": {"tf": 7.54983443527075}, "icepool.Symbols.difference": {"tf": 7.54983443527075}, "icepool.Symbols.intersection": {"tf": 7.54983443527075}, "icepool.Symbols.union": {"tf": 7.54983443527075}, "icepool.Symbols.symmetric_difference": {"tf": 7.416198487095663}, "icepool.Symbols.multiply_counts": {"tf": 5.656854249492381}, "icepool.Symbols.divide_counts": {"tf": 5.656854249492381}, "icepool.Symbols.count_subset": {"tf": 8.306623862918075}, "icepool.Symbols.modulo_counts": {"tf": 5.656854249492381}, "icepool.Symbols.issubset": {"tf": 6.4031242374328485}, "icepool.Symbols.issuperset": {"tf": 6.4031242374328485}, "icepool.Symbols.isdisjoint": {"tf": 6.4031242374328485}, "icepool.Symbols.has_negative_counts": {"tf": 3.4641016151377544}, "icepool.Symbols.count": {"tf": 3.4641016151377544}, "icepool.CountsKeysView.__init__": {"tf": 5.5677643628300215}, "icepool.CountsValuesView.__init__": {"tf": 4.898979485566356}, "icepool.CountsItemsView.__init__": {"tf": 4.898979485566356}, "icepool.from_cumulative": {"tf": 10.198039027185569}, "icepool.from_rv": {"tf": 9.643650760992955}, "icepool.lowest": {"tf": 11.832159566199232}, "icepool.highest": {"tf": 11.832159566199232}, "icepool.middle": {"tf": 12.36931687685298}, "icepool.min_outcome": {"tf": 7}, "icepool.max_outcome": {"tf": 7}, "icepool.align": {"tf": 8.774964387392123}, "icepool.align_range": {"tf": 8.246211251235321}, "icepool.commonize_denominator": {"tf": 8.774964387392123}, "icepool.reduce": {"tf": 13.820274961085254}, "icepool.accumulate": {"tf": 13.45362404707371}, "icepool.map": {"tf": 19.467922333931785}, "icepool.map_function": {"tf": 17.97220075561143}, "icepool.map_and_time": {"tf": 15.264337522473747}, "icepool.map_to_pool": {"tf": 20.074859899884732}, "icepool.Pool.__init__": {"tf": 12.68857754044952}, "icepool.Pool.clear_cache": {"tf": 3.1622776601683795}, "icepool.Pool.raw_size": {"tf": 3.4641016151377544}, "icepool.Pool.denominator": {"tf": 3.4641016151377544}, "icepool.Pool.unique_dice": {"tf": 5.830951894845301}, "icepool.Pool.outcomes": {"tf": 4.358898943540674}, "icepool.Pool.output_arity": {"tf": 3.4641016151377544}, "icepool.Pool.min_outcome": {"tf": 3.7416573867739413}, "icepool.Pool.max_outcome": {"tf": 3.7416573867739413}, "icepool.Pool.additive_union": {"tf": 9.219544457292887}, "icepool.standard_pool": {"tf": 7.416198487095663}, "icepool.MultisetGenerator.outcomes": {"tf": 4.358898943540674}, "icepool.MultisetGenerator.output_arity": {"tf": 3.4641016151377544}, "icepool.MultisetGenerator.denominator": {"tf": 3.4641016151377544}, "icepool.MultisetGenerator.equals": {"tf": 4}, "icepool.MultisetGenerator.order": {"tf": 4.47213595499958}, "icepool.MultisetGenerator.min_outcome": {"tf": 3.7416573867739413}, "icepool.MultisetGenerator.max_outcome": {"tf": 3.7416573867739413}, "icepool.MultisetGenerator.sample": {"tf": 4.898979485566356}, "icepool.Alignment.__init__": {"tf": 4.358898943540674}, "icepool.Alignment.outcomes": {"tf": 4.358898943540674}, "icepool.Alignment.output_arity": {"tf": 3.4641016151377544}, "icepool.Alignment.denominator": {"tf": 3.4641016151377544}, "icepool.MultisetExpression.order": {"tf": 4.47213595499958}, "icepool.MultisetExpression.additive_union": {"tf": 9.433981132056603}, "icepool.MultisetExpression.difference": {"tf": 9.433981132056603}, "icepool.MultisetExpression.intersection": {"tf": 9.433981132056603}, "icepool.MultisetExpression.union": {"tf": 9.433981132056603}, "icepool.MultisetExpression.symmetric_difference": {"tf": 9.899494936611665}, "icepool.MultisetExpression.keep_outcomes": {"tf": 9.899494936611665}, "icepool.MultisetExpression.drop_outcomes": {"tf": 9.899494936611665}, "icepool.MultisetExpression.map_counts": {"tf": 10.488088481701515}, "icepool.MultisetExpression.multiply_counts": {"tf": 6.928203230275509}, "icepool.MultisetExpression.divide_counts": {"tf": 6.928203230275509}, "icepool.MultisetExpression.modulo_counts": {"tf": 6.928203230275509}, "icepool.MultisetExpression.keep_counts": {"tf": 10}, "icepool.MultisetExpression.unique": {"tf": 7.3484692283495345}, "icepool.MultisetExpression.keep": {"tf": 11.045361017187261}, "icepool.MultisetExpression.lowest": {"tf": 8.54400374531753}, "icepool.MultisetExpression.highest": {"tf": 8.54400374531753}, "icepool.MultisetExpression.sort_match": {"tf": 12.649110640673518}, "icepool.MultisetExpression.maximum_match": {"tf": 11.874342087037917}, "icepool.MultisetExpression.evaluate": {"tf": 11.269427669584644}, "icepool.MultisetExpression.expand": {"tf": 11.135528725660043}, "icepool.MultisetExpression.sum": {"tf": 11}, "icepool.MultisetExpression.count": {"tf": 7.810249675906654}, "icepool.MultisetExpression.any": {"tf": 7.810249675906654}, "icepool.MultisetExpression.highest_outcome_and_count": {"tf": 9.1104335791443}, "icepool.MultisetExpression.all_counts": {"tf": 10.04987562112089}, "icepool.MultisetExpression.largest_count": {"tf": 7.810249675906654}, "icepool.MultisetExpression.largest_count_and_outcome": {"tf": 9.1104335791443}, "icepool.MultisetExpression.count_subset": {"tf": 12.328828005937952}, "icepool.MultisetExpression.largest_straight": {"tf": 8.888194417315589}, "icepool.MultisetExpression.largest_straight_and_outcome": {"tf": 9.746794344808963}, "icepool.MultisetExpression.all_straights": {"tf": 9.9498743710662}, "icepool.MultisetExpression.all_straights_reduce_counts": {"tf": 12.609520212918492}, "icepool.MultisetExpression.argsort": {"tf": 13.638181696985855}, "icepool.MultisetExpression.issubset": {"tf": 11.224972160321824}, "icepool.MultisetExpression.issuperset": {"tf": 11.224972160321824}, "icepool.MultisetExpression.isdisjoint": {"tf": 11.224972160321824}, "icepool.MultisetExpression.compair_lt": {"tf": 10.770329614269007}, "icepool.MultisetExpression.compair_le": {"tf": 10.770329614269007}, "icepool.MultisetExpression.compair_gt": {"tf": 10.770329614269007}, "icepool.MultisetExpression.compair_ge": {"tf": 10.770329614269007}, "icepool.MultisetExpression.compair_eq": {"tf": 10.770329614269007}, "icepool.MultisetExpression.compair_ne": {"tf": 10.770329614269007}, "icepool.MultisetEvaluator.next_state": {"tf": 6.782329983125268}, "icepool.MultisetEvaluator.final_outcome": {"tf": 8}, "icepool.MultisetEvaluator.order": {"tf": 4.47213595499958}, "icepool.MultisetEvaluator.alignment": {"tf": 6}, "icepool.MultisetEvaluator.range_alignment": {"tf": 5.477225575051661}, "icepool.MultisetEvaluator.prefix_generators": {"tf": 6.082762530298219}, "icepool.MultisetEvaluator.validate_arity": {"tf": 4.47213595499958}, "icepool.MultisetEvaluator.evaluate": {"tf": 11.224972160321824}, "icepool.MultisetEvaluator.sample": {"tf": 8.774964387392123}, "icepool.Order.merge": {"tf": 5.830951894845301}, "icepool.Deck.__init__": {"tf": 7.681145747868608}, "icepool.Deck.keys": {"tf": 5.5677643628300215}, "icepool.Deck.values": {"tf": 4.898979485566356}, "icepool.Deck.items": {"tf": 5.5677643628300215}, "icepool.Deck.size": {"tf": 3.4641016151377544}, "icepool.Deck.deal": {"tf": 9.1104335791443}, "icepool.Deck.additive_union": {"tf": 8.246211251235321}, "icepool.Deck.difference": {"tf": 8.246211251235321}, "icepool.Deck.intersection": {"tf": 8.246211251235321}, "icepool.Deck.union": {"tf": 8.246211251235321}, "icepool.Deck.symmetric_difference": {"tf": 8.12403840463596}, "icepool.Deck.multiply_counts": {"tf": 6.244997998398398}, "icepool.Deck.divide_counts": {"tf": 6.244997998398398}, "icepool.Deck.modulo_counts": {"tf": 6.244997998398398}, "icepool.Deck.map": {"tf": 13.30413469565007}, "icepool.Deal.__init__": {"tf": 6.244997998398398}, "icepool.Deal.deck": {"tf": 5.5677643628300215}, "icepool.Deal.hand_sizes": {"tf": 4.898979485566356}, "icepool.Deal.total_cards_dealt": {"tf": 3.4641016151377544}, "icepool.Deal.outcomes": {"tf": 5.5677643628300215}, "icepool.Deal.output_arity": {"tf": 3.4641016151377544}, "icepool.Deal.denominator": {"tf": 3.4641016151377544}, "icepool.MultiDeal.__init__": {"tf": 6.4031242374328485}, "icepool.MultiDeal.deck": {"tf": 5.5677643628300215}, "icepool.MultiDeal.hand_sizes": {"tf": 3.7416573867739413}, "icepool.MultiDeal.total_cards_dealt": {"tf": 3.4641016151377544}, "icepool.MultiDeal.outcomes": {"tf": 5.5677643628300215}, "icepool.MultiDeal.output_arity": {"tf": 3.4641016151377544}, "icepool.MultiDeal.denominator": {"tf": 3.4641016151377544}, "icepool.multiset_function": {"tf": 14.352700094407323}, "icepool.evaluator.JointEvaluator.__init__": {"tf": 5.0990195135927845}, "icepool.evaluator.JointEvaluator.next_state": {"tf": 4.898979485566356}, "icepool.evaluator.JointEvaluator.final_outcome": {"tf": 5.385164807134504}, "icepool.evaluator.JointEvaluator.order": {"tf": 4.47213595499958}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 4.898979485566356}, "icepool.evaluator.JointEvaluator.prefix_generators": {"tf": 6.082762530298219}, "icepool.evaluator.JointEvaluator.validate_arity": {"tf": 4.47213595499958}, "icepool.evaluator.ExpandEvaluator.__init__": {"tf": 6.324555320336759}, "icepool.evaluator.ExpandEvaluator.next_state": {"tf": 4.69041575982343}, "icepool.evaluator.ExpandEvaluator.order": {"tf": 5.5677643628300215}, "icepool.evaluator.ExpandEvaluator.final_outcome": {"tf": 4}, "icepool.evaluator.SumEvaluator.__init__": {"tf": 5.744562646538029}, "icepool.evaluator.SumEvaluator.next_state": {"tf": 4.69041575982343}, "icepool.evaluator.SumEvaluator.order": {"tf": 5.5677643628300215}, "icepool.evaluator.CountEvaluator.next_state": {"tf": 4.69041575982343}, "icepool.evaluator.CountEvaluator.final_outcome": {"tf": 4}, "icepool.evaluator.CountEvaluator.order": {"tf": 5.5677643628300215}, "icepool.evaluator.AnyEvaluator.next_state": {"tf": 4.69041575982343}, "icepool.evaluator.AnyEvaluator.final_outcome": {"tf": 4}, "icepool.evaluator.AnyEvaluator.order": {"tf": 5.5677643628300215}, "icepool.evaluator.HighestOutcomeAndCountEvaluator.next_state": {"tf": 4.69041575982343}, "icepool.evaluator.HighestOutcomeAndCountEvaluator.order": {"tf": 5.5677643628300215}, "icepool.evaluator.HighestOutcomeAndCountEvaluator.alignment": {"tf": 4.47213595499958}, "icepool.evaluator.LargestCountEvaluator.next_state": {"tf": 4.898979485566356}, "icepool.evaluator.LargestCountEvaluator.order": {"tf": 5.5677643628300215}, "icepool.evaluator.LargestCountAndOutcomeEvaluator.next_state": {"tf": 4.69041575982343}, "icepool.evaluator.LargestCountAndOutcomeEvaluator.order": {"tf": 5.5677643628300215}, "icepool.evaluator.CountSubsetEvaluator.__init__": {"tf": 5.291502622129181}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 5.291502622129181}, "icepool.evaluator.CountSubsetEvaluator.order": {"tf": 5.5677643628300215}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 3.7416573867739413}, "icepool.evaluator.AllCountsEvaluator.__init__": {"tf": 5.291502622129181}, "icepool.evaluator.AllCountsEvaluator.next_state": {"tf": 4.69041575982343}, "icepool.evaluator.AllCountsEvaluator.final_outcome": {"tf": 4}, "icepool.evaluator.AllCountsEvaluator.order": {"tf": 5.5677643628300215}, "icepool.evaluator.AllCountsEvaluator.alignment": {"tf": 4.47213595499958}, "icepool.evaluator.LargestStraightEvaluator.next_state": {"tf": 4.898979485566356}, "icepool.evaluator.LargestStraightEvaluator.final_outcome": {"tf": 4}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"tf": 5.477225575051661}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.next_state": {"tf": 4.69041575982343}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.final_outcome": {"tf": 5.0990195135927845}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.order": {"tf": 5.5677643628300215}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"tf": 5.477225575051661}, "icepool.evaluator.AllStraightsEvaluator.next_state": {"tf": 4.898979485566356}, "icepool.evaluator.AllStraightsEvaluator.final_outcome": {"tf": 5.291502622129181}, "icepool.evaluator.AllStraightsEvaluator.order": {"tf": 5.5677643628300215}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"tf": 5.477225575051661}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.__init__": {"tf": 6.855654600401044}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.next_state": {"tf": 4.898979485566356}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.final_outcome": {"tf": 6}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"tf": 5.477225575051661}, "icepool.evaluator.ComparisonEvaluator.any_all": {"tf": 6.164414002968976}, "icepool.evaluator.ComparisonEvaluator.default_outcome": {"tf": 3}, "icepool.evaluator.ComparisonEvaluator.next_state": {"tf": 5.0990195135927845}, "icepool.evaluator.ComparisonEvaluator.final_outcome": {"tf": 4}, "icepool.evaluator.ComparisonEvaluator.order": {"tf": 5.5677643628300215}, "icepool.evaluator.IsSubsetEvaluator.any_all": {"tf": 6.164414002968976}, "icepool.evaluator.IsSubsetEvaluator.default_outcome": {"tf": 3}, "icepool.evaluator.IsProperSubsetEvaluator.any_all": {"tf": 6.164414002968976}, "icepool.evaluator.IsProperSubsetEvaluator.default_outcome": {"tf": 3}, "icepool.evaluator.IsSupersetEvaluator.any_all": {"tf": 6.164414002968976}, "icepool.evaluator.IsSupersetEvaluator.default_outcome": {"tf": 3}, "icepool.evaluator.IsProperSupersetEvaluator.any_all": {"tf": 6.164414002968976}, "icepool.evaluator.IsProperSupersetEvaluator.default_outcome": {"tf": 3}, "icepool.evaluator.IsEqualSetEvaluator.any_all": {"tf": 6.164414002968976}, "icepool.evaluator.IsEqualSetEvaluator.default_outcome": {"tf": 3}, "icepool.evaluator.IsNotEqualSetEvaluator.any_all": {"tf": 6.164414002968976}, "icepool.evaluator.IsNotEqualSetEvaluator.default_outcome": {"tf": 3}, "icepool.evaluator.IsDisjointSetEvaluator.any_all": {"tf": 6.164414002968976}, "icepool.evaluator.IsDisjointSetEvaluator.default_outcome": {"tf": 3}, "icepool.evaluator.ConstantEvaluator.__init__": {"tf": 5.5677643628300215}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 4.898979485566356}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 5.916079783099616}, "icepool.evaluator.KeepEvaluator.__init__": {"tf": 4.795831523312719}, "icepool.evaluator.KeepEvaluator.next_state": {"tf": 4.69041575982343}, "icepool.evaluator.KeepEvaluator.final_outcome": {"tf": 3.7416573867739413}, "icepool.evaluator.KeepEvaluator.order": {"tf": 4.47213595499958}, "icepool.evaluator.ArgsortEvaluator.__init__": {"tf": 8.366600265340756}, "icepool.evaluator.ArgsortEvaluator.next_state": {"tf": 5.0990195135927845}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 3.7416573867739413}, "icepool.evaluator.ArgsortEvaluator.order": {"tf": 4.47213595499958}, "icepool.evaluator.CompairEvalautor.__init__": {"tf": 9.746794344808963}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 5.291502622129181}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 3.7416573867739413}, "icepool.evaluator.CompairEvalautor.order": {"tf": 4.47213595499958}, "icepool.evaluator.ExpressionEvaluator.__init__": {"tf": 9.539392014169456}, "icepool.evaluator.ExpressionEvaluator.next_state": {"tf": 4.898979485566356}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 7.745966692414834}, "icepool.evaluator.ExpressionEvaluator.order": {"tf": 4.47213595499958}, "icepool.evaluator.ExpressionEvaluator.alignment": {"tf": 5.0990195135927845}, "icepool.evaluator.ExpressionEvaluator.prefix_generators": {"tf": 6.082762530298219}, "icepool.evaluator.ExpressionEvaluator.validate_arity": {"tf": 4.47213595499958}, "icepool.function.d": {"tf": 6.164414002968976}, "icepool.function.z": {"tf": 6.164414002968976}, "icepool.function.coin": {"tf": 9.746794344808963}, "icepool.function.stochastic_round": {"tf": 7.874007874011811}, "icepool.function.one_hot": {"tf": 6.928203230275509}, "icepool.function.from_cumulative": {"tf": 10.198039027185569}, "icepool.function.from_rv": {"tf": 9.643650760992955}, "icepool.function.min_outcome": {"tf": 7}, "icepool.function.max_outcome": {"tf": 7}, "icepool.function.align": {"tf": 8.774964387392123}, "icepool.function.align_range": {"tf": 8.246211251235321}, "icepool.function.commonize_denominator": {"tf": 8.774964387392123}, "icepool.function.reduce": {"tf": 13.820274961085254}, "icepool.function.accumulate": {"tf": 13.45362404707371}, "icepool.function.map": {"tf": 19.467922333931785}, "icepool.function.map_function": {"tf": 17.97220075561143}, "icepool.function.map_and_time": {"tf": 15.264337522473747}, "icepool.function.map_to_pool": {"tf": 20.074859899884732}, "icepool.typing.Order.merge": {"tf": 5.830951894845301}, "icepool.typing.count_positional_parameters": {"tf": 5.5677643628300215}, "icepool.typing.guess_star": {"tf": 4.47213595499958}}, "df": 350, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool.d": {"tf": 1}, "icepool.z": {"tf": 1}, "icepool.one_hot": {"tf": 1}, "icepool.function.d": {"tf": 1}, "icepool.function.z": {"tf": 1}, "icepool.function.one_hot": {"tf": 1}}, "df": 6}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die.equals": {"tf": 1}}, "df": 1}}}}}}, "z": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Deal.__init__": {"tf": 1}}, "df": 1, "s": {"docs": {"icepool.standard_pool": {"tf": 1}, "icepool.Deck.deal": {"tf": 1}, "icepool.MultiDeal.__init__": {"tf": 1}}, "df": 3}}}}, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.__init__": {"tf": 1.4142135623730951}, "icepool.Die.pool": {"tf": 1}, "icepool.Die.keep": {"tf": 1.4142135623730951}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.Population.quantities": {"tf": 1}, "icepool.Population.probabilities": {"tf": 1.4142135623730951}, "icepool.Population.to_one_hot": {"tf": 1}, "icepool.from_cumulative": {"tf": 1.7320508075688772}, "icepool.from_rv": {"tf": 1.4142135623730951}, "icepool.map_to_pool": {"tf": 1.4142135623730951}, "icepool.Pool.__init__": {"tf": 1.4142135623730951}, "icepool.Pool.outcomes": {"tf": 1}, "icepool.Pool.additive_union": {"tf": 1}, "icepool.MultisetGenerator.outcomes": {"tf": 1}, "icepool.Alignment.outcomes": {"tf": 1}, "icepool.MultisetExpression.additive_union": {"tf": 1}, "icepool.MultisetExpression.difference": {"tf": 1}, "icepool.MultisetExpression.intersection": {"tf": 1}, "icepool.MultisetExpression.union": {"tf": 1}, "icepool.MultisetExpression.symmetric_difference": {"tf": 1}, "icepool.MultisetExpression.map_counts": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1}, "icepool.MultisetExpression.count_subset": {"tf": 1}, "icepool.MultisetExpression.argsort": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.issubset": {"tf": 1}, "icepool.MultisetExpression.issuperset": {"tf": 1}, "icepool.MultisetExpression.isdisjoint": {"tf": 1}, "icepool.MultisetExpression.compair_lt": {"tf": 1}, "icepool.MultisetExpression.compair_le": {"tf": 1}, "icepool.MultisetExpression.compair_gt": {"tf": 1}, "icepool.MultisetExpression.compair_ge": {"tf": 1}, "icepool.MultisetExpression.compair_eq": {"tf": 1}, "icepool.MultisetExpression.compair_ne": {"tf": 1}, "icepool.MultisetEvaluator.alignment": {"tf": 1}, "icepool.MultisetEvaluator.range_alignment": {"tf": 1}, "icepool.MultisetEvaluator.evaluate": {"tf": 1}, "icepool.MultisetEvaluator.sample": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1.4142135623730951}, "icepool.evaluator.HighestOutcomeAndCountEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"tf": 1}, "icepool.function.from_cumulative": {"tf": 1.7320508075688772}, "icepool.function.from_rv": {"tf": 1.4142135623730951}, "icepool.function.map_to_pool": {"tf": 1.4142135623730951}}, "df": 47}}}}}}, "l": {"docs": {}, "df": 0, "f": {"docs": {"icepool.Die.unary_operator": {"tf": 1}, "icepool.Die.binary_operator": {"tf": 1}, "icepool.Die.keys": {"tf": 1}, "icepool.Die.values": {"tf": 1}, "icepool.Die.items": {"tf": 1}, "icepool.Die.simplify": {"tf": 1}, "icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.split": {"tf": 1}, "icepool.Die.truncate": {"tf": 1}, "icepool.Die.clip": {"tf": 1}, "icepool.Die.set_range": {"tf": 1}, "icepool.Die.set_outcomes": {"tf": 1}, "icepool.Die.trim": {"tf": 1}, "icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Die.mean_time_to_sum": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.if_else": {"tf": 1}, "icepool.Die.is_in": {"tf": 1}, "icepool.Die.count": {"tf": 1}, "icepool.Die.pool": {"tf": 1}, "icepool.Die.keep": {"tf": 1}, "icepool.Die.lowest": {"tf": 1}, "icepool.Die.highest": {"tf": 1}, "icepool.Die.middle": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.Die.explode_to_pool": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.Die.abs": {"tf": 1}, "icepool.Die.round": {"tf": 1}, "icepool.Die.stochastic_round": {"tf": 1}, "icepool.Die.trunc": {"tf": 1}, "icepool.Die.floor": {"tf": 1}, "icepool.Die.ceil": {"tf": 1}, "icepool.Die.zero": {"tf": 1}, "icepool.Die.zero_outcome": {"tf": 1}, "icepool.Die.cmp": {"tf": 1}, "icepool.Die.sign": {"tf": 1}, "icepool.Die.equals": {"tf": 1}, "icepool.Population.keys": {"tf": 1}, "icepool.Population.values": {"tf": 1}, "icepool.Population.items": {"tf": 1}, "icepool.Population.outcomes": {"tf": 1}, "icepool.Population.common_outcome_length": {"tf": 1}, "icepool.Population.is_empty": {"tf": 1}, "icepool.Population.min_outcome": {"tf": 1}, "icepool.Population.max_outcome": {"tf": 1}, "icepool.Population.nearest": {"tf": 1}, "icepool.Population.quantity": {"tf": 1}, "icepool.Population.quantities": {"tf": 1}, "icepool.Population.denominator": {"tf": 1}, "icepool.Population.scale_quantities": {"tf": 1}, "icepool.Population.has_zero_quantities": {"tf": 1}, "icepool.Population.probability": {"tf": 1}, "icepool.Population.probabilities": {"tf": 1}, "icepool.Population.mode": {"tf": 1}, "icepool.Population.modal_quantity": {"tf": 1}, "icepool.Population.kolmogorov_smirnov": {"tf": 1}, "icepool.Population.cramer_von_mises": {"tf": 1}, "icepool.Population.median": {"tf": 1}, "icepool.Population.median_low": {"tf": 1}, "icepool.Population.median_high": {"tf": 1}, "icepool.Population.quantile": {"tf": 1}, "icepool.Population.quantile_low": {"tf": 1}, "icepool.Population.quantile_high": {"tf": 1}, "icepool.Population.mean": {"tf": 1}, "icepool.Population.variance": {"tf": 1}, "icepool.Population.standard_deviation": {"tf": 1}, "icepool.Population.sd": {"tf": 1}, "icepool.Population.standardized_moment": {"tf": 1}, "icepool.Population.skewness": {"tf": 1}, "icepool.Population.excess_kurtosis": {"tf": 1}, "icepool.Population.entropy": {"tf": 1}, "icepool.Population.covariance": {"tf": 1}, "icepool.Population.correlation": {"tf": 1}, "icepool.Population.to_one_hot": {"tf": 1}, "icepool.Population.sample": {"tf": 1}, "icepool.Population.format": {"tf": 1}, "icepool.Vector.unary_operator": {"tf": 1}, "icepool.Vector.abs": {"tf": 1}, "icepool.Vector.round": {"tf": 1}, "icepool.Vector.trunc": {"tf": 1}, "icepool.Vector.floor": {"tf": 1}, "icepool.Vector.ceil": {"tf": 1}, "icepool.Vector.binary_operator": {"tf": 1}, "icepool.Vector.reverse_binary_operator": {"tf": 1}, "icepool.Vector.append": {"tf": 1}, "icepool.Vector.concatenate": {"tf": 1}, "icepool.Symbols.additive_union": {"tf": 1}, "icepool.Symbols.difference": {"tf": 1}, "icepool.Symbols.intersection": {"tf": 1}, "icepool.Symbols.union": {"tf": 1}, "icepool.Symbols.symmetric_difference": {"tf": 1}, "icepool.Symbols.multiply_counts": {"tf": 1}, "icepool.Symbols.divide_counts": {"tf": 1}, "icepool.Symbols.count_subset": {"tf": 1}, "icepool.Symbols.modulo_counts": {"tf": 1}, "icepool.Symbols.issubset": {"tf": 1}, "icepool.Symbols.issuperset": {"tf": 1}, "icepool.Symbols.isdisjoint": {"tf": 1}, "icepool.Symbols.has_negative_counts": {"tf": 1}, "icepool.Symbols.count": {"tf": 1}, "icepool.Pool.raw_size": {"tf": 1}, "icepool.Pool.denominator": {"tf": 1}, "icepool.Pool.unique_dice": {"tf": 1}, "icepool.Pool.outcomes": {"tf": 1}, "icepool.Pool.output_arity": {"tf": 1}, "icepool.Pool.min_outcome": {"tf": 1}, "icepool.Pool.max_outcome": {"tf": 1}, "icepool.MultisetGenerator.outcomes": {"tf": 1}, "icepool.MultisetGenerator.output_arity": {"tf": 1}, "icepool.MultisetGenerator.denominator": {"tf": 1}, "icepool.MultisetGenerator.equals": {"tf": 1}, "icepool.MultisetGenerator.order": {"tf": 1}, "icepool.MultisetGenerator.min_outcome": {"tf": 1}, "icepool.MultisetGenerator.max_outcome": {"tf": 1}, "icepool.MultisetGenerator.sample": {"tf": 1}, "icepool.Alignment.outcomes": {"tf": 1}, "icepool.Alignment.output_arity": {"tf": 1}, "icepool.Alignment.denominator": {"tf": 1}, "icepool.MultisetExpression.order": {"tf": 1}, "icepool.MultisetExpression.symmetric_difference": {"tf": 1}, "icepool.MultisetExpression.keep_outcomes": {"tf": 1}, "icepool.MultisetExpression.drop_outcomes": {"tf": 1}, "icepool.MultisetExpression.multiply_counts": {"tf": 1}, "icepool.MultisetExpression.divide_counts": {"tf": 1}, "icepool.MultisetExpression.modulo_counts": {"tf": 1}, "icepool.MultisetExpression.keep_counts": {"tf": 1}, "icepool.MultisetExpression.unique": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1}, "icepool.MultisetExpression.lowest": {"tf": 1}, "icepool.MultisetExpression.highest": {"tf": 1}, "icepool.MultisetExpression.sort_match": {"tf": 1}, "icepool.MultisetExpression.maximum_match": {"tf": 1}, "icepool.MultisetExpression.expand": {"tf": 1}, "icepool.MultisetExpression.sum": {"tf": 1}, "icepool.MultisetExpression.count": {"tf": 1}, "icepool.MultisetExpression.any": {"tf": 1}, "icepool.MultisetExpression.highest_outcome_and_count": {"tf": 1}, "icepool.MultisetExpression.all_counts": {"tf": 1}, "icepool.MultisetExpression.largest_count": {"tf": 1}, "icepool.MultisetExpression.largest_count_and_outcome": {"tf": 1}, "icepool.MultisetExpression.count_subset": {"tf": 1}, "icepool.MultisetExpression.largest_straight": {"tf": 1}, "icepool.MultisetExpression.largest_straight_and_outcome": {"tf": 1}, "icepool.MultisetExpression.all_straights": {"tf": 1}, "icepool.MultisetExpression.all_straights_reduce_counts": {"tf": 1}, "icepool.MultisetExpression.argsort": {"tf": 1}, "icepool.MultisetExpression.issubset": {"tf": 1}, "icepool.MultisetExpression.issuperset": {"tf": 1}, "icepool.MultisetExpression.isdisjoint": {"tf": 1}, "icepool.MultisetExpression.compair_lt": {"tf": 1}, "icepool.MultisetExpression.compair_le": {"tf": 1}, "icepool.MultisetExpression.compair_gt": {"tf": 1}, "icepool.MultisetExpression.compair_ge": {"tf": 1}, "icepool.MultisetExpression.compair_eq": {"tf": 1}, "icepool.MultisetExpression.compair_ne": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.MultisetEvaluator.final_outcome": {"tf": 1}, "icepool.MultisetEvaluator.order": {"tf": 1}, "icepool.MultisetEvaluator.alignment": {"tf": 1}, "icepool.MultisetEvaluator.range_alignment": {"tf": 1}, "icepool.MultisetEvaluator.prefix_generators": {"tf": 1}, "icepool.MultisetEvaluator.validate_arity": {"tf": 1}, "icepool.MultisetEvaluator.evaluate": {"tf": 1}, "icepool.MultisetEvaluator.sample": {"tf": 1}, "icepool.Deck.keys": {"tf": 1}, "icepool.Deck.values": {"tf": 1}, "icepool.Deck.items": {"tf": 1}, "icepool.Deck.size": {"tf": 1}, "icepool.Deck.deal": {"tf": 1}, "icepool.Deck.additive_union": {"tf": 1}, "icepool.Deck.difference": {"tf": 1}, "icepool.Deck.intersection": {"tf": 1}, "icepool.Deck.union": {"tf": 1}, "icepool.Deck.symmetric_difference": {"tf": 1}, "icepool.Deck.multiply_counts": {"tf": 1}, "icepool.Deck.divide_counts": {"tf": 1}, "icepool.Deck.modulo_counts": {"tf": 1}, "icepool.Deck.map": {"tf": 1}, "icepool.Deal.deck": {"tf": 1}, "icepool.Deal.hand_sizes": {"tf": 1}, "icepool.Deal.total_cards_dealt": {"tf": 1}, "icepool.Deal.outcomes": {"tf": 1}, "icepool.Deal.output_arity": {"tf": 1}, "icepool.Deal.denominator": {"tf": 1}, "icepool.MultiDeal.deck": {"tf": 1}, "icepool.MultiDeal.hand_sizes": {"tf": 1}, "icepool.MultiDeal.total_cards_dealt": {"tf": 1}, "icepool.MultiDeal.outcomes": {"tf": 1}, "icepool.MultiDeal.output_arity": {"tf": 1}, "icepool.MultiDeal.denominator": {"tf": 1}, "icepool.evaluator.JointEvaluator.next_state": {"tf": 1}, "icepool.evaluator.JointEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.JointEvaluator.order": {"tf": 1}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 1}, "icepool.evaluator.JointEvaluator.prefix_generators": {"tf": 1}, "icepool.evaluator.JointEvaluator.validate_arity": {"tf": 1}, "icepool.evaluator.ExpandEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ExpandEvaluator.order": {"tf": 1}, "icepool.evaluator.ExpandEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.SumEvaluator.next_state": {"tf": 1}, "icepool.evaluator.SumEvaluator.order": {"tf": 1}, "icepool.evaluator.CountEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CountEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CountEvaluator.order": {"tf": 1}, "icepool.evaluator.AnyEvaluator.next_state": {"tf": 1}, "icepool.evaluator.AnyEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.AnyEvaluator.order": {"tf": 1}, "icepool.evaluator.HighestOutcomeAndCountEvaluator.next_state": {"tf": 1}, "icepool.evaluator.HighestOutcomeAndCountEvaluator.order": {"tf": 1}, "icepool.evaluator.HighestOutcomeAndCountEvaluator.alignment": {"tf": 1}, "icepool.evaluator.LargestCountEvaluator.next_state": {"tf": 1}, "icepool.evaluator.LargestCountEvaluator.order": {"tf": 1}, "icepool.evaluator.LargestCountAndOutcomeEvaluator.next_state": {"tf": 1}, "icepool.evaluator.LargestCountAndOutcomeEvaluator.order": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.order": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.next_state": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.order": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.next_state": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.next_state": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.order": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.next_state": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.order": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.next_state": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.any_all": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.order": {"tf": 1}, "icepool.evaluator.IsSubsetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsProperSubsetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsSupersetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsProperSupersetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsEqualSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsNotEqualSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsDisjointSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.KeepEvaluator.next_state": {"tf": 1}, "icepool.evaluator.KeepEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.KeepEvaluator.order": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.order": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 1}, "icepool.evaluator.CompairEvalautor.order": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.order": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.alignment": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.prefix_generators": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.validate_arity": {"tf": 1}}, "df": 266}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.split": {"tf": 1}, "icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.Die.explode_to_pool": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.map_function": {"tf": 1}, "icepool.map_and_time": {"tf": 1}, "icepool.map_to_pool": {"tf": 1}, "icepool.Deck.map": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.function.map_function": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1}}, "df": 18}, "t": {"docs": {}, "df": 0, "e": {"docs": {"icepool.map_and_time": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.MultisetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.JointEvaluator.next_state": {"tf": 1}, "icepool.evaluator.JointEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ExpandEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ExpandEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.SumEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CountEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CountEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.AnyEvaluator.next_state": {"tf": 1}, "icepool.evaluator.AnyEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.HighestOutcomeAndCountEvaluator.next_state": {"tf": 1}, "icepool.evaluator.LargestCountEvaluator.next_state": {"tf": 1}, "icepool.evaluator.LargestCountAndOutcomeEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.next_state": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.next_state": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.next_state": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.next_state": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.next_state": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.KeepEvaluator.next_state": {"tf": 1}, "icepool.evaluator.KeepEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}}, "df": 40}}}, "r": {"docs": {"icepool.Population.format": {"tf": 1.4142135623730951}, "icepool.Symbols.__init__": {"tf": 1.7320508075688772}, "icepool.Symbols.additive_union": {"tf": 1.4142135623730951}, "icepool.Symbols.difference": {"tf": 1.4142135623730951}, "icepool.Symbols.intersection": {"tf": 1.4142135623730951}, "icepool.Symbols.union": {"tf": 1.4142135623730951}, "icepool.Symbols.symmetric_difference": {"tf": 1.4142135623730951}, "icepool.Symbols.count_subset": {"tf": 1.4142135623730951}, "icepool.Symbols.issubset": {"tf": 1.4142135623730951}, "icepool.Symbols.issuperset": {"tf": 1.4142135623730951}, "icepool.Symbols.isdisjoint": {"tf": 1.4142135623730951}}, "df": 11}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.keep": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1}}, "df": 2}}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Population.scale_quantities": {"tf": 1}}, "df": 1}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {"icepool.Population.format": {"tf": 1}}, "df": 1}}}, "y": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Symbols.__init__": {"tf": 1}, "icepool.Symbols.additive_union": {"tf": 1.4142135623730951}, "icepool.Symbols.difference": {"tf": 1.4142135623730951}, "icepool.Symbols.intersection": {"tf": 1.4142135623730951}, "icepool.Symbols.union": {"tf": 1.4142135623730951}, "icepool.Symbols.symmetric_difference": {"tf": 1.4142135623730951}, "icepool.Symbols.multiply_counts": {"tf": 1.4142135623730951}, "icepool.Symbols.divide_counts": {"tf": 1.4142135623730951}, "icepool.Symbols.modulo_counts": {"tf": 1.4142135623730951}}, "df": 9}}}}}}}, "i": {"docs": {"icepool.Population.covariance": {"tf": 1}, "icepool.Population.correlation": {"tf": 1}}, "df": 2, "n": {"docs": {"icepool.MultisetExpression.all_straights_reduce_counts": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.__init__": {"tf": 1}}, "df": 2, "t": {"docs": {"icepool.d": {"tf": 1.4142135623730951}, "icepool.z": {"tf": 1.4142135623730951}, "icepool.coin": {"tf": 1.7320508075688772}, "icepool.stochastic_round": {"tf": 1.4142135623730951}, "icepool.one_hot": {"tf": 1}, "icepool.Die.__init__": {"tf": 2.23606797749979}, "icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.set_range": {"tf": 2}, "icepool.Die.map": {"tf": 1.7320508075688772}, "icepool.Die.map_and_time": {"tf": 1.4142135623730951}, "icepool.Die.mean_time_to_sum": {"tf": 1.4142135623730951}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.if_else": {"tf": 1.4142135623730951}, "icepool.Die.count": {"tf": 1.4142135623730951}, "icepool.Die.pool": {"tf": 1.4142135623730951}, "icepool.Die.keep": {"tf": 2}, "icepool.Die.lowest": {"tf": 1.7320508075688772}, "icepool.Die.highest": {"tf": 1.7320508075688772}, "icepool.Die.middle": {"tf": 1.4142135623730951}, "icepool.Die.map_to_pool": {"tf": 2}, "icepool.Die.explode_to_pool": {"tf": 1.7320508075688772}, "icepool.Die.reroll_to_pool": {"tf": 1.7320508075688772}, "icepool.Die.round": {"tf": 1}, "icepool.Die.stochastic_round": {"tf": 1.4142135623730951}, "icepool.Die.cmp": {"tf": 1}, "icepool.Die.sign": {"tf": 1}, "icepool.Population.common_outcome_length": {"tf": 1}, "icepool.Population.quantity": {"tf": 1}, "icepool.Population.quantities": {"tf": 1}, "icepool.Population.denominator": {"tf": 1}, "icepool.Population.scale_quantities": {"tf": 1}, "icepool.Population.modal_quantity": {"tf": 1}, "icepool.Population.quantile": {"tf": 1.4142135623730951}, "icepool.Population.quantile_low": {"tf": 1.4142135623730951}, "icepool.Population.quantile_high": {"tf": 1.4142135623730951}, "icepool.Population.standardized_moment": {"tf": 1}, "icepool.Population.covariance": {"tf": 1.4142135623730951}, "icepool.Population.correlation": {"tf": 1.4142135623730951}, "icepool.Vector.round": {"tf": 1}, "icepool.Symbols.__init__": {"tf": 1}, "icepool.Symbols.additive_union": {"tf": 1}, "icepool.Symbols.difference": {"tf": 1}, "icepool.Symbols.intersection": {"tf": 1}, "icepool.Symbols.union": {"tf": 1}, "icepool.Symbols.symmetric_difference": {"tf": 1}, "icepool.Symbols.multiply_counts": {"tf": 1}, "icepool.Symbols.divide_counts": {"tf": 1}, "icepool.Symbols.count_subset": {"tf": 1.7320508075688772}, "icepool.Symbols.modulo_counts": {"tf": 1}, "icepool.Symbols.issubset": {"tf": 1}, "icepool.Symbols.issuperset": {"tf": 1}, "icepool.Symbols.isdisjoint": {"tf": 1}, "icepool.Symbols.count": {"tf": 1}, "icepool.from_cumulative": {"tf": 1}, "icepool.from_rv": {"tf": 1.7320508075688772}, "icepool.lowest": {"tf": 1.4142135623730951}, "icepool.highest": {"tf": 1.4142135623730951}, "icepool.middle": {"tf": 1}, "icepool.align_range": {"tf": 1.7320508075688772}, "icepool.map": {"tf": 1.7320508075688772}, "icepool.map_function": {"tf": 1.7320508075688772}, "icepool.map_and_time": {"tf": 1.4142135623730951}, "icepool.map_to_pool": {"tf": 2.449489742783178}, "icepool.Pool.__init__": {"tf": 2.23606797749979}, "icepool.Pool.raw_size": {"tf": 1}, "icepool.Pool.denominator": {"tf": 1}, "icepool.Pool.output_arity": {"tf": 1}, "icepool.Pool.additive_union": {"tf": 1}, "icepool.standard_pool": {"tf": 2}, "icepool.MultisetGenerator.output_arity": {"tf": 1}, "icepool.MultisetGenerator.denominator": {"tf": 1}, "icepool.Alignment.output_arity": {"tf": 1}, "icepool.Alignment.denominator": {"tf": 1}, "icepool.MultisetExpression.additive_union": {"tf": 1}, "icepool.MultisetExpression.difference": {"tf": 1}, "icepool.MultisetExpression.intersection": {"tf": 1}, "icepool.MultisetExpression.union": {"tf": 1}, "icepool.MultisetExpression.symmetric_difference": {"tf": 1}, "icepool.MultisetExpression.map_counts": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.multiply_counts": {"tf": 1}, "icepool.MultisetExpression.divide_counts": {"tf": 1}, "icepool.MultisetExpression.modulo_counts": {"tf": 1}, "icepool.MultisetExpression.keep_counts": {"tf": 1}, "icepool.MultisetExpression.unique": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.lowest": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.highest": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.count": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.highest_outcome_and_count": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.all_counts": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.largest_count": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.largest_count_and_outcome": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.count_subset": {"tf": 2}, "icepool.MultisetExpression.largest_straight": {"tf": 2}, "icepool.MultisetExpression.largest_straight_and_outcome": {"tf": 2.449489742783178}, "icepool.MultisetExpression.all_straights": {"tf": 2}, "icepool.MultisetExpression.all_straights_reduce_counts": {"tf": 3}, "icepool.MultisetExpression.argsort": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.issubset": {"tf": 1}, "icepool.MultisetExpression.issuperset": {"tf": 1}, "icepool.MultisetExpression.isdisjoint": {"tf": 1}, "icepool.MultisetExpression.compair_lt": {"tf": 1}, "icepool.MultisetExpression.compair_le": {"tf": 1}, "icepool.MultisetExpression.compair_gt": {"tf": 1}, "icepool.MultisetExpression.compair_ge": {"tf": 1}, "icepool.MultisetExpression.compair_eq": {"tf": 1}, "icepool.MultisetExpression.compair_ne": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.MultisetEvaluator.range_alignment": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.validate_arity": {"tf": 1}, "icepool.MultisetEvaluator.evaluate": {"tf": 1}, "icepool.MultisetEvaluator.sample": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1.7320508075688772}, "icepool.Deck.size": {"tf": 1}, "icepool.Deck.deal": {"tf": 1.4142135623730951}, "icepool.Deck.additive_union": {"tf": 1}, "icepool.Deck.difference": {"tf": 1}, "icepool.Deck.intersection": {"tf": 1}, "icepool.Deck.union": {"tf": 1}, "icepool.Deck.symmetric_difference": {"tf": 1}, "icepool.Deck.multiply_counts": {"tf": 1}, "icepool.Deck.divide_counts": {"tf": 1}, "icepool.Deck.modulo_counts": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1}, "icepool.Deal.hand_sizes": {"tf": 1}, "icepool.Deal.total_cards_dealt": {"tf": 1}, "icepool.Deal.output_arity": {"tf": 1}, "icepool.Deal.denominator": {"tf": 1}, "icepool.MultiDeal.__init__": {"tf": 1}, "icepool.MultiDeal.total_cards_dealt": {"tf": 1}, "icepool.MultiDeal.output_arity": {"tf": 1}, "icepool.MultiDeal.denominator": {"tf": 1}, "icepool.evaluator.JointEvaluator.validate_arity": {"tf": 1}, "icepool.evaluator.CountEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.__init__": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.__init__": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"tf": 1.4142135623730951}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"tf": 1.4142135623730951}, "icepool.evaluator.AllStraightsEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"tf": 1.4142135623730951}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.__init__": {"tf": 1.7320508075688772}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"tf": 1.4142135623730951}, "icepool.evaluator.ComparisonEvaluator.any_all": {"tf": 1.4142135623730951}, "icepool.evaluator.IsSubsetEvaluator.any_all": {"tf": 1.4142135623730951}, "icepool.evaluator.IsProperSubsetEvaluator.any_all": {"tf": 1.4142135623730951}, "icepool.evaluator.IsSupersetEvaluator.any_all": {"tf": 1.4142135623730951}, "icepool.evaluator.IsProperSupersetEvaluator.any_all": {"tf": 1.4142135623730951}, "icepool.evaluator.IsEqualSetEvaluator.any_all": {"tf": 1.4142135623730951}, "icepool.evaluator.IsNotEqualSetEvaluator.any_all": {"tf": 1.4142135623730951}, "icepool.evaluator.IsDisjointSetEvaluator.any_all": {"tf": 1.4142135623730951}, "icepool.evaluator.KeepEvaluator.__init__": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.__init__": {"tf": 1}, "icepool.evaluator.CompairEvalautor.__init__": {"tf": 1.7320508075688772}, "icepool.evaluator.ExpressionEvaluator.validate_arity": {"tf": 1}, "icepool.function.d": {"tf": 1.4142135623730951}, "icepool.function.z": {"tf": 1.4142135623730951}, "icepool.function.coin": {"tf": 1.7320508075688772}, "icepool.function.stochastic_round": {"tf": 1.4142135623730951}, "icepool.function.one_hot": {"tf": 1}, "icepool.function.from_cumulative": {"tf": 1}, "icepool.function.from_rv": {"tf": 1.7320508075688772}, "icepool.function.align_range": {"tf": 1.7320508075688772}, "icepool.function.map": {"tf": 1.7320508075688772}, "icepool.function.map_function": {"tf": 1.7320508075688772}, "icepool.function.map_and_time": {"tf": 1.4142135623730951}, "icepool.function.map_to_pool": {"tf": 2.449489742783178}, "icepool.typing.count_positional_parameters": {"tf": 1.4142135623730951}}, "df": 171}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {"icepool.Die.keep": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1}, "icepool.evaluator.KeepEvaluator.__init__": {"tf": 1}}, "df": 3}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.reduce": {"tf": 1}, "icepool.accumulate": {"tf": 1}, "icepool.function.reduce": {"tf": 1}, "icepool.function.accumulate": {"tf": 1}}, "df": 4}}}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"icepool.evaluator.JointEvaluator.__init__": {"tf": 1}}, "df": 1}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"icepool.d": {"tf": 1}, "icepool.z": {"tf": 1}, "icepool.coin": {"tf": 1}, "icepool.stochastic_round": {"tf": 1}, "icepool.one_hot": {"tf": 1}, "icepool.Die.__init__": {"tf": 1.7320508075688772}, "icepool.Die.unary_operator": {"tf": 1.4142135623730951}, "icepool.Die.binary_operator": {"tf": 1.4142135623730951}, "icepool.Die.keys": {"tf": 1}, "icepool.Die.values": {"tf": 1}, "icepool.Die.items": {"tf": 1}, "icepool.Die.simplify": {"tf": 1}, "icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.truncate": {"tf": 1}, "icepool.Die.clip": {"tf": 1}, "icepool.Die.set_range": {"tf": 1.4142135623730951}, "icepool.Die.set_outcomes": {"tf": 1}, "icepool.Die.trim": {"tf": 1}, "icepool.Die.map": {"tf": 3}, "icepool.Die.map_and_time": {"tf": 2.23606797749979}, "icepool.Die.mean_time_to_sum": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.if_else": {"tf": 2.23606797749979}, "icepool.Die.is_in": {"tf": 1}, "icepool.Die.count": {"tf": 1}, "icepool.Die.pool": {"tf": 1}, "icepool.Die.keep": {"tf": 1}, "icepool.Die.lowest": {"tf": 1}, "icepool.Die.highest": {"tf": 1}, "icepool.Die.middle": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 2.449489742783178}, "icepool.Die.explode_to_pool": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.Die.abs": {"tf": 1}, "icepool.Die.round": {"tf": 1}, "icepool.Die.stochastic_round": {"tf": 1}, "icepool.Die.trunc": {"tf": 1}, "icepool.Die.floor": {"tf": 1}, "icepool.Die.ceil": {"tf": 1}, "icepool.Die.zero": {"tf": 1}, "icepool.Die.cmp": {"tf": 1}, "icepool.Die.sign": {"tf": 1}, "icepool.Population.keys": {"tf": 1}, "icepool.Population.values": {"tf": 1}, "icepool.Population.items": {"tf": 1}, "icepool.Population.outcomes": {"tf": 1}, "icepool.Population.quantities": {"tf": 1}, "icepool.Population.mean": {"tf": 1.4142135623730951}, "icepool.Population.variance": {"tf": 1.4142135623730951}, "icepool.Population.standard_deviation": {"tf": 1.4142135623730951}, "icepool.Population.sd": {"tf": 1.4142135623730951}, "icepool.Population.standardized_moment": {"tf": 1.4142135623730951}, "icepool.Population.skewness": {"tf": 1.4142135623730951}, "icepool.Population.excess_kurtosis": {"tf": 1.4142135623730951}, "icepool.Population.covariance": {"tf": 1.4142135623730951}, "icepool.Population.correlation": {"tf": 1.4142135623730951}, "icepool.tupleize": {"tf": 1.4142135623730951}, "icepool.vectorize": {"tf": 2}, "icepool.Vector.unary_operator": {"tf": 1}, "icepool.Vector.abs": {"tf": 1}, "icepool.Vector.round": {"tf": 1}, "icepool.Vector.trunc": {"tf": 1}, "icepool.Vector.floor": {"tf": 1}, "icepool.Vector.ceil": {"tf": 1}, "icepool.Vector.binary_operator": {"tf": 1}, "icepool.Vector.reverse_binary_operator": {"tf": 1}, "icepool.Vector.append": {"tf": 1}, "icepool.Vector.concatenate": {"tf": 1}, "icepool.Symbols.additive_union": {"tf": 1}, "icepool.Symbols.difference": {"tf": 1}, "icepool.Symbols.intersection": {"tf": 1}, "icepool.Symbols.union": {"tf": 1}, "icepool.Symbols.symmetric_difference": {"tf": 1}, "icepool.Symbols.multiply_counts": {"tf": 1}, "icepool.Symbols.divide_counts": {"tf": 1}, "icepool.Symbols.modulo_counts": {"tf": 1}, "icepool.CountsKeysView.__init__": {"tf": 1}, "icepool.CountsValuesView.__init__": {"tf": 1}, "icepool.CountsItemsView.__init__": {"tf": 1}, "icepool.from_cumulative": {"tf": 1.4142135623730951}, "icepool.from_rv": {"tf": 1.4142135623730951}, "icepool.lowest": {"tf": 1.4142135623730951}, "icepool.highest": {"tf": 1.4142135623730951}, "icepool.middle": {"tf": 1.4142135623730951}, "icepool.min_outcome": {"tf": 1}, "icepool.max_outcome": {"tf": 1}, "icepool.align": {"tf": 1.4142135623730951}, "icepool.align_range": {"tf": 1.4142135623730951}, "icepool.commonize_denominator": {"tf": 1.4142135623730951}, "icepool.reduce": {"tf": 2.23606797749979}, "icepool.accumulate": {"tf": 2}, "icepool.map": {"tf": 3.4641016151377544}, "icepool.map_function": {"tf": 2.6457513110645907}, "icepool.map_and_time": {"tf": 2.6457513110645907}, "icepool.map_to_pool": {"tf": 3.1622776601683795}, "icepool.Pool.__init__": {"tf": 1.7320508075688772}, "icepool.Pool.unique_dice": {"tf": 1}, "icepool.Pool.additive_union": {"tf": 1.4142135623730951}, "icepool.standard_pool": {"tf": 1}, "icepool.MultisetGenerator.order": {"tf": 1}, "icepool.MultisetExpression.order": {"tf": 1}, "icepool.MultisetExpression.additive_union": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.difference": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.intersection": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.union": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.symmetric_difference": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.keep_outcomes": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.drop_outcomes": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.map_counts": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.multiply_counts": {"tf": 1}, "icepool.MultisetExpression.divide_counts": {"tf": 1}, "icepool.MultisetExpression.modulo_counts": {"tf": 1}, "icepool.MultisetExpression.keep_counts": {"tf": 1}, "icepool.MultisetExpression.unique": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.lowest": {"tf": 1}, "icepool.MultisetExpression.highest": {"tf": 1}, "icepool.MultisetExpression.sort_match": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.maximum_match": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.evaluate": {"tf": 2}, "icepool.MultisetExpression.expand": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.sum": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.count": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.any": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.highest_outcome_and_count": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.all_counts": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.largest_count": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.largest_count_and_outcome": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.count_subset": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.largest_straight": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.largest_straight_and_outcome": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.all_straights": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.all_straights_reduce_counts": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.argsort": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.issubset": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.issuperset": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.isdisjoint": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.compair_lt": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.compair_le": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.compair_gt": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.compair_ge": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.compair_eq": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.compair_ne": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.order": {"tf": 1}, "icepool.MultisetEvaluator.prefix_generators": {"tf": 1}, "icepool.MultisetEvaluator.evaluate": {"tf": 1.7320508075688772}, "icepool.MultisetEvaluator.sample": {"tf": 1}, "icepool.Order.merge": {"tf": 1.4142135623730951}, "icepool.Deck.keys": {"tf": 1}, "icepool.Deck.values": {"tf": 1}, "icepool.Deck.items": {"tf": 1}, "icepool.Deck.deal": {"tf": 1.4142135623730951}, "icepool.Deck.additive_union": {"tf": 1}, "icepool.Deck.difference": {"tf": 1}, "icepool.Deck.intersection": {"tf": 1}, "icepool.Deck.union": {"tf": 1}, "icepool.Deck.symmetric_difference": {"tf": 1}, "icepool.Deck.multiply_counts": {"tf": 1}, "icepool.Deck.divide_counts": {"tf": 1}, "icepool.Deck.modulo_counts": {"tf": 1}, "icepool.Deck.map": {"tf": 2.23606797749979}, "icepool.Deal.__init__": {"tf": 1}, "icepool.Deal.deck": {"tf": 1}, "icepool.Deal.outcomes": {"tf": 1}, "icepool.MultiDeal.__init__": {"tf": 1}, "icepool.MultiDeal.deck": {"tf": 1}, "icepool.MultiDeal.outcomes": {"tf": 1}, "icepool.multiset_function": {"tf": 1.7320508075688772}, "icepool.evaluator.JointEvaluator.__init__": {"tf": 1}, "icepool.evaluator.JointEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.JointEvaluator.order": {"tf": 1}, "icepool.evaluator.JointEvaluator.prefix_generators": {"tf": 1}, "icepool.evaluator.ExpandEvaluator.__init__": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.__init__": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.KeepEvaluator.order": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.__init__": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.order": {"tf": 1}, "icepool.evaluator.CompairEvalautor.__init__": {"tf": 1}, "icepool.evaluator.CompairEvalautor.order": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.__init__": {"tf": 1.4142135623730951}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.evaluator.ExpressionEvaluator.order": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.prefix_generators": {"tf": 1}, "icepool.function.d": {"tf": 1}, "icepool.function.z": {"tf": 1}, "icepool.function.coin": {"tf": 1}, "icepool.function.stochastic_round": {"tf": 1}, "icepool.function.one_hot": {"tf": 1}, "icepool.function.from_cumulative": {"tf": 1.4142135623730951}, "icepool.function.from_rv": {"tf": 1.4142135623730951}, "icepool.function.min_outcome": {"tf": 1}, "icepool.function.max_outcome": {"tf": 1}, "icepool.function.align": {"tf": 1.4142135623730951}, "icepool.function.align_range": {"tf": 1.4142135623730951}, "icepool.function.commonize_denominator": {"tf": 1.4142135623730951}, "icepool.function.reduce": {"tf": 2.23606797749979}, "icepool.function.accumulate": {"tf": 2}, "icepool.function.map": {"tf": 3.4641016151377544}, "icepool.function.map_function": {"tf": 2.6457513110645907}, "icepool.function.map_and_time": {"tf": 2.6457513110645907}, "icepool.function.map_to_pool": {"tf": 3.1622776601683795}, "icepool.typing.Order.merge": {"tf": 1.4142135623730951}}, "df": 205}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.set_outcomes": {"tf": 1}, "icepool.Vector.concatenate": {"tf": 1}, "icepool.Symbols.__init__": {"tf": 1}, "icepool.Symbols.additive_union": {"tf": 1}, "icepool.Symbols.difference": {"tf": 1}, "icepool.Symbols.intersection": {"tf": 1}, "icepool.Symbols.union": {"tf": 1}, "icepool.Symbols.symmetric_difference": {"tf": 1}, "icepool.Symbols.count_subset": {"tf": 1}, "icepool.Symbols.issubset": {"tf": 1}, "icepool.Symbols.issuperset": {"tf": 1}, "icepool.Symbols.isdisjoint": {"tf": 1}, "icepool.reduce": {"tf": 1}, "icepool.accumulate": {"tf": 1}, "icepool.Deck.additive_union": {"tf": 1}, "icepool.Deck.difference": {"tf": 1}, "icepool.Deck.intersection": {"tf": 1}, "icepool.Deck.union": {"tf": 1}, "icepool.Deck.symmetric_difference": {"tf": 1}, "icepool.function.reduce": {"tf": 1}, "icepool.function.accumulate": {"tf": 1}}, "df": 21}}}, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.accumulate": {"tf": 1}, "icepool.function.accumulate": {"tf": 1}}, "df": 2}}}}}}}, "f": {"docs": {"icepool.Die.if_else": {"tf": 1.4142135623730951}}, "df": 1}}, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.d": {"tf": 1}, "icepool.z": {"tf": 1}, "icepool.coin": {"tf": 1}, "icepool.stochastic_round": {"tf": 1}, "icepool.one_hot": {"tf": 1}, "icepool.Die.__init__": {"tf": 1}, "icepool.Die.unary_operator": {"tf": 1.4142135623730951}, "icepool.Die.binary_operator": {"tf": 1.4142135623730951}, "icepool.Die.simplify": {"tf": 1}, "icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.truncate": {"tf": 1}, "icepool.Die.clip": {"tf": 1}, "icepool.Die.set_range": {"tf": 1.4142135623730951}, "icepool.Die.set_outcomes": {"tf": 1}, "icepool.Die.trim": {"tf": 1}, "icepool.Die.map": {"tf": 2.449489742783178}, "icepool.Die.map_and_time": {"tf": 1.7320508075688772}, "icepool.Die.mean_time_to_sum": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.if_else": {"tf": 2}, "icepool.Die.is_in": {"tf": 1}, "icepool.Die.count": {"tf": 1}, "icepool.Die.keep": {"tf": 1}, "icepool.Die.lowest": {"tf": 1}, "icepool.Die.highest": {"tf": 1}, "icepool.Die.middle": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 1.7320508075688772}, "icepool.Die.abs": {"tf": 1}, "icepool.Die.round": {"tf": 1}, "icepool.Die.stochastic_round": {"tf": 1}, "icepool.Die.trunc": {"tf": 1}, "icepool.Die.floor": {"tf": 1}, "icepool.Die.ceil": {"tf": 1}, "icepool.Die.zero": {"tf": 1}, "icepool.Die.cmp": {"tf": 1}, "icepool.Die.sign": {"tf": 1}, "icepool.Population.mean": {"tf": 2}, "icepool.Population.variance": {"tf": 2}, "icepool.Population.standard_deviation": {"tf": 2}, "icepool.Population.sd": {"tf": 2}, "icepool.Population.standardized_moment": {"tf": 2}, "icepool.Population.skewness": {"tf": 2}, "icepool.Population.excess_kurtosis": {"tf": 2}, "icepool.Population.covariance": {"tf": 2}, "icepool.Population.correlation": {"tf": 2}, "icepool.tupleize": {"tf": 2}, "icepool.vectorize": {"tf": 2}, "icepool.from_cumulative": {"tf": 1.4142135623730951}, "icepool.from_rv": {"tf": 1.4142135623730951}, "icepool.lowest": {"tf": 1.4142135623730951}, "icepool.highest": {"tf": 1.4142135623730951}, "icepool.middle": {"tf": 1.4142135623730951}, "icepool.min_outcome": {"tf": 1}, "icepool.max_outcome": {"tf": 1}, "icepool.align": {"tf": 1.4142135623730951}, "icepool.align_range": {"tf": 1.4142135623730951}, "icepool.commonize_denominator": {"tf": 1.4142135623730951}, "icepool.reduce": {"tf": 2}, "icepool.accumulate": {"tf": 2}, "icepool.map": {"tf": 2.6457513110645907}, "icepool.map_function": {"tf": 2.23606797749979}, "icepool.map_and_time": {"tf": 2.23606797749979}, "icepool.map_to_pool": {"tf": 2.23606797749979}, "icepool.Pool.__init__": {"tf": 1.7320508075688772}, "icepool.Pool.unique_dice": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1}, "icepool.MultisetExpression.evaluate": {"tf": 1}, "icepool.MultisetExpression.expand": {"tf": 1}, "icepool.MultisetExpression.sum": {"tf": 1}, "icepool.MultisetExpression.count": {"tf": 1}, "icepool.MultisetExpression.any": {"tf": 1}, "icepool.MultisetExpression.highest_outcome_and_count": {"tf": 1}, "icepool.MultisetExpression.all_counts": {"tf": 1}, "icepool.MultisetExpression.largest_count": {"tf": 1}, "icepool.MultisetExpression.largest_count_and_outcome": {"tf": 1}, "icepool.MultisetExpression.count_subset": {"tf": 1}, "icepool.MultisetExpression.largest_straight": {"tf": 1}, "icepool.MultisetExpression.largest_straight_and_outcome": {"tf": 1}, "icepool.MultisetExpression.all_straights": {"tf": 1}, "icepool.MultisetExpression.all_straights_reduce_counts": {"tf": 1}, "icepool.MultisetExpression.issubset": {"tf": 1}, "icepool.MultisetExpression.issuperset": {"tf": 1}, "icepool.MultisetExpression.isdisjoint": {"tf": 1}, "icepool.MultisetEvaluator.final_outcome": {"tf": 1}, "icepool.MultisetEvaluator.evaluate": {"tf": 1}, "icepool.Deck.additive_union": {"tf": 1}, "icepool.Deck.difference": {"tf": 1}, "icepool.Deck.intersection": {"tf": 1}, "icepool.Deck.union": {"tf": 1}, "icepool.Deck.symmetric_difference": {"tf": 1}, "icepool.Deck.multiply_counts": {"tf": 1}, "icepool.Deck.divide_counts": {"tf": 1}, "icepool.Deck.modulo_counts": {"tf": 1}, "icepool.Deck.map": {"tf": 1.7320508075688772}, "icepool.Deal.__init__": {"tf": 1}, "icepool.Deal.deck": {"tf": 1}, "icepool.MultiDeal.__init__": {"tf": 1}, "icepool.MultiDeal.deck": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.__init__": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1}, "icepool.function.d": {"tf": 1}, "icepool.function.z": {"tf": 1}, "icepool.function.coin": {"tf": 1}, "icepool.function.stochastic_round": {"tf": 1}, "icepool.function.one_hot": {"tf": 1}, "icepool.function.from_cumulative": {"tf": 1.4142135623730951}, "icepool.function.from_rv": {"tf": 1.4142135623730951}, "icepool.function.min_outcome": {"tf": 1}, "icepool.function.max_outcome": {"tf": 1}, "icepool.function.align": {"tf": 1.4142135623730951}, "icepool.function.align_range": {"tf": 1.4142135623730951}, "icepool.function.commonize_denominator": {"tf": 1.4142135623730951}, "icepool.function.reduce": {"tf": 2}, "icepool.function.accumulate": {"tf": 2}, "icepool.function.map": {"tf": 2.6457513110645907}, "icepool.function.map_function": {"tf": 2.23606797749979}, "icepool.function.map_and_time": {"tf": 2.23606797749979}, "icepool.function.map_to_pool": {"tf": 2.23606797749979}}, "df": 120}}}}}}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Die.pool": {"tf": 1.4142135623730951}, "icepool.standard_pool": {"tf": 1.4142135623730951}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Population.probability": {"tf": 1}, "icepool.Population.probabilities": {"tf": 1}}, "df": 2}}}}}}}, "d": {"docs": {"icepool.coin": {"tf": 1}, "icepool.Population.quantile": {"tf": 1}, "icepool.Population.quantile_low": {"tf": 1}, "icepool.Population.quantile_high": {"tf": 1}, "icepool.function.coin": {"tf": 1}}, "df": 5, "i": {"docs": {}, "df": 0, "e": {"docs": {"icepool.d": {"tf": 1.4142135623730951}, "icepool.z": {"tf": 1.4142135623730951}, "icepool.coin": {"tf": 1.4142135623730951}, "icepool.stochastic_round": {"tf": 1.4142135623730951}, "icepool.one_hot": {"tf": 1.4142135623730951}, "icepool.Die.__init__": {"tf": 1.4142135623730951}, "icepool.Die.unary_operator": {"tf": 2}, "icepool.Die.binary_operator": {"tf": 2}, "icepool.Die.simplify": {"tf": 1.4142135623730951}, "icepool.Die.reroll": {"tf": 1.4142135623730951}, "icepool.Die.filter": {"tf": 1.4142135623730951}, "icepool.Die.truncate": {"tf": 1.4142135623730951}, "icepool.Die.clip": {"tf": 1.4142135623730951}, "icepool.Die.set_range": {"tf": 2}, "icepool.Die.set_outcomes": {"tf": 1.4142135623730951}, "icepool.Die.trim": {"tf": 1.4142135623730951}, "icepool.Die.map": {"tf": 2.8284271247461903}, "icepool.Die.map_and_time": {"tf": 2.449489742783178}, "icepool.Die.mean_time_to_sum": {"tf": 1.4142135623730951}, "icepool.Die.explode": {"tf": 1.4142135623730951}, "icepool.Die.if_else": {"tf": 2.8284271247461903}, "icepool.Die.is_in": {"tf": 1.4142135623730951}, "icepool.Die.count": {"tf": 1.4142135623730951}, "icepool.Die.keep": {"tf": 1.4142135623730951}, "icepool.Die.lowest": {"tf": 1.4142135623730951}, "icepool.Die.highest": {"tf": 1.4142135623730951}, "icepool.Die.middle": {"tf": 1.4142135623730951}, "icepool.Die.map_to_pool": {"tf": 2.449489742783178}, "icepool.Die.abs": {"tf": 1.4142135623730951}, "icepool.Die.round": {"tf": 1.4142135623730951}, "icepool.Die.stochastic_round": {"tf": 1.4142135623730951}, "icepool.Die.trunc": {"tf": 1.4142135623730951}, "icepool.Die.floor": {"tf": 1.4142135623730951}, "icepool.Die.ceil": {"tf": 1.4142135623730951}, "icepool.Die.zero": {"tf": 1.4142135623730951}, "icepool.Die.cmp": {"tf": 1.4142135623730951}, "icepool.Die.sign": {"tf": 1.4142135623730951}, "icepool.from_cumulative": {"tf": 2}, "icepool.from_rv": {"tf": 2}, "icepool.lowest": {"tf": 2}, "icepool.highest": {"tf": 2}, "icepool.middle": {"tf": 2}, "icepool.min_outcome": {"tf": 1.4142135623730951}, "icepool.max_outcome": {"tf": 1.4142135623730951}, "icepool.align": {"tf": 2}, "icepool.align_range": {"tf": 2}, "icepool.commonize_denominator": {"tf": 2}, "icepool.reduce": {"tf": 2.8284271247461903}, "icepool.accumulate": {"tf": 2.8284271247461903}, "icepool.map": {"tf": 3.1622776601683795}, "icepool.map_function": {"tf": 2.8284271247461903}, "icepool.map_and_time": {"tf": 2.449489742783178}, "icepool.map_to_pool": {"tf": 3.1622776601683795}, "icepool.Pool.__init__": {"tf": 2.449489742783178}, "icepool.Pool.unique_dice": {"tf": 1.4142135623730951}, "icepool.standard_pool": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.evaluate": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.expand": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.sum": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.count": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.any": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.highest_outcome_and_count": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.all_counts": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.largest_count": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.largest_count_and_outcome": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.count_subset": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.largest_straight": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.largest_straight_and_outcome": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.all_straights": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.all_straights_reduce_counts": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.issubset": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.issuperset": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.isdisjoint": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.evaluate": {"tf": 1.4142135623730951}, "icepool.evaluator.ConstantEvaluator.__init__": {"tf": 1.4142135623730951}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.function.d": {"tf": 1.4142135623730951}, "icepool.function.z": {"tf": 1.4142135623730951}, "icepool.function.coin": {"tf": 1.4142135623730951}, "icepool.function.stochastic_round": {"tf": 1.4142135623730951}, "icepool.function.one_hot": {"tf": 1.4142135623730951}, "icepool.function.from_cumulative": {"tf": 2}, "icepool.function.from_rv": {"tf": 2}, "icepool.function.min_outcome": {"tf": 1.4142135623730951}, "icepool.function.max_outcome": {"tf": 1.4142135623730951}, "icepool.function.align": {"tf": 2}, "icepool.function.align_range": {"tf": 2}, "icepool.function.commonize_denominator": {"tf": 2}, "icepool.function.reduce": {"tf": 2.8284271247461903}, "icepool.function.accumulate": {"tf": 2.8284271247461903}, "icepool.function.map": {"tf": 3.1622776601683795}, "icepool.function.map_function": {"tf": 2.8284271247461903}, "icepool.function.map_and_time": {"tf": 2.449489742783178}, "icepool.function.map_to_pool": {"tf": 3.1622776601683795}}, "df": 97}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Symbols.count_subset": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.count_subset": {"tf": 1.4142135623730951}, "icepool.evaluator.CountSubsetEvaluator.__init__": {"tf": 1}}, "df": 3}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {"icepool.min_outcome": {"tf": 1}, "icepool.max_outcome": {"tf": 1}, "icepool.align": {"tf": 1}, "icepool.align_range": {"tf": 1}, "icepool.commonize_denominator": {"tf": 1}, "icepool.reduce": {"tf": 1}, "icepool.accumulate": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.function.min_outcome": {"tf": 1}, "icepool.function.max_outcome": {"tf": 1}, "icepool.function.align": {"tf": 1}, "icepool.function.align_range": {"tf": 1}, "icepool.function.commonize_denominator": {"tf": 1}, "icepool.function.reduce": {"tf": 1}, "icepool.function.accumulate": {"tf": 1}}, "df": 15}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.coin": {"tf": 1}, "icepool.stochastic_round": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.Die.stochastic_round": {"tf": 1}, "icepool.from_rv": {"tf": 1}, "icepool.map_to_pool": {"tf": 1}, "icepool.function.coin": {"tf": 1}, "icepool.function.stochastic_round": {"tf": 1}, "icepool.function.from_rv": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1}}, "df": 10}}}}}}}}}, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.map": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.if_else": {"tf": 1}, "icepool.Die.explode_to_pool": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.map_function": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.function.map_function": {"tf": 1}}, "df": 11}}}, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"icepool.lowest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.middle": {"tf": 1}}, "df": 3}}}}}, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.MultisetExpression.sort_match": {"tf": 1}, "icepool.MultisetExpression.argsort": {"tf": 1}, "icepool.MultisetExpression.compair_lt": {"tf": 1}, "icepool.MultisetExpression.compair_le": {"tf": 1}, "icepool.MultisetExpression.compair_gt": {"tf": 1}, "icepool.MultisetExpression.compair_ge": {"tf": 1}, "icepool.MultisetExpression.compair_eq": {"tf": 1}, "icepool.MultisetExpression.compair_ne": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.__init__": {"tf": 1}, "icepool.evaluator.CompairEvalautor.__init__": {"tf": 1}}, "df": 10}}}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Deck.deal": {"tf": 1.7320508075688772}}, "df": 1}}, "c": {"docs": {}, "df": 0, "k": {"docs": {"icepool.Deck.additive_union": {"tf": 1.4142135623730951}, "icepool.Deck.difference": {"tf": 1.4142135623730951}, "icepool.Deck.intersection": {"tf": 1.4142135623730951}, "icepool.Deck.union": {"tf": 1.4142135623730951}, "icepool.Deck.symmetric_difference": {"tf": 1.4142135623730951}, "icepool.Deck.multiply_counts": {"tf": 1.4142135623730951}, "icepool.Deck.divide_counts": {"tf": 1.4142135623730951}, "icepool.Deck.modulo_counts": {"tf": 1.4142135623730951}, "icepool.Deck.map": {"tf": 2.449489742783178}, "icepool.Deal.__init__": {"tf": 1.7320508075688772}, "icepool.Deal.deck": {"tf": 1.4142135623730951}, "icepool.MultiDeal.__init__": {"tf": 1.7320508075688772}, "icepool.MultiDeal.deck": {"tf": 1.4142135623730951}}, "df": 13}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {"icepool.Die.lowest": {"tf": 1}, "icepool.Die.highest": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.lowest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.MultisetExpression.lowest": {"tf": 1}, "icepool.MultisetExpression.highest": {"tf": 1}}, "df": 7}}}}, "n": {"docs": {"icepool.coin": {"tf": 1}, "icepool.Population.quantile": {"tf": 1}, "icepool.Population.quantile_low": {"tf": 1}, "icepool.Population.quantile_high": {"tf": 1}, "icepool.MultisetExpression.multiply_counts": {"tf": 1}, "icepool.MultisetExpression.divide_counts": {"tf": 1}, "icepool.MultisetExpression.modulo_counts": {"tf": 1}, "icepool.MultisetExpression.keep_counts": {"tf": 1}, "icepool.MultisetExpression.unique": {"tf": 1}, "icepool.function.coin": {"tf": 1}}, "df": 10, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"icepool.coin": {"tf": 1.4142135623730951}, "icepool.stochastic_round": {"tf": 1.4142135623730951}, "icepool.Die.__init__": {"tf": 2.449489742783178}, "icepool.Die.reroll": {"tf": 2}, "icepool.Die.filter": {"tf": 1.7320508075688772}, "icepool.Die.split": {"tf": 1.7320508075688772}, "icepool.Die.truncate": {"tf": 1.4142135623730951}, "icepool.Die.clip": {"tf": 1.4142135623730951}, "icepool.Die.set_range": {"tf": 2}, "icepool.Die.map": {"tf": 2.8284271247461903}, "icepool.Die.map_and_time": {"tf": 1.4142135623730951}, "icepool.Die.explode": {"tf": 2}, "icepool.Die.if_else": {"tf": 2.23606797749979}, "icepool.Die.keep": {"tf": 1}, "icepool.Die.lowest": {"tf": 2}, "icepool.Die.highest": {"tf": 2}, "icepool.Die.map_to_pool": {"tf": 2.23606797749979}, "icepool.Die.explode_to_pool": {"tf": 1.7320508075688772}, "icepool.Die.reroll_to_pool": {"tf": 1.4142135623730951}, "icepool.Die.round": {"tf": 1.4142135623730951}, "icepool.Die.stochastic_round": {"tf": 1.4142135623730951}, "icepool.Population.common_outcome_length": {"tf": 1}, "icepool.Population.quantity": {"tf": 1}, "icepool.Population.quantities": {"tf": 1}, "icepool.Population.probability": {"tf": 1}, "icepool.Population.probabilities": {"tf": 1}, "icepool.Population.to_one_hot": {"tf": 1}, "icepool.Vector.round": {"tf": 1.4142135623730951}, "icepool.Symbols.count_subset": {"tf": 1.4142135623730951}, "icepool.lowest": {"tf": 2.23606797749979}, "icepool.highest": {"tf": 2.23606797749979}, "icepool.middle": {"tf": 1}, "icepool.reduce": {"tf": 1}, "icepool.accumulate": {"tf": 1}, "icepool.map": {"tf": 2.8284271247461903}, "icepool.map_function": {"tf": 3}, "icepool.map_and_time": {"tf": 1.4142135623730951}, "icepool.map_to_pool": {"tf": 2}, "icepool.MultisetExpression.lowest": {"tf": 2}, "icepool.MultisetExpression.highest": {"tf": 2}, "icepool.MultisetExpression.sum": {"tf": 1}, "icepool.MultisetExpression.all_counts": {"tf": 1}, "icepool.MultisetExpression.count_subset": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.argsort": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.validate_arity": {"tf": 1}, "icepool.Deck.map": {"tf": 1.4142135623730951}, "icepool.evaluator.JointEvaluator.validate_arity": {"tf": 1}, "icepool.evaluator.SumEvaluator.__init__": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.__init__": {"tf": 1.4142135623730951}, "icepool.evaluator.AllCountsEvaluator.__init__": {"tf": 1}, "icepool.evaluator.KeepEvaluator.__init__": {"tf": 1.4142135623730951}, "icepool.evaluator.ArgsortEvaluator.__init__": {"tf": 1.4142135623730951}, "icepool.evaluator.ExpressionEvaluator.__init__": {"tf": 1.4142135623730951}, "icepool.evaluator.ExpressionEvaluator.validate_arity": {"tf": 1}, "icepool.function.coin": {"tf": 1.4142135623730951}, "icepool.function.stochastic_round": {"tf": 1.4142135623730951}, "icepool.function.reduce": {"tf": 1}, "icepool.function.accumulate": {"tf": 1}, "icepool.function.map": {"tf": 2.8284271247461903}, "icepool.function.map_function": {"tf": 3}, "icepool.function.map_and_time": {"tf": 1.4142135623730951}, "icepool.function.map_to_pool": {"tf": 2}, "icepool.typing.count_positional_parameters": {"tf": 1}}, "df": 63, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.reroll": {"tf": 1}, "icepool.Die.split": {"tf": 1}, "icepool.Die.map": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.if_else": {"tf": 1}, "icepool.Die.keep": {"tf": 1}, "icepool.Die.explode_to_pool": {"tf": 1}, "icepool.reduce": {"tf": 1}, "icepool.accumulate": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.map_function": {"tf": 1}, "icepool.MultisetExpression.sum": {"tf": 1}, "icepool.evaluator.SumEvaluator.__init__": {"tf": 1}, "icepool.function.reduce": {"tf": 1}, "icepool.function.accumulate": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.function.map_function": {"tf": 1}}, "df": 17}}}}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die.round": {"tf": 1}, "icepool.Vector.round": {"tf": 1}}, "df": 2}}}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Population.mean": {"tf": 1}, "icepool.Population.variance": {"tf": 1}, "icepool.Population.standard_deviation": {"tf": 1}, "icepool.Population.sd": {"tf": 1}, "icepool.Population.standardized_moment": {"tf": 1}, "icepool.Population.skewness": {"tf": 1}, "icepool.Population.excess_kurtosis": {"tf": 1}, "icepool.Population.covariance": {"tf": 1}, "icepool.Population.correlation": {"tf": 1}}, "df": 9}}}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "t": {"docs": {"icepool.multiset_function": {"tf": 1}}, "df": 1}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "u": {"docs": {"icepool.multiset_function": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}}}}, "f": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"icepool.coin": {"tf": 1}, "icepool.Population.probability": {"tf": 1}, "icepool.Population.probabilities": {"tf": 1}, "icepool.Population.mean": {"tf": 1.4142135623730951}, "icepool.Population.variance": {"tf": 1.4142135623730951}, "icepool.Population.standard_deviation": {"tf": 1.4142135623730951}, "icepool.Population.sd": {"tf": 1.4142135623730951}, "icepool.Population.standardized_moment": {"tf": 1.4142135623730951}, "icepool.Population.skewness": {"tf": 1.4142135623730951}, "icepool.Population.excess_kurtosis": {"tf": 1.4142135623730951}, "icepool.Population.entropy": {"tf": 1.4142135623730951}, "icepool.Population.covariance": {"tf": 1.4142135623730951}, "icepool.Population.correlation": {"tf": 1.4142135623730951}, "icepool.from_rv": {"tf": 1.4142135623730951}, "icepool.function.coin": {"tf": 1}, "icepool.function.from_rv": {"tf": 1.4142135623730951}}, "df": 16}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.coin": {"tf": 1}, "icepool.Die.mean_time_to_sum": {"tf": 1}, "icepool.Population.probability": {"tf": 1}, "icepool.Population.probabilities": {"tf": 1}, "icepool.Population.kolmogorov_smirnov": {"tf": 1}, "icepool.Population.cramer_von_mises": {"tf": 1}, "icepool.Population.mean": {"tf": 1}, "icepool.Population.variance": {"tf": 1}, "icepool.Population.covariance": {"tf": 1}, "icepool.function.coin": {"tf": 1}}, "df": 10, "s": {"docs": {"icepool.coin": {"tf": 1}, "icepool.Die.mean_time_to_sum": {"tf": 1}, "icepool.Population.probability": {"tf": 1}, "icepool.Population.probabilities": {"tf": 1}, "icepool.Population.kolmogorov_smirnov": {"tf": 1}, "icepool.Population.cramer_von_mises": {"tf": 1}, "icepool.Population.mean": {"tf": 1}, "icepool.Population.variance": {"tf": 1}, "icepool.Population.covariance": {"tf": 1}, "icepool.function.coin": {"tf": 1}}, "df": 10}}}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.if_else": {"tf": 1}, "icepool.Die.equals": {"tf": 1}, "icepool.Population.probability": {"tf": 1}, "icepool.Population.probabilities": {"tf": 1}, "icepool.Vector.binary_operator": {"tf": 1}, "icepool.from_cumulative": {"tf": 1}, "icepool.function.from_cumulative": {"tf": 1}}, "df": 7}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Vector.binary_operator": {"tf": 1}}, "df": 1, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Population.format": {"tf": 1}}, "df": 1}}}, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {"icepool.multiset_function": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.reduce": {"tf": 1}, "icepool.accumulate": {"tf": 1}, "icepool.map_function": {"tf": 1}, "icepool.MultisetExpression.map_counts": {"tf": 1}, "icepool.MultisetExpression.all_straights_reduce_counts": {"tf": 1}, "icepool.multiset_function": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.__init__": {"tf": 1}, "icepool.function.reduce": {"tf": 1}, "icepool.function.accumulate": {"tf": 1}, "icepool.function.map_function": {"tf": 1}, "icepool.typing.count_positional_parameters": {"tf": 1}, "icepool.typing.guess_star": {"tf": 1}}, "df": 12}}}}}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.MultisetExpression.all_counts": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.__init__": {"tf": 1}}, "df": 2}}}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.MultisetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.JointEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ExpandEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CountEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.AnyEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.KeepEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1}}, "df": 17}}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "x": {"docs": {"icepool.coin": {"tf": 1}, "icepool.stochastic_round": {"tf": 1}, "icepool.Die.truncate": {"tf": 1}, "icepool.Die.clip": {"tf": 1}, "icepool.Die.set_range": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.Die.stochastic_round": {"tf": 1}, "icepool.function.coin": {"tf": 1}, "icepool.function.stochastic_round": {"tf": 1}}, "df": 9}, "p": {"docs": {"icepool.MultisetExpression.sum": {"tf": 1}, "icepool.evaluator.SumEvaluator.__init__": {"tf": 1}}, "df": 2, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 1.4142135623730951}, "icepool.Symbols.__init__": {"tf": 1}, "icepool.Symbols.additive_union": {"tf": 1}, "icepool.Symbols.difference": {"tf": 1}, "icepool.Symbols.intersection": {"tf": 1}, "icepool.Symbols.union": {"tf": 1}, "icepool.Symbols.symmetric_difference": {"tf": 1}, "icepool.Symbols.count_subset": {"tf": 1}, "icepool.Symbols.issubset": {"tf": 1}, "icepool.Symbols.issuperset": {"tf": 1}, "icepool.Symbols.isdisjoint": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.map_and_time": {"tf": 1}, "icepool.map_to_pool": {"tf": 2.23606797749979}, "icepool.Pool.__init__": {"tf": 1.7320508075688772}, "icepool.Pool.additive_union": {"tf": 1}, "icepool.standard_pool": {"tf": 1}, "icepool.MultisetExpression.additive_union": {"tf": 1}, "icepool.MultisetExpression.difference": {"tf": 1}, "icepool.MultisetExpression.intersection": {"tf": 1}, "icepool.MultisetExpression.union": {"tf": 1}, "icepool.MultisetExpression.symmetric_difference": {"tf": 1}, "icepool.MultisetExpression.map_counts": {"tf": 1}, "icepool.MultisetExpression.sum": {"tf": 1}, "icepool.MultisetExpression.count_subset": {"tf": 1}, "icepool.MultisetExpression.argsort": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.issubset": {"tf": 1}, "icepool.MultisetExpression.issuperset": {"tf": 1}, "icepool.MultisetExpression.isdisjoint": {"tf": 1}, "icepool.MultisetExpression.compair_lt": {"tf": 1}, "icepool.MultisetExpression.compair_le": {"tf": 1}, "icepool.MultisetExpression.compair_gt": {"tf": 1}, "icepool.MultisetExpression.compair_ge": {"tf": 1}, "icepool.MultisetExpression.compair_eq": {"tf": 1}, "icepool.MultisetExpression.compair_ne": {"tf": 1}, "icepool.MultisetEvaluator.evaluate": {"tf": 1}, "icepool.MultisetEvaluator.sample": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}, "icepool.Deck.additive_union": {"tf": 1}, "icepool.Deck.difference": {"tf": 1}, "icepool.Deck.intersection": {"tf": 1}, "icepool.Deck.union": {"tf": 1}, "icepool.Deck.symmetric_difference": {"tf": 1}, "icepool.Deck.map": {"tf": 1}, "icepool.evaluator.SumEvaluator.__init__": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 2.23606797749979}}, "df": 51}}}}}, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.MultisetExpression.maximum_match": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Die.truncate": {"tf": 1}, "icepool.Die.clip": {"tf": 1}, "icepool.Die.set_range": {"tf": 1}}, "df": 3}}, "u": {"docs": {}, "df": 0, "l": {"docs": {"icepool.MultisetExpression.all_straights_reduce_counts": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.__init__": {"tf": 1}}, "df": 2, "t": {"docs": {}, "df": 0, "i": {"docs": {"icepool.Deck.deal": {"tf": 1}}, "df": 1, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.map_to_pool": {"tf": 1.4142135623730951}, "icepool.Die.explode_to_pool": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.map_to_pool": {"tf": 2}, "icepool.Pool.additive_union": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.additive_union": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.difference": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.intersection": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.union": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.symmetric_difference": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.keep_outcomes": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.drop_outcomes": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.map_counts": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.multiply_counts": {"tf": 1}, "icepool.MultisetExpression.divide_counts": {"tf": 1}, "icepool.MultisetExpression.modulo_counts": {"tf": 1}, "icepool.MultisetExpression.keep_counts": {"tf": 1}, "icepool.MultisetExpression.unique": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.lowest": {"tf": 1}, "icepool.MultisetExpression.highest": {"tf": 1}, "icepool.MultisetExpression.sort_match": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.maximum_match": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.evaluate": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.expand": {"tf": 1}, "icepool.MultisetExpression.sum": {"tf": 1}, "icepool.MultisetExpression.count": {"tf": 1}, "icepool.MultisetExpression.any": {"tf": 1}, "icepool.MultisetExpression.highest_outcome_and_count": {"tf": 1}, "icepool.MultisetExpression.all_counts": {"tf": 1}, "icepool.MultisetExpression.largest_count": {"tf": 1}, "icepool.MultisetExpression.largest_count_and_outcome": {"tf": 1}, "icepool.MultisetExpression.count_subset": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.largest_straight": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.largest_straight_and_outcome": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.all_straights": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.all_straights_reduce_counts": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.argsort": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.issubset": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.issuperset": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.isdisjoint": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.compair_lt": {"tf": 1}, "icepool.MultisetExpression.compair_le": {"tf": 1}, "icepool.MultisetExpression.compair_gt": {"tf": 1}, "icepool.MultisetExpression.compair_ge": {"tf": 1}, "icepool.MultisetExpression.compair_eq": {"tf": 1}, "icepool.MultisetExpression.compair_ne": {"tf": 1}, "icepool.MultisetEvaluator.prefix_generators": {"tf": 1}, "icepool.MultisetEvaluator.evaluate": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.sample": {"tf": 1}, "icepool.multiset_function": {"tf": 1.7320508075688772}, "icepool.evaluator.JointEvaluator.__init__": {"tf": 1}, "icepool.evaluator.JointEvaluator.prefix_generators": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.__init__": {"tf": 1.4142135623730951}, "icepool.evaluator.ExpressionEvaluator.prefix_generators": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 2}}, "df": 58, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Die.map_to_pool": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.map_to_pool": {"tf": 1}, "icepool.Pool.additive_union": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.additive_union": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.difference": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.intersection": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.union": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.symmetric_difference": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.keep_outcomes": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.drop_outcomes": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.map_counts": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.multiply_counts": {"tf": 1}, "icepool.MultisetExpression.divide_counts": {"tf": 1}, "icepool.MultisetExpression.modulo_counts": {"tf": 1}, "icepool.MultisetExpression.keep_counts": {"tf": 1}, "icepool.MultisetExpression.unique": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1}, "icepool.MultisetExpression.lowest": {"tf": 1}, "icepool.MultisetExpression.highest": {"tf": 1}, "icepool.MultisetExpression.sort_match": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.maximum_match": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.evaluate": {"tf": 1}, "icepool.MultisetExpression.count_subset": {"tf": 1}, "icepool.MultisetExpression.largest_straight": {"tf": 1}, "icepool.MultisetExpression.largest_straight_and_outcome": {"tf": 1}, "icepool.MultisetExpression.all_straights": {"tf": 1}, "icepool.MultisetExpression.all_straights_reduce_counts": {"tf": 1}, "icepool.MultisetExpression.argsort": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.issubset": {"tf": 1}, "icepool.MultisetExpression.issuperset": {"tf": 1}, "icepool.MultisetExpression.isdisjoint": {"tf": 1}, "icepool.MultisetExpression.compair_lt": {"tf": 1}, "icepool.MultisetExpression.compair_le": {"tf": 1}, "icepool.MultisetExpression.compair_gt": {"tf": 1}, "icepool.MultisetExpression.compair_ge": {"tf": 1}, "icepool.MultisetExpression.compair_eq": {"tf": 1}, "icepool.MultisetExpression.compair_ne": {"tf": 1}, "icepool.MultisetEvaluator.evaluate": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.__init__": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1}}, "df": 42}}}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.MultisetExpression.keep": {"tf": 1}, "icepool.MultisetExpression.evaluate": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.expand": {"tf": 1}, "icepool.MultisetExpression.sum": {"tf": 1}, "icepool.MultisetExpression.count": {"tf": 1}, "icepool.MultisetExpression.any": {"tf": 1}, "icepool.MultisetExpression.highest_outcome_and_count": {"tf": 1}, "icepool.MultisetExpression.all_counts": {"tf": 1}, "icepool.MultisetExpression.largest_count": {"tf": 1}, "icepool.MultisetExpression.largest_count_and_outcome": {"tf": 1}, "icepool.MultisetExpression.count_subset": {"tf": 1}, "icepool.MultisetExpression.largest_straight": {"tf": 1}, "icepool.MultisetExpression.largest_straight_and_outcome": {"tf": 1}, "icepool.MultisetExpression.all_straights": {"tf": 1}, "icepool.MultisetExpression.all_straights_reduce_counts": {"tf": 1}, "icepool.MultisetExpression.issubset": {"tf": 1}, "icepool.MultisetExpression.issuperset": {"tf": 1}, "icepool.MultisetExpression.isdisjoint": {"tf": 1}, "icepool.MultisetEvaluator.evaluate": {"tf": 1}, "icepool.multiset_function": {"tf": 1.7320508075688772}, "icepool.evaluator.JointEvaluator.__init__": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.__init__": {"tf": 1}}, "df": 22}}}}}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die.map_to_pool": {"tf": 1}, "icepool.Die.explode_to_pool": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.map_to_pool": {"tf": 1.7320508075688772}, "icepool.MultisetEvaluator.prefix_generators": {"tf": 1}, "icepool.MultisetEvaluator.sample": {"tf": 1}, "icepool.evaluator.JointEvaluator.prefix_generators": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.prefix_generators": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1.7320508075688772}}, "df": 9}}}}}}}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Deck.deal": {"tf": 1}}, "df": 1}}}}}}}}, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.reroll_to_pool": {"tf": 1}}, "df": 1}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"icepool.lowest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.middle": {"tf": 1}}, "df": 3}}}}, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"icepool.coin": {"tf": 1}, "icepool.one_hot": {"tf": 1}, "icepool.Die.reroll": {"tf": 1.4142135623730951}, "icepool.Die.filter": {"tf": 1.4142135623730951}, "icepool.Die.split": {"tf": 1.4142135623730951}, "icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Die.explode": {"tf": 1.4142135623730951}, "icepool.Die.is_in": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.Die.explode_to_pool": {"tf": 1.4142135623730951}, "icepool.Die.reroll_to_pool": {"tf": 1.4142135623730951}, "icepool.Die.equals": {"tf": 1.4142135623730951}, "icepool.Population.is_empty": {"tf": 1}, "icepool.Population.has_zero_quantities": {"tf": 1}, "icepool.Population.probability": {"tf": 1}, "icepool.Population.probabilities": {"tf": 1}, "icepool.Vector.binary_operator": {"tf": 1}, "icepool.Symbols.issubset": {"tf": 1}, "icepool.Symbols.issuperset": {"tf": 1}, "icepool.Symbols.isdisjoint": {"tf": 1}, "icepool.Symbols.has_negative_counts": {"tf": 1}, "icepool.from_cumulative": {"tf": 1.4142135623730951}, "icepool.map": {"tf": 1}, "icepool.map_function": {"tf": 1}, "icepool.map_and_time": {"tf": 1}, "icepool.map_to_pool": {"tf": 1}, "icepool.MultisetGenerator.equals": {"tf": 1}, "icepool.MultisetExpression.keep_outcomes": {"tf": 1}, "icepool.MultisetExpression.drop_outcomes": {"tf": 1}, "icepool.MultisetExpression.any": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.issubset": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.issuperset": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.isdisjoint": {"tf": 1.4142135623730951}, "icepool.Deck.map": {"tf": 1}, "icepool.evaluator.AnyEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.any_all": {"tf": 1.4142135623730951}, "icepool.evaluator.ComparisonEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.IsSubsetEvaluator.any_all": {"tf": 1.4142135623730951}, "icepool.evaluator.IsSubsetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsProperSubsetEvaluator.any_all": {"tf": 1.4142135623730951}, "icepool.evaluator.IsProperSubsetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsSupersetEvaluator.any_all": {"tf": 1.4142135623730951}, "icepool.evaluator.IsSupersetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsProperSupersetEvaluator.any_all": {"tf": 1.4142135623730951}, "icepool.evaluator.IsProperSupersetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsEqualSetEvaluator.any_all": {"tf": 1.4142135623730951}, "icepool.evaluator.IsEqualSetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsNotEqualSetEvaluator.any_all": {"tf": 1.4142135623730951}, "icepool.evaluator.IsNotEqualSetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsDisjointSetEvaluator.any_all": {"tf": 1.4142135623730951}, "icepool.evaluator.IsDisjointSetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.__init__": {"tf": 1}, "icepool.function.coin": {"tf": 1}, "icepool.function.one_hot": {"tf": 1}, "icepool.function.from_cumulative": {"tf": 1.4142135623730951}, "icepool.function.map": {"tf": 1}, "icepool.function.map_function": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1}, "icepool.typing.guess_star": {"tf": 1}}, "df": 62}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Population.mean": {"tf": 1.4142135623730951}, "icepool.Population.variance": {"tf": 1.4142135623730951}, "icepool.Population.standard_deviation": {"tf": 1.4142135623730951}, "icepool.Population.sd": {"tf": 1.4142135623730951}, "icepool.Population.standardized_moment": {"tf": 1.4142135623730951}, "icepool.Population.skewness": {"tf": 1.4142135623730951}, "icepool.Population.excess_kurtosis": {"tf": 1.4142135623730951}, "icepool.Population.entropy": {"tf": 1}, "icepool.Population.covariance": {"tf": 1.4142135623730951}, "icepool.Population.correlation": {"tf": 1.4142135623730951}, "icepool.tupleize": {"tf": 1.4142135623730951}, "icepool.vectorize": {"tf": 1.4142135623730951}}, "df": 12}}}, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"icepool.MultisetExpression.all_straights_reduce_counts": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.__init__": {"tf": 1}}, "df": 2}}}}}, "x": {"docs": {"icepool.stochastic_round": {"tf": 1}, "icepool.function.stochastic_round": {"tf": 1}}, "df": 2}, "t": {"docs": {"icepool.Die.unary_operator": {"tf": 1}, "icepool.Die.keys": {"tf": 1}, "icepool.Die.items": {"tf": 1}, "icepool.Die.simplify": {"tf": 1}, "icepool.Die.reroll": {"tf": 1.4142135623730951}, "icepool.Die.filter": {"tf": 1.4142135623730951}, "icepool.Die.split": {"tf": 1}, "icepool.Die.truncate": {"tf": 1}, "icepool.Die.clip": {"tf": 1}, "icepool.Die.set_outcomes": {"tf": 1.4142135623730951}, "icepool.Die.trim": {"tf": 1}, "icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 2.449489742783178}, "icepool.Die.explode": {"tf": 1.4142135623730951}, "icepool.Die.is_in": {"tf": 1}, "icepool.Die.count": {"tf": 1}, "icepool.Die.pool": {"tf": 1}, "icepool.Die.highest": {"tf": 1}, "icepool.Die.explode_to_pool": {"tf": 1.4142135623730951}, "icepool.Die.reroll_to_pool": {"tf": 1.4142135623730951}, "icepool.Die.abs": {"tf": 1}, "icepool.Die.zero": {"tf": 1}, "icepool.Die.zero_outcome": {"tf": 1}, "icepool.Population.keys": {"tf": 1}, "icepool.Population.items": {"tf": 1}, "icepool.Population.outcomes": {"tf": 1}, "icepool.Population.min_outcome": {"tf": 1}, "icepool.Population.max_outcome": {"tf": 1}, "icepool.Population.nearest": {"tf": 1}, "icepool.Population.median_low": {"tf": 1}, "icepool.Population.median_high": {"tf": 1}, "icepool.Population.quantile_low": {"tf": 1}, "icepool.Population.quantile_high": {"tf": 1}, "icepool.Population.to_one_hot": {"tf": 1}, "icepool.Population.sample": {"tf": 1}, "icepool.tupleize": {"tf": 2}, "icepool.vectorize": {"tf": 2}, "icepool.Vector.abs": {"tf": 1}, "icepool.CountsKeysView.__init__": {"tf": 1}, "icepool.from_cumulative": {"tf": 1.4142135623730951}, "icepool.lowest": {"tf": 2}, "icepool.highest": {"tf": 2}, "icepool.middle": {"tf": 2}, "icepool.min_outcome": {"tf": 1.7320508075688772}, "icepool.max_outcome": {"tf": 1.7320508075688772}, "icepool.align": {"tf": 1.7320508075688772}, "icepool.commonize_denominator": {"tf": 1.7320508075688772}, "icepool.reduce": {"tf": 3}, "icepool.accumulate": {"tf": 3}, "icepool.map": {"tf": 2.6457513110645907}, "icepool.map_function": {"tf": 2.449489742783178}, "icepool.map_and_time": {"tf": 2.23606797749979}, "icepool.map_to_pool": {"tf": 3}, "icepool.Pool.__init__": {"tf": 2.449489742783178}, "icepool.Pool.unique_dice": {"tf": 1}, "icepool.Pool.outcomes": {"tf": 1}, "icepool.Pool.min_outcome": {"tf": 1}, "icepool.Pool.max_outcome": {"tf": 1}, "icepool.Pool.additive_union": {"tf": 2}, "icepool.MultisetGenerator.outcomes": {"tf": 1}, "icepool.MultisetGenerator.min_outcome": {"tf": 1}, "icepool.MultisetGenerator.max_outcome": {"tf": 1}, "icepool.Alignment.__init__": {"tf": 1}, "icepool.Alignment.outcomes": {"tf": 1}, "icepool.MultisetExpression.additive_union": {"tf": 2}, "icepool.MultisetExpression.difference": {"tf": 2}, "icepool.MultisetExpression.intersection": {"tf": 2}, "icepool.MultisetExpression.union": {"tf": 2}, "icepool.MultisetExpression.symmetric_difference": {"tf": 2}, "icepool.MultisetExpression.keep_outcomes": {"tf": 2}, "icepool.MultisetExpression.drop_outcomes": {"tf": 2}, "icepool.MultisetExpression.map_counts": {"tf": 2}, "icepool.MultisetExpression.multiply_counts": {"tf": 1}, "icepool.MultisetExpression.divide_counts": {"tf": 1}, "icepool.MultisetExpression.modulo_counts": {"tf": 1}, "icepool.MultisetExpression.keep_counts": {"tf": 1}, "icepool.MultisetExpression.unique": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 2}, "icepool.MultisetExpression.lowest": {"tf": 1}, "icepool.MultisetExpression.highest": {"tf": 1}, "icepool.MultisetExpression.sort_match": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.maximum_match": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.evaluate": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.expand": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.sum": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.count": {"tf": 1}, "icepool.MultisetExpression.any": {"tf": 1}, "icepool.MultisetExpression.highest_outcome_and_count": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.all_counts": {"tf": 1}, "icepool.MultisetExpression.largest_count": {"tf": 1}, "icepool.MultisetExpression.largest_count_and_outcome": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.count_subset": {"tf": 2}, "icepool.MultisetExpression.argsort": {"tf": 2.449489742783178}, "icepool.MultisetExpression.issubset": {"tf": 2}, "icepool.MultisetExpression.issuperset": {"tf": 2}, "icepool.MultisetExpression.isdisjoint": {"tf": 2}, "icepool.MultisetExpression.compair_lt": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.compair_le": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.compair_gt": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.compair_ge": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.compair_eq": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.compair_ne": {"tf": 1.7320508075688772}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.MultisetEvaluator.alignment": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.evaluate": {"tf": 2}, "icepool.MultisetEvaluator.sample": {"tf": 1.7320508075688772}, "icepool.Deck.keys": {"tf": 1}, "icepool.Deck.items": {"tf": 1}, "icepool.Deck.deal": {"tf": 1.4142135623730951}, "icepool.Deck.additive_union": {"tf": 1.7320508075688772}, "icepool.Deck.difference": {"tf": 1.7320508075688772}, "icepool.Deck.intersection": {"tf": 1.7320508075688772}, "icepool.Deck.union": {"tf": 1.7320508075688772}, "icepool.Deck.symmetric_difference": {"tf": 1.7320508075688772}, "icepool.Deck.multiply_counts": {"tf": 1}, "icepool.Deck.divide_counts": {"tf": 1}, "icepool.Deck.modulo_counts": {"tf": 1}, "icepool.Deck.map": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1}, "icepool.Deal.deck": {"tf": 1}, "icepool.Deal.outcomes": {"tf": 1}, "icepool.MultiDeal.__init__": {"tf": 1}, "icepool.MultiDeal.deck": {"tf": 1}, "icepool.MultiDeal.outcomes": {"tf": 1}, "icepool.multiset_function": {"tf": 1.7320508075688772}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.__init__": {"tf": 1.4142135623730951}, "icepool.evaluator.ExpressionEvaluator.alignment": {"tf": 1}, "icepool.function.from_cumulative": {"tf": 1.4142135623730951}, "icepool.function.min_outcome": {"tf": 1.7320508075688772}, "icepool.function.max_outcome": {"tf": 1.7320508075688772}, "icepool.function.align": {"tf": 1.7320508075688772}, "icepool.function.commonize_denominator": {"tf": 1.7320508075688772}, "icepool.function.reduce": {"tf": 3}, "icepool.function.accumulate": {"tf": 3}, "icepool.function.map": {"tf": 2.6457513110645907}, "icepool.function.map_function": {"tf": 2.449489742783178}, "icepool.function.map_and_time": {"tf": 2.23606797749979}, "icepool.function.map_to_pool": {"tf": 3}}, "df": 139, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.one_hot": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.Die.explode_to_pool": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.Population.mode": {"tf": 1}, "icepool.Population.covariance": {"tf": 1.4142135623730951}, "icepool.Population.correlation": {"tf": 1.4142135623730951}, "icepool.tupleize": {"tf": 1.4142135623730951}, "icepool.align": {"tf": 1}, "icepool.align_range": {"tf": 1}, "icepool.commonize_denominator": {"tf": 1}, "icepool.map_and_time": {"tf": 1}, "icepool.map_to_pool": {"tf": 1}, "icepool.MultisetGenerator.sample": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.expand": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.highest_outcome_and_count": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.all_counts": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.largest_count_and_outcome": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.largest_straight_and_outcome": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.all_straights": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.all_straights_reduce_counts": {"tf": 2}, "icepool.MultisetEvaluator.prefix_generators": {"tf": 1}, "icepool.Deck.deal": {"tf": 1}, "icepool.Deal.hand_sizes": {"tf": 1}, "icepool.multiset_function": {"tf": 2}, "icepool.evaluator.JointEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.JointEvaluator.prefix_generators": {"tf": 1}, "icepool.evaluator.ExpandEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.evaluator.ComparisonEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsSubsetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsProperSubsetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsSupersetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsProperSupersetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsEqualSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsNotEqualSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsDisjointSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.prefix_generators": {"tf": 1}, "icepool.function.one_hot": {"tf": 1}, "icepool.function.align": {"tf": 1}, "icepool.function.align_range": {"tf": 1}, "icepool.function.commonize_denominator": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1}, "icepool.typing.count_positional_parameters": {"tf": 1}}, "df": 49}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}}, "df": 3}}}, "e": {"docs": {"icepool.Die.middle": {"tf": 1}, "icepool.middle": {"tf": 1}, "icepool.evaluator.CompairEvalautor.__init__": {"tf": 1}}, "df": 3}}, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Die.__init__": {"tf": 1.4142135623730951}, "icepool.Die.map": {"tf": 1.7320508075688772}, "icepool.Die.map_and_time": {"tf": 1.4142135623730951}, "icepool.Die.if_else": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.reduce": {"tf": 1}, "icepool.map": {"tf": 2}, "icepool.map_function": {"tf": 1.4142135623730951}, "icepool.map_and_time": {"tf": 1.4142135623730951}, "icepool.map_to_pool": {"tf": 1}, "icepool.MultisetGenerator.order": {"tf": 1}, "icepool.MultisetExpression.order": {"tf": 1}, "icepool.MultisetExpression.sort_match": {"tf": 1}, "icepool.MultisetExpression.expand": {"tf": 1}, "icepool.MultisetExpression.argsort": {"tf": 1}, "icepool.MultisetExpression.compair_lt": {"tf": 1}, "icepool.MultisetExpression.compair_le": {"tf": 1}, "icepool.MultisetExpression.compair_gt": {"tf": 1}, "icepool.MultisetExpression.compair_ge": {"tf": 1}, "icepool.MultisetExpression.compair_eq": {"tf": 1}, "icepool.MultisetExpression.compair_ne": {"tf": 1}, "icepool.MultisetEvaluator.final_outcome": {"tf": 1}, "icepool.MultisetEvaluator.order": {"tf": 1}, "icepool.Order.merge": {"tf": 1.4142135623730951}, "icepool.Deck.map": {"tf": 1.4142135623730951}, "icepool.multiset_function": {"tf": 1.4142135623730951}, "icepool.evaluator.JointEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.JointEvaluator.order": {"tf": 1}, "icepool.evaluator.ExpandEvaluator.__init__": {"tf": 1}, "icepool.evaluator.KeepEvaluator.order": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.__init__": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.order": {"tf": 1}, "icepool.evaluator.CompairEvalautor.__init__": {"tf": 1}, "icepool.evaluator.CompairEvalautor.order": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.order": {"tf": 1}, "icepool.function.reduce": {"tf": 1}, "icepool.function.map": {"tf": 2}, "icepool.function.map_function": {"tf": 1.4142135623730951}, "icepool.function.map_and_time": {"tf": 1.4142135623730951}, "icepool.function.map_to_pool": {"tf": 1}, "icepool.typing.Order.merge": {"tf": 1.4142135623730951}}, "df": 42}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.mean_time_to_sum": {"tf": 1}, "icepool.Die.is_in": {"tf": 1}, "icepool.Die.count": {"tf": 1}, "icepool.MultisetExpression.keep_outcomes": {"tf": 1}, "icepool.MultisetExpression.drop_outcomes": {"tf": 1}}, "df": 5}}}}}, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.if_else": {"tf": 1}}, "df": 1}, "t": {"docs": {}, "df": 0, "h": {"docs": {"icepool.Vector.binary_operator": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.__init__": {"tf": 1}}, "df": 2}}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.truncate": {"tf": 1.4142135623730951}, "icepool.Die.clip": {"tf": 1.4142135623730951}, "icepool.Die.set_range": {"tf": 1.4142135623730951}, "icepool.Die.if_else": {"tf": 1.4142135623730951}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.Population.nearest": {"tf": 1}, "icepool.Population.quantity": {"tf": 1}, "icepool.Population.probability": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.map_to_pool": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.JointEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ExpandEvaluator.next_state": {"tf": 1}, "icepool.evaluator.SumEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CountEvaluator.next_state": {"tf": 1}, "icepool.evaluator.AnyEvaluator.next_state": {"tf": 1}, "icepool.evaluator.HighestOutcomeAndCountEvaluator.next_state": {"tf": 1}, "icepool.evaluator.LargestCountAndOutcomeEvaluator.next_state": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.next_state": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.KeepEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.next_state": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1}}, "df": 27, "s": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.set_outcomes": {"tf": 1}, "icepool.Population.to_one_hot": {"tf": 1}, "icepool.from_cumulative": {"tf": 1}, "icepool.from_rv": {"tf": 1}, "icepool.Alignment.__init__": {"tf": 1}, "icepool.MultisetEvaluator.alignment": {"tf": 1}, "icepool.MultisetEvaluator.range_alignment": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 1}, "icepool.evaluator.HighestOutcomeAndCountEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"tf": 1}, "icepool.function.from_cumulative": {"tf": 1}, "icepool.function.from_rv": {"tf": 1}}, "df": 18}}}}}}}, "p": {"docs": {"icepool.Die.unary_operator": {"tf": 1}, "icepool.Die.binary_operator": {"tf": 1}, "icepool.Vector.unary_operator": {"tf": 1}, "icepool.Vector.binary_operator": {"tf": 1}, "icepool.Vector.reverse_binary_operator": {"tf": 1}}, "df": 5, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Die.map_to_pool": {"tf": 1}, "icepool.Population.nearest": {"tf": 1}, "icepool.Population.quantity": {"tf": 1}, "icepool.Population.quantities": {"tf": 1}, "icepool.Population.probability": {"tf": 1}, "icepool.Population.probabilities": {"tf": 1}, "icepool.Population.to_one_hot": {"tf": 1}, "icepool.lowest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.middle": {"tf": 1}, "icepool.map_function": {"tf": 1}, "icepool.function.map_function": {"tf": 1}}, "df": 12}}}}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die.binary_operator": {"tf": 1}, "icepool.Die.cmp": {"tf": 1}, "icepool.Die.equals": {"tf": 1}, "icepool.Population.kolmogorov_smirnov": {"tf": 1}, "icepool.Population.cramer_von_mises": {"tf": 1}, "icepool.Vector.binary_operator": {"tf": 1}, "icepool.Vector.reverse_binary_operator": {"tf": 1}, "icepool.Vector.append": {"tf": 1}, "icepool.Vector.concatenate": {"tf": 1}, "icepool.Symbols.symmetric_difference": {"tf": 1}, "icepool.Symbols.multiply_counts": {"tf": 1}, "icepool.Symbols.divide_counts": {"tf": 1}, "icepool.Symbols.modulo_counts": {"tf": 1}, "icepool.Symbols.issubset": {"tf": 1}, "icepool.Symbols.issuperset": {"tf": 1}, "icepool.Symbols.isdisjoint": {"tf": 1}, "icepool.MultisetGenerator.equals": {"tf": 1}, "icepool.MultisetExpression.symmetric_difference": {"tf": 1}, "icepool.MultisetExpression.sort_match": {"tf": 1}, "icepool.MultisetExpression.maximum_match": {"tf": 1}, "icepool.MultisetExpression.issubset": {"tf": 1}, "icepool.MultisetExpression.issuperset": {"tf": 1}, "icepool.MultisetExpression.isdisjoint": {"tf": 1}, "icepool.MultisetExpression.compair_lt": {"tf": 1}, "icepool.MultisetExpression.compair_le": {"tf": 1}, "icepool.MultisetExpression.compair_gt": {"tf": 1}, "icepool.MultisetExpression.compair_ge": {"tf": 1}, "icepool.MultisetExpression.compair_eq": {"tf": 1}, "icepool.MultisetExpression.compair_ne": {"tf": 1}, "icepool.Deck.symmetric_difference": {"tf": 1}, "icepool.Deck.multiply_counts": {"tf": 1}, "icepool.Deck.divide_counts": {"tf": 1}, "icepool.Deck.modulo_counts": {"tf": 1}}, "df": 33}}}}, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.MultisetGenerator.order": {"tf": 1}, "icepool.MultisetExpression.order": {"tf": 1}, "icepool.MultisetExpression.sort_match": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.expand": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.argsort": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.compair_lt": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.compair_le": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.compair_gt": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.compair_ge": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.compair_eq": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.compair_ne": {"tf": 1.7320508075688772}, "icepool.MultisetEvaluator.order": {"tf": 1}, "icepool.Order.merge": {"tf": 1.4142135623730951}, "icepool.evaluator.JointEvaluator.order": {"tf": 1}, "icepool.evaluator.ExpandEvaluator.__init__": {"tf": 1.7320508075688772}, "icepool.evaluator.ExpandEvaluator.order": {"tf": 1}, "icepool.evaluator.SumEvaluator.order": {"tf": 1}, "icepool.evaluator.CountEvaluator.order": {"tf": 1}, "icepool.evaluator.AnyEvaluator.order": {"tf": 1}, "icepool.evaluator.HighestOutcomeAndCountEvaluator.order": {"tf": 1}, "icepool.evaluator.LargestCountEvaluator.order": {"tf": 1}, "icepool.evaluator.LargestCountAndOutcomeEvaluator.order": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.order": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.order": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.order": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.order": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.order": {"tf": 1}, "icepool.evaluator.KeepEvaluator.order": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.__init__": {"tf": 1.7320508075688772}, "icepool.evaluator.ArgsortEvaluator.order": {"tf": 1}, "icepool.evaluator.CompairEvalautor.__init__": {"tf": 1.7320508075688772}, "icepool.evaluator.CompairEvalautor.order": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.order": {"tf": 1}, "icepool.typing.Order.merge": {"tf": 1.4142135623730951}}, "df": 34, "s": {"docs": {"icepool.Order.merge": {"tf": 1}, "icepool.typing.Order.merge": {"tf": 1}}, "df": 2}}}}}}, "u": {"docs": {"icepool.Die.unary_operator": {"tf": 1.4142135623730951}, "icepool.Die.binary_operator": {"tf": 1.4142135623730951}, "icepool.Die.map": {"tf": 2.6457513110645907}, "icepool.Die.if_else": {"tf": 2.6457513110645907}, "icepool.Die.map_to_pool": {"tf": 2.23606797749979}, "icepool.Vector.unary_operator": {"tf": 1.4142135623730951}, "icepool.Vector.binary_operator": {"tf": 1.4142135623730951}, "icepool.Vector.reverse_binary_operator": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.evaluate": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.sum": {"tf": 2}, "icepool.MultisetEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.evaluate": {"tf": 1.4142135623730951}, "icepool.Deck.map": {"tf": 2.23606797749979}, "icepool.multiset_function": {"tf": 2.23606797749979}, "icepool.evaluator.ConstantEvaluator.__init__": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.__init__": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1.4142135623730951}}, "df": 18, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Die.__init__": {"tf": 1.4142135623730951}, "icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.split": {"tf": 1}, "icepool.Die.map": {"tf": 2}, "icepool.Die.map_and_time": {"tf": 1.7320508075688772}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.if_else": {"tf": 1.7320508075688772}, "icepool.Die.pool": {"tf": 1}, "icepool.Die.keep": {"tf": 1.4142135623730951}, "icepool.Die.map_to_pool": {"tf": 1.4142135623730951}, "icepool.Die.explode_to_pool": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.Population.quantity": {"tf": 1}, "icepool.Population.quantities": {"tf": 1}, "icepool.Population.probability": {"tf": 1}, "icepool.Population.probabilities": {"tf": 1}, "icepool.tupleize": {"tf": 1}, "icepool.vectorize": {"tf": 1.4142135623730951}, "icepool.Symbols.__init__": {"tf": 1}, "icepool.Symbols.additive_union": {"tf": 1}, "icepool.Symbols.difference": {"tf": 1}, "icepool.Symbols.intersection": {"tf": 1}, "icepool.Symbols.union": {"tf": 1}, "icepool.Symbols.symmetric_difference": {"tf": 1}, "icepool.Symbols.count_subset": {"tf": 1}, "icepool.Symbols.issubset": {"tf": 1}, "icepool.Symbols.issuperset": {"tf": 1}, "icepool.Symbols.isdisjoint": {"tf": 1}, "icepool.from_cumulative": {"tf": 1}, "icepool.from_rv": {"tf": 1}, "icepool.lowest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.middle": {"tf": 1}, "icepool.min_outcome": {"tf": 1}, "icepool.max_outcome": {"tf": 1}, "icepool.align": {"tf": 1}, "icepool.commonize_denominator": {"tf": 1}, "icepool.reduce": {"tf": 1.7320508075688772}, "icepool.accumulate": {"tf": 1.7320508075688772}, "icepool.map": {"tf": 2}, "icepool.map_function": {"tf": 1.7320508075688772}, "icepool.map_and_time": {"tf": 1.7320508075688772}, "icepool.map_to_pool": {"tf": 2.23606797749979}, "icepool.Pool.__init__": {"tf": 2}, "icepool.Pool.additive_union": {"tf": 1}, "icepool.standard_pool": {"tf": 1}, "icepool.MultisetExpression.additive_union": {"tf": 1}, "icepool.MultisetExpression.difference": {"tf": 1}, "icepool.MultisetExpression.intersection": {"tf": 1}, "icepool.MultisetExpression.union": {"tf": 1}, "icepool.MultisetExpression.symmetric_difference": {"tf": 1}, "icepool.MultisetExpression.keep_outcomes": {"tf": 1}, "icepool.MultisetExpression.drop_outcomes": {"tf": 1}, "icepool.MultisetExpression.map_counts": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.evaluate": {"tf": 1}, "icepool.MultisetExpression.expand": {"tf": 1}, "icepool.MultisetExpression.sum": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.count": {"tf": 1}, "icepool.MultisetExpression.any": {"tf": 1}, "icepool.MultisetExpression.highest_outcome_and_count": {"tf": 1}, "icepool.MultisetExpression.all_counts": {"tf": 1}, "icepool.MultisetExpression.largest_count": {"tf": 1}, "icepool.MultisetExpression.largest_count_and_outcome": {"tf": 1}, "icepool.MultisetExpression.count_subset": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.largest_straight": {"tf": 1}, "icepool.MultisetExpression.largest_straight_and_outcome": {"tf": 1}, "icepool.MultisetExpression.all_straights": {"tf": 1}, "icepool.MultisetExpression.all_straights_reduce_counts": {"tf": 1}, "icepool.MultisetExpression.argsort": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.issubset": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.issuperset": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.isdisjoint": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.compair_lt": {"tf": 1}, "icepool.MultisetExpression.compair_le": {"tf": 1}, "icepool.MultisetExpression.compair_gt": {"tf": 1}, "icepool.MultisetExpression.compair_ge": {"tf": 1}, "icepool.MultisetExpression.compair_eq": {"tf": 1}, "icepool.MultisetExpression.compair_ne": {"tf": 1}, "icepool.MultisetEvaluator.final_outcome": {"tf": 1}, "icepool.MultisetEvaluator.evaluate": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.sample": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1.4142135623730951}, "icepool.Deck.deal": {"tf": 1}, "icepool.Deck.additive_union": {"tf": 1}, "icepool.Deck.difference": {"tf": 1}, "icepool.Deck.intersection": {"tf": 1}, "icepool.Deck.union": {"tf": 1}, "icepool.Deck.symmetric_difference": {"tf": 1}, "icepool.Deck.map": {"tf": 1.7320508075688772}, "icepool.multiset_function": {"tf": 2}, "icepool.evaluator.SumEvaluator.__init__": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1}, "icepool.function.from_cumulative": {"tf": 1}, "icepool.function.from_rv": {"tf": 1}, "icepool.function.min_outcome": {"tf": 1}, "icepool.function.max_outcome": {"tf": 1}, "icepool.function.align": {"tf": 1}, "icepool.function.commonize_denominator": {"tf": 1}, "icepool.function.reduce": {"tf": 1.7320508075688772}, "icepool.function.accumulate": {"tf": 1.7320508075688772}, "icepool.function.map": {"tf": 2}, "icepool.function.map_function": {"tf": 1.7320508075688772}, "icepool.function.map_and_time": {"tf": 1.7320508075688772}, "icepool.function.map_to_pool": {"tf": 2.23606797749979}}, "df": 106}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.MultisetExpression.maximum_match": {"tf": 1}}, "df": 1}}}}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.map_and_time": {"tf": 1}, "icepool.map_to_pool": {"tf": 1}, "icepool.MultisetEvaluator.sample": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}, "icepool.evaluator.ExpandEvaluator.order": {"tf": 1}, "icepool.evaluator.SumEvaluator.order": {"tf": 1}, "icepool.evaluator.CountEvaluator.order": {"tf": 1}, "icepool.evaluator.AnyEvaluator.order": {"tf": 1}, "icepool.evaluator.HighestOutcomeAndCountEvaluator.order": {"tf": 1}, "icepool.evaluator.LargestCountEvaluator.order": {"tf": 1}, "icepool.evaluator.LargestCountAndOutcomeEvaluator.order": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.order": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.order": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.order": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1}}, "df": 19}}, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Die.__init__": {"tf": 1.7320508075688772}, "icepool.Die.map": {"tf": 2.23606797749979}, "icepool.Die.if_else": {"tf": 1.7320508075688772}, "icepool.map": {"tf": 2.23606797749979}, "icepool.map_function": {"tf": 2}, "icepool.map_and_time": {"tf": 1.4142135623730951}, "icepool.function.map": {"tf": 2.23606797749979}, "icepool.function.map_function": {"tf": 2}, "icepool.function.map_and_time": {"tf": 1.4142135623730951}}, "df": 9, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Die.map": {"tf": 1.4142135623730951}, "icepool.map": {"tf": 1.4142135623730951}, "icepool.map_function": {"tf": 1}, "icepool.map_and_time": {"tf": 1.4142135623730951}, "icepool.function.map": {"tf": 1.4142135623730951}, "icepool.function.map_function": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1.4142135623730951}}, "df": 7}}}}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "g": {"0": {"docs": {"icepool.lowest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.middle": {"tf": 1}}, "df": 3}, "docs": {"icepool.typing.guess_star": {"tf": 1}}, "df": 1, "s": {"docs": {"icepool.Die.unary_operator": {"tf": 1}, "icepool.Die.binary_operator": {"tf": 1}, "icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.tupleize": {"tf": 1}, "icepool.vectorize": {"tf": 1}, "icepool.Vector.unary_operator": {"tf": 1}, "icepool.Vector.binary_operator": {"tf": 1}, "icepool.Vector.reverse_binary_operator": {"tf": 1}, "icepool.Symbols.additive_union": {"tf": 1}, "icepool.Symbols.difference": {"tf": 1}, "icepool.Symbols.intersection": {"tf": 1}, "icepool.Symbols.union": {"tf": 1}, "icepool.lowest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.middle": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.map_and_time": {"tf": 1}, "icepool.map_to_pool": {"tf": 1}, "icepool.Pool.additive_union": {"tf": 1}, "icepool.MultisetExpression.additive_union": {"tf": 1}, "icepool.MultisetExpression.difference": {"tf": 1}, "icepool.MultisetExpression.intersection": {"tf": 1}, "icepool.MultisetExpression.union": {"tf": 1}, "icepool.MultisetExpression.map_counts": {"tf": 1}, "icepool.MultisetExpression.argsort": {"tf": 1}, "icepool.MultisetEvaluator.evaluate": {"tf": 1}, "icepool.Deck.additive_union": {"tf": 1}, "icepool.Deck.difference": {"tf": 1}, "icepool.Deck.intersection": {"tf": 1}, "icepool.Deck.union": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1}}, "df": 35}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"icepool.MultisetEvaluator.validate_arity": {"tf": 1}, "icepool.evaluator.JointEvaluator.validate_arity": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.validate_arity": {"tf": 1}}, "df": 3}}}}, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.MultisetExpression.expand": {"tf": 1}, "icepool.evaluator.ExpandEvaluator.__init__": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.order": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.order": {"tf": 1}}, "df": 4}}}}}}}}}, "c": {"docs": {"icepool.Population.scale_quantities": {"tf": 1.4142135623730951}, "icepool.Population.to_one_hot": {"tf": 1.4142135623730951}}, "df": 2, "o": {"docs": {"icepool.Die.unary_operator": {"tf": 1}, "icepool.Die.keys": {"tf": 1}, "icepool.Die.items": {"tf": 1}, "icepool.Die.simplify": {"tf": 1}, "icepool.Die.reroll": {"tf": 1.4142135623730951}, "icepool.Die.filter": {"tf": 1.4142135623730951}, "icepool.Die.split": {"tf": 1}, "icepool.Die.truncate": {"tf": 1}, "icepool.Die.clip": {"tf": 1}, "icepool.Die.set_outcomes": {"tf": 1.4142135623730951}, "icepool.Die.trim": {"tf": 1}, "icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 2.449489742783178}, "icepool.Die.explode": {"tf": 1.4142135623730951}, "icepool.Die.is_in": {"tf": 1}, "icepool.Die.count": {"tf": 1}, "icepool.Die.pool": {"tf": 1}, "icepool.Die.highest": {"tf": 1}, "icepool.Die.explode_to_pool": {"tf": 1.4142135623730951}, "icepool.Die.reroll_to_pool": {"tf": 1.4142135623730951}, "icepool.Die.abs": {"tf": 1}, "icepool.Die.zero": {"tf": 1}, "icepool.Die.zero_outcome": {"tf": 1}, "icepool.Population.keys": {"tf": 1}, "icepool.Population.items": {"tf": 1}, "icepool.Population.outcomes": {"tf": 1}, "icepool.Population.min_outcome": {"tf": 1}, "icepool.Population.max_outcome": {"tf": 1}, "icepool.Population.nearest": {"tf": 1}, "icepool.Population.median_low": {"tf": 1}, "icepool.Population.median_high": {"tf": 1}, "icepool.Population.quantile_low": {"tf": 1}, "icepool.Population.quantile_high": {"tf": 1}, "icepool.Population.to_one_hot": {"tf": 1}, "icepool.Population.sample": {"tf": 1}, "icepool.Vector.abs": {"tf": 1}, "icepool.MultisetEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.evaluate": {"tf": 1.4142135623730951}, "icepool.Deck.keys": {"tf": 1}, "icepool.Deck.items": {"tf": 1}, "icepool.Deck.deal": {"tf": 1.4142135623730951}, "icepool.Deck.additive_union": {"tf": 1.7320508075688772}, "icepool.Deck.difference": {"tf": 1.7320508075688772}, "icepool.Deck.intersection": {"tf": 1.7320508075688772}, "icepool.Deck.union": {"tf": 1.7320508075688772}, "icepool.Deck.symmetric_difference": {"tf": 1.7320508075688772}, "icepool.Deck.multiply_counts": {"tf": 1}, "icepool.Deck.divide_counts": {"tf": 1}, "icepool.Deck.modulo_counts": {"tf": 1}, "icepool.Deck.map": {"tf": 1}, "icepool.multiset_function": {"tf": 2.449489742783178}, "icepool.evaluator.ConstantEvaluator.__init__": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.__init__": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1.4142135623730951}}, "df": 55, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.map": {"tf": 1}, "icepool.Die.if_else": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.map_function": {"tf": 1}, "icepool.evaluator.ExpandEvaluator.next_state": {"tf": 1}, "icepool.evaluator.SumEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CountEvaluator.next_state": {"tf": 1}, "icepool.evaluator.AnyEvaluator.next_state": {"tf": 1}, "icepool.evaluator.HighestOutcomeAndCountEvaluator.next_state": {"tf": 1}, "icepool.evaluator.LargestCountEvaluator.next_state": {"tf": 1}, "icepool.evaluator.LargestCountAndOutcomeEvaluator.next_state": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.next_state": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.next_state": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.next_state": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.next_state": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.next_state": {"tf": 1}, "icepool.evaluator.KeepEvaluator.next_state": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.function.map_function": {"tf": 1}, "icepool.typing.guess_star": {"tf": 1}}, "df": 21, "s": {"docs": {"icepool.Die.keys": {"tf": 1}, "icepool.Die.values": {"tf": 1}, "icepool.Die.items": {"tf": 1}, "icepool.Population.keys": {"tf": 1}, "icepool.Population.values": {"tf": 1}, "icepool.Population.items": {"tf": 1}, "icepool.Population.outcomes": {"tf": 1}, "icepool.Population.quantities": {"tf": 1}, "icepool.CountsKeysView.__init__": {"tf": 1.7320508075688772}, "icepool.CountsValuesView.__init__": {"tf": 1.7320508075688772}, "icepool.CountsItemsView.__init__": {"tf": 1.7320508075688772}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.Deck.keys": {"tf": 1}, "icepool.Deck.values": {"tf": 1}, "icepool.Deck.items": {"tf": 1}, "icepool.Deal.outcomes": {"tf": 1}, "icepool.MultiDeal.outcomes": {"tf": 1}, "icepool.evaluator.JointEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.next_state": {"tf": 1}}, "df": 21, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {"icepool.Die.keys": {"tf": 1}, "icepool.Population.keys": {"tf": 1}, "icepool.Population.outcomes": {"tf": 1}, "icepool.Deck.keys": {"tf": 1}, "icepool.Deal.outcomes": {"tf": 1}, "icepool.MultiDeal.outcomes": {"tf": 1}}, "df": 6}}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {"icepool.Die.values": {"tf": 1}, "icepool.Population.values": {"tf": 1}, "icepool.Population.quantities": {"tf": 1}, "icepool.Deck.values": {"tf": 1}}, "df": 4}}}}}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {"icepool.Die.items": {"tf": 1}, "icepool.Population.items": {"tf": 1}, "icepool.Deck.items": {"tf": 1}}, "df": 3}}}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Die.keys": {"tf": 1}, "icepool.Die.values": {"tf": 1}, "icepool.Die.items": {"tf": 1}, "icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.split": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.explode_to_pool": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.Population.keys": {"tf": 1}, "icepool.Population.values": {"tf": 1}, "icepool.Population.items": {"tf": 1}, "icepool.Population.outcomes": {"tf": 1}, "icepool.Population.quantities": {"tf": 1}, "icepool.vectorize": {"tf": 1.4142135623730951}, "icepool.Vector.unary_operator": {"tf": 1}, "icepool.Vector.abs": {"tf": 1}, "icepool.Vector.round": {"tf": 1}, "icepool.Vector.trunc": {"tf": 1}, "icepool.Vector.floor": {"tf": 1}, "icepool.Vector.ceil": {"tf": 1}, "icepool.Vector.binary_operator": {"tf": 1}, "icepool.Vector.reverse_binary_operator": {"tf": 1}, "icepool.Vector.append": {"tf": 1}, "icepool.Vector.concatenate": {"tf": 1}, "icepool.Symbols.additive_union": {"tf": 1}, "icepool.Symbols.difference": {"tf": 1}, "icepool.Symbols.intersection": {"tf": 1}, "icepool.Symbols.union": {"tf": 1}, "icepool.Symbols.symmetric_difference": {"tf": 1}, "icepool.Symbols.multiply_counts": {"tf": 1}, "icepool.Symbols.divide_counts": {"tf": 1}, "icepool.Symbols.modulo_counts": {"tf": 1}, "icepool.CountsKeysView.__init__": {"tf": 1}, "icepool.CountsValuesView.__init__": {"tf": 1}, "icepool.CountsItemsView.__init__": {"tf": 1}, "icepool.Pool.unique_dice": {"tf": 1}, "icepool.standard_pool": {"tf": 1}, "icepool.Alignment.__init__": {"tf": 1}, "icepool.MultisetExpression.keep_outcomes": {"tf": 1}, "icepool.MultisetExpression.drop_outcomes": {"tf": 1}, "icepool.MultisetEvaluator.alignment": {"tf": 1}, "icepool.MultisetEvaluator.range_alignment": {"tf": 1}, "icepool.Deck.keys": {"tf": 1}, "icepool.Deck.values": {"tf": 1}, "icepool.Deck.items": {"tf": 1}, "icepool.Deal.outcomes": {"tf": 1}, "icepool.MultiDeal.outcomes": {"tf": 1}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 1}, "icepool.evaluator.HighestOutcomeAndCountEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.alignment": {"tf": 1}}, "df": 56}}}}}}}}, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die.is_in": {"tf": 1}, "icepool.Die.count": {"tf": 1}}, "df": 2}}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {"icepool.MultisetExpression.additive_union": {"tf": 2}, "icepool.MultisetExpression.difference": {"tf": 2}, "icepool.MultisetExpression.intersection": {"tf": 2}, "icepool.MultisetExpression.union": {"tf": 2}, "icepool.MultisetExpression.symmetric_difference": {"tf": 2}, "icepool.MultisetExpression.keep_outcomes": {"tf": 2}, "icepool.MultisetExpression.drop_outcomes": {"tf": 2}, "icepool.MultisetExpression.map_counts": {"tf": 2}, "icepool.MultisetExpression.multiply_counts": {"tf": 1}, "icepool.MultisetExpression.divide_counts": {"tf": 1}, "icepool.MultisetExpression.modulo_counts": {"tf": 1}, "icepool.MultisetExpression.keep_counts": {"tf": 1}, "icepool.MultisetExpression.unique": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 2}, "icepool.MultisetExpression.lowest": {"tf": 1}, "icepool.MultisetExpression.highest": {"tf": 1}, "icepool.MultisetExpression.sort_match": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.maximum_match": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.evaluate": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.expand": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.sum": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.count": {"tf": 1}, "icepool.MultisetExpression.any": {"tf": 1}, "icepool.MultisetExpression.highest_outcome_and_count": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.all_counts": {"tf": 1}, "icepool.MultisetExpression.largest_count": {"tf": 1}, "icepool.MultisetExpression.largest_count_and_outcome": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.count_subset": {"tf": 2}, "icepool.MultisetExpression.argsort": {"tf": 2.449489742783178}, "icepool.MultisetExpression.issubset": {"tf": 2}, "icepool.MultisetExpression.issuperset": {"tf": 2}, "icepool.MultisetExpression.isdisjoint": {"tf": 2}, "icepool.MultisetExpression.compair_lt": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.compair_le": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.compair_gt": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.compair_ge": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.compair_eq": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.compair_ne": {"tf": 1.7320508075688772}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.MultisetEvaluator.alignment": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.evaluate": {"tf": 2}, "icepool.MultisetEvaluator.sample": {"tf": 1.7320508075688772}, "icepool.multiset_function": {"tf": 2}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.__init__": {"tf": 1.4142135623730951}, "icepool.evaluator.ExpressionEvaluator.alignment": {"tf": 1}}, "df": 46}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Population.nearest": {"tf": 1}, "icepool.Population.quantity": {"tf": 1}, "icepool.Population.quantities": {"tf": 1}, "icepool.Population.probability": {"tf": 1}, "icepool.Population.probabilities": {"tf": 1}, "icepool.MultisetExpression.keep_counts": {"tf": 1}, "icepool.MultisetExpression.sort_match": {"tf": 1}, "icepool.MultisetExpression.maximum_match": {"tf": 1}}, "df": 8}}}}, "e": {"docs": {"icepool.Vector.binary_operator": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.unary_operator": {"tf": 1}, "icepool.Die.binary_operator": {"tf": 1}, "icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.split": {"tf": 1}, "icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.Die.explode_to_pool": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.Vector.unary_operator": {"tf": 1}, "icepool.Vector.binary_operator": {"tf": 1}, "icepool.Vector.reverse_binary_operator": {"tf": 1}, "icepool.reduce": {"tf": 1}, "icepool.accumulate": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.map_function": {"tf": 2}, "icepool.map_and_time": {"tf": 1}, "icepool.map_to_pool": {"tf": 1}, "icepool.MultisetExpression.keep_outcomes": {"tf": 1}, "icepool.MultisetExpression.drop_outcomes": {"tf": 1}, "icepool.MultisetExpression.map_counts": {"tf": 1}, "icepool.MultisetExpression.sum": {"tf": 1}, "icepool.MultisetExpression.all_straights_reduce_counts": {"tf": 1}, "icepool.Deck.map": {"tf": 1}, "icepool.multiset_function": {"tf": 1}, "icepool.evaluator.SumEvaluator.__init__": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.__init__": {"tf": 1}, "icepool.function.reduce": {"tf": 1}, "icepool.function.accumulate": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.function.map_function": {"tf": 2}, "icepool.function.map_and_time": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1}, "icepool.typing.count_positional_parameters": {"tf": 1}}, "df": 36}}}}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"icepool.from_cumulative": {"tf": 1}, "icepool.function.from_cumulative": {"tf": 1}}, "df": 2}}}}}}}}}, "l": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Pool.clear_cache": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.map": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.if_else": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.map_function": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.function.map_function": {"tf": 1}}, "df": 8}}, "x": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {"icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.map_and_time": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}}, "df": 5}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Die.map_to_pool": {"tf": 1.4142135623730951}, "icepool.map": {"tf": 1.4142135623730951}, "icepool.map_to_pool": {"tf": 1.4142135623730951}, "icepool.Pool.additive_union": {"tf": 2}, "icepool.MultisetExpression.additive_union": {"tf": 2}, "icepool.MultisetExpression.difference": {"tf": 2}, "icepool.MultisetExpression.intersection": {"tf": 2}, "icepool.MultisetExpression.union": {"tf": 2}, "icepool.MultisetExpression.symmetric_difference": {"tf": 2}, "icepool.MultisetExpression.keep_outcomes": {"tf": 2}, "icepool.MultisetExpression.drop_outcomes": {"tf": 2}, "icepool.MultisetExpression.map_counts": {"tf": 2}, "icepool.MultisetExpression.multiply_counts": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.divide_counts": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.modulo_counts": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.keep_counts": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.unique": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.keep": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.lowest": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.highest": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.sort_match": {"tf": 2}, "icepool.MultisetExpression.maximum_match": {"tf": 2}, "icepool.MultisetExpression.evaluate": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.count_subset": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.largest_straight": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.largest_straight_and_outcome": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.all_straights": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.all_straights_reduce_counts": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.argsort": {"tf": 2}, "icepool.MultisetExpression.issubset": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.issuperset": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.isdisjoint": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.compair_lt": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.compair_le": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.compair_gt": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.compair_ge": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.compair_eq": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.compair_ne": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.evaluate": {"tf": 1.4142135623730951}, "icepool.evaluator.ExpressionEvaluator.__init__": {"tf": 1.4142135623730951}, "icepool.function.map": {"tf": 1.4142135623730951}, "icepool.function.map_to_pool": {"tf": 1.4142135623730951}}, "df": 42, "s": {"docs": {"icepool.MultisetExpression.evaluate": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.__init__": {"tf": 1}}, "df": 2}}}}}}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die.keep": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1}}, "df": 2}}}}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die.middle": {"tf": 1.4142135623730951}, "icepool.middle": {"tf": 1.4142135623730951}}, "df": 2}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Symbols.count_subset": {"tf": 1}, "icepool.MultisetExpression.count_subset": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.__init__": {"tf": 1}}, "df": 3}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.MultisetExpression.keep": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.evaluate": {"tf": 2.23606797749979}, "icepool.MultisetExpression.expand": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.sum": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.count": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.any": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.highest_outcome_and_count": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.all_counts": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.largest_count": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.largest_count_and_outcome": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.count_subset": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.largest_straight": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.largest_straight_and_outcome": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.all_straights": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.all_straights_reduce_counts": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.issubset": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.issuperset": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.isdisjoint": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.evaluate": {"tf": 1.4142135623730951}, "icepool.multiset_function": {"tf": 2.449489742783178}, "icepool.evaluator.JointEvaluator.__init__": {"tf": 1.4142135623730951}, "icepool.evaluator.ExpressionEvaluator.__init__": {"tf": 1.7320508075688772}}, "df": 22}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Die.map_to_pool": {"tf": 1.4142135623730951}, "icepool.map_to_pool": {"tf": 2}, "icepool.function.map_to_pool": {"tf": 2}}, "df": 3, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.map": {"tf": 1.7320508075688772}, "icepool.Die.map_and_time": {"tf": 1.4142135623730951}, "icepool.Die.if_else": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.reduce": {"tf": 1}, "icepool.map": {"tf": 1.7320508075688772}, "icepool.map_function": {"tf": 1.4142135623730951}, "icepool.map_and_time": {"tf": 1.4142135623730951}, "icepool.map_to_pool": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.final_outcome": {"tf": 1}, "icepool.Deck.map": {"tf": 1.4142135623730951}, "icepool.evaluator.JointEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1}, "icepool.function.reduce": {"tf": 1}, "icepool.function.map": {"tf": 1.7320508075688772}, "icepool.function.map_function": {"tf": 1.4142135623730951}, "icepool.function.map_and_time": {"tf": 1.4142135623730951}, "icepool.function.map_to_pool": {"tf": 1.4142135623730951}}, "df": 19}}}}, "s": {"docs": {"icepool.Die.reroll_to_pool": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.map_and_time": {"tf": 1}, "icepool.map_to_pool": {"tf": 1}, "icepool.Deck.map": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1}}, "df": 10}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.map_function": {"tf": 1}, "icepool.map_and_time": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.function.map_function": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}}, "df": 8}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"icepool.from_cumulative": {"tf": 1}, "icepool.function.from_cumulative": {"tf": 1}}, "df": 2}}}}}, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.MultisetExpression.all_straights_reduce_counts": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.__init__": {"tf": 1}}, "df": 2}}}}}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"icepool.evaluator.ConstantEvaluator.__init__": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die.count": {"tf": 1}, "icepool.Die.pool": {"tf": 1}, "icepool.Die.keep": {"tf": 1}, "icepool.Die.lowest": {"tf": 1}, "icepool.Die.highest": {"tf": 1}, "icepool.Die.middle": {"tf": 1}, "icepool.Die.explode_to_pool": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}}, "df": 8}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"icepool.Die.reroll_to_pool": {"tf": 1.4142135623730951}}, "df": 1}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Population.mean": {"tf": 1}, "icepool.Population.variance": {"tf": 1}, "icepool.Population.standard_deviation": {"tf": 1}, "icepool.Population.sd": {"tf": 1}, "icepool.Population.standardized_moment": {"tf": 1}, "icepool.Population.skewness": {"tf": 1}, "icepool.Population.excess_kurtosis": {"tf": 1}, "icepool.Population.covariance": {"tf": 1}, "icepool.Population.correlation": {"tf": 1}}, "df": 9}}}}}}}, "v": {"docs": {"icepool.from_rv": {"tf": 1}, "icepool.function.from_rv": {"tf": 1}}, "df": 2}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.any_all": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.next_state": {"tf": 1}, "icepool.evaluator.IsSubsetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsProperSubsetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsSupersetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsProperSupersetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsEqualSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsNotEqualSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsDisjointSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.CompairEvalautor.__init__": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}}, "df": 12}}}}}, "k": {"docs": {"icepool.Population.standardized_moment": {"tf": 1}}, "df": 1, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die.unary_operator": {"tf": 1}, "icepool.Die.binary_operator": {"tf": 1}, "icepool.Population.format": {"tf": 1}, "icepool.Vector.unary_operator": {"tf": 1}, "icepool.Vector.binary_operator": {"tf": 1}, "icepool.Vector.reverse_binary_operator": {"tf": 1}, "icepool.from_rv": {"tf": 1}, "icepool.function.from_rv": {"tf": 1}}, "df": 8}}}}}, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {"icepool.Die.lowest": {"tf": 1}, "icepool.Die.highest": {"tf": 1}, "icepool.Die.middle": {"tf": 1}, "icepool.lowest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.middle": {"tf": 1}, "icepool.MultisetExpression.lowest": {"tf": 1}, "icepool.MultisetExpression.highest": {"tf": 1}, "icepool.MultisetExpression.maximum_match": {"tf": 1}}, "df": 9}}}}, "w": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.split": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.explode_to_pool": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}}, "df": 6}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die.pool": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 1.4142135623730951}, "icepool.Die.explode_to_pool": {"tf": 1.4142135623730951}, "icepool.Die.reroll_to_pool": {"tf": 1.4142135623730951}, "icepool.map_to_pool": {"tf": 2.449489742783178}, "icepool.standard_pool": {"tf": 1}, "icepool.MultisetEvaluator.prefix_generators": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.sample": {"tf": 1.4142135623730951}, "icepool.Deck.deal": {"tf": 1.4142135623730951}, "icepool.evaluator.JointEvaluator.prefix_generators": {"tf": 1.4142135623730951}, "icepool.evaluator.ExpressionEvaluator.prefix_generators": {"tf": 1.4142135623730951}, "icepool.function.map_to_pool": {"tf": 2.449489742783178}}, "df": 12, "s": {"docs": {"icepool.MultisetEvaluator.sample": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.alignment": {"tf": 1}}, "df": 2}}}}}}}}}, "t": {"docs": {"icepool.Die.map_to_pool": {"tf": 1}, "icepool.Population.nearest": {"tf": 1.4142135623730951}, "icepool.Population.quantity": {"tf": 1.4142135623730951}, "icepool.Population.quantities": {"tf": 1.4142135623730951}, "icepool.Population.probability": {"tf": 1.4142135623730951}, "icepool.Population.probabilities": {"tf": 1.4142135623730951}, "icepool.map_to_pool": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.keep_counts": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.sort_match": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.maximum_match": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.expand": {"tf": 1}, "icepool.MultisetExpression.all_straights_reduce_counts": {"tf": 1}, "icepool.MultisetExpression.argsort": {"tf": 1}, "icepool.MultisetExpression.compair_lt": {"tf": 1}, "icepool.MultisetExpression.compair_le": {"tf": 1}, "icepool.MultisetExpression.compair_gt": {"tf": 1}, "icepool.MultisetExpression.compair_ge": {"tf": 1}, "icepool.MultisetExpression.compair_eq": {"tf": 1}, "icepool.MultisetExpression.compair_ne": {"tf": 1}, "icepool.evaluator.ExpandEvaluator.__init__": {"tf": 1}, "icepool.evaluator.ExpandEvaluator.order": {"tf": 1}, "icepool.evaluator.SumEvaluator.order": {"tf": 1}, "icepool.evaluator.CountEvaluator.order": {"tf": 1}, "icepool.evaluator.AnyEvaluator.order": {"tf": 1}, "icepool.evaluator.HighestOutcomeAndCountEvaluator.order": {"tf": 1}, "icepool.evaluator.LargestCountEvaluator.order": {"tf": 1}, "icepool.evaluator.LargestCountAndOutcomeEvaluator.order": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.order": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.order": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.order": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.order": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.__init__": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.order": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.__init__": {"tf": 1}, "icepool.evaluator.CompairEvalautor.__init__": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1.4142135623730951}}, "df": 36}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.evaluator.CompairEvalautor.__init__": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Die.middle": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.Population.nearest": {"tf": 1}, "icepool.Population.quantity": {"tf": 1}, "icepool.Population.quantities": {"tf": 1}, "icepool.Population.probability": {"tf": 1}, "icepool.Population.probabilities": {"tf": 1}, "icepool.middle": {"tf": 1}, "icepool.MultisetExpression.keep_counts": {"tf": 1}, "icepool.MultisetExpression.sort_match": {"tf": 1}, "icepool.MultisetExpression.maximum_match": {"tf": 1.4142135623730951}, "icepool.evaluator.ExpandEvaluator.order": {"tf": 1}, "icepool.evaluator.SumEvaluator.order": {"tf": 1}, "icepool.evaluator.CountEvaluator.order": {"tf": 1}, "icepool.evaluator.AnyEvaluator.order": {"tf": 1}, "icepool.evaluator.HighestOutcomeAndCountEvaluator.order": {"tf": 1}, "icepool.evaluator.LargestCountEvaluator.order": {"tf": 1}, "icepool.evaluator.LargestCountAndOutcomeEvaluator.order": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.order": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.order": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.order": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.order": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.order": {"tf": 1}}, "df": 23}}}}}, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"icepool.MultisetExpression.argsort": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.__init__": {"tf": 1}}, "df": 2}}}}, "o": {"docs": {}, "df": 0, "w": {"docs": {"icepool.Die.middle": {"tf": 1}, "icepool.middle": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.reroll_to_pool": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {"icepool.Die.map_to_pool": {"tf": 1}, "icepool.Population.nearest": {"tf": 1.4142135623730951}, "icepool.Population.quantity": {"tf": 1.4142135623730951}, "icepool.Population.quantities": {"tf": 1.4142135623730951}, "icepool.Population.probability": {"tf": 1.4142135623730951}, "icepool.Population.probabilities": {"tf": 1.4142135623730951}, "icepool.map_to_pool": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.keep_counts": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.sort_match": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.maximum_match": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.expand": {"tf": 1}, "icepool.MultisetExpression.all_straights_reduce_counts": {"tf": 1}, "icepool.MultisetExpression.argsort": {"tf": 1}, "icepool.MultisetExpression.compair_lt": {"tf": 1}, "icepool.MultisetExpression.compair_le": {"tf": 1}, "icepool.MultisetExpression.compair_gt": {"tf": 1}, "icepool.MultisetExpression.compair_ge": {"tf": 1}, "icepool.MultisetExpression.compair_eq": {"tf": 1}, "icepool.MultisetExpression.compair_ne": {"tf": 1}, "icepool.evaluator.ExpandEvaluator.__init__": {"tf": 1}, "icepool.evaluator.ExpandEvaluator.order": {"tf": 1}, "icepool.evaluator.SumEvaluator.order": {"tf": 1}, "icepool.evaluator.CountEvaluator.order": {"tf": 1}, "icepool.evaluator.AnyEvaluator.order": {"tf": 1}, "icepool.evaluator.HighestOutcomeAndCountEvaluator.order": {"tf": 1}, "icepool.evaluator.LargestCountEvaluator.order": {"tf": 1}, "icepool.evaluator.LargestCountAndOutcomeEvaluator.order": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.order": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.order": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.order": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.order": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.__init__": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.order": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.__init__": {"tf": 1}, "icepool.evaluator.CompairEvalautor.__init__": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1.4142135623730951}}, "df": 36}, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "t": {"docs": {"icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.any_all": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.next_state": {"tf": 1}, "icepool.evaluator.IsSubsetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsProperSubsetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsSupersetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsProperSupersetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsEqualSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsNotEqualSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsDisjointSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.CompairEvalautor.__init__": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}}, "df": 12}}}}, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {"icepool.Die.middle": {"tf": 1}, "icepool.middle": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.reroll_to_pool": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Population.quantity": {"tf": 1.4142135623730951}, "icepool.Population.probability": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.final_outcome": {"tf": 1}}, "df": 4}}}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Deck.deal": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1}, "icepool.MultiDeal.__init__": {"tf": 1}}, "df": 3}}}}, "j": {"docs": {"icepool.Population.covariance": {"tf": 1}, "icepool.Population.correlation": {"tf": 1}}, "df": 2}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.vectorize": {"tf": 2}, "icepool.Vector.unary_operator": {"tf": 1.4142135623730951}, "icepool.Vector.abs": {"tf": 1.4142135623730951}, "icepool.Vector.round": {"tf": 1.4142135623730951}, "icepool.Vector.trunc": {"tf": 1.4142135623730951}, "icepool.Vector.floor": {"tf": 1.4142135623730951}, "icepool.Vector.ceil": {"tf": 1.4142135623730951}, "icepool.Vector.binary_operator": {"tf": 1.4142135623730951}, "icepool.Vector.reverse_binary_operator": {"tf": 1.4142135623730951}, "icepool.Vector.append": {"tf": 1.4142135623730951}, "icepool.Vector.concatenate": {"tf": 1.4142135623730951}}, "df": 11}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"icepool.evaluator.ExpressionEvaluator.__init__": {"tf": 1}}, "df": 1}}}}}, "q": {"docs": {}, "df": 0, "s": {"docs": {"icepool.MultiDeal.hand_sizes": {"tf": 1}}, "df": 1}}}}, "bases": {"root": {"docs": {"icepool.Alignment": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator": {"tf": 1.4142135623730951}}, "df": 5, "t": {"docs": {"icepool.Outcome": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 1}, "icepool.evaluator.JointEvaluator": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator": {"tf": 1}, "icepool.typing.Outcome": {"tf": 1}}, "df": 6, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Outcome": {"tf": 1.4142135623730951}, "icepool.Population": {"tf": 1.4142135623730951}, "icepool.Vector": {"tf": 1.4142135623730951}, "icepool.Symbols": {"tf": 1}, "icepool.CountsKeysView": {"tf": 1.4142135623730951}, "icepool.CountsValuesView": {"tf": 1.4142135623730951}, "icepool.CountsItemsView": {"tf": 1.4142135623730951}, "icepool.MultisetGenerator": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 1}, "icepool.evaluator.SumEvaluator": {"tf": 1}, "icepool.evaluator.LargestCountAndOutcomeEvaluator": {"tf": 1}, "icepool.evaluator.KeepEvaluator": {"tf": 1}, "icepool.typing.Outcome": {"tf": 1.4142135623730951}}, "df": 14}}}, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.typing.ImplicitConversionError": {"tf": 1}}, "df": 1}}}}}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Alignment": {"tf": 1}, "icepool.evaluator.JointEvaluator": {"tf": 1}, "icepool.evaluator.ExpandEvaluator": {"tf": 1}}, "df": 3, "[": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.evaluator.HighestOutcomeAndCountEvaluator": {"tf": 1}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.evaluator.AllStraightsReduceCountsEvaluator": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator": {"tf": 1}}, "df": 2}}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.evaluator.LargestCountAndOutcomeEvaluator": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator": {"tf": 1}}, "df": 4}}}}}}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Outcome": {"tf": 1}, "icepool.typing.Outcome": {"tf": 1}}, "df": 2}}}}}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Outcome": {"tf": 1}, "icepool.typing.Outcome": {"tf": 1}}, "df": 2}}}}}}}, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Die": {"tf": 1}, "icepool.Deck": {"tf": 1}}, "df": 2, "[": {"docs": {}, "df": 0, "+": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die": {"tf": 1}, "icepool.Deck": {"tf": 1}}, "df": 2}}}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {"icepool.Die": {"tf": 1}, "icepool.Population": {"tf": 1}, "icepool.Vector": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 1}, "icepool.Deck": {"tf": 1}, "icepool.evaluator.ConstantEvaluator": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator": {"tf": 1}}, "df": 7, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {"icepool.Outcome": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 1}, "icepool.evaluator.JointEvaluator": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator": {"tf": 1}, "icepool.typing.Outcome": {"tf": 1}}, "df": 6}}}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Die": {"tf": 1}, "icepool.Vector": {"tf": 1}, "icepool.Pool": {"tf": 1}, "icepool.MultisetGenerator": {"tf": 1}, "icepool.Alignment": {"tf": 1}, "icepool.Deck": {"tf": 1}, "icepool.Deal": {"tf": 1}, "icepool.MultiDeal": {"tf": 1}, "icepool.evaluator.JointEvaluator": {"tf": 1}, "icepool.evaluator.ExpandEvaluator": {"tf": 1}, "icepool.evaluator.SumEvaluator": {"tf": 1}, "icepool.evaluator.CountEvaluator": {"tf": 1}, "icepool.evaluator.AnyEvaluator": {"tf": 1}, "icepool.evaluator.HighestOutcomeAndCountEvaluator": {"tf": 1}, "icepool.evaluator.LargestCountEvaluator": {"tf": 1}, "icepool.evaluator.LargestCountAndOutcomeEvaluator": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator": {"tf": 1}, "icepool.evaluator.IsSubsetEvaluator": {"tf": 1}, "icepool.evaluator.IsProperSubsetEvaluator": {"tf": 1}, "icepool.evaluator.IsSupersetEvaluator": {"tf": 1}, "icepool.evaluator.IsProperSupersetEvaluator": {"tf": 1}, "icepool.evaluator.IsEqualSetEvaluator": {"tf": 1}, "icepool.evaluator.IsNotEqualSetEvaluator": {"tf": 1}, "icepool.evaluator.IsDisjointSetEvaluator": {"tf": 1}, "icepool.evaluator.ConstantEvaluator": {"tf": 1}, "icepool.evaluator.KeepEvaluator": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator": {"tf": 1}, "icepool.evaluator.CompairEvalautor": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator": {"tf": 1}}, "df": 35}}}}}}, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Population": {"tf": 1}, "icepool.Symbols": {"tf": 1}, "icepool.CountsItemsView": {"tf": 1.4142135623730951}, "icepool.evaluator.CountEvaluator": {"tf": 1}, "icepool.evaluator.HighestOutcomeAndCountEvaluator": {"tf": 1}, "icepool.evaluator.LargestCountEvaluator": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator": {"tf": 1}, "icepool.evaluator.CompairEvalautor": {"tf": 1}}, "df": 11, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {"icepool.Order": {"tf": 1}, "icepool.typing.Order": {"tf": 1}}, "df": 2}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "~": {"docs": {}, "df": 0, "t": {"docs": {"icepool.CountsItemsView": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die": {"tf": 1}, "icepool.Deck": {"tf": 1}}, "df": 2}}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"icepool.evaluator.AnyEvaluator": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator": {"tf": 1}, "icepool.evaluator.IsSubsetEvaluator": {"tf": 1}, "icepool.evaluator.IsProperSubsetEvaluator": {"tf": 1}, "icepool.evaluator.IsSupersetEvaluator": {"tf": 1}, "icepool.evaluator.IsProperSupersetEvaluator": {"tf": 1}, "icepool.evaluator.IsEqualSetEvaluator": {"tf": 1}, "icepool.evaluator.IsNotEqualSetEvaluator": {"tf": 1}, "icepool.evaluator.IsDisjointSetEvaluator": {"tf": 1}}, "df": 9}}}, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"icepool.typing.ImplicitConversionError": {"tf": 1}}, "df": 1}}}}}}}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "c": {"docs": {"icepool.Population": {"tf": 1.4142135623730951}, "icepool.MultisetExpression": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator": {"tf": 1.4142135623730951}}, "df": 3}}, "n": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Population": {"tf": 1}, "icepool.evaluator.ExpandEvaluator": {"tf": 1}, "icepool.evaluator.SumEvaluator": {"tf": 1.4142135623730951}, "icepool.evaluator.CountEvaluator": {"tf": 1}, "icepool.evaluator.AnyEvaluator": {"tf": 1}, "icepool.evaluator.HighestOutcomeAndCountEvaluator": {"tf": 1.4142135623730951}, "icepool.evaluator.LargestCountEvaluator": {"tf": 1}, "icepool.evaluator.LargestCountAndOutcomeEvaluator": {"tf": 1.4142135623730951}, "icepool.evaluator.CountSubsetEvaluator": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator": {"tf": 1}, "icepool.evaluator.IsSubsetEvaluator": {"tf": 1}, "icepool.evaluator.IsProperSubsetEvaluator": {"tf": 1}, "icepool.evaluator.IsSupersetEvaluator": {"tf": 1}, "icepool.evaluator.IsProperSupersetEvaluator": {"tf": 1}, "icepool.evaluator.IsEqualSetEvaluator": {"tf": 1}, "icepool.evaluator.IsNotEqualSetEvaluator": {"tf": 1}, "icepool.evaluator.IsDisjointSetEvaluator": {"tf": 1}, "icepool.evaluator.ConstantEvaluator": {"tf": 1}, "icepool.evaluator.KeepEvaluator": {"tf": 1.4142135623730951}, "icepool.evaluator.ArgsortEvaluator": {"tf": 1}, "icepool.evaluator.CompairEvalautor": {"tf": 1}}, "df": 22}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"icepool.MultisetExpression": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 1}}, "df": 2, "[": {"docs": {}, "df": 0, "+": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Population": {"tf": 1}}, "df": 1}}, "~": {"docs": {}, "df": 0, "t": {"docs": {"icepool.MultisetGenerator": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Pool": {"tf": 1}, "icepool.Alignment": {"tf": 1.4142135623730951}, "icepool.Deal": {"tf": 1}, "icepool.MultiDeal": {"tf": 1.4142135623730951}}, "df": 4}}}}}}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Population": {"tf": 1}}, "df": 1}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Symbols": {"tf": 1}}, "df": 1}}}}}}}}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"icepool.MultisetGenerator": {"tf": 1}, "icepool.Alignment": {"tf": 1}, "icepool.MultiDeal": {"tf": 1}, "icepool.evaluator.JointEvaluator": {"tf": 1}, "icepool.evaluator.ExpandEvaluator": {"tf": 1}, "icepool.evaluator.SumEvaluator": {"tf": 1}, "icepool.evaluator.CountEvaluator": {"tf": 1}, "icepool.evaluator.AnyEvaluator": {"tf": 1}, "icepool.evaluator.HighestOutcomeAndCountEvaluator": {"tf": 1}, "icepool.evaluator.LargestCountEvaluator": {"tf": 1}, "icepool.evaluator.LargestCountAndOutcomeEvaluator": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator": {"tf": 1}, "icepool.evaluator.IsSubsetEvaluator": {"tf": 1}, "icepool.evaluator.IsProperSubsetEvaluator": {"tf": 1}, "icepool.evaluator.IsSupersetEvaluator": {"tf": 1}, "icepool.evaluator.IsProperSupersetEvaluator": {"tf": 1}, "icepool.evaluator.IsEqualSetEvaluator": {"tf": 1}, "icepool.evaluator.IsNotEqualSetEvaluator": {"tf": 1}, "icepool.evaluator.IsDisjointSetEvaluator": {"tf": 1}, "icepool.evaluator.ConstantEvaluator": {"tf": 1}, "icepool.evaluator.KeepEvaluator": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator": {"tf": 1}, "icepool.evaluator.CompairEvalautor": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator": {"tf": 1}}, "df": 30, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "~": {"docs": {}, "df": 0, "t": {"docs": {"icepool.MultisetGenerator": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.evaluator.JointEvaluator": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator": {"tf": 1}}, "df": 2, "[": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.evaluator.ExpandEvaluator": {"tf": 1}, "icepool.evaluator.SumEvaluator": {"tf": 1}, "icepool.evaluator.CountEvaluator": {"tf": 1}, "icepool.evaluator.AnyEvaluator": {"tf": 1}, "icepool.evaluator.HighestOutcomeAndCountEvaluator": {"tf": 1}, "icepool.evaluator.LargestCountEvaluator": {"tf": 1}, "icepool.evaluator.LargestCountAndOutcomeEvaluator": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator": {"tf": 1}, "icepool.evaluator.IsSubsetEvaluator": {"tf": 1}, "icepool.evaluator.IsProperSubsetEvaluator": {"tf": 1}, "icepool.evaluator.IsSupersetEvaluator": {"tf": 1}, "icepool.evaluator.IsProperSupersetEvaluator": {"tf": 1}, "icepool.evaluator.IsEqualSetEvaluator": {"tf": 1}, "icepool.evaluator.IsNotEqualSetEvaluator": {"tf": 1}, "icepool.evaluator.IsDisjointSetEvaluator": {"tf": 1}, "icepool.evaluator.ConstantEvaluator": {"tf": 1}, "icepool.evaluator.KeepEvaluator": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator": {"tf": 1}, "icepool.evaluator.CompairEvalautor": {"tf": 1}}, "df": 21}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.evaluator.LargestStraightEvaluator": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator": {"tf": 1}}, "df": 4}}}}}}}}}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "~": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Alignment": {"tf": 1}, "icepool.MultiDeal": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Vector": {"tf": 1}}, "df": 1}}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "+": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Vector": {"tf": 1}}, "df": 1}}, "~": {"docs": {}, "df": 0, "t": {"docs": {"icepool.CountsKeysView": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.CountsValuesView": {"tf": 1}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "~": {"docs": {}, "df": 0, "t": {"docs": {"icepool.CountsItemsView": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "~": {"docs": {}, "df": 0, "t": {"docs": {"icepool.CountsKeysView": {"tf": 1}}, "df": 1}}}}}}}}}, "e": {"docs": {}, "df": 0, "p": {"docs": {"icepool.Pool": {"tf": 1}, "icepool.Deal": {"tf": 1}}, "df": 2, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "~": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Pool": {"tf": 1}, "icepool.Deal": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.CountsValuesView": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {"icepool.RerollType": {"tf": 1.4142135623730951}, "icepool.Order": {"tf": 1}, "icepool.typing.Order": {"tf": 1}, "icepool.typing.RerollType": {"tf": 1.4142135623730951}}, "df": 4}}}, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.MultisetGenerator": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.evaluator.JointEvaluator": {"tf": 1.4142135623730951}, "icepool.evaluator.ExpandEvaluator": {"tf": 1.4142135623730951}, "icepool.evaluator.SumEvaluator": {"tf": 1.4142135623730951}, "icepool.evaluator.CountEvaluator": {"tf": 1.4142135623730951}, "icepool.evaluator.AnyEvaluator": {"tf": 1.4142135623730951}, "icepool.evaluator.HighestOutcomeAndCountEvaluator": {"tf": 1.4142135623730951}, "icepool.evaluator.LargestCountEvaluator": {"tf": 1.4142135623730951}, "icepool.evaluator.LargestCountAndOutcomeEvaluator": {"tf": 1.4142135623730951}, "icepool.evaluator.CountSubsetEvaluator": {"tf": 1.4142135623730951}, "icepool.evaluator.AllCountsEvaluator": {"tf": 1.4142135623730951}, "icepool.evaluator.LargestStraightEvaluator": {"tf": 1.4142135623730951}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator": {"tf": 1.4142135623730951}, "icepool.evaluator.AllStraightsEvaluator": {"tf": 1.4142135623730951}, "icepool.evaluator.AllStraightsReduceCountsEvaluator": {"tf": 1.4142135623730951}, "icepool.evaluator.ComparisonEvaluator": {"tf": 1.4142135623730951}, "icepool.evaluator.IsSubsetEvaluator": {"tf": 1.4142135623730951}, "icepool.evaluator.IsProperSubsetEvaluator": {"tf": 1.4142135623730951}, "icepool.evaluator.IsSupersetEvaluator": {"tf": 1.4142135623730951}, "icepool.evaluator.IsProperSupersetEvaluator": {"tf": 1.4142135623730951}, "icepool.evaluator.IsEqualSetEvaluator": {"tf": 1.4142135623730951}, "icepool.evaluator.IsNotEqualSetEvaluator": {"tf": 1.4142135623730951}, "icepool.evaluator.IsDisjointSetEvaluator": {"tf": 1.4142135623730951}, "icepool.evaluator.ConstantEvaluator": {"tf": 1.4142135623730951}, "icepool.evaluator.KeepEvaluator": {"tf": 1.4142135623730951}, "icepool.evaluator.ArgsortEvaluator": {"tf": 1.4142135623730951}, "icepool.evaluator.CompairEvalautor": {"tf": 1.4142135623730951}, "icepool.evaluator.ExpressionEvaluator": {"tf": 1.4142135623730951}}, "df": 27}}}}}}}}}, "q": {"docs": {}, "df": 0, "s": {"docs": {"icepool.MultisetGenerator": {"tf": 1}, "icepool.MultiDeal": {"tf": 1}}, "df": 2}}, "u": {"docs": {"icepool.MultisetEvaluator": {"tf": 1}, "icepool.evaluator.ConstantEvaluator": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator": {"tf": 1}}, "df": 3}}}, "doc": {"root": {"0": {"docs": {"icepool.z": {"tf": 1}, "icepool.coin": {"tf": 1}, "icepool.Die.mean_time_to_sum": {"tf": 1}, "icepool.Die.keep": {"tf": 1.7320508075688772}, "icepool.Die.zero": {"tf": 1}, "icepool.Die.zero_outcome": {"tf": 1}, "icepool.Die.cmp": {"tf": 1}, "icepool.Die.sign": {"tf": 2.449489742783178}, "icepool.Population.entropy": {"tf": 1}, "icepool.Population.format": {"tf": 1.4142135623730951}, "icepool.tupleize": {"tf": 2}, "icepool.vectorize": {"tf": 2}, "icepool.Again": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.map_to_pool": {"tf": 1}, "icepool.MultisetExpression": {"tf": 2}, "icepool.MultisetExpression.symmetric_difference": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.highest_outcome_and_count": {"tf": 1}, "icepool.MultisetExpression.argsort": {"tf": 1.7320508075688772}, "icepool.MultisetEvaluator.order": {"tf": 1}, "icepool.evaluator.ExpandEvaluator": {"tf": 1}, "icepool.evaluator.HighestOutcomeAndCountEvaluator": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.order": {"tf": 1}, "icepool.evaluator.CompairEvalautor.order": {"tf": 1}, "icepool.function.z": {"tf": 1}, "icepool.function.coin": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1}}, "df": 28}, "1": {"0": {"0": {"docs": {"icepool.Population.format": {"tf": 1}}, "df": 1}, "docs": {"icepool.one_hot": {"tf": 1}, "icepool.MultisetExpression.argsort": {"tf": 1}, "icepool.function.one_hot": {"tf": 1}}, "df": 3, "d": {"6": {"docs": {"icepool.one_hot": {"tf": 1}, "icepool.function.one_hot": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0}, "*": {"docs": {}, "df": 0, "*": {"3": {"0": {"docs": {"icepool.Population.format": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}}, "docs": {"icepool": {"tf": 1}, "icepool.d": {"tf": 1}, "icepool.z": {"tf": 1.4142135623730951}, "icepool.Die.__init__": {"tf": 1.7320508075688772}, "icepool.Die.pool": {"tf": 1.4142135623730951}, "icepool.Die.keep": {"tf": 4}, "icepool.Die.lowest": {"tf": 1}, "icepool.Die.highest": {"tf": 1}, "icepool.Die.middle": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.Die.cmp": {"tf": 1.4142135623730951}, "icepool.Die.sign": {"tf": 1.4142135623730951}, "icepool.Population.format": {"tf": 1}, "icepool.tupleize": {"tf": 2.449489742783178}, "icepool.vectorize": {"tf": 2.449489742783178}, "icepool.Symbols": {"tf": 1}, "icepool.Again": {"tf": 1.4142135623730951}, "icepool.lowest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.middle": {"tf": 1}, "icepool.map": {"tf": 1.4142135623730951}, "icepool.map_to_pool": {"tf": 1}, "icepool.Pool.additive_union": {"tf": 2}, "icepool.MultisetExpression": {"tf": 1}, "icepool.MultisetExpression.additive_union": {"tf": 2}, "icepool.MultisetExpression.difference": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.intersection": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.union": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.symmetric_difference": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.multiply_counts": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.divide_counts": {"tf": 1}, "icepool.MultisetExpression.modulo_counts": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.keep_counts": {"tf": 1}, "icepool.MultisetExpression.unique": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.sort_match": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.maximum_match": {"tf": 2}, "icepool.MultisetExpression.argsort": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator": {"tf": 1}, "icepool.MultisetEvaluator.order": {"tf": 1.4142135623730951}, "icepool.multiset_function": {"tf": 1.4142135623730951}, "icepool.evaluator.ArgsortEvaluator.order": {"tf": 1.4142135623730951}, "icepool.evaluator.CompairEvalautor.__init__": {"tf": 1.7320508075688772}, "icepool.evaluator.CompairEvalautor.order": {"tf": 1.4142135623730951}, "icepool.function.d": {"tf": 1}, "icepool.function.z": {"tf": 1.4142135623730951}, "icepool.function.map": {"tf": 1.4142135623730951}, "icepool.function.map_to_pool": {"tf": 1}}, "df": 47, ":": {"1": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.equals": {"tf": 1}, "icepool.MultisetExpression.difference": {"tf": 1}, "icepool.MultisetExpression.intersection": {"tf": 1}}, "df": 4}, "docs": {}, "df": 0}, "s": {"docs": {"icepool.MultisetEvaluator": {"tf": 1}}, "df": 1}}, "2": {"5": {"docs": {"icepool": {"tf": 1}}, "df": 1}, "docs": {"icepool.Die.__init__": {"tf": 1.7320508075688772}, "icepool.Die.binary_operator": {"tf": 1.7320508075688772}, "icepool.Die.keep": {"tf": 1.4142135623730951}, "icepool.Population.entropy": {"tf": 1}, "icepool.tupleize": {"tf": 2}, "icepool.vectorize": {"tf": 2}, "icepool.map_function": {"tf": 1.4142135623730951}, "icepool.Pool.additive_union": {"tf": 2.449489742783178}, "icepool.MultisetExpression.additive_union": {"tf": 2.449489742783178}, "icepool.MultisetExpression.difference": {"tf": 2}, "icepool.MultisetExpression.intersection": {"tf": 2}, "icepool.MultisetExpression.union": {"tf": 2.23606797749979}, "icepool.MultisetExpression.symmetric_difference": {"tf": 2}, "icepool.MultisetExpression.multiply_counts": {"tf": 2.6457513110645907}, "icepool.MultisetExpression.divide_counts": {"tf": 2}, "icepool.MultisetExpression.modulo_counts": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.keep_counts": {"tf": 2.449489742783178}, "icepool.MultisetExpression.unique": {"tf": 2}, "icepool.MultisetExpression.sort_match": {"tf": 2.449489742783178}, "icepool.MultisetExpression.all_counts": {"tf": 1}, "icepool.MultisetExpression.compair_le": {"tf": 1}, "icepool.MultisetExpression.compair_gt": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 1}, "icepool.multiset_function": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.__init__": {"tf": 1}, "icepool.function.map_function": {"tf": 1.4142135623730951}}, "df": 26, ":": {"1": {"docs": {"icepool.Die.__init__": {"tf": 1}}, "df": 1}, "2": {"docs": {"icepool.Die.equals": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "d": {"6": {"docs": {"icepool.MultisetExpression.sort_match": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "s": {"docs": {"icepool.MultisetEvaluator": {"tf": 1}}, "df": 1}}, "3": {"9": {"docs": {"icepool.MultisetExpression.keep_counts": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.sort_match": {"tf": 2}, "icepool.MultisetExpression.maximum_match": {"tf": 2.8284271247461903}, "icepool.MultisetExpression.issuperset": {"tf": 2.449489742783178}}, "df": 4}, "docs": {"icepool.Die.__init__": {"tf": 1.7320508075688772}, "icepool.Die.keep": {"tf": 1.4142135623730951}, "icepool.Pool": {"tf": 1.4142135623730951}, "icepool.Pool.additive_union": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.additive_union": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.difference": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.intersection": {"tf": 1}, "icepool.MultisetExpression.union": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.symmetric_difference": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.multiply_counts": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.divide_counts": {"tf": 1}, "icepool.MultisetExpression.modulo_counts": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.keep_counts": {"tf": 2.449489742783178}, "icepool.MultisetExpression.unique": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.sort_match": {"tf": 2.23606797749979}, "icepool.MultisetExpression.maximum_match": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.compair_le": {"tf": 1}, "icepool.MultisetExpression.compair_gt": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 1}, "icepool.multiset_function": {"tf": 1.7320508075688772}}, "df": 20, ":": {"1": {"docs": {"icepool.Die.__init__": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "d": {"6": {"docs": {"icepool.Pool": {"tf": 1}, "icepool.MultisetExpression.sort_match": {"tf": 1}, "icepool.MultisetExpression.maximum_match": {"tf": 1}}, "df": 3}, "docs": {}, "df": 0}, "v": {"2": {"docs": {"icepool.MultisetExpression.compair_le": {"tf": 1}, "icepool.MultisetExpression.compair_gt": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0}, "s": {"docs": {"icepool.MultisetEvaluator": {"tf": 1}}, "df": 1}}, "4": {"docs": {"icepool.Die.__init__": {"tf": 1.7320508075688772}, "icepool.Pool.additive_union": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.additive_union": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.difference": {"tf": 1}, "icepool.MultisetExpression.intersection": {"tf": 1}, "icepool.MultisetExpression.union": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.symmetric_difference": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.maximum_match": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.count": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator": {"tf": 1}}, "df": 10, ":": {"1": {"docs": {"icepool.Die.__init__": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "d": {"6": {"docs": {"icepool.MultisetExpression.maximum_match": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "s": {"docs": {"icepool.MultisetEvaluator": {"tf": 1}}, "df": 1}}, "5": {"docs": {"icepool.Die.__init__": {"tf": 1.7320508075688772}, "icepool.Die.pool": {"tf": 1}, "icepool.tupleize": {"tf": 1}, "icepool.vectorize": {"tf": 1}, "icepool.MultisetExpression.sort_match": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.maximum_match": {"tf": 2}, "icepool.MultisetExpression.count": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.argsort": {"tf": 1}, "icepool.MultisetExpression.issuperset": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator": {"tf": 1}}, "df": 10, ":": {"1": {"docs": {"icepool.Die.__init__": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "d": {"6": {"docs": {"icepool.Die.pool": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "s": {"docs": {"icepool.MultisetEvaluator": {"tf": 1}}, "df": 1}}, "6": {"docs": {"icepool.d": {"tf": 1.7320508075688772}, "icepool.one_hot": {"tf": 1}, "icepool.Die.__init__": {"tf": 2.6457513110645907}, "icepool.tupleize": {"tf": 2}, "icepool.vectorize": {"tf": 2}, "icepool.Again": {"tf": 1.4142135623730951}, "icepool.map_function": {"tf": 2}, "icepool.MultisetExpression.sort_match": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.maximum_match": {"tf": 2}, "icepool.MultisetExpression.count": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator": {"tf": 1}, "icepool.function.d": {"tf": 1.7320508075688772}, "icepool.function.one_hot": {"tf": 1}, "icepool.function.map_function": {"tf": 2}}, "df": 14, ":": {"1": {"docs": {"icepool.Die.__init__": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "s": {"docs": {"icepool.MultisetEvaluator": {"tf": 1}}, "df": 1}}, "9": {"docs": {"icepool.MultisetExpression.argsort": {"tf": 1.7320508075688772}}, "df": 1}, "docs": {"icepool": {"tf": 5.656854249492381}, "icepool.d": {"tf": 6.082762530298219}, "icepool.z": {"tf": 3.1622776601683795}, "icepool.coin": {"tf": 5.916079783099616}, "icepool.stochastic_round": {"tf": 5.385164807134504}, "icepool.one_hot": {"tf": 4.69041575982343}, "icepool.Outcome": {"tf": 2.449489742783178}, "icepool.Die": {"tf": 6.557438524302}, "icepool.Die.__init__": {"tf": 14.89966442575134}, "icepool.Die.unary_operator": {"tf": 7}, "icepool.Die.binary_operator": {"tf": 11.224972160321824}, "icepool.Die.keys": {"tf": 1.7320508075688772}, "icepool.Die.values": {"tf": 1.7320508075688772}, "icepool.Die.items": {"tf": 1.7320508075688772}, "icepool.Die.simplify": {"tf": 1.7320508075688772}, "icepool.Die.reroll": {"tf": 7.280109889280518}, "icepool.Die.filter": {"tf": 7.483314773547883}, "icepool.Die.split": {"tf": 6.4031242374328485}, "icepool.Die.truncate": {"tf": 4.47213595499958}, "icepool.Die.clip": {"tf": 3.7416573867739413}, "icepool.Die.set_range": {"tf": 5.656854249492381}, "icepool.Die.set_outcomes": {"tf": 2.8284271247461903}, "icepool.Die.trim": {"tf": 1.7320508075688772}, "icepool.Die.map": {"tf": 3.7416573867739413}, "icepool.Die.map_and_time": {"tf": 3.4641016151377544}, "icepool.Die.mean_time_to_sum": {"tf": 5.830951894845301}, "icepool.Die.explode": {"tf": 7.211102550927978}, "icepool.Die.if_else": {"tf": 4.123105625617661}, "icepool.Die.is_in": {"tf": 1.7320508075688772}, "icepool.Die.count": {"tf": 1.7320508075688772}, "icepool.Die.pool": {"tf": 5.830951894845301}, "icepool.Die.keep": {"tf": 13.601470508735444}, "icepool.Die.lowest": {"tf": 8.18535277187245}, "icepool.Die.highest": {"tf": 8.06225774829855}, "icepool.Die.middle": {"tf": 7.3484692283495345}, "icepool.Die.map_to_pool": {"tf": 9.539392014169456}, "icepool.Die.explode_to_pool": {"tf": 7.937253933193772}, "icepool.Die.reroll_to_pool": {"tf": 10.44030650891055}, "icepool.Die.abs": {"tf": 1.7320508075688772}, "icepool.Die.round": {"tf": 1.7320508075688772}, "icepool.Die.stochastic_round": {"tf": 5.196152422706632}, "icepool.Die.trunc": {"tf": 1.7320508075688772}, "icepool.Die.floor": {"tf": 1.7320508075688772}, "icepool.Die.ceil": {"tf": 1.7320508075688772}, "icepool.Die.zero": {"tf": 4.69041575982343}, "icepool.Die.zero_outcome": {"tf": 3.3166247903554}, "icepool.Die.cmp": {"tf": 3.872983346207417}, "icepool.Die.sign": {"tf": 3.605551275463989}, "icepool.Die.equals": {"tf": 7.54983443527075}, "icepool.Population": {"tf": 3.872983346207417}, "icepool.Population.keys": {"tf": 1.7320508075688772}, "icepool.Population.values": {"tf": 1.7320508075688772}, "icepool.Population.items": {"tf": 1.7320508075688772}, "icepool.Population.outcomes": {"tf": 3.1622776601683795}, "icepool.Population.common_outcome_length": {"tf": 2.8284271247461903}, "icepool.Population.is_empty": {"tf": 2.23606797749979}, "icepool.Population.min_outcome": {"tf": 1.7320508075688772}, "icepool.Population.max_outcome": {"tf": 1.7320508075688772}, "icepool.Population.nearest": {"tf": 5.477225575051661}, "icepool.Population.quantity": {"tf": 4.69041575982343}, "icepool.Population.quantities": {"tf": 4.123105625617661}, "icepool.Population.denominator": {"tf": 3}, "icepool.Population.scale_quantities": {"tf": 1.7320508075688772}, "icepool.Population.has_zero_quantities": {"tf": 2.6457513110645907}, "icepool.Population.probability": {"tf": 1.7320508075688772}, "icepool.Population.probabilities": {"tf": 4.123105625617661}, "icepool.Population.mode": {"tf": 2.449489742783178}, "icepool.Population.modal_quantity": {"tf": 1.7320508075688772}, "icepool.Population.kolmogorov_smirnov": {"tf": 1.7320508075688772}, "icepool.Population.cramer_von_mises": {"tf": 1.7320508075688772}, "icepool.Population.median": {"tf": 3.1622776601683795}, "icepool.Population.median_low": {"tf": 1.7320508075688772}, "icepool.Population.median_high": {"tf": 1.7320508075688772}, "icepool.Population.quantile": {"tf": 3.605551275463989}, "icepool.Population.quantile_low": {"tf": 2.449489742783178}, "icepool.Population.quantile_high": {"tf": 2.449489742783178}, "icepool.Population.mean": {"tf": 1.7320508075688772}, "icepool.Population.variance": {"tf": 1.7320508075688772}, "icepool.Population.standard_deviation": {"tf": 1.7320508075688772}, "icepool.Population.sd": {"tf": 1.7320508075688772}, "icepool.Population.standardized_moment": {"tf": 1.7320508075688772}, "icepool.Population.skewness": {"tf": 1.7320508075688772}, "icepool.Population.excess_kurtosis": {"tf": 1.7320508075688772}, "icepool.Population.entropy": {"tf": 3.7416573867739413}, "icepool.Population.marginals": {"tf": 4.47213595499958}, "icepool.Population.covariance": {"tf": 1.7320508075688772}, "icepool.Population.correlation": {"tf": 1.7320508075688772}, "icepool.Population.to_one_hot": {"tf": 5.477225575051661}, "icepool.Population.sample": {"tf": 3.605551275463989}, "icepool.Population.format": {"tf": 9.9498743710662}, "icepool.tupleize": {"tf": 9.591663046625438}, "icepool.vectorize": {"tf": 9.16515138991168}, "icepool.Vector": {"tf": 2.449489742783178}, "icepool.Vector.unary_operator": {"tf": 3.4641016151377544}, "icepool.Vector.abs": {"tf": 1.7320508075688772}, "icepool.Vector.round": {"tf": 1.7320508075688772}, "icepool.Vector.trunc": {"tf": 1.7320508075688772}, "icepool.Vector.floor": {"tf": 1.7320508075688772}, "icepool.Vector.ceil": {"tf": 1.7320508075688772}, "icepool.Vector.binary_operator": {"tf": 7.14142842854285}, "icepool.Vector.reverse_binary_operator": {"tf": 2.449489742783178}, "icepool.Vector.append": {"tf": 1.7320508075688772}, "icepool.Vector.concatenate": {"tf": 1.7320508075688772}, "icepool.Symbols": {"tf": 18.33030277982336}, "icepool.Symbols.__init__": {"tf": 3.3166247903554}, "icepool.Symbols.additive_union": {"tf": 1.7320508075688772}, "icepool.Symbols.difference": {"tf": 1.7320508075688772}, "icepool.Symbols.intersection": {"tf": 1.7320508075688772}, "icepool.Symbols.union": {"tf": 1.7320508075688772}, "icepool.Symbols.symmetric_difference": {"tf": 1.7320508075688772}, "icepool.Symbols.multiply_counts": {"tf": 1.7320508075688772}, "icepool.Symbols.divide_counts": {"tf": 1.7320508075688772}, "icepool.Symbols.count_subset": {"tf": 1.7320508075688772}, "icepool.Symbols.modulo_counts": {"tf": 1.7320508075688772}, "icepool.Symbols.issubset": {"tf": 4.795831523312719}, "icepool.Symbols.issuperset": {"tf": 4.795831523312719}, "icepool.Symbols.isdisjoint": {"tf": 3.7416573867739413}, "icepool.Symbols.has_negative_counts": {"tf": 1.7320508075688772}, "icepool.Symbols.count": {"tf": 1.7320508075688772}, "icepool.Again": {"tf": 12.206555615733702}, "icepool.CountsKeysView": {"tf": 2.6457513110645907}, "icepool.CountsKeysView.__init__": {"tf": 1.7320508075688772}, "icepool.CountsValuesView": {"tf": 2.6457513110645907}, "icepool.CountsValuesView.__init__": {"tf": 1.7320508075688772}, "icepool.CountsItemsView": {"tf": 2.6457513110645907}, "icepool.CountsItemsView.__init__": {"tf": 1.7320508075688772}, "icepool.from_cumulative": {"tf": 6.082762530298219}, "icepool.from_rv": {"tf": 6.708203932499369}, "icepool.lowest": {"tf": 8.426149773176359}, "icepool.highest": {"tf": 8.717797887081348}, "icepool.middle": {"tf": 8.246211251235321}, "icepool.min_outcome": {"tf": 1.7320508075688772}, "icepool.max_outcome": {"tf": 1.7320508075688772}, "icepool.align": {"tf": 4.795831523312719}, "icepool.align_range": {"tf": 5}, "icepool.commonize_denominator": {"tf": 4.795831523312719}, "icepool.reduce": {"tf": 6.164414002968976}, "icepool.accumulate": {"tf": 6.4031242374328485}, "icepool.map": {"tf": 12.529964086141668}, "icepool.map_function": {"tf": 13.228756555322953}, "icepool.map_and_time": {"tf": 8.426149773176359}, "icepool.map_to_pool": {"tf": 8.94427190999916}, "icepool.Reroll": {"tf": 6.164414002968976}, "icepool.RerollType": {"tf": 1.7320508075688772}, "icepool.RerollType.Reroll": {"tf": 1.7320508075688772}, "icepool.Pool": {"tf": 3.7416573867739413}, "icepool.Pool.__init__": {"tf": 9.433981132056603}, "icepool.Pool.clear_cache": {"tf": 1.7320508075688772}, "icepool.Pool.raw_size": {"tf": 1.7320508075688772}, "icepool.Pool.denominator": {"tf": 1.7320508075688772}, "icepool.Pool.unique_dice": {"tf": 1.7320508075688772}, "icepool.Pool.outcomes": {"tf": 1.7320508075688772}, "icepool.Pool.output_arity": {"tf": 1.7320508075688772}, "icepool.Pool.min_outcome": {"tf": 1.7320508075688772}, "icepool.Pool.max_outcome": {"tf": 1.7320508075688772}, "icepool.Pool.additive_union": {"tf": 10.392304845413264}, "icepool.standard_pool": {"tf": 4}, "icepool.MultisetGenerator": {"tf": 4.898979485566356}, "icepool.MultisetGenerator.outcomes": {"tf": 1.7320508075688772}, "icepool.MultisetGenerator.output_arity": {"tf": 1.7320508075688772}, "icepool.MultisetGenerator.denominator": {"tf": 1.7320508075688772}, "icepool.MultisetGenerator.equals": {"tf": 1.7320508075688772}, "icepool.MultisetGenerator.order": {"tf": 3.872983346207417}, "icepool.MultisetGenerator.min_outcome": {"tf": 1.7320508075688772}, "icepool.MultisetGenerator.max_outcome": {"tf": 1.7320508075688772}, "icepool.MultisetGenerator.sample": {"tf": 4.123105625617661}, "icepool.Alignment": {"tf": 2.449489742783178}, "icepool.Alignment.__init__": {"tf": 1.7320508075688772}, "icepool.Alignment.outcomes": {"tf": 1.7320508075688772}, "icepool.Alignment.output_arity": {"tf": 1.7320508075688772}, "icepool.Alignment.denominator": {"tf": 1.7320508075688772}, "icepool.MultisetExpression": {"tf": 23.08679276123039}, "icepool.MultisetExpression.order": {"tf": 3.872983346207417}, "icepool.MultisetExpression.additive_union": {"tf": 10.392304845413264}, "icepool.MultisetExpression.difference": {"tf": 9.486832980505138}, "icepool.MultisetExpression.intersection": {"tf": 9.327379053088816}, "icepool.MultisetExpression.union": {"tf": 9.899494936611665}, "icepool.MultisetExpression.symmetric_difference": {"tf": 9.433981132056603}, "icepool.MultisetExpression.keep_outcomes": {"tf": 4.69041575982343}, "icepool.MultisetExpression.drop_outcomes": {"tf": 4.69041575982343}, "icepool.MultisetExpression.map_counts": {"tf": 4}, "icepool.MultisetExpression.multiply_counts": {"tf": 9.797958971132712}, "icepool.MultisetExpression.divide_counts": {"tf": 7.810249675906654}, "icepool.MultisetExpression.modulo_counts": {"tf": 8.12403840463596}, "icepool.MultisetExpression.keep_counts": {"tf": 10.862780491200215}, "icepool.MultisetExpression.unique": {"tf": 8.660254037844387}, "icepool.MultisetExpression.keep": {"tf": 6.855654600401044}, "icepool.MultisetExpression.lowest": {"tf": 7.14142842854285}, "icepool.MultisetExpression.highest": {"tf": 7.14142842854285}, "icepool.MultisetExpression.sort_match": {"tf": 15.362291495737216}, "icepool.MultisetExpression.maximum_match": {"tf": 16.703293088490067}, "icepool.MultisetExpression.evaluate": {"tf": 5.477225575051661}, "icepool.MultisetExpression.expand": {"tf": 4.123105625617661}, "icepool.MultisetExpression.sum": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.count": {"tf": 4.242640687119285}, "icepool.MultisetExpression.any": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.highest_outcome_and_count": {"tf": 2.449489742783178}, "icepool.MultisetExpression.all_counts": {"tf": 5.830951894845301}, "icepool.MultisetExpression.largest_count": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.largest_count_and_outcome": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.count_subset": {"tf": 5.656854249492381}, "icepool.MultisetExpression.largest_straight": {"tf": 2.6457513110645907}, "icepool.MultisetExpression.largest_straight_and_outcome": {"tf": 2.6457513110645907}, "icepool.MultisetExpression.all_straights": {"tf": 3.3166247903554}, "icepool.MultisetExpression.all_straights_reduce_counts": {"tf": 3.4641016151377544}, "icepool.MultisetExpression.argsort": {"tf": 11}, "icepool.MultisetExpression.issubset": {"tf": 4.898979485566356}, "icepool.MultisetExpression.issuperset": {"tf": 8.94427190999916}, "icepool.MultisetExpression.isdisjoint": {"tf": 3.1622776601683795}, "icepool.MultisetExpression.compair_lt": {"tf": 5.0990195135927845}, "icepool.MultisetExpression.compair_le": {"tf": 8.54400374531753}, "icepool.MultisetExpression.compair_gt": {"tf": 8.54400374531753}, "icepool.MultisetExpression.compair_ge": {"tf": 5.0990195135927845}, "icepool.MultisetExpression.compair_eq": {"tf": 5.0990195135927845}, "icepool.MultisetExpression.compair_ne": {"tf": 5.0990195135927845}, "icepool.MultisetEvaluator": {"tf": 8.366600265340756}, "icepool.MultisetEvaluator.next_state": {"tf": 8.94427190999916}, "icepool.MultisetEvaluator.final_outcome": {"tf": 6.557438524302}, "icepool.MultisetEvaluator.order": {"tf": 5.830951894845301}, "icepool.MultisetEvaluator.alignment": {"tf": 7.211102550927978}, "icepool.MultisetEvaluator.range_alignment": {"tf": 6.4031242374328485}, "icepool.MultisetEvaluator.prefix_generators": {"tf": 1.7320508075688772}, "icepool.MultisetEvaluator.validate_arity": {"tf": 5}, "icepool.MultisetEvaluator.evaluate": {"tf": 7.280109889280518}, "icepool.MultisetEvaluator.sample": {"tf": 1.7320508075688772}, "icepool.Order": {"tf": 1.7320508075688772}, "icepool.Order.Ascending": {"tf": 1.7320508075688772}, "icepool.Order.Descending": {"tf": 1.7320508075688772}, "icepool.Order.Any": {"tf": 1.7320508075688772}, "icepool.Order.merge": {"tf": 6.4031242374328485}, "icepool.Deck": {"tf": 2.449489742783178}, "icepool.Deck.__init__": {"tf": 8.366600265340756}, "icepool.Deck.keys": {"tf": 1.7320508075688772}, "icepool.Deck.values": {"tf": 1.7320508075688772}, "icepool.Deck.items": {"tf": 1.7320508075688772}, "icepool.Deck.size": {"tf": 3}, "icepool.Deck.deal": {"tf": 3.3166247903554}, "icepool.Deck.additive_union": {"tf": 1.7320508075688772}, "icepool.Deck.difference": {"tf": 1.7320508075688772}, "icepool.Deck.intersection": {"tf": 1.7320508075688772}, "icepool.Deck.union": {"tf": 1.7320508075688772}, "icepool.Deck.symmetric_difference": {"tf": 1.7320508075688772}, "icepool.Deck.multiply_counts": {"tf": 1.7320508075688772}, "icepool.Deck.divide_counts": {"tf": 1.7320508075688772}, "icepool.Deck.modulo_counts": {"tf": 1.7320508075688772}, "icepool.Deck.map": {"tf": 5.744562646538029}, "icepool.Deal": {"tf": 2.23606797749979}, "icepool.Deal.__init__": {"tf": 5.196152422706632}, "icepool.Deal.deck": {"tf": 2.23606797749979}, "icepool.Deal.hand_sizes": {"tf": 1.7320508075688772}, "icepool.Deal.total_cards_dealt": {"tf": 1.7320508075688772}, "icepool.Deal.outcomes": {"tf": 4}, "icepool.Deal.output_arity": {"tf": 1.7320508075688772}, "icepool.Deal.denominator": {"tf": 1.7320508075688772}, "icepool.MultiDeal": {"tf": 2.23606797749979}, "icepool.MultiDeal.__init__": {"tf": 5.5677643628300215}, "icepool.MultiDeal.deck": {"tf": 2.23606797749979}, "icepool.MultiDeal.hand_sizes": {"tf": 1.7320508075688772}, "icepool.MultiDeal.total_cards_dealt": {"tf": 1.7320508075688772}, "icepool.MultiDeal.outcomes": {"tf": 4}, "icepool.MultiDeal.output_arity": {"tf": 1.7320508075688772}, "icepool.MultiDeal.denominator": {"tf": 1.7320508075688772}, "icepool.multiset_function": {"tf": 17}, "icepool.evaluator": {"tf": 1.7320508075688772}, "icepool.evaluator.JointEvaluator": {"tf": 2.23606797749979}, "icepool.evaluator.JointEvaluator.__init__": {"tf": 1.7320508075688772}, "icepool.evaluator.JointEvaluator.next_state": {"tf": 3.872983346207417}, "icepool.evaluator.JointEvaluator.final_outcome": {"tf": 3.872983346207417}, "icepool.evaluator.JointEvaluator.order": {"tf": 3.7416573867739413}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 7.211102550927978}, "icepool.evaluator.JointEvaluator.prefix_generators": {"tf": 1.7320508075688772}, "icepool.evaluator.JointEvaluator.validate_arity": {"tf": 5}, "icepool.evaluator.ExpandEvaluator": {"tf": 3}, "icepool.evaluator.ExpandEvaluator.__init__": {"tf": 1.7320508075688772}, "icepool.evaluator.ExpandEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.evaluator.ExpandEvaluator.order": {"tf": 1.7320508075688772}, "icepool.evaluator.ExpandEvaluator.final_outcome": {"tf": 1.7320508075688772}, "icepool.evaluator.SumEvaluator": {"tf": 1.7320508075688772}, "icepool.evaluator.SumEvaluator.__init__": {"tf": 2.449489742783178}, "icepool.evaluator.SumEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.evaluator.SumEvaluator.order": {"tf": 1.7320508075688772}, "icepool.evaluator.sum_evaluator": {"tf": 1.7320508075688772}, "icepool.evaluator.CountEvaluator": {"tf": 2.8284271247461903}, "icepool.evaluator.CountEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.evaluator.CountEvaluator.final_outcome": {"tf": 1.7320508075688772}, "icepool.evaluator.CountEvaluator.order": {"tf": 1.7320508075688772}, "icepool.evaluator.count_evaluator": {"tf": 1.7320508075688772}, "icepool.evaluator.AnyEvaluator": {"tf": 2.23606797749979}, "icepool.evaluator.AnyEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.evaluator.AnyEvaluator.final_outcome": {"tf": 1.7320508075688772}, "icepool.evaluator.AnyEvaluator.order": {"tf": 1.7320508075688772}, "icepool.evaluator.any_evaluator": {"tf": 1.7320508075688772}, "icepool.evaluator.HighestOutcomeAndCountEvaluator": {"tf": 2.449489742783178}, "icepool.evaluator.HighestOutcomeAndCountEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.evaluator.HighestOutcomeAndCountEvaluator.order": {"tf": 1.7320508075688772}, "icepool.evaluator.HighestOutcomeAndCountEvaluator.alignment": {"tf": 1.7320508075688772}, "icepool.evaluator.LargestCountEvaluator": {"tf": 1.7320508075688772}, "icepool.evaluator.LargestCountEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.evaluator.LargestCountEvaluator.order": {"tf": 1.7320508075688772}, "icepool.evaluator.LargestCountAndOutcomeEvaluator": {"tf": 1.7320508075688772}, "icepool.evaluator.LargestCountAndOutcomeEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.evaluator.LargestCountAndOutcomeEvaluator.order": {"tf": 1.7320508075688772}, "icepool.evaluator.CountSubsetEvaluator": {"tf": 1.7320508075688772}, "icepool.evaluator.CountSubsetEvaluator.__init__": {"tf": 3.605551275463989}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 8.94427190999916}, "icepool.evaluator.CountSubsetEvaluator.order": {"tf": 1.7320508075688772}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 6.557438524302}, "icepool.evaluator.AllCountsEvaluator": {"tf": 2.449489742783178}, "icepool.evaluator.AllCountsEvaluator.__init__": {"tf": 3.872983346207417}, "icepool.evaluator.AllCountsEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.evaluator.AllCountsEvaluator.final_outcome": {"tf": 1.7320508075688772}, "icepool.evaluator.AllCountsEvaluator.order": {"tf": 1.7320508075688772}, "icepool.evaluator.AllCountsEvaluator.alignment": {"tf": 1.7320508075688772}, "icepool.evaluator.LargestStraightEvaluator": {"tf": 1.7320508075688772}, "icepool.evaluator.LargestStraightEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.evaluator.LargestStraightEvaluator.final_outcome": {"tf": 1.7320508075688772}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"tf": 6.4031242374328485}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator": {"tf": 1.7320508075688772}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.final_outcome": {"tf": 1.7320508075688772}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.order": {"tf": 1.7320508075688772}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"tf": 6.4031242374328485}, "icepool.evaluator.AllStraightsEvaluator": {"tf": 2.449489742783178}, "icepool.evaluator.AllStraightsEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.evaluator.AllStraightsEvaluator.final_outcome": {"tf": 1.7320508075688772}, "icepool.evaluator.AllStraightsEvaluator.order": {"tf": 1.7320508075688772}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"tf": 6.4031242374328485}, "icepool.evaluator.AllStraightsReduceCountsEvaluator": {"tf": 3.4641016151377544}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.__init__": {"tf": 4}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.final_outcome": {"tf": 1.7320508075688772}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"tf": 6.4031242374328485}, "icepool.evaluator.ComparisonEvaluator": {"tf": 1.7320508075688772}, "icepool.evaluator.ComparisonEvaluator.any_all": {"tf": 2.8284271247461903}, "icepool.evaluator.ComparisonEvaluator.default_outcome": {"tf": 1.7320508075688772}, "icepool.evaluator.ComparisonEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.evaluator.ComparisonEvaluator.final_outcome": {"tf": 1.7320508075688772}, "icepool.evaluator.ComparisonEvaluator.order": {"tf": 1.7320508075688772}, "icepool.evaluator.IsSubsetEvaluator": {"tf": 1.7320508075688772}, "icepool.evaluator.IsSubsetEvaluator.any_all": {"tf": 2.8284271247461903}, "icepool.evaluator.IsSubsetEvaluator.default_outcome": {"tf": 1.7320508075688772}, "icepool.evaluator.IsProperSubsetEvaluator": {"tf": 1.7320508075688772}, "icepool.evaluator.IsProperSubsetEvaluator.any_all": {"tf": 2.8284271247461903}, "icepool.evaluator.IsProperSubsetEvaluator.default_outcome": {"tf": 1.7320508075688772}, "icepool.evaluator.IsSupersetEvaluator": {"tf": 1.7320508075688772}, "icepool.evaluator.IsSupersetEvaluator.any_all": {"tf": 2.8284271247461903}, "icepool.evaluator.IsSupersetEvaluator.default_outcome": {"tf": 1.7320508075688772}, "icepool.evaluator.IsProperSupersetEvaluator": {"tf": 1.7320508075688772}, "icepool.evaluator.IsProperSupersetEvaluator.any_all": {"tf": 2.8284271247461903}, "icepool.evaluator.IsProperSupersetEvaluator.default_outcome": {"tf": 1.7320508075688772}, "icepool.evaluator.IsEqualSetEvaluator": {"tf": 1.7320508075688772}, "icepool.evaluator.IsEqualSetEvaluator.any_all": {"tf": 2.8284271247461903}, "icepool.evaluator.IsEqualSetEvaluator.default_outcome": {"tf": 1.7320508075688772}, "icepool.evaluator.IsNotEqualSetEvaluator": {"tf": 1.7320508075688772}, "icepool.evaluator.IsNotEqualSetEvaluator.any_all": {"tf": 2.8284271247461903}, "icepool.evaluator.IsNotEqualSetEvaluator.default_outcome": {"tf": 1.7320508075688772}, "icepool.evaluator.IsDisjointSetEvaluator": {"tf": 1.7320508075688772}, "icepool.evaluator.IsDisjointSetEvaluator.any_all": {"tf": 2.8284271247461903}, "icepool.evaluator.IsDisjointSetEvaluator.default_outcome": {"tf": 1.7320508075688772}, "icepool.evaluator.ConstantEvaluator": {"tf": 1.7320508075688772}, "icepool.evaluator.ConstantEvaluator.__init__": {"tf": 1.7320508075688772}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 8.94427190999916}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 6.557438524302}, "icepool.evaluator.KeepEvaluator": {"tf": 2.8284271247461903}, "icepool.evaluator.KeepEvaluator.__init__": {"tf": 5.291502622129181}, "icepool.evaluator.KeepEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.evaluator.KeepEvaluator.final_outcome": {"tf": 1.7320508075688772}, "icepool.evaluator.KeepEvaluator.order": {"tf": 1.7320508075688772}, "icepool.evaluator.ArgsortEvaluator": {"tf": 1.7320508075688772}, "icepool.evaluator.ArgsortEvaluator.__init__": {"tf": 1.7320508075688772}, "icepool.evaluator.ArgsortEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 6.557438524302}, "icepool.evaluator.ArgsortEvaluator.order": {"tf": 5.830951894845301}, "icepool.evaluator.CompairEvalautor": {"tf": 2.449489742783178}, "icepool.evaluator.CompairEvalautor.__init__": {"tf": 6}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 8.94427190999916}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 6.557438524302}, "icepool.evaluator.CompairEvalautor.order": {"tf": 5.830951894845301}, "icepool.evaluator.ExpressionEvaluator": {"tf": 1.7320508075688772}, "icepool.evaluator.ExpressionEvaluator.__init__": {"tf": 1.7320508075688772}, "icepool.evaluator.ExpressionEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 6.557438524302}, "icepool.evaluator.ExpressionEvaluator.order": {"tf": 1.7320508075688772}, "icepool.evaluator.ExpressionEvaluator.alignment": {"tf": 1.7320508075688772}, "icepool.evaluator.ExpressionEvaluator.prefix_generators": {"tf": 1.7320508075688772}, "icepool.evaluator.ExpressionEvaluator.validate_arity": {"tf": 5}, "icepool.function": {"tf": 1.7320508075688772}, "icepool.function.d": {"tf": 6.082762530298219}, "icepool.function.z": {"tf": 3.1622776601683795}, "icepool.function.coin": {"tf": 5.916079783099616}, "icepool.function.stochastic_round": {"tf": 5.385164807134504}, "icepool.function.one_hot": {"tf": 4.69041575982343}, "icepool.function.from_cumulative": {"tf": 6.082762530298219}, "icepool.function.from_rv": {"tf": 6.708203932499369}, "icepool.function.min_outcome": {"tf": 1.7320508075688772}, "icepool.function.max_outcome": {"tf": 1.7320508075688772}, "icepool.function.align": {"tf": 4.795831523312719}, "icepool.function.align_range": {"tf": 5}, "icepool.function.commonize_denominator": {"tf": 4.795831523312719}, "icepool.function.reduce": {"tf": 6.164414002968976}, "icepool.function.accumulate": {"tf": 6.4031242374328485}, "icepool.function.map": {"tf": 12.529964086141668}, "icepool.function.map_function": {"tf": 13.228756555322953}, "icepool.function.map_and_time": {"tf": 8.426149773176359}, "icepool.function.map_to_pool": {"tf": 8.94427190999916}, "icepool.typing": {"tf": 1.7320508075688772}, "icepool.typing.S": {"tf": 1.7320508075688772}, "icepool.typing.T": {"tf": 1.7320508075688772}, "icepool.typing.T_co": {"tf": 1.7320508075688772}, "icepool.typing.T_contra": {"tf": 1.7320508075688772}, "icepool.typing.U": {"tf": 1.7320508075688772}, "icepool.typing.U_co": {"tf": 1.7320508075688772}, "icepool.typing.Qs": {"tf": 1.7320508075688772}, "icepool.typing.Order": {"tf": 1.7320508075688772}, "icepool.typing.Order.Ascending": {"tf": 1.7320508075688772}, "icepool.typing.Order.Descending": {"tf": 1.7320508075688772}, "icepool.typing.Order.Any": {"tf": 1.7320508075688772}, "icepool.typing.Order.merge": {"tf": 6.4031242374328485}, "icepool.typing.RerollType": {"tf": 1.7320508075688772}, "icepool.typing.RerollType.Reroll": {"tf": 1.7320508075688772}, "icepool.typing.Outcome": {"tf": 2.449489742783178}, "icepool.typing.ImplicitConversionError": {"tf": 1.7320508075688772}, "icepool.typing.count_positional_parameters": {"tf": 4.123105625617661}, "icepool.typing.guess_star": {"tf": 3.7416573867739413}}, "df": 424, "p": {"docs": {"icepool.Population.format": {"tf": 1.7320508075688772}}, "df": 1, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"icepool": {"tf": 1}, "icepool.Population.sample": {"tf": 1}, "icepool.MultisetGenerator.sample": {"tf": 1}}, "df": 3}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {"icepool": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Vector.binary_operator": {"tf": 1}, "icepool.MultisetExpression.sort_match": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsSubsetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsProperSubsetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsSupersetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsProperSupersetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsEqualSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsNotEqualSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsDisjointSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.CompairEvalautor.__init__": {"tf": 1.7320508075688772}}, "df": 11, "s": {"docs": {"icepool.Die.binary_operator": {"tf": 1}, "icepool.MultisetExpression.keep_counts": {"tf": 1}, "icepool.MultisetExpression.sort_match": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.maximum_match": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.all_counts": {"tf": 1}, "icepool.MultisetExpression.compair_lt": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.compair_le": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.compair_gt": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.compair_ge": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.compair_eq": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.compair_ne": {"tf": 1.4142135623730951}, "icepool.evaluator.AllCountsEvaluator.__init__": {"tf": 1}, "icepool.evaluator.CompairEvalautor": {"tf": 1}, "icepool.evaluator.CompairEvalautor.__init__": {"tf": 2.23606797749979}}, "df": 14}}}, "r": {"docs": {}, "df": 0, "t": {"docs": {"icepool.MultisetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1}}, "df": 6, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Again": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 1}}, "df": 3, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die.map_to_pool": {"tf": 1}, "icepool.MultisetGenerator": {"tf": 1}}, "df": 2}}}}}}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.MultisetExpression.sort_match": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.accumulate": {"tf": 1}, "icepool.function.accumulate": {"tf": 1}}, "df": 2, "s": {"docs": {"icepool.MultisetEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.range_alignment": {"tf": 1.4142135623730951}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"tf": 1.4142135623730951}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"tf": 1.4142135623730951}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"tf": 1.4142135623730951}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"tf": 1.4142135623730951}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1.4142135623730951}, "icepool.typing.count_positional_parameters": {"tf": 1}}, "df": 10}}}}}}}}, "d": {"docs": {}, "df": 0, "s": {"docs": {"icepool.align": {"tf": 1}, "icepool.align_range": {"tf": 1}, "icepool.function.align": {"tf": 1}, "icepool.function.align_range": {"tf": 1}}, "df": 4}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Pool.denominator": {"tf": 1}, "icepool.MultisetGenerator.denominator": {"tf": 1}, "icepool.Alignment.denominator": {"tf": 1}, "icepool.Deal.denominator": {"tf": 1}, "icepool.MultiDeal.denominator": {"tf": 1}}, "df": 5}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool": {"tf": 1}, "icepool.Population.probabilities": {"tf": 1}, "icepool.Population.format": {"tf": 1.7320508075688772}}, "df": 3}}}, "y": {"docs": {"icepool.coin": {"tf": 1.4142135623730951}, "icepool.stochastic_round": {"tf": 1}, "icepool.Die.lowest": {"tf": 1}, "icepool.Die.highest": {"tf": 1}, "icepool.Die.stochastic_round": {"tf": 1}, "icepool.Population.probability": {"tf": 1}, "icepool.Reroll": {"tf": 1.4142135623730951}, "icepool.function.coin": {"tf": 1.4142135623730951}, "icepool.function.stochastic_round": {"tf": 1}}, "df": 9}}}}}}}}, "j": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"icepool": {"tf": 1}}, "df": 1}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Pool.__init__": {"tf": 1}}, "df": 1, "d": {"docs": {"icepool.coin": {"tf": 1}, "icepool.stochastic_round": {"tf": 1}, "icepool.Die.reroll": {"tf": 1.4142135623730951}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.split": {"tf": 1}, "icepool.Die.truncate": {"tf": 1}, "icepool.Die.clip": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.keep": {"tf": 1}, "icepool.Die.lowest": {"tf": 2}, "icepool.Die.highest": {"tf": 2}, "icepool.Die.map_to_pool": {"tf": 1.7320508075688772}, "icepool.Die.explode_to_pool": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.Die.stochastic_round": {"tf": 1}, "icepool.Population.quantity": {"tf": 1}, "icepool.Population.to_one_hot": {"tf": 1.4142135623730951}, "icepool.tupleize": {"tf": 1}, "icepool.vectorize": {"tf": 1}, "icepool.Again": {"tf": 1.7320508075688772}, "icepool.lowest": {"tf": 2.449489742783178}, "icepool.highest": {"tf": 2.449489742783178}, "icepool.middle": {"tf": 1.4142135623730951}, "icepool.reduce": {"tf": 1}, "icepool.accumulate": {"tf": 1.4142135623730951}, "icepool.map": {"tf": 1}, "icepool.map_and_time": {"tf": 1}, "icepool.map_to_pool": {"tf": 1.4142135623730951}, "icepool.Pool.__init__": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1}, "icepool.MultisetExpression.lowest": {"tf": 2}, "icepool.MultisetExpression.highest": {"tf": 2}, "icepool.Deck.map": {"tf": 1}, "icepool.MultiDeal.__init__": {"tf": 1}, "icepool.multiset_function": {"tf": 1}, "icepool.evaluator.SumEvaluator.__init__": {"tf": 1}, "icepool.function.coin": {"tf": 1}, "icepool.function.stochastic_round": {"tf": 1}, "icepool.function.reduce": {"tf": 1}, "icepool.function.accumulate": {"tf": 1.4142135623730951}, "icepool.function.map": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1.4142135623730951}, "icepool.typing.guess_star": {"tf": 1}}, "df": 45}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Pool.__init__": {"tf": 1}}, "df": 1}}}}}}, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.stochastic_round": {"tf": 1}, "icepool.map_to_pool": {"tf": 1}, "icepool.function.stochastic_round": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1}}, "df": 4}}}, "t": {"docs": {"icepool.Die.binary_operator": {"tf": 1.4142135623730951}, "icepool.tupleize": {"tf": 1}, "icepool.vectorize": {"tf": 1}}, "df": 3}, "e": {"docs": {"icepool.tupleize": {"tf": 1.7320508075688772}, "icepool.vectorize": {"tf": 1.7320508075688772}, "icepool.Again": {"tf": 1}, "icepool.reduce": {"tf": 1}, "icepool.MultisetGenerator": {"tf": 1}, "icepool.MultisetExpression.all_counts": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.multiset_function": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.__init__": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.KeepEvaluator": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}, "icepool.function.reduce": {"tf": 1}}, "df": 14, "s": {"docs": {"icepool.Die.map_to_pool": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.map_function": {"tf": 1}, "icepool.map_to_pool": {"tf": 1}, "icepool.MultisetExpression.symmetric_difference": {"tf": 1}, "icepool.MultisetExpression.map_counts": {"tf": 1}, "icepool.MultisetExpression.all_straights": {"tf": 1}, "icepool.MultisetExpression.argsort": {"tf": 1}, "icepool.MultisetEvaluator.range_alignment": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsSubsetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsProperSubsetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsSupersetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsProperSupersetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsEqualSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsNotEqualSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsDisjointSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.KeepEvaluator": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.function.map_function": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1}}, "df": 27}, "d": {"docs": {"icepool.MultisetEvaluator": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.alignment": {"tf": 1}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.ComparisonEvaluator": {"tf": 1}, "icepool.evaluator.IsSubsetEvaluator": {"tf": 1}, "icepool.evaluator.IsProperSubsetEvaluator": {"tf": 1}, "icepool.evaluator.IsSupersetEvaluator": {"tf": 1}, "icepool.evaluator.IsProperSupersetEvaluator": {"tf": 1}, "icepool.evaluator.IsEqualSetEvaluator": {"tf": 1}, "icepool.evaluator.IsNotEqualSetEvaluator": {"tf": 1}, "icepool.evaluator.IsDisjointSetEvaluator": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.KeepEvaluator.__init__": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1.4142135623730951}}, "df": 16}}}}}, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Outcome": {"tf": 1}, "icepool.typing.Outcome": {"tf": 1}}, "df": 2}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Again": {"tf": 1.7320508075688772}, "icepool.map": {"tf": 1}, "icepool.function.map": {"tf": 1}}, "df": 3, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Again": {"tf": 1}, "icepool.map_and_time": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}}, "df": 5}, "d": {"docs": {"icepool.Again": {"tf": 1}, "icepool.MultisetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1}}, "df": 7}}}}}}, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Die.map_to_pool": {"tf": 1}}, "df": 1}}}}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Symbols.issubset": {"tf": 1}, "icepool.Symbols.issuperset": {"tf": 1}, "icepool.MultisetExpression.issubset": {"tf": 1}, "icepool.MultisetExpression.issuperset": {"tf": 1}}, "df": 4, "t": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Population.marginals": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {"icepool.Deal.__init__": {"tf": 1}, "icepool.MultiDeal.__init__": {"tf": 1}}, "df": 2, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Die.__init__": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.split": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.set_range": {"tf": 1}, "icepool.Die.set_outcomes": {"tf": 1.4142135623730951}}, "df": 2}, "c": {"docs": {}, "df": 0, "e": {"docs": {"icepool.MultisetExpression.issuperset": {"tf": 1}}, "df": 1}}}}}, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Population.outcomes": {"tf": 1}, "icepool.Deal.outcomes": {"tf": 1}, "icepool.MultiDeal.outcomes": {"tf": 1}}, "df": 3, "s": {"docs": {"icepool.MultisetExpression.maximum_match": {"tf": 1}}, "df": 1}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.MultisetExpression.all_straights": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator": {"tf": 1}}, "df": 2}}}}}}}}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {"icepool.map": {"tf": 1}, "icepool.MultisetGenerator.order": {"tf": 1}, "icepool.MultisetExpression.order": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}, "icepool.function.map": {"tf": 1}}, "df": 8}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.MultisetEvaluator.prefix_generators": {"tf": 1}, "icepool.evaluator.JointEvaluator.prefix_generators": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.prefix_generators": {"tf": 1}}, "df": 3}}}}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die.__init__": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.multiset_function": {"tf": 1.4142135623730951}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die.pool": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.tupleize": {"tf": 1.4142135623730951}, "icepool.vectorize": {"tf": 1.4142135623730951}, "icepool.map": {"tf": 1}, "icepool.map_to_pool": {"tf": 1}, "icepool.MultiDeal.__init__": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1}}, "df": 9, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"icepool.MultisetGenerator": {"tf": 1}, "icepool.MultisetExpression.lowest": {"tf": 1}, "icepool.MultisetExpression.highest": {"tf": 1}, "icepool.multiset_function": {"tf": 1}}, "df": 4, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.stochastic_round": {"tf": 1.4142135623730951}, "icepool.Die.stochastic_round": {"tf": 1.4142135623730951}, "icepool.Pool": {"tf": 1}, "icepool.MultisetExpression.count": {"tf": 1}, "icepool.function.stochastic_round": {"tf": 1.4142135623730951}}, "df": 5}}, "s": {"docs": {"icepool.Die.unary_operator": {"tf": 1}, "icepool.Die.binary_operator": {"tf": 1}, "icepool.Die.truncate": {"tf": 1}}, "df": 3}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"icepool.MultisetGenerator": {"tf": 1}, "icepool.multiset_function": {"tf": 1}}, "df": 2}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}}, "df": 4}}}}}}}, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Pool.__init__": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1}, "icepool.MultiDeal.__init__": {"tf": 1}}, "df": 3}}}}}}}}}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"icepool.one_hot": {"tf": 1}, "icepool.Die.__init__": {"tf": 1.7320508075688772}, "icepool.Die.pool": {"tf": 2.23606797749979}, "icepool.Die.map_to_pool": {"tf": 2.449489742783178}, "icepool.Die.explode_to_pool": {"tf": 1.7320508075688772}, "icepool.Die.reroll_to_pool": {"tf": 2}, "icepool.map": {"tf": 1}, "icepool.map_to_pool": {"tf": 2}, "icepool.Pool": {"tf": 2.449489742783178}, "icepool.Pool.__init__": {"tf": 2.8284271247461903}, "icepool.Pool.clear_cache": {"tf": 1}, "icepool.Pool.raw_size": {"tf": 1}, "icepool.Pool.unique_dice": {"tf": 1}, "icepool.Pool.outcomes": {"tf": 1}, "icepool.Pool.min_outcome": {"tf": 1}, "icepool.Pool.max_outcome": {"tf": 1}, "icepool.standard_pool": {"tf": 2}, "icepool.MultisetGenerator": {"tf": 1}, "icepool.MultisetExpression.multiply_counts": {"tf": 1}, "icepool.MultisetExpression.divide_counts": {"tf": 1}, "icepool.MultisetExpression.modulo_counts": {"tf": 1}, "icepool.MultisetExpression.keep_counts": {"tf": 1}, "icepool.MultisetExpression.unique": {"tf": 1}, "icepool.MultisetExpression.sort_match": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.maximum_match": {"tf": 2.23606797749979}, "icepool.MultisetExpression.compair_le": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.compair_gt": {"tf": 1.4142135623730951}, "icepool.multiset_function": {"tf": 1.4142135623730951}, "icepool.function.one_hot": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 2}}, "df": 31, "s": {"docs": {"icepool.Die.map_to_pool": {"tf": 2}, "icepool.map_to_pool": {"tf": 1.4142135623730951}, "icepool.Pool": {"tf": 1}, "icepool.MultisetGenerator": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1.4142135623730951}}, "df": 5}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die": {"tf": 1}, "icepool.map_and_time": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}}, "df": 4}, "e": {"docs": {"icepool.Die": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.Pool.outcomes": {"tf": 1}, "icepool.MultisetGenerator.outcomes": {"tf": 1}, "icepool.Alignment.outcomes": {"tf": 1}, "icepool.MultisetExpression.maximum_match": {"tf": 2.449489742783178}, "icepool.MultisetEvaluator": {"tf": 1}, "icepool.function.map": {"tf": 1}}, "df": 8}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool.MultisetExpression.expand": {"tf": 1}, "icepool.evaluator.ExpandEvaluator": {"tf": 1}}, "df": 2}}}}}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.cmp": {"tf": 1}, "icepool.Symbols.__init__": {"tf": 1}, "icepool.Symbols.isdisjoint": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1}, "icepool.MultisetExpression.any": {"tf": 1}, "icepool.MultisetExpression.highest_outcome_and_count": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.isdisjoint": {"tf": 1}, "icepool.evaluator.AnyEvaluator": {"tf": 1}, "icepool.evaluator.HighestOutcomeAndCountEvaluator": {"tf": 1.4142135623730951}}, "df": 9}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}, "icepool.typing.count_positional_parameters": {"tf": 1.7320508075688772}}, "df": 5}}}}}}}}, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Die.__init__": {"tf": 1.4142135623730951}, "icepool.Die.keys": {"tf": 1}, "icepool.Die.values": {"tf": 1}, "icepool.Die.items": {"tf": 1}, "icepool.Population.keys": {"tf": 1}, "icepool.Population.values": {"tf": 1}, "icepool.Population.items": {"tf": 1}, "icepool.Population.is_empty": {"tf": 1}, "icepool.Population.nearest": {"tf": 1}, "icepool.Population.mode": {"tf": 1}, "icepool.Population.variance": {"tf": 1}, "icepool.Population.entropy": {"tf": 1}, "icepool.Population.marginals": {"tf": 1.4142135623730951}, "icepool.Population.to_one_hot": {"tf": 1}, "icepool.Population.sample": {"tf": 1}, "icepool.tupleize": {"tf": 2.23606797749979}, "icepool.vectorize": {"tf": 2.23606797749979}, "icepool.Symbols": {"tf": 1}, "icepool.Again": {"tf": 1}, "icepool.map": {"tf": 1.4142135623730951}, "icepool.Deck.keys": {"tf": 1}, "icepool.Deck.values": {"tf": 1}, "icepool.Deck.items": {"tf": 1}, "icepool.function.map": {"tf": 1.4142135623730951}}, "df": 24}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.from_cumulative": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.map_and_time": {"tf": 1.4142135623730951}, "icepool.function.from_cumulative": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1.4142135623730951}}, "df": 6}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die": {"tf": 1}, "icepool.Reroll": {"tf": 1}, "icepool.MultisetExpression.all_counts": {"tf": 1}}, "df": 3, "d": {"docs": {"icepool.reduce": {"tf": 1}, "icepool.accumulate": {"tf": 1}, "icepool.function.reduce": {"tf": 1}, "icepool.function.accumulate": {"tf": 1}}, "df": 4}, "s": {"docs": {"icepool.Reroll": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die.keep": {"tf": 1}, "icepool.Symbols": {"tf": 1}}, "df": 2}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.pool": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1.7320508075688772}, "icepool.standard_pool": {"tf": 1.4142135623730951}, "icepool.Deck.__init__": {"tf": 1}}, "df": 4}, "r": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.equals": {"tf": 1}}, "df": 1}}}}}, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"icepool.Pool.__init__": {"tf": 1}}, "df": 1}}}}}, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.multiset_function": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"icepool.evaluator.AllStraightsReduceCountsEvaluator.__init__": {"tf": 1}}, "df": 1}}}}, "f": {"docs": {"icepool.MultisetExpression": {"tf": 1}}, "df": 1, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool": {"tf": 1.7320508075688772}, "icepool.one_hot": {"tf": 1}, "icepool.Die": {"tf": 1}, "icepool.Die.__init__": {"tf": 3}, "icepool.Die.unary_operator": {"tf": 1.7320508075688772}, "icepool.Die.binary_operator": {"tf": 1.4142135623730951}, "icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Die.explode_to_pool": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.Die.zero_outcome": {"tf": 1.4142135623730951}, "icepool.Die.sign": {"tf": 1}, "icepool.Population.nearest": {"tf": 1}, "icepool.Population.quantities": {"tf": 1}, "icepool.Population.denominator": {"tf": 1}, "icepool.Population.probabilities": {"tf": 1.4142135623730951}, "icepool.Population.marginals": {"tf": 1.4142135623730951}, "icepool.Population.sample": {"tf": 1}, "icepool.Population.format": {"tf": 2}, "icepool.tupleize": {"tf": 1}, "icepool.vectorize": {"tf": 1}, "icepool.Vector.unary_operator": {"tf": 1}, "icepool.Vector.binary_operator": {"tf": 1.4142135623730951}, "icepool.Symbols": {"tf": 1.7320508075688772}, "icepool.Symbols.__init__": {"tf": 1}, "icepool.Again": {"tf": 2.6457513110645907}, "icepool.map": {"tf": 1.7320508075688772}, "icepool.map_and_time": {"tf": 1.4142135623730951}, "icepool.map_to_pool": {"tf": 1}, "icepool.Reroll": {"tf": 1.4142135623730951}, "icepool.Pool": {"tf": 1.4142135623730951}, "icepool.Pool.__init__": {"tf": 1.4142135623730951}, "icepool.standard_pool": {"tf": 1}, "icepool.MultisetGenerator": {"tf": 1.7320508075688772}, "icepool.MultisetGenerator.order": {"tf": 1.4142135623730951}, "icepool.MultisetGenerator.sample": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1}, "icepool.MultisetExpression.order": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.keep_counts": {"tf": 1}, "icepool.MultisetExpression.unique": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1}, "icepool.MultisetExpression.all_counts": {"tf": 1}, "icepool.MultisetExpression.count_subset": {"tf": 1}, "icepool.MultisetExpression.argsort": {"tf": 1}, "icepool.MultisetExpression.issubset": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.issuperset": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.isdisjoint": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.MultisetEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.evaluate": {"tf": 1.4142135623730951}, "icepool.Deck.__init__": {"tf": 1.4142135623730951}, "icepool.Deck.size": {"tf": 1}, "icepool.Deck.deal": {"tf": 1}, "icepool.Deck.map": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1}, "icepool.MultiDeal.__init__": {"tf": 1.4142135623730951}, "icepool.multiset_function": {"tf": 1.7320508075688772}, "icepool.evaluator.JointEvaluator.next_state": {"tf": 1}, "icepool.evaluator.JointEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.__init__": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.evaluator.AllCountsEvaluator.__init__": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.__init__": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsSubsetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsProperSubsetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsSupersetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsProperSupersetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsEqualSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsNotEqualSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsDisjointSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.evaluator.ArgsortEvaluator": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.evaluator.CompairEvalautor": {"tf": 1}, "icepool.evaluator.CompairEvalautor.__init__": {"tf": 2}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 1.4142135623730951}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.function.one_hot": {"tf": 1}, "icepool.function.map": {"tf": 1.7320508075688772}, "icepool.function.map_and_time": {"tf": 1.4142135623730951}, "icepool.function.map_to_pool": {"tf": 1}}, "df": 86, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.if_else": {"tf": 1}, "icepool.Population.marginals": {"tf": 1}, "icepool.from_rv": {"tf": 1}, "icepool.reduce": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.map_function": {"tf": 1}, "icepool.function.from_rv": {"tf": 1}, "icepool.function.reduce": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.function.map_function": {"tf": 1}}, "df": 10}}, "s": {"docs": {"icepool.Symbols": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.order": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.alignment": {"tf": 1}}, "df": 4}}}}}, "m": {"docs": {"icepool.map": {"tf": 1}, "icepool.function.map": {"tf": 1}}, "df": 2, "a": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Population.format": {"tf": 1.4142135623730951}}, "df": 1, "s": {"docs": {"icepool.Population.format": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.MultisetExpression.sort_match": {"tf": 1}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"icepool.one_hot": {"tf": 1}, "icepool.function.one_hot": {"tf": 1}}, "df": 2}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "f": {"docs": {"icepool.Outcome": {"tf": 1}, "icepool.typing.Outcome": {"tf": 1}}, "df": 2}}}}}}}, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.__init__": {"tf": 1}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Die.__init__": {"tf": 1.4142135623730951}, "icepool.Die.binary_operator": {"tf": 1}, "icepool.Die.keep": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.Again": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.map_and_time": {"tf": 1}, "icepool.map_to_pool": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.MultisetExpression.maximum_match": {"tf": 1}, "icepool.MultisetEvaluator.evaluate": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1.4142135623730951}, "icepool.Deck.map": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1}}, "df": 16}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Population.format": {"tf": 1}}, "df": 1}}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"icepool": {"tf": 1}, "icepool.d": {"tf": 1.7320508075688772}, "icepool.z": {"tf": 1}, "icepool.Outcome": {"tf": 1}, "icepool.Die.__init__": {"tf": 1.7320508075688772}, "icepool.Die.pool": {"tf": 1}, "icepool.Die.keep": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.Population": {"tf": 1}, "icepool.Population.mode": {"tf": 1}, "icepool.Population.entropy": {"tf": 1}, "icepool.Population.marginals": {"tf": 1}, "icepool.Population.sample": {"tf": 1}, "icepool.Population.format": {"tf": 1}, "icepool.Vector.binary_operator": {"tf": 1}, "icepool.from_cumulative": {"tf": 1}, "icepool.from_rv": {"tf": 1}, "icepool.reduce": {"tf": 1.4142135623730951}, "icepool.accumulate": {"tf": 1.4142135623730951}, "icepool.map": {"tf": 1.4142135623730951}, "icepool.map_and_time": {"tf": 1}, "icepool.map_to_pool": {"tf": 1}, "icepool.Reroll": {"tf": 1}, "icepool.Pool": {"tf": 1.4142135623730951}, "icepool.Pool.additive_union": {"tf": 1}, "icepool.MultisetGenerator.sample": {"tf": 1}, "icepool.MultisetExpression.additive_union": {"tf": 1}, "icepool.MultisetExpression.difference": {"tf": 1}, "icepool.MultisetExpression.symmetric_difference": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1}, "icepool.MultisetExpression.lowest": {"tf": 1}, "icepool.MultisetExpression.highest": {"tf": 1}, "icepool.MultisetExpression.sort_match": {"tf": 1}, "icepool.MultisetExpression.maximum_match": {"tf": 3}, "icepool.MultisetExpression.isdisjoint": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.final_outcome": {"tf": 1}, "icepool.MultisetEvaluator.range_alignment": {"tf": 1}, "icepool.MultisetEvaluator.sample": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}, "icepool.Deck.deal": {"tf": 1}, "icepool.Deck.map": {"tf": 1}, "icepool.Deal": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1.7320508075688772}, "icepool.Deal.deck": {"tf": 1}, "icepool.MultiDeal": {"tf": 1}, "icepool.MultiDeal.__init__": {"tf": 1.7320508075688772}, "icepool.MultiDeal.deck": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1}, "icepool.function.d": {"tf": 1.7320508075688772}, "icepool.function.z": {"tf": 1}, "icepool.function.from_cumulative": {"tf": 1}, "icepool.function.from_rv": {"tf": 1}, "icepool.function.reduce": {"tf": 1.4142135623730951}, "icepool.function.accumulate": {"tf": 1.4142135623730951}, "icepool.function.map": {"tf": 1.4142135623730951}, "icepool.function.map_and_time": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1}, "icepool.typing.Outcome": {"tf": 1}}, "df": 70}, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.reduce": {"tf": 1}, "icepool.accumulate": {"tf": 1}, "icepool.function.reduce": {"tf": 1}, "icepool.function.accumulate": {"tf": 1}}, "df": 4}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.stochastic_round": {"tf": 1}, "icepool.Die.stochastic_round": {"tf": 1}, "icepool.function.stochastic_round": {"tf": 1}}, "df": 3, "s": {"docs": {"icepool.stochastic_round": {"tf": 1}, "icepool.Die.stochastic_round": {"tf": 1}, "icepool.function.stochastic_round": {"tf": 1}}, "df": 3}}}}}}}, "e": {"docs": {}, "df": 0, "e": {"docs": {"icepool.MultisetExpression.keep": {"tf": 1}, "icepool.MultisetExpression.lowest": {"tf": 1}, "icepool.MultisetExpression.highest": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.MultisetEvaluator.range_alignment": {"tf": 1}, "icepool.MultisetEvaluator.evaluate": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}, "icepool.function": {"tf": 1}}, "df": 14}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"icepool.coin": {"tf": 1}, "icepool.one_hot": {"tf": 1}, "icepool.Die.equals": {"tf": 1}, "icepool.Population.to_one_hot": {"tf": 1.4142135623730951}, "icepool.MultisetExpression": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.issubset": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.issuperset": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.isdisjoint": {"tf": 1}, "icepool.function.coin": {"tf": 1}, "icepool.function.one_hot": {"tf": 1}}, "df": 10}, "y": {"docs": {"icepool.Die.if_else": {"tf": 1}}, "df": 1}}}, "r": {"docs": {"icepool.Outcome": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 1}, "icepool.typing.Outcome": {"tf": 1}}, "df": 3}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die.__init__": {"tf": 1.4142135623730951}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Population.median": {"tf": 1}, "icepool.Population.quantile": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.typing.ImplicitConversionError": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"icepool.coin": {"tf": 1}, "icepool.Die.if_else": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.Population.marginals": {"tf": 1}, "icepool.Symbols": {"tf": 1}, "icepool.map": {"tf": 1.7320508075688772}, "icepool.map_and_time": {"tf": 1}, "icepool.map_to_pool": {"tf": 1}, "icepool.Pool": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.sort_match": {"tf": 1}, "icepool.MultisetExpression.maximum_match": {"tf": 1}, "icepool.MultisetExpression.count": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsSubsetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsProperSubsetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsSupersetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsProperSupersetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsEqualSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsNotEqualSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsDisjointSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator": {"tf": 1}, "icepool.function.coin": {"tf": 1}, "icepool.function.map": {"tf": 1.7320508075688772}, "icepool.function.map_and_time": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1}, "icepool.typing.count_positional_parameters": {"tf": 1}, "icepool.typing.guess_star": {"tf": 1}}, "df": 31}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.keep": {"tf": 1}}, "df": 1, "s": {"docs": {"icepool.one_hot": {"tf": 1}, "icepool.function.one_hot": {"tf": 1}}, "df": 2}}}, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die.split": {"tf": 1}, "icepool.MultisetExpression.sort_match": {"tf": 1}, "icepool.MultisetExpression.all_counts": {"tf": 1.4142135623730951}, "icepool.evaluator.AllCountsEvaluator.__init__": {"tf": 1.4142135623730951}}, "df": 4, "s": {"docs": {"icepool.MultisetExpression.maximum_match": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.MultisetExpression.all_counts": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.__init__": {"tf": 1}}, "df": 2}}}}}}, "l": {"docs": {"icepool.MultisetExpression.keep": {"tf": 1}}, "df": 1}}, "t": {"docs": {"icepool.Die.clip": {"tf": 1}, "icepool.Population.nearest": {"tf": 1}, "icepool.MultisetExpression.sort_match": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.maximum_match": {"tf": 1}}, "df": 4, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Population.nearest": {"tf": 1.4142135623730951}, "icepool.Population.quantity": {"tf": 1}, "icepool.Population.probability": {"tf": 1}, "icepool.Population.probabilities": {"tf": 1}, "icepool.MultisetExpression.keep_counts": {"tf": 1}, "icepool.MultisetExpression.maximum_match": {"tf": 1}}, "df": 6}}}}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Die.explode": {"tf": 1}, "icepool.Die.if_else": {"tf": 1}, "icepool.Again": {"tf": 1.4142135623730951}, "icepool.reduce": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.map_function": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1}, "icepool.MultisetExpression.evaluate": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.final_outcome": {"tf": 2.8284271247461903}, "icepool.MultisetEvaluator.evaluate": {"tf": 1}, "icepool.evaluator.JointEvaluator.final_outcome": {"tf": 1.7320508075688772}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 2.8284271247461903}, "icepool.evaluator.ComparisonEvaluator.any_all": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsSubsetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsSubsetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsProperSubsetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsProperSubsetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsSupersetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsSupersetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsProperSupersetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsProperSupersetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsEqualSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsEqualSetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsNotEqualSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsNotEqualSetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsDisjointSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsDisjointSetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 2.8284271247461903}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 2.8284271247461903}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 2.8284271247461903}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 2.8284271247461903}, "icepool.function.reduce": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.function.map_function": {"tf": 1}}, "df": 40}}, "d": {"docs": {"icepool.Population.nearest": {"tf": 1}, "icepool.Again": {"tf": 1}}, "df": 2}, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Again": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {"icepool.multiset_function": {"tf": 1}}, "df": 1}}}}, "x": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.map_and_time": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.MultisetEvaluator.range_alignment": {"tf": 1}, "icepool.MultisetEvaluator.validate_arity": {"tf": 1}, "icepool.MultisetEvaluator.evaluate": {"tf": 1}, "icepool.multiset_function": {"tf": 1}, "icepool.evaluator.JointEvaluator.validate_arity": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.validate_arity": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1.4142135623730951}}, "df": 17}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.stochastic_round": {"tf": 1}, "icepool.Die.unary_operator": {"tf": 1}, "icepool.Die.stochastic_round": {"tf": 1}, "icepool.Vector.unary_operator": {"tf": 1}, "icepool.function.stochastic_round": {"tf": 1}}, "df": 5}}, "a": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.sign": {"tf": 1}, "icepool.from_rv": {"tf": 1}, "icepool.function.from_rv": {"tf": 1}}, "df": 3}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.__init__": {"tf": 1}}, "df": 1, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}}, "df": 2}}}}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.map": {"tf": 1}, "icepool.function.map": {"tf": 1}}, "df": 2}}}}}}}, "e": {"docs": {}, "df": 0, "w": {"docs": {"icepool.Die": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.MultisetExpression.expand": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 1}, "icepool.evaluator.ExpandEvaluator": {"tf": 1}, "icepool.function.map": {"tf": 1}}, "df": 6}, "d": {"docs": {"icepool.Again": {"tf": 1}}, "df": 1}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"icepool.map": {"tf": 2.449489742783178}, "icepool.map_and_time": {"tf": 1.4142135623730951}, "icepool.function.map": {"tf": 2.449489742783178}, "icepool.function.map_and_time": {"tf": 1.4142135623730951}}, "df": 4, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.split": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.explode_to_pool": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.Die.equals": {"tf": 1}, "icepool.from_cumulative": {"tf": 1}, "icepool.reduce": {"tf": 2.449489742783178}, "icepool.accumulate": {"tf": 2.6457513110645907}, "icepool.map": {"tf": 1}, "icepool.map_function": {"tf": 2.23606797749979}, "icepool.Reroll": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1}, "icepool.MultisetExpression.map_counts": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.lowest": {"tf": 1}, "icepool.MultisetExpression.highest": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.MultisetEvaluator.final_outcome": {"tf": 1}, "icepool.MultisetEvaluator.order": {"tf": 1}, "icepool.Deck.map": {"tf": 1}, "icepool.multiset_function": {"tf": 3.1622776601683795}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.order": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 1}, "icepool.evaluator.CompairEvalautor.order": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1}, "icepool.function.from_cumulative": {"tf": 1}, "icepool.function.reduce": {"tf": 2.449489742783178}, "icepool.function.accumulate": {"tf": 2.6457513110645907}, "icepool.function.map": {"tf": 1}, "icepool.function.map_function": {"tf": 2.23606797749979}, "icepool.typing.guess_star": {"tf": 1.4142135623730951}}, "df": 39, "s": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Again": {"tf": 1}, "icepool.CountsKeysView": {"tf": 1}, "icepool.CountsValuesView": {"tf": 1}, "icepool.CountsItemsView": {"tf": 1}, "icepool.map_function": {"tf": 1}, "icepool.function": {"tf": 1}, "icepool.function.map_function": {"tf": 1}}, "df": 8}}}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"icepool.reduce": {"tf": 1}, "icepool.function.reduce": {"tf": 1}}, "df": 2}}}}}}}, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die.explode": {"tf": 1}, "icepool.Symbols": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator": {"tf": 1}}, "df": 3, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Again": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}}, "df": 5}}}}}}}}}, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Vector": {"tf": 1}, "icepool.Symbols": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}, "icepool.typing.Qs": {"tf": 1}}, "df": 7}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}}, "df": 4, "y": {"docs": {"icepool.map": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1}, "icepool.MultisetExpression.evaluate": {"tf": 1.4142135623730951}, "icepool.function.map": {"tf": 1}}, "df": 4}}}}}, "c": {"docs": {"icepool.Pool.additive_union": {"tf": 1}, "icepool.MultisetExpression.additive_union": {"tf": 1}, "icepool.MultisetExpression.difference": {"tf": 1}, "icepool.MultisetExpression.intersection": {"tf": 1}, "icepool.MultisetExpression.union": {"tf": 1}}, "df": 5, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Die": {"tf": 1}, "icepool.Symbols": {"tf": 1}}, "df": 2, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.MultiDeal.__init__": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {"icepool.map_and_time": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}}, "df": 2}}}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool.multiset_function": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die.binary_operator": {"tf": 1}, "icepool.Vector.binary_operator": {"tf": 1}}, "df": 2}}}}}, "e": {"docs": {"icepool.Population.nearest": {"tf": 1}, "icepool.Symbols": {"tf": 1}, "icepool.MultisetExpression.keep_counts": {"tf": 1}, "icepool.MultisetExpression.compair_lt": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.compair_le": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.compair_gt": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.compair_ge": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.compair_eq": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.compair_ne": {"tf": 1.4142135623730951}}, "df": 9, "d": {"docs": {"icepool.Die.keep": {"tf": 1}, "icepool.Symbols": {"tf": 1}}, "df": 2}, "s": {"docs": {"icepool.evaluator.ComparisonEvaluator": {"tf": 1}, "icepool.evaluator.IsSubsetEvaluator": {"tf": 1}, "icepool.evaluator.IsProperSubsetEvaluator": {"tf": 1}, "icepool.evaluator.IsSupersetEvaluator": {"tf": 1}, "icepool.evaluator.IsProperSupersetEvaluator": {"tf": 1}, "icepool.evaluator.IsEqualSetEvaluator": {"tf": 1}, "icepool.evaluator.IsNotEqualSetEvaluator": {"tf": 1}, "icepool.evaluator.IsDisjointSetEvaluator": {"tf": 1}, "icepool.evaluator.CompairEvalautor": {"tf": 1}, "icepool.evaluator.CompairEvalautor.__init__": {"tf": 1}}, "df": 10}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Die.equals": {"tf": 1}}, "df": 1}}, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Population.nearest": {"tf": 2}, "icepool.Population.quantity": {"tf": 2}, "icepool.Population.quantities": {"tf": 1}, "icepool.Population.probability": {"tf": 1}, "icepool.Population.probabilities": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.keep_counts": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.sort_match": {"tf": 2.449489742783178}, "icepool.MultisetExpression.maximum_match": {"tf": 2}}, "df": 8}}}}}, "i": {"docs": {}, "df": 0, "r": {"docs": {"icepool.MultisetExpression.compair_le": {"tf": 1}, "icepool.MultisetExpression.compair_gt": {"tf": 1}}, "df": 2}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.filter": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"icepool.MultisetExpression.sort_match": {"tf": 1}}, "df": 1}}}}}}}, "x": {"docs": {"icepool.MultisetGenerator": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.MultisetExpression": {"tf": 1}}, "df": 1}}}}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Die.simplify": {"tf": 1}, "icepool.Population.common_outcome_length": {"tf": 1}, "icepool.Population.mode": {"tf": 1}, "icepool.Symbols.isdisjoint": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1}, "icepool.MultisetExpression.intersection": {"tf": 1}, "icepool.evaluator.JointEvaluator.order": {"tf": 1}}, "df": 7}}, "a": {"docs": {"icepool.Population.format": {"tf": 1}}, "df": 1}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Again": {"tf": 1}}, "df": 1}}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Deal.__init__": {"tf": 1}, "icepool.MultiDeal.__init__": {"tf": 1}}, "df": 2}}}, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Pool.additive_union": {"tf": 1}, "icepool.MultisetExpression.additive_union": {"tf": 1}, "icepool.MultisetExpression.map_counts": {"tf": 1}}, "df": 3}}}}, "o": {"docs": {"icepool.MultisetExpression.issuperset": {"tf": 1}}, "df": 1}}}, "n": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"icepool": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die": {"tf": 1}}, "df": 1}, "c": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.__init__": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.MultisetEvaluator.validate_arity": {"tf": 1}, "icepool.evaluator.JointEvaluator.validate_arity": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.validate_arity": {"tf": 1}, "icepool.typing.ImplicitConversionError": {"tf": 1}}, "df": 4, "s": {"docs": {"icepool.Die.__init__": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {"icepool.Die.equals": {"tf": 1}, "icepool.Symbols": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.binary_operator": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.map_to_pool": {"tf": 1.4142135623730951}, "icepool.align": {"tf": 1}, "icepool.align_range": {"tf": 1}, "icepool.commonize_denominator": {"tf": 1}, "icepool.map_to_pool": {"tf": 1.4142135623730951}, "icepool.function.align": {"tf": 1}, "icepool.function.align_range": {"tf": 1}, "icepool.function.commonize_denominator": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1.4142135623730951}}, "df": 9}}}}, "s": {"docs": {"icepool.Population.to_one_hot": {"tf": 1}}, "df": 1}}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool": {"tf": 1}, "icepool.standard_pool": {"tf": 1}, "icepool.MultisetExpression.keep_outcomes": {"tf": 1}, "icepool.MultisetExpression.drop_outcomes": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}}, "df": 8}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}}, "df": 5}}}}, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die.reroll_to_pool": {"tf": 1}}, "df": 1}, "e": {"docs": {"icepool.multiset_function": {"tf": 1}}, "df": 1}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"icepool.standard_pool": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.map_to_pool": {"tf": 1}, "icepool.map_to_pool": {"tf": 1}, "icepool.Reroll": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1}}, "df": 4}}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.map_to_pool": {"tf": 1}}, "df": 1, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die.__init__": {"tf": null}, "icepool.Die.if_else": {"tf": null}, "icepool.Symbols": {"tf": null}, "icepool.Symbols.__init__": {"tf": null}, "icepool.Again": {"tf": null}, "icepool.reduce": {"tf": null}, "icepool.map": {"tf": null}, "icepool.map_function": {"tf": null}, "icepool.Pool.__init__": {"tf": null}, "icepool.Deck.__init__": {"tf": null}, "icepool.Deal.__init__": {"tf": null}, "icepool.MultiDeal.__init__": {"tf": null}, "icepool.evaluator.SumEvaluator.__init__": {"tf": null}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.__init__": {"tf": null}, "icepool.evaluator.KeepEvaluator.__init__": {"tf": null}, "icepool.function.reduce": {"tf": null}, "icepool.function.map": {"tf": null}, "icepool.function.map_function": {"tf": null}}, "df": 18}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.from_cumulative": {"tf": 1}, "icepool.MultisetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1}, "icepool.function.from_cumulative": {"tf": 1}}, "df": 9}}, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 1}}, "df": 2}}}, "s": {"docs": {"icepool.from_cumulative": {"tf": 1}, "icepool.from_rv": {"tf": 1}, "icepool.function.from_cumulative": {"tf": 1}, "icepool.function.from_rv": {"tf": 1}}, "df": 4}, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Pool.__init__": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Pool.output_arity": {"tf": 1}, "icepool.MultisetGenerator.output_arity": {"tf": 1}, "icepool.Alignment.output_arity": {"tf": 1}, "icepool.Deal.output_arity": {"tf": 1}, "icepool.MultiDeal.output_arity": {"tf": 1}, "icepool.evaluator.ConstantEvaluator": {"tf": 1}}, "df": 6}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"icepool.align_range": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.alignment": {"tf": 1}, "icepool.MultisetEvaluator.range_alignment": {"tf": 1}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"tf": 1}, "icepool.function.align_range": {"tf": 1}}, "df": 10}}}}}}}}, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"icepool.d": {"tf": 1}, "icepool.Die.__init__": {"tf": 1.4142135623730951}, "icepool.function.d": {"tf": 1}}, "df": 3, "d": {"docs": {"icepool.Die.truncate": {"tf": 1}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.evaluator.JointEvaluator.order": {"tf": 1}}, "df": 1}}}}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.MultisetExpression.all_straights": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator": {"tf": 1}}, "df": 4}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Reroll": {"tf": 1}}, "df": 1}}}}}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Again": {"tf": 1}, "icepool.multiset_function": {"tf": 1}}, "df": 2}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"icepool.MultisetExpression.lowest": {"tf": 1}, "icepool.MultisetExpression.highest": {"tf": 1}, "icepool.MultisetExpression.sort_match": {"tf": 1}, "icepool.MultisetExpression.maximum_match": {"tf": 1}}, "df": 4}}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Die.equals": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.split": {"tf": 1.4142135623730951}, "icepool.Population.mode": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.evaluator": {"tf": 1}, "icepool.function.map": {"tf": 1}}, "df": 6}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.is_in": {"tf": 1}, "icepool.Symbols.count_subset": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1}, "icepool.MultisetExpression.count_subset": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator": {"tf": 1}}, "df": 5}}, "s": {"docs": {"icepool.Population.has_zero_quantities": {"tf": 1}, "icepool.MultisetExpression.issuperset": {"tf": 1}, "icepool.MultisetEvaluator.evaluate": {"tf": 1}}, "df": 3}}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Die.if_else": {"tf": 1}, "icepool.Reroll": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Again": {"tf": 1}}, "df": 1}}}}}}}}}, "j": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Pool": {"tf": 1}}, "df": 1}}}}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.MultisetEvaluator": {"tf": 1}}, "df": 1}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die": {"tf": 1}, "icepool.Symbols": {"tf": 1}}, "df": 2}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.unary_operator": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.largest_count_and_outcome": {"tf": 1}}, "df": 4}}}}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die.map_to_pool": {"tf": 1}, "icepool.map_to_pool": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1}}, "df": 3}}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.unary_operator": {"tf": 1}, "icepool.Die.if_else": {"tf": 1}, "icepool.Die.count": {"tf": 1}, "icepool.Die.keep": {"tf": 1}, "icepool.Symbols": {"tf": 2.449489742783178}, "icepool.Symbols.intersection": {"tf": 1}, "icepool.Symbols.union": {"tf": 1}, "icepool.Again": {"tf": 3.1622776601683795}, "icepool.reduce": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.map_function": {"tf": 1}, "icepool.MultisetGenerator": {"tf": 1}, "icepool.MultisetExpression": {"tf": 3.872983346207417}, "icepool.MultisetExpression.difference": {"tf": 1}, "icepool.MultisetExpression.intersection": {"tf": 1}, "icepool.MultisetExpression.map_counts": {"tf": 1}, "icepool.MultisetExpression.unique": {"tf": 1}, "icepool.MultisetExpression.count": {"tf": 2}, "icepool.MultisetExpression.any": {"tf": 1}, "icepool.MultisetExpression.highest_outcome_and_count": {"tf": 2}, "icepool.MultisetExpression.argsort": {"tf": 1}, "icepool.MultisetExpression.issubset": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.issuperset": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.isdisjoint": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 2.449489742783178}, "icepool.MultisetEvaluator.next_state": {"tf": 2.23606797749979}, "icepool.MultisetEvaluator.alignment": {"tf": 1.4142135623730951}, "icepool.MultiDeal.__init__": {"tf": 1}, "icepool.multiset_function": {"tf": 2}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 1.4142135623730951}, "icepool.evaluator.ExpandEvaluator": {"tf": 1.4142135623730951}, "icepool.evaluator.CountEvaluator": {"tf": 1}, "icepool.evaluator.AnyEvaluator": {"tf": 1}, "icepool.evaluator.HighestOutcomeAndCountEvaluator": {"tf": 2}, "icepool.evaluator.LargestCountEvaluator": {"tf": 1}, "icepool.evaluator.LargestCountAndOutcomeEvaluator": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 2.23606797749979}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 2.23606797749979}, "icepool.evaluator.CompairEvalautor.__init__": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 2.23606797749979}, "icepool.function.reduce": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.function.map_function": {"tf": 1}, "icepool.typing.Qs": {"tf": 1}, "icepool.typing.guess_star": {"tf": 1}}, "df": 46, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Die.map_and_time": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.map_and_time": {"tf": 1}, "icepool.MultisetExpression.all_straights_reduce_counts": {"tf": 1}, "icepool.MultisetExpression.compair_lt": {"tf": 1}, "icepool.MultisetExpression.compair_le": {"tf": 1}, "icepool.MultisetExpression.compair_gt": {"tf": 1}, "icepool.MultisetExpression.compair_ge": {"tf": 1}, "icepool.MultisetExpression.compair_eq": {"tf": 1}, "icepool.MultisetExpression.compair_ne": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}}, "df": 12}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.keep": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.keep": {"tf": 1}}, "df": 2}, "r": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"icepool.MultisetExpression": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "s": {"docs": {"icepool.Die.keep": {"tf": 1.7320508075688772}, "icepool.Symbols": {"tf": 2.6457513110645907}, "icepool.Symbols.__init__": {"tf": 1}, "icepool.Symbols.additive_union": {"tf": 1}, "icepool.Symbols.difference": {"tf": 1}, "icepool.Symbols.symmetric_difference": {"tf": 1}, "icepool.Symbols.multiply_counts": {"tf": 1}, "icepool.Symbols.divide_counts": {"tf": 1}, "icepool.Symbols.has_negative_counts": {"tf": 1}, "icepool.Pool.additive_union": {"tf": 1}, "icepool.Alignment": {"tf": 1}, "icepool.MultisetExpression": {"tf": 3.872983346207417}, "icepool.MultisetExpression.additive_union": {"tf": 1}, "icepool.MultisetExpression.difference": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.intersection": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.union": {"tf": 1}, "icepool.MultisetExpression.symmetric_difference": {"tf": 2}, "icepool.MultisetExpression.keep_outcomes": {"tf": 1}, "icepool.MultisetExpression.drop_outcomes": {"tf": 1}, "icepool.MultisetExpression.map_counts": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.multiply_counts": {"tf": 1}, "icepool.MultisetExpression.divide_counts": {"tf": 1}, "icepool.MultisetExpression.modulo_counts": {"tf": 1}, "icepool.MultisetExpression.keep_counts": {"tf": 2}, "icepool.MultisetExpression.unique": {"tf": 1}, "icepool.MultisetExpression.all_counts": {"tf": 2}, "icepool.MultisetExpression.all_straights_reduce_counts": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.MultisetEvaluator.prefix_generators": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.validate_arity": {"tf": 1}, "icepool.Deck.divide_counts": {"tf": 1}, "icepool.Deck.modulo_counts": {"tf": 1}, "icepool.evaluator.JointEvaluator.prefix_generators": {"tf": 1.4142135623730951}, "icepool.evaluator.JointEvaluator.validate_arity": {"tf": 1}, "icepool.evaluator.CountEvaluator": {"tf": 1}, "icepool.evaluator.HighestOutcomeAndCountEvaluator.alignment": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.evaluator.AllCountsEvaluator": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.__init__": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.__init__": {"tf": 1.4142135623730951}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1.7320508075688772}, "icepool.evaluator.ExpressionEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.prefix_generators": {"tf": 1.4142135623730951}, "icepool.evaluator.ExpressionEvaluator.validate_arity": {"tf": 1}, "icepool.typing.count_positional_parameters": {"tf": 1}}, "df": 48, "s": {"docs": {"icepool.MultisetExpression.all_counts": {"tf": 1.4142135623730951}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.keep": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.map_and_time": {"tf": 1}, "icepool.MultisetGenerator.outcomes": {"tf": 1}, "icepool.Alignment.outcomes": {"tf": 1}, "icepool.MultisetEvaluator.final_outcome": {"tf": 1}, "icepool.MultisetEvaluator.alignment": {"tf": 1}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}}, "df": 14}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.split": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.explode_to_pool": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.Pool.unique_dice": {"tf": 1}, "icepool.standard_pool": {"tf": 1}, "icepool.MultisetExpression.keep_outcomes": {"tf": 1}, "icepool.MultisetExpression.drop_outcomes": {"tf": 1}}, "df": 10}}}}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Population.format": {"tf": 2.23606797749979}}, "df": 1}}}}}, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die.pool": {"tf": 1}, "icepool.Deck.multiply_counts": {"tf": 1}}, "df": 2}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Die.equals": {"tf": 1.4142135623730951}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"icepool": {"tf": 1}, "icepool.MultisetGenerator": {"tf": 1}, "icepool.Deck.difference": {"tf": 1}, "icepool.Deck.union": {"tf": 1}, "icepool.Deck.symmetric_difference": {"tf": 1}, "icepool.Deck.divide_counts": {"tf": 1}, "icepool.Deck.modulo_counts": {"tf": 1}, "icepool.Deck.map": {"tf": 1}}, "df": 8, "s": {"docs": {"icepool.MultisetExpression.issuperset": {"tf": 1.4142135623730951}, "icepool.Deck.__init__": {"tf": 1}, "icepool.Deck.difference": {"tf": 1}, "icepool.Deck.intersection": {"tf": 1}, "icepool.Deal.__init__": {"tf": 2}, "icepool.Deal.deck": {"tf": 1}, "icepool.Deal.hand_sizes": {"tf": 1}, "icepool.Deal.total_cards_dealt": {"tf": 1}, "icepool.MultiDeal.__init__": {"tf": 2}, "icepool.MultiDeal.deck": {"tf": 1}, "icepool.MultiDeal.hand_sizes": {"tf": 1}, "icepool.MultiDeal.total_cards_dealt": {"tf": 1}}, "df": 12}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Die.binary_operator": {"tf": 1.4142135623730951}, "icepool.tupleize": {"tf": 1}, "icepool.vectorize": {"tf": 1}}, "df": 3}}}}}}, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {"icepool.multiset_function": {"tf": 1}}, "df": 1}}}}}, "n": {"docs": {"icepool": {"tf": 1}, "icepool.d": {"tf": 1}, "icepool.Die": {"tf": 1}, "icepool.Die.__init__": {"tf": 2}, "icepool.Die.reroll_to_pool": {"tf": 1.7320508075688772}, "icepool.Population.quantity": {"tf": 1.4142135623730951}, "icepool.Population.format": {"tf": 1}, "icepool.Symbols": {"tf": 2}, "icepool.Symbols.__init__": {"tf": 1.4142135623730951}, "icepool.Again": {"tf": 1}, "icepool.map": {"tf": 1.4142135623730951}, "icepool.map_function": {"tf": 1}, "icepool.map_and_time": {"tf": 1}, "icepool.Reroll": {"tf": 1.4142135623730951}, "icepool.Pool.__init__": {"tf": 1.4142135623730951}, "icepool.MultisetGenerator": {"tf": 1}, "icepool.Alignment": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1}, "icepool.MultisetExpression.symmetric_difference": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1}, "icepool.MultisetExpression.lowest": {"tf": 1}, "icepool.MultisetExpression.highest": {"tf": 1}, "icepool.MultisetExpression.maximum_match": {"tf": 1}, "icepool.MultisetExpression.all_straights": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.all_straights_reduce_counts": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.MultisetEvaluator.alignment": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.evaluate": {"tf": 1}, "icepool.Order": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1.4142135623730951}, "icepool.MultiDeal.__init__": {"tf": 1}, "icepool.multiset_function": {"tf": 1.4142135623730951}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 1.4142135623730951}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator": {"tf": 1.4142135623730951}, "icepool.evaluator.AllStraightsReduceCountsEvaluator": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}, "icepool.function.d": {"tf": 1}, "icepool.function.map": {"tf": 1.4142135623730951}, "icepool.function.map_function": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}, "icepool.typing.Order": {"tf": 1}}, "df": 45, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Outcome": {"tf": 1}, "icepool.Die.pool": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.Symbols": {"tf": 1}, "icepool.map_to_pool": {"tf": 1}, "icepool.multiset_function": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1}, "icepool.typing.Outcome": {"tf": 1}}, "df": 8}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Die.keep": {"tf": 1}, "icepool.MultisetExpression.difference": {"tf": 1}}, "df": 2, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Pool": {"tf": 1}}, "df": 1}}}}}}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool": {"tf": 1}, "icepool.MultisetEvaluator.order": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.order": {"tf": 1}, "icepool.evaluator.CompairEvalautor.order": {"tf": 1}}, "df": 4}}}, "e": {"docs": {"icepool.Pool.clear_cache": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 1.4142135623730951}}, "df": 2}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die": {"tf": 1}, "icepool.Die.keep": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.Population.quantity": {"tf": 1.4142135623730951}, "icepool.Population.median": {"tf": 1.4142135623730951}, "icepool.Population.median_low": {"tf": 1}, "icepool.Population.median_high": {"tf": 1}, "icepool.Population.quantile": {"tf": 1.4142135623730951}, "icepool.Population.quantile_low": {"tf": 1}, "icepool.Population.quantile_high": {"tf": 1}, "icepool.Vector.binary_operator": {"tf": 1}, "icepool.reduce": {"tf": 1}, "icepool.map": {"tf": 1.4142135623730951}, "icepool.map_function": {"tf": 1}, "icepool.map_to_pool": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.keep": {"tf": 1}, "icepool.MultisetExpression.sort_match": {"tf": 1}, "icepool.MultisetExpression.all_straights": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.MultisetEvaluator.final_outcome": {"tf": 1}, "icepool.Deck.map": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1}, "icepool.MultiDeal.__init__": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1}, "icepool.function.reduce": {"tf": 1}, "icepool.function.map": {"tf": 1.4142135623730951}, "icepool.function.map_function": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1}}, "df": 37, "s": {"docs": {"icepool.Die": {"tf": 1.4142135623730951}, "icepool.Reroll": {"tf": 1}}, "df": 2}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.MultisetEvaluator.evaluate": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}}, "df": 5, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.binary_operator": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.MultisetEvaluator.validate_arity": {"tf": 1}, "icepool.evaluator.JointEvaluator.validate_arity": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsSubsetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsProperSubsetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsSupersetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsProperSupersetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsEqualSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsNotEqualSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsDisjointSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.validate_arity": {"tf": 1}, "icepool.function.map": {"tf": 1}}, "df": 14}, "r": {"docs": {"icepool.Die.equals": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.reroll": {"tf": 1.4142135623730951}, "icepool.Die.filter": {"tf": 1.4142135623730951}, "icepool.Die.split": {"tf": 1.4142135623730951}, "icepool.Die.explode": {"tf": 1.4142135623730951}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.Die.explode_to_pool": {"tf": 1.4142135623730951}, "icepool.Die.reroll_to_pool": {"tf": 1.4142135623730951}, "icepool.map": {"tf": 1}, "icepool.map_and_time": {"tf": 1}, "icepool.map_to_pool": {"tf": 1}, "icepool.MultisetExpression.keep_outcomes": {"tf": 1}, "icepool.MultisetExpression.drop_outcomes": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 1}, "icepool.Deck.map": {"tf": 1.4142135623730951}, "icepool.function.map": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1}, "icepool.typing.count_positional_parameters": {"tf": 1}}, "df": 18}}}}, "s": {"docs": {"icepool.MultisetEvaluator": {"tf": 1}}, "df": 1}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.MultisetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1}}, "df": 6}}}}, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"icepool.MultisetEvaluator": {"tf": 1}}, "df": 1}}}}}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.clip": {"tf": 1}, "icepool.Again": {"tf": 1}}, "df": 2, "s": {"docs": {"icepool.Die.explode": {"tf": 1}, "icepool.Die.explode_to_pool": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.map_and_time": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}}, "df": 2}}}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.MultisetExpression": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.keep": {"tf": 1}}, "df": 2}}}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"icepool": {"tf": 1}, "icepool.Symbols": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}}, "df": 6}}, "c": {"docs": {}, "df": 0, "e": {"docs": {"icepool.MultisetExpression.issuperset": {"tf": 1}}, "df": 1}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Symbols": {"tf": 2.449489742783178}}, "df": 1, "s": {"docs": {"icepool.Population.format": {"tf": 1}, "icepool.Symbols": {"tf": 2}, "icepool.Symbols.__init__": {"tf": 1.4142135623730951}}, "df": 3}}}}}}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Die.reroll_to_pool": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"icepool.MultisetGenerator.order": {"tf": 1}, "icepool.MultisetExpression.order": {"tf": 1}, "icepool.MultisetEvaluator.validate_arity": {"tf": 1}, "icepool.evaluator.JointEvaluator.validate_arity": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.validate_arity": {"tf": 1}}, "df": 5}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Vector": {"tf": 1}, "icepool.MultisetGenerator": {"tf": 1.4142135623730951}, "icepool.MultisetExpression": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 1}}, "df": 4, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.function.map": {"tf": 1}}, "df": 3}}}}}, "i": {"docs": {}, "df": 0, "p": {"docs": {"icepool.Die.truncate": {"tf": 1}}, "df": 1, "s": {"docs": {"icepool.Die.clip": {"tf": 1}}, "df": 1}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.clip": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Pool.clear_cache": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool.multiset_function": {"tf": 1}}, "df": 1}}}}}}}, "e": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Die.unary_operator": {"tf": 1}, "icepool.Vector.unary_operator": {"tf": 1}}, "df": 2}}, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Alignment": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}}, "df": 5}}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {"icepool.Die.binary_operator": {"tf": 1}}, "df": 1}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.mean_time_to_sum": {"tf": 1}, "icepool.from_cumulative": {"tf": 2.23606797749979}, "icepool.function.from_cumulative": {"tf": 2.23606797749979}}, "df": 3, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.reduce": {"tf": 1}, "icepool.accumulate": {"tf": 1}, "icepool.function.reduce": {"tf": 1}, "icepool.function.accumulate": {"tf": 1}}, "df": 4}}}}}}}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.middle": {"tf": 1.4142135623730951}, "icepool.map": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 2}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 2}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 2}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 2}, "icepool.function.map": {"tf": 1}}, "df": 7, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Symbols": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}}, "df": 5}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"icepool.MultisetEvaluator": {"tf": 1}}, "df": 1}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Pool.__init__": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.multiset_function": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}}, "df": 6, "s": {"docs": {"icepool.Die.pool": {"tf": 1}, "icepool.MultisetExpression.sort_match": {"tf": 1}, "icepool.MultisetExpression.maximum_match": {"tf": 1}, "icepool.Deck.deal": {"tf": 1}}, "df": 4}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Die.map_to_pool": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "\u00e9": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Population.cramer_von_mises": {"tf": 1}}, "df": 1}}}}, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Population.sample": {"tf": 1}, "icepool.MultisetGenerator.sample": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"icepool.MultisetExpression.all_straights_reduce_counts": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.__init__": {"tf": 1}}, "df": 3}}}}}}}, "d": {"docs": {}, "df": 0, "f": {"docs": {"icepool.Population.quantities": {"tf": 1}, "icepool.Population.probabilities": {"tf": 1}, "icepool.Population.quantile": {"tf": 1}, "icepool.Population.quantile_low": {"tf": 1}, "icepool.Population.quantile_high": {"tf": 1}, "icepool.from_rv": {"tf": 1}, "icepool.function.from_rv": {"tf": 1}}, "df": 7, "s": {"docs": {"icepool.Population.kolmogorov_smirnov": {"tf": 1}, "icepool.Population.cramer_von_mises": {"tf": 1}}, "df": 2}}}, "s": {"docs": {}, "df": 0, "v": {"docs": {"icepool.Population.format": {"tf": 1}}, "df": 1}}}, "d": {"1": {"0": {"docs": {"icepool.Pool.__init__": {"tf": 1}}, "df": 1}, "2": {"docs": {"icepool.Pool.__init__": {"tf": 1.4142135623730951}}, "df": 1}, "docs": {}, "df": 0}, "3": {"docs": {"icepool.Die.__init__": {"tf": 1.4142135623730951}}, "df": 1, "+": {"3": {"docs": {"icepool.Die.__init__": {"tf": 1.4142135623730951}}, "df": 1}, "docs": {}, "df": 0}}, "4": {"docs": {"icepool.Pool.__init__": {"tf": 1}}, "df": 1}, "6": {"docs": {"icepool.d": {"tf": 1.4142135623730951}, "icepool.Die.__init__": {"tf": 2.6457513110645907}, "icepool.Die.binary_operator": {"tf": 1.4142135623730951}, "icepool.Die.pool": {"tf": 1}, "icepool.tupleize": {"tf": 1.7320508075688772}, "icepool.vectorize": {"tf": 1.7320508075688772}, "icepool.map": {"tf": 2}, "icepool.map_function": {"tf": 1.4142135623730951}, "icepool.Pool": {"tf": 1.4142135623730951}, "icepool.Pool.__init__": {"tf": 1}, "icepool.standard_pool": {"tf": 1}, "icepool.MultisetExpression.sort_match": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.maximum_match": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.compair_le": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.compair_gt": {"tf": 1.4142135623730951}, "icepool.multiset_function": {"tf": 1.4142135623730951}, "icepool.function.d": {"tf": 1.4142135623730951}, "icepool.function.map": {"tf": 2}, "icepool.function.map_function": {"tf": 1.4142135623730951}}, "df": 19}, "8": {"docs": {"icepool.Die.binary_operator": {"tf": 1.4142135623730951}, "icepool.Pool.__init__": {"tf": 1}, "icepool.standard_pool": {"tf": 1}}, "df": 3}, "docs": {"icepool.d": {"tf": 1}, "icepool.z": {"tf": 1}, "icepool.coin": {"tf": 1.7320508075688772}, "icepool.Die.__init__": {"tf": 2.23606797749979}, "icepool.Population.quantile": {"tf": 1}, "icepool.Population.quantile_low": {"tf": 1}, "icepool.Population.quantile_high": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.function.d": {"tf": 1}, "icepool.function.z": {"tf": 1}, "icepool.function.coin": {"tf": 1.7320508075688772}, "icepool.function.map": {"tf": 1}}, "df": 12, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"icepool": {"tf": 1}, "icepool.d": {"tf": 1}, "icepool.one_hot": {"tf": 1}, "icepool.Die": {"tf": 1.7320508075688772}, "icepool.Die.__init__": {"tf": 2}, "icepool.Die.binary_operator": {"tf": 1.7320508075688772}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.count": {"tf": 1}, "icepool.Die.keep": {"tf": 2.23606797749979}, "icepool.Die.lowest": {"tf": 2.449489742783178}, "icepool.Die.highest": {"tf": 2.23606797749979}, "icepool.Die.middle": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.Die.explode_to_pool": {"tf": 1.4142135623730951}, "icepool.Die.reroll_to_pool": {"tf": 3.4641016151377544}, "icepool.Die.equals": {"tf": 2}, "icepool.Again": {"tf": 1}, "icepool.from_cumulative": {"tf": 1}, "icepool.lowest": {"tf": 2.23606797749979}, "icepool.highest": {"tf": 2.6457513110645907}, "icepool.middle": {"tf": 1}, "icepool.min_outcome": {"tf": 1}, "icepool.max_outcome": {"tf": 1}, "icepool.align": {"tf": 2.23606797749979}, "icepool.align_range": {"tf": 2.23606797749979}, "icepool.commonize_denominator": {"tf": 2.23606797749979}, "icepool.reduce": {"tf": 2.23606797749979}, "icepool.accumulate": {"tf": 2.449489742783178}, "icepool.map": {"tf": 1.7320508075688772}, "icepool.map_function": {"tf": 1}, "icepool.map_and_time": {"tf": 1}, "icepool.map_to_pool": {"tf": 1}, "icepool.Pool": {"tf": 1.4142135623730951}, "icepool.Pool.__init__": {"tf": 2.23606797749979}, "icepool.Pool.raw_size": {"tf": 1}, "icepool.Pool.unique_dice": {"tf": 1}, "icepool.Pool.outcomes": {"tf": 1}, "icepool.Pool.min_outcome": {"tf": 1}, "icepool.Pool.max_outcome": {"tf": 1}, "icepool.standard_pool": {"tf": 1.4142135623730951}, "icepool.MultisetGenerator": {"tf": 1}, "icepool.MultisetExpression.lowest": {"tf": 1}, "icepool.MultisetExpression.highest": {"tf": 1}, "icepool.MultisetExpression.maximum_match": {"tf": 2}, "icepool.MultisetEvaluator.order": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.order": {"tf": 1}, "icepool.evaluator.CompairEvalautor.order": {"tf": 1}, "icepool.function.d": {"tf": 1}, "icepool.function.one_hot": {"tf": 1}, "icepool.function.from_cumulative": {"tf": 1}, "icepool.function.min_outcome": {"tf": 1}, "icepool.function.max_outcome": {"tf": 1}, "icepool.function.align": {"tf": 2.23606797749979}, "icepool.function.align_range": {"tf": 2.23606797749979}, "icepool.function.commonize_denominator": {"tf": 2.23606797749979}, "icepool.function.reduce": {"tf": 2.23606797749979}, "icepool.function.accumulate": {"tf": 2.449489742783178}, "icepool.function.map": {"tf": 1.7320508075688772}, "icepool.function.map_function": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1}}, "df": 61}, "t": {"docs": {"icepool.Die.__init__": {"tf": 1}}, "df": 1}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool": {"tf": 1}, "icepool.Die.lowest": {"tf": 1}, "icepool.Die.highest": {"tf": 1}, "icepool.Symbols": {"tf": 1}, "icepool.from_cumulative": {"tf": 1.4142135623730951}, "icepool.from_rv": {"tf": 1}, "icepool.MultisetEvaluator.evaluate": {"tf": 1}, "icepool.function.from_cumulative": {"tf": 1.4142135623730951}, "icepool.function.from_rv": {"tf": 1}}, "df": 9, "s": {"docs": {"icepool.MultisetEvaluator": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.d": {"tf": 1}, "icepool.z": {"tf": 1}, "icepool.function.d": {"tf": 1}, "icepool.function.z": {"tf": 1}}, "df": 4}}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool.stochastic_round": {"tf": 1}, "icepool.Die.stochastic_round": {"tf": 1}, "icepool.function.stochastic_round": {"tf": 1}}, "df": 3}}}}}}, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"icepool.from_rv": {"tf": 1}, "icepool.function.from_rv": {"tf": 1}}, "df": 2}}}}}, "j": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.MultisetExpression.isdisjoint": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {"icepool.d": {"tf": 2}, "icepool.z": {"tf": 1}, "icepool.coin": {"tf": 1}, "icepool.stochastic_round": {"tf": 1}, "icepool.one_hot": {"tf": 1}, "icepool.Die": {"tf": 1.7320508075688772}, "icepool.Die.__init__": {"tf": 3.605551275463989}, "icepool.Die.unary_operator": {"tf": 1}, "icepool.Die.binary_operator": {"tf": 2.23606797749979}, "icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.split": {"tf": 1}, "icepool.Die.truncate": {"tf": 1.4142135623730951}, "icepool.Die.clip": {"tf": 1}, "icepool.Die.set_range": {"tf": 2}, "icepool.Die.set_outcomes": {"tf": 1}, "icepool.Die.map": {"tf": 1}, "icepool.Die.if_else": {"tf": 1}, "icepool.Die.is_in": {"tf": 1.4142135623730951}, "icepool.Die.pool": {"tf": 1.7320508075688772}, "icepool.Die.keep": {"tf": 1}, "icepool.Die.lowest": {"tf": 1.7320508075688772}, "icepool.Die.highest": {"tf": 1.7320508075688772}, "icepool.Die.middle": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.Die.explode_to_pool": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1.4142135623730951}, "icepool.Die.zero": {"tf": 1.4142135623730951}, "icepool.Die.zero_outcome": {"tf": 1.4142135623730951}, "icepool.Die.cmp": {"tf": 1}, "icepool.Die.equals": {"tf": 2.449489742783178}, "icepool.Population": {"tf": 1}, "icepool.tupleize": {"tf": 1.7320508075688772}, "icepool.vectorize": {"tf": 1.7320508075688772}, "icepool.Vector.binary_operator": {"tf": 1}, "icepool.Symbols": {"tf": 1}, "icepool.Again": {"tf": 2.449489742783178}, "icepool.from_cumulative": {"tf": 1.4142135623730951}, "icepool.from_rv": {"tf": 1.7320508075688772}, "icepool.lowest": {"tf": 1.4142135623730951}, "icepool.highest": {"tf": 1.4142135623730951}, "icepool.middle": {"tf": 1}, "icepool.reduce": {"tf": 1}, "icepool.map": {"tf": 2.449489742783178}, "icepool.map_function": {"tf": 1.4142135623730951}, "icepool.map_and_time": {"tf": 1}, "icepool.map_to_pool": {"tf": 1.4142135623730951}, "icepool.Reroll": {"tf": 1}, "icepool.Pool.__init__": {"tf": 2.6457513110645907}, "icepool.standard_pool": {"tf": 2}, "icepool.MultisetExpression.keep": {"tf": 1}, "icepool.MultisetExpression.lowest": {"tf": 1}, "icepool.MultisetExpression.highest": {"tf": 1}, "icepool.MultisetExpression.evaluate": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.MultisetEvaluator.final_outcome": {"tf": 2}, "icepool.MultisetEvaluator.evaluate": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 2}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 2}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 2}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 2}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 2}, "icepool.function.d": {"tf": 2}, "icepool.function.z": {"tf": 1}, "icepool.function.coin": {"tf": 1}, "icepool.function.stochastic_round": {"tf": 1}, "icepool.function.one_hot": {"tf": 1}, "icepool.function.from_cumulative": {"tf": 1.4142135623730951}, "icepool.function.from_rv": {"tf": 1.7320508075688772}, "icepool.function.reduce": {"tf": 1}, "icepool.function.map": {"tf": 2.449489742783178}, "icepool.function.map_function": {"tf": 1.4142135623730951}, "icepool.function.map_and_time": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1.4142135623730951}}, "df": 78}, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Population.common_outcome_length": {"tf": 1}, "icepool.Vector.binary_operator": {"tf": 1}, "icepool.map_function": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1}, "icepool.multiset_function": {"tf": 1}, "icepool.function.map_function": {"tf": 1}}, "df": 7}, "c": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.pool": {"tf": 1}, "icepool.Die.keep": {"tf": 1}, "icepool.Population.kolmogorov_smirnov": {"tf": 1}, "icepool.Population.cramer_von_mises": {"tf": 1}, "icepool.Symbols": {"tf": 1.4142135623730951}, "icepool.Symbols.difference": {"tf": 1}, "icepool.Symbols.symmetric_difference": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.symmetric_difference": {"tf": 1}, "icepool.MultisetExpression.drop_outcomes": {"tf": 1}, "icepool.MultisetExpression.maximum_match": {"tf": 1}, "icepool.multiset_function": {"tf": 1}, "icepool.evaluator.CompairEvalautor.__init__": {"tf": 1}}, "df": 13, "s": {"docs": {"icepool.map_function": {"tf": 1}, "icepool.function.map_function": {"tf": 1}}, "df": 2}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die.unary_operator": {"tf": 1}, "icepool.Die.binary_operator": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.Again": {"tf": 1}, "icepool.MultisetEvaluator.evaluate": {"tf": 1}, "icepool.multiset_function": {"tf": 1}}, "df": 6}}}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Symbols": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1}, "icepool.MultisetExpression.count_subset": {"tf": 1}, "icepool.Deck.divide_counts": {"tf": 1}}, "df": 4, "s": {"docs": {"icepool.Die.simplify": {"tf": 1}, "icepool.Symbols.divide_counts": {"tf": 1}, "icepool.MultisetExpression.divide_counts": {"tf": 1}}, "df": 3}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Population.median": {"tf": 1}, "icepool.Population.quantile": {"tf": 1}}, "df": 2}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Symbols.count_subset": {"tf": 1}, "icepool.MultisetExpression.count_subset": {"tf": 2.449489742783178}, "icepool.evaluator.CountSubsetEvaluator.__init__": {"tf": 1.4142135623730951}}, "df": 3}}}}}, "d": {"docs": {"icepool.Die.zero": {"tf": 1}, "icepool.MultisetExpression.sort_match": {"tf": 1}}, "df": 2}}, "o": {"docs": {"icepool.Die": {"tf": 1.4142135623730951}, "icepool.Die.middle": {"tf": 1}, "icepool.Population.median": {"tf": 1}, "icepool.Population.quantile": {"tf": 1}, "icepool.Population.marginals": {"tf": 1}, "icepool.Again": {"tf": 1}, "icepool.middle": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1}, "icepool.MultisetExpression.symmetric_difference": {"tf": 1}, "icepool.MultisetExpression.all_counts": {"tf": 1}, "icepool.MultisetExpression.compair_lt": {"tf": 1}, "icepool.MultisetExpression.compair_le": {"tf": 1}, "icepool.MultisetExpression.compair_gt": {"tf": 1}, "icepool.MultisetExpression.compair_ge": {"tf": 1}, "icepool.MultisetExpression.compair_eq": {"tf": 1}, "icepool.MultisetExpression.compair_ne": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.MultisetEvaluator.alignment": {"tf": 1}, "icepool.multiset_function": {"tf": 1}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}}, "df": 23, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool": {"tf": 1}, "icepool.Die.__init__": {"tf": 1.7320508075688772}}, "df": 2}}}}}}}}}}}, "n": {"docs": {"icepool.d": {"tf": 1}, "icepool.Die.__init__": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.symmetric_difference": {"tf": 1}, "icepool.function.d": {"tf": 1}}, "df": 4, "e": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.zero": {"tf": 1}, "icepool.MultisetExpression.all_counts": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.__init__": {"tf": 1}}, "df": 4}}, "w": {"docs": {}, "df": 0, "n": {"docs": {"icepool.stochastic_round": {"tf": 1.4142135623730951}, "icepool.Die.stochastic_round": {"tf": 1.4142135623730951}, "icepool.Symbols.divide_counts": {"tf": 1}, "icepool.MultisetExpression.divide_counts": {"tf": 1}, "icepool.Deck.divide_counts": {"tf": 1}, "icepool.function.stochastic_round": {"tf": 1.4142135623730951}}, "df": 6}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.binary_operator": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.Die.equals": {"tf": 1.4142135623730951}, "icepool.map": {"tf": 1}, "icepool.Alignment": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1}, "icepool.MultisetExpression.lowest": {"tf": 1}, "icepool.MultisetExpression.highest": {"tf": 1}, "icepool.MultisetEvaluator.validate_arity": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1}, "icepool.MultiDeal.__init__": {"tf": 1}, "icepool.evaluator.JointEvaluator.validate_arity": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.validate_arity": {"tf": 1}, "icepool.function.map": {"tf": 1}}, "df": 15, "n": {"docs": {"icepool.multiset_function": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.coin": {"tf": 1}, "icepool.stochastic_round": {"tf": 2}, "icepool.Die.__init__": {"tf": 2}, "icepool.Die.simplify": {"tf": 1}, "icepool.Die.split": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 1.7320508075688772}, "icepool.Die.stochastic_round": {"tf": 2}, "icepool.Die.zero": {"tf": 1}, "icepool.from_rv": {"tf": 1.4142135623730951}, "icepool.commonize_denominator": {"tf": 1.4142135623730951}, "icepool.map_to_pool": {"tf": 1.7320508075688772}, "icepool.Reroll": {"tf": 1}, "icepool.function.coin": {"tf": 1}, "icepool.function.stochastic_round": {"tf": 2}, "icepool.function.from_rv": {"tf": 1.4142135623730951}, "icepool.function.commonize_denominator": {"tf": 1.4142135623730951}, "icepool.function.map_to_pool": {"tf": 1.7320508075688772}}, "df": 17, "s": {"docs": {"icepool.Die.__init__": {"tf": 1}}, "df": 1}}}}}}}}}}, "f": {"docs": {"icepool.map_function": {"tf": 1.4142135623730951}, "icepool.multiset_function": {"tf": 1.7320508075688772}, "icepool.function.map_function": {"tf": 1.4142135623730951}}, "df": 3, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"icepool.MultisetEvaluator.final_outcome": {"tf": 1}, "icepool.Order": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1}, "icepool.typing.Order": {"tf": 1}}, "df": 8, "d": {"docs": {"icepool.Die": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Again": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.explode": {"tf": 1.4142135623730951}, "icepool.Die.middle": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.Population.entropy": {"tf": 1}, "icepool.Population.format": {"tf": 1.7320508075688772}, "icepool.lowest": {"tf": 1.4142135623730951}, "icepool.highest": {"tf": 1.4142135623730951}, "icepool.middle": {"tf": 1.7320508075688772}, "icepool.accumulate": {"tf": 1}, "icepool.MultisetExpression.sort_match": {"tf": 1}, "icepool.MultisetExpression.expand": {"tf": 1}, "icepool.MultisetExpression.argsort": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.compair_lt": {"tf": 1}, "icepool.MultisetExpression.compair_le": {"tf": 1}, "icepool.MultisetExpression.compair_gt": {"tf": 1}, "icepool.MultisetExpression.compair_ge": {"tf": 1}, "icepool.MultisetExpression.compair_eq": {"tf": 1}, "icepool.MultisetExpression.compair_ne": {"tf": 1}, "icepool.MultisetEvaluator.final_outcome": {"tf": 1}, "icepool.MultisetEvaluator.order": {"tf": 1}, "icepool.MultisetEvaluator.alignment": {"tf": 1}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.__init__": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.order": {"tf": 1}, "icepool.evaluator.CompairEvalautor.__init__": {"tf": 1}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 1}, "icepool.evaluator.CompairEvalautor.order": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1}, "icepool.function.accumulate": {"tf": 1}}, "df": 33, "s": {"docs": {"icepool.Population.quantities": {"tf": 1}, "icepool.Population.probabilities": {"tf": 1}}, "df": 2}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.MultisetExpression.sort_match": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.maximum_match": {"tf": 2}, "icepool.MultisetExpression.compair_le": {"tf": 1}}, "df": 3}}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die.__init__": {"tf": 1.7320508075688772}, "icepool.Reroll": {"tf": 1}, "icepool.Deck.deal": {"tf": 1}}, "df": 3}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"icepool.MultisetEvaluator.order": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.order": {"tf": 1}, "icepool.evaluator.CompairEvalautor.order": {"tf": 1}}, "df": 3, "s": {"docs": {"icepool.Die.pool": {"tf": 1}, "icepool.evaluator.JointEvaluator.order": {"tf": 1}}, "df": 2}, "d": {"docs": {"icepool.Die.equals": {"tf": 1}, "icepool.evaluator.KeepEvaluator.order": {"tf": 1}}, "df": 2}}}}}}}}, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.explode": {"tf": 1.4142135623730951}, "icepool.Die.if_else": {"tf": 1}, "icepool.Die.explode_to_pool": {"tf": 1.4142135623730951}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.Again": {"tf": 3.3166247903554}, "icepool.reduce": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.map_function": {"tf": 1.7320508075688772}, "icepool.Reroll": {"tf": 1.4142135623730951}, "icepool.RerollType.Reroll": {"tf": 1}, "icepool.function.reduce": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.function.map_function": {"tf": 1.7320508075688772}, "icepool.typing.RerollType.Reroll": {"tf": 1}}, "df": 17}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Pool.__init__": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1}, "icepool.MultiDeal.__init__": {"tf": 1}}, "df": 3, "s": {"docs": {"icepool.MultisetExpression.sort_match": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}}, "df": 4}}}}}}}, "c": {"docs": {}, "df": 0, "k": {"docs": {"icepool.Population": {"tf": 1}, "icepool.Population.sample": {"tf": 1}, "icepool.tupleize": {"tf": 1}, "icepool.vectorize": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.MultisetExpression.issuperset": {"tf": 1}, "icepool.Deck.__init__": {"tf": 2.449489742783178}, "icepool.Deck.deal": {"tf": 1}, "icepool.Deck.difference": {"tf": 1}, "icepool.Deck.union": {"tf": 1}, "icepool.Deck.symmetric_difference": {"tf": 1}, "icepool.Deck.multiply_counts": {"tf": 1}, "icepool.Deck.map": {"tf": 1.4142135623730951}, "icepool.Deal": {"tf": 1}, "icepool.Deal.__init__": {"tf": 2}, "icepool.Deal.deck": {"tf": 1}, "icepool.Deal.outcomes": {"tf": 1.4142135623730951}, "icepool.MultiDeal": {"tf": 1}, "icepool.MultiDeal.__init__": {"tf": 2}, "icepool.MultiDeal.deck": {"tf": 1}, "icepool.MultiDeal.outcomes": {"tf": 1.4142135623730951}}, "df": 21, "s": {"docs": {"icepool.Deck.additive_union": {"tf": 1}, "icepool.Deck.intersection": {"tf": 1}}, "df": 2}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.map": {"tf": 1}, "icepool.map_function": {"tf": 1.4142135623730951}, "icepool.multiset_function": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.function.map_function": {"tf": 1.4142135623730951}}, "df": 5}}}}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Again": {"tf": 1}}, "df": 1}}}}}, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Reroll": {"tf": 1}}, "df": 1}}}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.MultisetExpression": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.highest": {"tf": 1}, "icepool.MultisetExpression.sort_match": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.maximum_match": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.expand": {"tf": 1}, "icepool.MultisetExpression.all_counts": {"tf": 1}, "icepool.MultisetExpression.all_straights": {"tf": 1}, "icepool.MultisetExpression.argsort": {"tf": 1}, "icepool.MultisetExpression.compair_lt": {"tf": 1}, "icepool.MultisetExpression.compair_le": {"tf": 1}, "icepool.MultisetExpression.compair_gt": {"tf": 1}, "icepool.MultisetExpression.compair_ge": {"tf": 1}, "icepool.MultisetExpression.compair_eq": {"tf": 1}, "icepool.MultisetExpression.compair_ne": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.MultisetEvaluator.order": {"tf": 1.4142135623730951}, "icepool.Order.merge": {"tf": 1.7320508075688772}, "icepool.evaluator.JointEvaluator.order": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.KeepEvaluator.__init__": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.order": {"tf": 1.4142135623730951}, "icepool.evaluator.CompairEvalautor.__init__": {"tf": 1.4142135623730951}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.order": {"tf": 1.4142135623730951}, "icepool.typing.Order.merge": {"tf": 1.7320508075688772}}, "df": 28}}}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.MultisetExpression.compair_le": {"tf": 1}, "icepool.MultisetExpression.compair_gt": {"tf": 1}}, "df": 2}}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.MultisetGenerator": {"tf": 1}, "icepool.MultisetExpression.issuperset": {"tf": 1.4142135623730951}, "icepool.Deck.deal": {"tf": 1.4142135623730951}, "icepool.Deal": {"tf": 1}, "icepool.Deal.__init__": {"tf": 2}, "icepool.MultiDeal": {"tf": 1}, "icepool.MultiDeal.__init__": {"tf": 2}}, "df": 7, "s": {"docs": {"icepool.MultisetGenerator": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Deal.__init__": {"tf": 1}, "icepool.MultiDeal.__init__": {"tf": 1}}, "df": 2}}}, "t": {"docs": {"icepool.Deal.deck": {"tf": 1}, "icepool.Deal.hand_sizes": {"tf": 1}, "icepool.Deal.total_cards_dealt": {"tf": 1}, "icepool.MultiDeal.deck": {"tf": 1}, "icepool.MultiDeal.hand_sizes": {"tf": 1}, "icepool.MultiDeal.total_cards_dealt": {"tf": 1}}, "df": 6}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Symbols": {"tf": 1}, "icepool.MultisetExpression.all_straights": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator": {"tf": 1}}, "df": 3, "s": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Population.denominator": {"tf": 1}, "icepool.Deck": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}, "icepool.Deck.size": {"tf": 1}}, "df": 5}, "d": {"docs": {"icepool.Deck.__init__": {"tf": 1}}, "df": 1}}}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Die.equals": {"tf": 1}}, "df": 1}}, "e": {"docs": {"icepool.Vector.binary_operator": {"tf": 1}}, "df": 1}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.lowest": {"tf": 2}, "icepool.Die.highest": {"tf": 2}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.Symbols": {"tf": 1}, "icepool.lowest": {"tf": 2}, "icepool.highest": {"tf": 2.23606797749979}, "icepool.MultisetExpression": {"tf": 1}, "icepool.MultisetExpression.difference": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.drop_outcomes": {"tf": 1}, "icepool.MultisetExpression.keep_counts": {"tf": 1}, "icepool.MultisetExpression.lowest": {"tf": 2.23606797749979}, "icepool.MultisetExpression.highest": {"tf": 2.23606797749979}, "icepool.MultisetExpression.sort_match": {"tf": 1}}, "df": 14, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.keep": {"tf": 1}, "icepool.Die.lowest": {"tf": 1.4142135623730951}, "icepool.Die.highest": {"tf": 1.4142135623730951}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.lowest": {"tf": 1.4142135623730951}, "icepool.highest": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.drop_outcomes": {"tf": 1}, "icepool.MultisetExpression.lowest": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.highest": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.sort_match": {"tf": 1.4142135623730951}}, "df": 10}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Symbols": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {"icepool.MultisetExpression.keep_outcomes": {"tf": 1}, "icepool.MultisetExpression.drop_outcomes": {"tf": 1}}, "df": 2}}}, "a": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Die.keep": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1}}, "df": 2}}}}}}, "y": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"icepool.Die.map_to_pool": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"icepool.Die.equals": {"tf": 1}}, "df": 1}}, "s": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Symbols": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {"icepool": {"tf": 1}, "icepool.d": {"tf": 1.7320508075688772}, "icepool.z": {"tf": 1}, "icepool.coin": {"tf": 1.4142135623730951}, "icepool.stochastic_round": {"tf": 1.4142135623730951}, "icepool.one_hot": {"tf": 1.4142135623730951}, "icepool.Die": {"tf": 2.23606797749979}, "icepool.Die.__init__": {"tf": 4.58257569495584}, "icepool.Die.unary_operator": {"tf": 1.7320508075688772}, "icepool.Die.binary_operator": {"tf": 2}, "icepool.Die.reroll": {"tf": 2}, "icepool.Die.filter": {"tf": 2}, "icepool.Die.split": {"tf": 1.7320508075688772}, "icepool.Die.explode": {"tf": 2.449489742783178}, "icepool.Die.is_in": {"tf": 1}, "icepool.Die.count": {"tf": 1}, "icepool.Die.pool": {"tf": 1.4142135623730951}, "icepool.Die.keep": {"tf": 2.23606797749979}, "icepool.Die.lowest": {"tf": 1}, "icepool.Die.highest": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 2.6457513110645907}, "icepool.Die.explode_to_pool": {"tf": 2.449489742783178}, "icepool.Die.reroll_to_pool": {"tf": 2.6457513110645907}, "icepool.Die.zero": {"tf": 1}, "icepool.Die.zero_outcome": {"tf": 1.4142135623730951}, "icepool.Die.cmp": {"tf": 1}, "icepool.Die.equals": {"tf": 2.8284271247461903}, "icepool.Population": {"tf": 1}, "icepool.Population.quantity": {"tf": 1.4142135623730951}, "icepool.Population.probability": {"tf": 1}, "icepool.Population.mode": {"tf": 1}, "icepool.Population.median": {"tf": 1}, "icepool.Population.median_low": {"tf": 1}, "icepool.Population.median_high": {"tf": 1}, "icepool.Population.quantile": {"tf": 1}, "icepool.Population.quantile_low": {"tf": 1}, "icepool.Population.quantile_high": {"tf": 1}, "icepool.Population.entropy": {"tf": 1}, "icepool.Population.marginals": {"tf": 1}, "icepool.Population.to_one_hot": {"tf": 1.4142135623730951}, "icepool.Population.sample": {"tf": 1}, "icepool.Population.format": {"tf": 1.7320508075688772}, "icepool.tupleize": {"tf": 2.6457513110645907}, "icepool.vectorize": {"tf": 2.6457513110645907}, "icepool.Vector": {"tf": 1}, "icepool.Vector.binary_operator": {"tf": 1.4142135623730951}, "icepool.Symbols": {"tf": 4.358898943540674}, "icepool.Symbols.__init__": {"tf": 2.449489742783178}, "icepool.Symbols.issubset": {"tf": 1}, "icepool.Symbols.issuperset": {"tf": 1}, "icepool.Again": {"tf": 2}, "icepool.CountsKeysView": {"tf": 1.4142135623730951}, "icepool.CountsValuesView": {"tf": 1.4142135623730951}, "icepool.CountsItemsView": {"tf": 1}, "icepool.from_cumulative": {"tf": 1.7320508075688772}, "icepool.from_rv": {"tf": 1.7320508075688772}, "icepool.lowest": {"tf": 1.4142135623730951}, "icepool.highest": {"tf": 1.4142135623730951}, "icepool.middle": {"tf": 1.4142135623730951}, "icepool.align": {"tf": 1}, "icepool.align_range": {"tf": 1}, "icepool.commonize_denominator": {"tf": 1}, "icepool.reduce": {"tf": 1.7320508075688772}, "icepool.accumulate": {"tf": 1.7320508075688772}, "icepool.map": {"tf": 2.8284271247461903}, "icepool.map_function": {"tf": 2}, "icepool.map_and_time": {"tf": 2}, "icepool.map_to_pool": {"tf": 2.8284271247461903}, "icepool.Pool": {"tf": 1.4142135623730951}, "icepool.Pool.__init__": {"tf": 3.3166247903554}, "icepool.Pool.additive_union": {"tf": 1}, "icepool.standard_pool": {"tf": 1.7320508075688772}, "icepool.MultisetGenerator": {"tf": 1.7320508075688772}, "icepool.MultisetGenerator.order": {"tf": 1}, "icepool.MultisetGenerator.sample": {"tf": 1.4142135623730951}, "icepool.Alignment": {"tf": 1.4142135623730951}, "icepool.MultisetExpression": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.order": {"tf": 1}, "icepool.MultisetExpression.additive_union": {"tf": 1}, "icepool.MultisetExpression.difference": {"tf": 2}, "icepool.MultisetExpression.intersection": {"tf": 2}, "icepool.MultisetExpression.union": {"tf": 1}, "icepool.MultisetExpression.symmetric_difference": {"tf": 1}, "icepool.MultisetExpression.keep_outcomes": {"tf": 1}, "icepool.MultisetExpression.drop_outcomes": {"tf": 1}, "icepool.MultisetExpression.map_counts": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.keep": {"tf": 2}, "icepool.MultisetExpression.sort_match": {"tf": 1}, "icepool.MultisetExpression.maximum_match": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.evaluate": {"tf": 2}, "icepool.MultisetExpression.all_straights_reduce_counts": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.issubset": {"tf": 2}, "icepool.MultisetExpression.issuperset": {"tf": 3.3166247903554}, "icepool.MultisetExpression.compair_le": {"tf": 1}, "icepool.MultisetExpression.compair_gt": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 2}, "icepool.MultisetEvaluator.next_state": {"tf": 2.8284271247461903}, "icepool.MultisetEvaluator.final_outcome": {"tf": 2.6457513110645907}, "icepool.MultisetEvaluator.range_alignment": {"tf": 1.7320508075688772}, "icepool.MultisetEvaluator.validate_arity": {"tf": 1}, "icepool.MultisetEvaluator.evaluate": {"tf": 2.6457513110645907}, "icepool.Deck": {"tf": 1}, "icepool.Deck.__init__": {"tf": 2.6457513110645907}, "icepool.Deck.deal": {"tf": 1}, "icepool.Deck.map": {"tf": 2}, "icepool.Deal": {"tf": 1.4142135623730951}, "icepool.Deal.__init__": {"tf": 1}, "icepool.Deal.hand_sizes": {"tf": 1}, "icepool.Deal.outcomes": {"tf": 1}, "icepool.MultiDeal": {"tf": 1}, "icepool.MultiDeal.__init__": {"tf": 1.4142135623730951}, "icepool.MultiDeal.hand_sizes": {"tf": 1}, "icepool.MultiDeal.outcomes": {"tf": 1}, "icepool.multiset_function": {"tf": 4.123105625617661}, "icepool.evaluator.JointEvaluator": {"tf": 1}, "icepool.evaluator.JointEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.JointEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.evaluator.JointEvaluator.validate_arity": {"tf": 1}, "icepool.evaluator.HighestOutcomeAndCountEvaluator": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 2.8284271247461903}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 2.6457513110645907}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"tf": 1.7320508075688772}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"tf": 1.7320508075688772}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"tf": 1.7320508075688772}, "icepool.evaluator.AllStraightsReduceCountsEvaluator": {"tf": 1.4142135623730951}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"tf": 1.7320508075688772}, "icepool.evaluator.ComparisonEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsSubsetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsProperSubsetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsSupersetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsProperSupersetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsEqualSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsNotEqualSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsDisjointSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.ConstantEvaluator": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 2.8284271247461903}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 2.6457513110645907}, "icepool.evaluator.KeepEvaluator": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 2.6457513110645907}, "icepool.evaluator.CompairEvalautor.__init__": {"tf": 1.7320508075688772}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 2.8284271247461903}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 2.6457513110645907}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 2.6457513110645907}, "icepool.evaluator.ExpressionEvaluator.validate_arity": {"tf": 1}, "icepool.function.d": {"tf": 1.7320508075688772}, "icepool.function.z": {"tf": 1}, "icepool.function.coin": {"tf": 1.4142135623730951}, "icepool.function.stochastic_round": {"tf": 1.4142135623730951}, "icepool.function.one_hot": {"tf": 1.4142135623730951}, "icepool.function.from_cumulative": {"tf": 1.7320508075688772}, "icepool.function.from_rv": {"tf": 1.7320508075688772}, "icepool.function.align": {"tf": 1}, "icepool.function.align_range": {"tf": 1}, "icepool.function.commonize_denominator": {"tf": 1}, "icepool.function.reduce": {"tf": 1.7320508075688772}, "icepool.function.accumulate": {"tf": 1.7320508075688772}, "icepool.function.map": {"tf": 2.8284271247461903}, "icepool.function.map_function": {"tf": 2}, "icepool.function.map_and_time": {"tf": 2}, "icepool.function.map_to_pool": {"tf": 2.8284271247461903}, "icepool.typing.S": {"tf": 1}, "icepool.typing.Qs": {"tf": 1.4142135623730951}, "icepool.typing.count_positional_parameters": {"tf": 1}}, "df": 163, "n": {"docs": {"icepool": {"tf": 1.4142135623730951}, "icepool.coin": {"tf": 1.7320508075688772}, "icepool.one_hot": {"tf": 1}, "icepool.Die.__init__": {"tf": 1}, "icepool.Die.reroll": {"tf": 1.4142135623730951}, "icepool.Die.filter": {"tf": 1.4142135623730951}, "icepool.Die.split": {"tf": 1}, "icepool.Die.explode": {"tf": 1.4142135623730951}, "icepool.Die.keep": {"tf": 1}, "icepool.Die.explode_to_pool": {"tf": 2}, "icepool.Die.reroll_to_pool": {"tf": 1.4142135623730951}, "icepool.Die.equals": {"tf": 1}, "icepool.Population.scale_quantities": {"tf": 1}, "icepool.Population.marginals": {"tf": 1}, "icepool.Symbols": {"tf": 2.23606797749979}, "icepool.Symbols.__init__": {"tf": 1}, "icepool.Symbols.multiply_counts": {"tf": 1}, "icepool.Symbols.divide_counts": {"tf": 1}, "icepool.CountsItemsView": {"tf": 1}, "icepool.from_rv": {"tf": 1}, "icepool.lowest": {"tf": 1.4142135623730951}, "icepool.highest": {"tf": 1.4142135623730951}, "icepool.middle": {"tf": 1.4142135623730951}, "icepool.reduce": {"tf": 1.4142135623730951}, "icepool.accumulate": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.map_and_time": {"tf": 1.4142135623730951}, "icepool.Reroll": {"tf": 1}, "icepool.RerollType.Reroll": {"tf": 1}, "icepool.Pool": {"tf": 1.4142135623730951}, "icepool.MultisetExpression": {"tf": 1}, "icepool.MultisetExpression.difference": {"tf": 1}, "icepool.MultisetExpression.keep_outcomes": {"tf": 1}, "icepool.MultisetExpression.drop_outcomes": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1}, "icepool.MultisetExpression.sort_match": {"tf": 1}, "icepool.MultisetExpression.maximum_match": {"tf": 1}, "icepool.MultisetExpression.all_counts": {"tf": 1}, "icepool.MultisetExpression.count_subset": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.MultisetEvaluator.range_alignment": {"tf": 1}, "icepool.MultisetEvaluator.prefix_generators": {"tf": 1}, "icepool.MultisetEvaluator.validate_arity": {"tf": 1}, "icepool.MultisetEvaluator.evaluate": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}, "icepool.Deal": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1}, "icepool.MultiDeal": {"tf": 1}, "icepool.MultiDeal.__init__": {"tf": 1}, "icepool.multiset_function": {"tf": 1.7320508075688772}, "icepool.evaluator.JointEvaluator.prefix_generators": {"tf": 1}, "icepool.evaluator.JointEvaluator.validate_arity": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.__init__": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.ConstantEvaluator": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1.7320508075688772}, "icepool.evaluator.ExpressionEvaluator": {"tf": 1.4142135623730951}, "icepool.evaluator.ExpressionEvaluator.prefix_generators": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.validate_arity": {"tf": 1}, "icepool.function.coin": {"tf": 1.7320508075688772}, "icepool.function.one_hot": {"tf": 1}, "icepool.function.from_rv": {"tf": 1}, "icepool.function.reduce": {"tf": 1.4142135623730951}, "icepool.function.accumulate": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1.4142135623730951}, "icepool.typing.T": {"tf": 1}, "icepool.typing.T_co": {"tf": 1}, "icepool.typing.T_contra": {"tf": 1}, "icepool.typing.RerollType.Reroll": {"tf": 1}, "icepool.typing.ImplicitConversionError": {"tf": 1}}, "df": 77, "d": {"docs": {"icepool": {"tf": 1}, "icepool.coin": {"tf": 1}, "icepool.stochastic_round": {"tf": 1}, "icepool.one_hot": {"tf": 1}, "icepool.Outcome": {"tf": 1}, "icepool.Die": {"tf": 1.4142135623730951}, "icepool.Die.__init__": {"tf": 1.7320508075688772}, "icepool.Die.unary_operator": {"tf": 1}, "icepool.Die.binary_operator": {"tf": 2}, "icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.split": {"tf": 1.4142135623730951}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Die.explode": {"tf": 1.4142135623730951}, "icepool.Die.if_else": {"tf": 1}, "icepool.Die.count": {"tf": 1}, "icepool.Die.pool": {"tf": 1}, "icepool.Die.keep": {"tf": 2.23606797749979}, "icepool.Die.lowest": {"tf": 1.7320508075688772}, "icepool.Die.highest": {"tf": 1.7320508075688772}, "icepool.Die.middle": {"tf": 1.4142135623730951}, "icepool.Die.map_to_pool": {"tf": 1.4142135623730951}, "icepool.Die.explode_to_pool": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 2}, "icepool.Die.stochastic_round": {"tf": 1}, "icepool.Die.cmp": {"tf": 1.4142135623730951}, "icepool.Die.sign": {"tf": 1.4142135623730951}, "icepool.Die.equals": {"tf": 1.7320508075688772}, "icepool.Population": {"tf": 1.4142135623730951}, "icepool.Population.quantile": {"tf": 1}, "icepool.Population.to_one_hot": {"tf": 1}, "icepool.Population.sample": {"tf": 1}, "icepool.Population.format": {"tf": 1}, "icepool.tupleize": {"tf": 1.4142135623730951}, "icepool.vectorize": {"tf": 1.4142135623730951}, "icepool.Vector.binary_operator": {"tf": 1}, "icepool.Symbols": {"tf": 2}, "icepool.Symbols.__init__": {"tf": 1}, "icepool.Symbols.issubset": {"tf": 1}, "icepool.Symbols.issuperset": {"tf": 1}, "icepool.Again": {"tf": 2.23606797749979}, "icepool.CountsKeysView": {"tf": 1}, "icepool.CountsValuesView": {"tf": 1}, "icepool.CountsItemsView": {"tf": 1}, "icepool.lowest": {"tf": 1.4142135623730951}, "icepool.highest": {"tf": 1.4142135623730951}, "icepool.middle": {"tf": 1}, "icepool.reduce": {"tf": 1}, "icepool.accumulate": {"tf": 1}, "icepool.map": {"tf": 1.4142135623730951}, "icepool.map_function": {"tf": 1}, "icepool.map_and_time": {"tf": 1}, "icepool.map_to_pool": {"tf": 1.4142135623730951}, "icepool.Reroll": {"tf": 1}, "icepool.Pool": {"tf": 1}, "icepool.MultisetGenerator": {"tf": 2}, "icepool.MultisetGenerator.order": {"tf": 1}, "icepool.MultisetGenerator.sample": {"tf": 1}, "icepool.MultisetExpression": {"tf": 2}, "icepool.MultisetExpression.order": {"tf": 1}, "icepool.MultisetExpression.keep_outcomes": {"tf": 1}, "icepool.MultisetExpression.drop_outcomes": {"tf": 1}, "icepool.MultisetExpression.map_counts": {"tf": 1}, "icepool.MultisetExpression.keep_counts": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.lowest": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.highest": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.sort_match": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.maximum_match": {"tf": 2}, "icepool.MultisetExpression.expand": {"tf": 1}, "icepool.MultisetExpression.count": {"tf": 1}, "icepool.MultisetExpression.all_counts": {"tf": 1}, "icepool.MultisetExpression.largest_count_and_outcome": {"tf": 1}, "icepool.MultisetExpression.count_subset": {"tf": 1}, "icepool.MultisetExpression.largest_straight_and_outcome": {"tf": 1}, "icepool.MultisetExpression.issuperset": {"tf": 1}, "icepool.MultisetExpression.isdisjoint": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.final_outcome": {"tf": 1}, "icepool.MultisetEvaluator.sample": {"tf": 1}, "icepool.Order.merge": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}, "icepool.multiset_function": {"tf": 1.4142135623730951}, "icepool.evaluator.JointEvaluator.order": {"tf": 1}, "icepool.evaluator.ExpandEvaluator": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.__init__": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.any_all": {"tf": 1.4142135623730951}, "icepool.evaluator.ComparisonEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsSubsetEvaluator.any_all": {"tf": 1.4142135623730951}, "icepool.evaluator.IsSubsetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsProperSubsetEvaluator.any_all": {"tf": 1.4142135623730951}, "icepool.evaluator.IsProperSubsetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsSupersetEvaluator.any_all": {"tf": 1.4142135623730951}, "icepool.evaluator.IsSupersetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsProperSupersetEvaluator.any_all": {"tf": 1.4142135623730951}, "icepool.evaluator.IsProperSupersetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsEqualSetEvaluator.any_all": {"tf": 1.4142135623730951}, "icepool.evaluator.IsEqualSetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsNotEqualSetEvaluator.any_all": {"tf": 1.4142135623730951}, "icepool.evaluator.IsNotEqualSetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsDisjointSetEvaluator.any_all": {"tf": 1.4142135623730951}, "icepool.evaluator.IsDisjointSetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.ConstantEvaluator": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CompairEvalautor": {"tf": 1.4142135623730951}, "icepool.evaluator.CompairEvalautor.__init__": {"tf": 2.23606797749979}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1}, "icepool.function.coin": {"tf": 1}, "icepool.function.stochastic_round": {"tf": 1}, "icepool.function.one_hot": {"tf": 1}, "icepool.function.reduce": {"tf": 1}, "icepool.function.accumulate": {"tf": 1}, "icepool.function.map": {"tf": 1.4142135623730951}, "icepool.function.map_function": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1.4142135623730951}, "icepool.typing.Order.merge": {"tf": 1}, "icepool.typing.Outcome": {"tf": 1}}, "df": 125, "/": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die.set_range": {"tf": 1}, "icepool.Die.set_outcomes": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.function.map": {"tf": 1}}, "df": 4}}}}, "y": {"docs": {"icepool.Die": {"tf": 1.4142135623730951}, "icepool.Die.__init__": {"tf": 1}, "icepool.Die.keep": {"tf": 1}, "icepool.Population.modal_quantity": {"tf": 1}, "icepool.Population.format": {"tf": 1}, "icepool.Symbols": {"tf": 1}, "icepool.Symbols.isdisjoint": {"tf": 1}, "icepool.Symbols.has_negative_counts": {"tf": 1}, "icepool.Again": {"tf": 2}, "icepool.align": {"tf": 1}, "icepool.align_range": {"tf": 1}, "icepool.commonize_denominator": {"tf": 1}, "icepool.Pool.additive_union": {"tf": 1}, "icepool.MultisetGenerator.order": {"tf": 1.7320508075688772}, "icepool.Alignment": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.order": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.additive_union": {"tf": 1}, "icepool.MultisetExpression.difference": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.intersection": {"tf": 1}, "icepool.MultisetExpression.union": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.keep": {"tf": 1}, "icepool.MultisetExpression.all_counts": {"tf": 1}, "icepool.MultisetExpression.isdisjoint": {"tf": 1}, "icepool.MultisetExpression.compair_lt": {"tf": 1}, "icepool.MultisetExpression.compair_le": {"tf": 1}, "icepool.MultisetExpression.compair_gt": {"tf": 1}, "icepool.MultisetExpression.compair_ge": {"tf": 1}, "icepool.MultisetExpression.compair_eq": {"tf": 1}, "icepool.MultisetExpression.compair_ne": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.MultisetEvaluator.order": {"tf": 1}, "icepool.MultisetEvaluator.range_alignment": {"tf": 1.7320508075688772}, "icepool.MultisetEvaluator.validate_arity": {"tf": 1.4142135623730951}, "icepool.Order.merge": {"tf": 1.4142135623730951}, "icepool.multiset_function": {"tf": 1.4142135623730951}, "icepool.evaluator.JointEvaluator.next_state": {"tf": 1}, "icepool.evaluator.JointEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.JointEvaluator.validate_arity": {"tf": 1.4142135623730951}, "icepool.evaluator.ExpandEvaluator.order": {"tf": 1}, "icepool.evaluator.SumEvaluator.order": {"tf": 1}, "icepool.evaluator.CountEvaluator.order": {"tf": 1}, "icepool.evaluator.AnyEvaluator.order": {"tf": 1}, "icepool.evaluator.HighestOutcomeAndCountEvaluator.order": {"tf": 1}, "icepool.evaluator.LargestCountEvaluator": {"tf": 1}, "icepool.evaluator.LargestCountEvaluator.order": {"tf": 1}, "icepool.evaluator.LargestCountAndOutcomeEvaluator": {"tf": 1}, "icepool.evaluator.LargestCountAndOutcomeEvaluator.order": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.order": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.__init__": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.order": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"tf": 1.7320508075688772}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"tf": 1.7320508075688772}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"tf": 1.7320508075688772}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"tf": 1.7320508075688772}, "icepool.evaluator.ComparisonEvaluator.any_all": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.order": {"tf": 1}, "icepool.evaluator.IsSubsetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsProperSubsetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsSupersetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsProperSupersetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsEqualSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsNotEqualSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsDisjointSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.order": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.order": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.validate_arity": {"tf": 1.4142135623730951}, "icepool.function.align": {"tf": 1}, "icepool.function.align_range": {"tf": 1}, "icepool.function.commonize_denominator": {"tf": 1}, "icepool.typing.Order.merge": {"tf": 1.4142135623730951}}, "df": 75, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool": {"tf": 1}}, "df": 1}}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"icepool.map_function": {"tf": 1}, "icepool.function.map_function": {"tf": 1}}, "df": 2}}}}}, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die.split": {"tf": 1}, "icepool.Again": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.MultisetGenerator.equals": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.typing.U": {"tf": 1}, "icepool.typing.U_co": {"tf": 1}}, "df": 7}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {"icepool.reduce": {"tf": 1}, "icepool.accumulate": {"tf": 1}, "icepool.function.reduce": {"tf": 1}, "icepool.function.accumulate": {"tf": 1}}, "df": 4}}}}}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.MultisetExpression.keep": {"tf": 1}}, "df": 1}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"icepool": {"tf": 1.4142135623730951}, "icepool.one_hot": {"tf": 1}, "icepool.Outcome": {"tf": 1}, "icepool.Die": {"tf": 1.4142135623730951}, "icepool.Die.__init__": {"tf": 1.4142135623730951}, "icepool.Die.unary_operator": {"tf": 1}, "icepool.Die.binary_operator": {"tf": 1.7320508075688772}, "icepool.Die.truncate": {"tf": 1}, "icepool.Die.clip": {"tf": 1}, "icepool.Die.set_range": {"tf": 1.4142135623730951}, "icepool.Die.set_outcomes": {"tf": 1.4142135623730951}, "icepool.Die.count": {"tf": 1}, "icepool.Die.keep": {"tf": 1.4142135623730951}, "icepool.Die.lowest": {"tf": 1.4142135623730951}, "icepool.Die.highest": {"tf": 1.4142135623730951}, "icepool.Die.middle": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1.7320508075688772}, "icepool.Die.zero_outcome": {"tf": 1}, "icepool.Die.cmp": {"tf": 1}, "icepool.Die.equals": {"tf": 1}, "icepool.Population.outcomes": {"tf": 1}, "icepool.Population.mode": {"tf": 1}, "icepool.Population.sample": {"tf": 1}, "icepool.Population.format": {"tf": 2}, "icepool.tupleize": {"tf": 1.4142135623730951}, "icepool.vectorize": {"tf": 1.4142135623730951}, "icepool.Vector.unary_operator": {"tf": 1}, "icepool.Vector.binary_operator": {"tf": 1}, "icepool.Symbols": {"tf": 1.4142135623730951}, "icepool.Symbols.issubset": {"tf": 1}, "icepool.Symbols.issuperset": {"tf": 1}, "icepool.Symbols.has_negative_counts": {"tf": 1}, "icepool.Again": {"tf": 2.23606797749979}, "icepool.from_cumulative": {"tf": 1}, "icepool.lowest": {"tf": 1.4142135623730951}, "icepool.highest": {"tf": 1.4142135623730951}, "icepool.reduce": {"tf": 1}, "icepool.accumulate": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.map_function": {"tf": 1}, "icepool.map_and_time": {"tf": 1}, "icepool.Pool": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1.4142135623730951}, "icepool.Pool.additive_union": {"tf": 1}, "icepool.MultisetGenerator": {"tf": 1.7320508075688772}, "icepool.Alignment": {"tf": 1}, "icepool.MultisetExpression": {"tf": 2}, "icepool.MultisetExpression.additive_union": {"tf": 1}, "icepool.MultisetExpression.difference": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.intersection": {"tf": 1}, "icepool.MultisetExpression.union": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.lowest": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.highest": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.sort_match": {"tf": 1}, "icepool.MultisetExpression.maximum_match": {"tf": 1}, "icepool.MultisetExpression.evaluate": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.expand": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.all_counts": {"tf": 1}, "icepool.MultisetExpression.all_straights": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.argsort": {"tf": 1}, "icepool.MultisetExpression.issubset": {"tf": 1}, "icepool.MultisetExpression.issuperset": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 2.449489742783178}, "icepool.MultisetEvaluator.final_outcome": {"tf": 1}, "icepool.MultisetEvaluator.range_alignment": {"tf": 1}, "icepool.Order": {"tf": 1}, "icepool.Order.merge": {"tf": 1.4142135623730951}, "icepool.Deal.deck": {"tf": 1}, "icepool.Deal.outcomes": {"tf": 1}, "icepool.MultiDeal.__init__": {"tf": 1}, "icepool.MultiDeal.deck": {"tf": 1}, "icepool.MultiDeal.outcomes": {"tf": 1}, "icepool.multiset_function": {"tf": 1}, "icepool.evaluator.JointEvaluator.order": {"tf": 1.4142135623730951}, "icepool.evaluator.ExpandEvaluator": {"tf": 1}, "icepool.evaluator.CountEvaluator": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 2.449489742783178}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsSubsetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsProperSubsetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsSupersetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsProperSupersetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsEqualSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsNotEqualSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsDisjointSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 2.449489742783178}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CompairEvalautor.__init__": {"tf": 1.4142135623730951}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 2.449489742783178}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1}, "icepool.function.one_hot": {"tf": 1}, "icepool.function.from_cumulative": {"tf": 1}, "icepool.function.reduce": {"tf": 1}, "icepool.function.accumulate": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.function.map_function": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}, "icepool.typing.Order": {"tf": 1}, "icepool.typing.Order.merge": {"tf": 1.4142135623730951}, "icepool.typing.Outcome": {"tf": 1}}, "df": 110}, "g": {"1": {"docs": {"icepool.MultisetExpression.argsort": {"tf": 1}}, "df": 1}, "2": {"docs": {"icepool.MultisetExpression.argsort": {"tf": 1}}, "df": 1}, "docs": {"icepool.map": {"tf": 1}, "icepool.MultisetEvaluator.evaluate": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.typing.guess_star": {"tf": 1}}, "df": 4, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.coin": {"tf": 1}, "icepool.Die.set_outcomes": {"tf": 1.4142135623730951}, "icepool.Die.if_else": {"tf": 1.4142135623730951}, "icepool.Die.pool": {"tf": 1.4142135623730951}, "icepool.Die.keep": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.Population.nearest": {"tf": 1}, "icepool.tupleize": {"tf": 1.4142135623730951}, "icepool.vectorize": {"tf": 1.4142135623730951}, "icepool.Symbols": {"tf": 1}, "icepool.Symbols.__init__": {"tf": 1.4142135623730951}, "icepool.map": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1}, "icepool.MultisetExpression.all_counts": {"tf": 1.4142135623730951}, "icepool.function.coin": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.typing.guess_star": {"tf": 1}}, "df": 18, "s": {"docs": {"icepool.coin": {"tf": 1}, "icepool.stochastic_round": {"tf": 1}, "icepool.Die": {"tf": 1}, "icepool.Die.__init__": {"tf": 1.7320508075688772}, "icepool.Die.reroll": {"tf": 1.4142135623730951}, "icepool.Die.filter": {"tf": 1.4142135623730951}, "icepool.Die.split": {"tf": 1.4142135623730951}, "icepool.Die.truncate": {"tf": 1}, "icepool.Die.clip": {"tf": 1}, "icepool.Die.set_range": {"tf": 1}, "icepool.Die.mean_time_to_sum": {"tf": 1}, "icepool.Die.explode": {"tf": 1.4142135623730951}, "icepool.Die.if_else": {"tf": 1}, "icepool.Die.pool": {"tf": 1}, "icepool.Die.keep": {"tf": 1}, "icepool.Die.lowest": {"tf": 1.4142135623730951}, "icepool.Die.highest": {"tf": 1.4142135623730951}, "icepool.Die.middle": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 1.4142135623730951}, "icepool.Die.explode_to_pool": {"tf": 1.4142135623730951}, "icepool.Die.reroll_to_pool": {"tf": 1.4142135623730951}, "icepool.Die.stochastic_round": {"tf": 1}, "icepool.Die.equals": {"tf": 1}, "icepool.Population.nearest": {"tf": 1}, "icepool.Population.quantity": {"tf": 1}, "icepool.Population.quantities": {"tf": 1}, "icepool.Population.probabilities": {"tf": 1}, "icepool.Population.entropy": {"tf": 1}, "icepool.Population.to_one_hot": {"tf": 1}, "icepool.tupleize": {"tf": 1}, "icepool.vectorize": {"tf": 1}, "icepool.Again": {"tf": 1.4142135623730951}, "icepool.from_cumulative": {"tf": 1.4142135623730951}, "icepool.from_rv": {"tf": 1}, "icepool.lowest": {"tf": 1.7320508075688772}, "icepool.highest": {"tf": 1.7320508075688772}, "icepool.middle": {"tf": 1.4142135623730951}, "icepool.align": {"tf": 1}, "icepool.align_range": {"tf": 1}, "icepool.commonize_denominator": {"tf": 1}, "icepool.reduce": {"tf": 1.7320508075688772}, "icepool.accumulate": {"tf": 1.7320508075688772}, "icepool.map": {"tf": 2}, "icepool.map_function": {"tf": 2}, "icepool.map_and_time": {"tf": 1.7320508075688772}, "icepool.map_to_pool": {"tf": 1.4142135623730951}, "icepool.Pool.__init__": {"tf": 1}, "icepool.standard_pool": {"tf": 1}, "icepool.MultisetExpression.difference": {"tf": 1}, "icepool.MultisetExpression.keep_outcomes": {"tf": 1}, "icepool.MultisetExpression.drop_outcomes": {"tf": 1}, "icepool.MultisetExpression.map_counts": {"tf": 1}, "icepool.MultisetExpression.keep_counts": {"tf": 1}, "icepool.MultisetExpression.lowest": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.highest": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.sort_match": {"tf": 1}, "icepool.MultisetExpression.maximum_match": {"tf": 1}, "icepool.MultisetExpression.expand": {"tf": 1}, "icepool.MultisetExpression.all_counts": {"tf": 1}, "icepool.MultisetExpression.count_subset": {"tf": 1}, "icepool.MultisetExpression.argsort": {"tf": 1}, "icepool.MultisetExpression.compair_lt": {"tf": 1}, "icepool.MultisetExpression.compair_le": {"tf": 1}, "icepool.MultisetExpression.compair_gt": {"tf": 1}, "icepool.MultisetExpression.compair_ge": {"tf": 1}, "icepool.MultisetExpression.compair_eq": {"tf": 1}, "icepool.MultisetExpression.compair_ne": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.final_outcome": {"tf": 1}, "icepool.MultisetEvaluator.alignment": {"tf": 1}, "icepool.MultisetEvaluator.evaluate": {"tf": 1}, "icepool.Order.merge": {"tf": 2}, "icepool.Deck.__init__": {"tf": 1}, "icepool.Deck.map": {"tf": 1.4142135623730951}, "icepool.Deal.__init__": {"tf": 1}, "icepool.MultiDeal.__init__": {"tf": 1}, "icepool.multiset_function": {"tf": 1.4142135623730951}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.__init__": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.__init__": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.__init__": {"tf": 1}, "icepool.evaluator.ConstantEvaluator": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.KeepEvaluator.__init__": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CompairEvalautor.__init__": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1}, "icepool.function.coin": {"tf": 1}, "icepool.function.stochastic_round": {"tf": 1}, "icepool.function.from_cumulative": {"tf": 1.4142135623730951}, "icepool.function.from_rv": {"tf": 1}, "icepool.function.align": {"tf": 1}, "icepool.function.align_range": {"tf": 1}, "icepool.function.commonize_denominator": {"tf": 1}, "icepool.function.reduce": {"tf": 1.7320508075688772}, "icepool.function.accumulate": {"tf": 1.7320508075688772}, "icepool.function.map": {"tf": 2}, "icepool.function.map_function": {"tf": 2}, "icepool.function.map_and_time": {"tf": 1.7320508075688772}, "icepool.function.map_to_pool": {"tf": 1.4142135623730951}, "icepool.typing.Order.merge": {"tf": 2}, "icepool.typing.count_positional_parameters": {"tf": 1.4142135623730951}, "icepool.typing.guess_star": {"tf": 1.4142135623730951}}, "df": 108}}}}}}, "s": {"docs": {"icepool.Die.map_to_pool": {"tf": 1.7320508075688772}, "icepool.lowest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.middle": {"tf": 1.4142135623730951}, "icepool.map": {"tf": 2.23606797749979}, "icepool.map_and_time": {"tf": 1}, "icepool.map_to_pool": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.argsort": {"tf": 1}, "icepool.MultisetEvaluator.evaluate": {"tf": 1}, "icepool.function.map": {"tf": 2.23606797749979}, "icepool.function.map_and_time": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1.7320508075688772}, "icepool.typing.count_positional_parameters": {"tf": 1}}, "df": 13, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"icepool.MultisetExpression.argsort": {"tf": 1}}, "df": 1}}}}}, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool.MultisetExpression.compair_le": {"tf": 1}, "icepool.MultisetExpression.compair_gt": {"tf": 1}}, "df": 2}}}}, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"icepool.MultisetEvaluator": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.MultisetEvaluator.range_alignment": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}}, "df": 10}}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"icepool.MultisetEvaluator.validate_arity": {"tf": 1.4142135623730951}, "icepool.evaluator.JointEvaluator.validate_arity": {"tf": 1.4142135623730951}, "icepool.evaluator.ExpressionEvaluator.validate_arity": {"tf": 1.4142135623730951}}, "df": 3}}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"icepool": {"tf": 1}}, "df": 1}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"icepool.MultisetExpression.union": {"tf": 1}, "icepool.MultisetExpression.symmetric_difference": {"tf": 1}, "icepool.MultisetEvaluator.alignment": {"tf": 1}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 1}}, "df": 4, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}}, "df": 2}}}}}}}, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die.__init__": {"tf": 1.4142135623730951}, "icepool.map": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}, "icepool.function.map": {"tf": 1}}, "df": 5, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Die.unary_operator": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.binary_operator": {"tf": 1}, "icepool.Vector.unary_operator": {"tf": 1}, "icepool.Vector.binary_operator": {"tf": 1.4142135623730951}, "icepool.Again": {"tf": 1}, "icepool.Pool.raw_size": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1}}, "df": 7}, "s": {"docs": {"icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.Population.marginals": {"tf": 1}, "icepool.Vector": {"tf": 1}, "icepool.reduce": {"tf": 1}, "icepool.accumulate": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.map_to_pool": {"tf": 1}, "icepool.function.reduce": {"tf": 1}, "icepool.function.accumulate": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1}}, "df": 11}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.truncate": {"tf": 1}, "icepool.Die.clip": {"tf": 1}, "icepool.Population.format": {"tf": 1}}, "df": 3}}}}}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.keep": {"tf": 1.7320508075688772}}, "df": 1, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Die.pool": {"tf": 1}}, "df": 1}}}, "s": {"docs": {"icepool.Die.keep": {"tf": 1.4142135623730951}}, "df": 1}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.stochastic_round": {"tf": 1}, "icepool.Die.binary_operator": {"tf": 1}, "icepool.Die.stochastic_round": {"tf": 1}, "icepool.evaluator.SumEvaluator.__init__": {"tf": 1}, "icepool.function.stochastic_round": {"tf": 1}}, "df": 5}}}}}}, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.filter": {"tf": 1}, "icepool.Die.split": {"tf": 1}}, "df": 2}}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Symbols": {"tf": 2}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die.reroll_to_pool": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "s": {"docs": {"icepool.d": {"tf": 1}, "icepool.Die.__init__": {"tf": 1.4142135623730951}, "icepool.Population.sample": {"tf": 1}, "icepool.lowest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.middle": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.MultisetEvaluator.order": {"tf": 1.4142135623730951}, "icepool.evaluator.HighestOutcomeAndCountEvaluator.alignment": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.order": {"tf": 1.4142135623730951}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.order": {"tf": 1.4142135623730951}, "icepool.function.d": {"tf": 1}}, "df": 16}}}}, "s": {"docs": {}, "df": 0, "o": {"docs": {"icepool.d": {"tf": 1}, "icepool.Die": {"tf": 1}, "icepool.Die.__init__": {"tf": 1}, "icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Population.outcomes": {"tf": 1}, "icepool.Population.marginals": {"tf": 1}, "icepool.Vector.binary_operator": {"tf": 1.7320508075688772}, "icepool.Symbols": {"tf": 1.4142135623730951}, "icepool.reduce": {"tf": 1}, "icepool.map_and_time": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1.4142135623730951}, "icepool.Deal.outcomes": {"tf": 1}, "icepool.MultiDeal.outcomes": {"tf": 1}, "icepool.function.d": {"tf": 1}, "icepool.function.reduce": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}}, "df": 17}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Die": {"tf": 1}}, "df": 1, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.alignment": {"tf": 1.7320508075688772}, "icepool.MultisetEvaluator.range_alignment": {"tf": 1.7320508075688772}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 1.7320508075688772}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"tf": 1.7320508075688772}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"tf": 1.7320508075688772}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"tf": 1.7320508075688772}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"tf": 1.7320508075688772}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1.4142135623730951}}, "df": 12}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.align": {"tf": 1}, "icepool.align_range": {"tf": 1}, "icepool.function.align": {"tf": 1}, "icepool.function.align_range": {"tf": 1}}, "df": 4}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {"icepool.MultisetEvaluator.evaluate": {"tf": 1}}, "df": 1}}}, "l": {"docs": {"icepool.Die": {"tf": 1}, "icepool.Die.__init__": {"tf": 1.4142135623730951}, "icepool.Die.simplify": {"tf": 1}, "icepool.Die.trim": {"tf": 1}, "icepool.Die.lowest": {"tf": 1}, "icepool.Die.middle": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.Die.zero": {"tf": 1.4142135623730951}, "icepool.Die.cmp": {"tf": 1}, "icepool.Die.sign": {"tf": 1}, "icepool.Population.common_outcome_length": {"tf": 1}, "icepool.Population.denominator": {"tf": 1}, "icepool.Population.scale_quantities": {"tf": 1}, "icepool.Population.to_one_hot": {"tf": 1}, "icepool.tupleize": {"tf": 1.4142135623730951}, "icepool.vectorize": {"tf": 1.4142135623730951}, "icepool.Symbols": {"tf": 2.23606797749979}, "icepool.Symbols.multiply_counts": {"tf": 1}, "icepool.Symbols.divide_counts": {"tf": 1}, "icepool.align": {"tf": 1}, "icepool.align_range": {"tf": 1}, "icepool.commonize_denominator": {"tf": 1}, "icepool.map": {"tf": 2.449489742783178}, "icepool.map_to_pool": {"tf": 1}, "icepool.Reroll": {"tf": 1}, "icepool.Pool.__init__": {"tf": 2}, "icepool.Pool.denominator": {"tf": 1}, "icepool.Pool.outcomes": {"tf": 1}, "icepool.Pool.min_outcome": {"tf": 1}, "icepool.Pool.max_outcome": {"tf": 1}, "icepool.Pool.additive_union": {"tf": 1}, "icepool.MultisetGenerator.denominator": {"tf": 1}, "icepool.Alignment.denominator": {"tf": 1}, "icepool.MultisetExpression": {"tf": 3.1622776601683795}, "icepool.MultisetExpression.additive_union": {"tf": 1}, "icepool.MultisetExpression.difference": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.intersection": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.multiply_counts": {"tf": 1}, "icepool.MultisetExpression.divide_counts": {"tf": 1}, "icepool.MultisetExpression.modulo_counts": {"tf": 1}, "icepool.MultisetExpression.evaluate": {"tf": 1}, "icepool.MultisetExpression.expand": {"tf": 1}, "icepool.MultisetExpression.sum": {"tf": 1}, "icepool.MultisetExpression.all_counts": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.all_straights": {"tf": 1}, "icepool.MultisetExpression.all_straights_reduce_counts": {"tf": 1}, "icepool.MultisetExpression.argsort": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.MultisetEvaluator.final_outcome": {"tf": 1}, "icepool.MultisetEvaluator.alignment": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.range_alignment": {"tf": 1}, "icepool.Order.merge": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}, "icepool.Deck.size": {"tf": 1}, "icepool.Deck.divide_counts": {"tf": 1}, "icepool.Deck.modulo_counts": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1}, "icepool.Deal.denominator": {"tf": 1}, "icepool.MultiDeal.__init__": {"tf": 1}, "icepool.MultiDeal.denominator": {"tf": 1}, "icepool.evaluator.JointEvaluator.next_state": {"tf": 1}, "icepool.evaluator.JointEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 1.4142135623730951}, "icepool.evaluator.ExpandEvaluator": {"tf": 1}, "icepool.evaluator.SumEvaluator": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator": {"tf": 1.4142135623730951}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsSubsetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsProperSubsetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsSupersetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsProperSupersetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsEqualSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsNotEqualSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsDisjointSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1.7320508075688772}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1}, "icepool.function.align": {"tf": 1}, "icepool.function.align_range": {"tf": 1}, "icepool.function.commonize_denominator": {"tf": 1}, "icepool.function.map": {"tf": 2.449489742783178}, "icepool.function.map_to_pool": {"tf": 1}, "icepool.typing.Order.merge": {"tf": 1}}, "df": 95, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Population.format": {"tf": 1}, "icepool.Again": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.multiset_function": {"tf": 1}, "icepool.function.map": {"tf": 1}}, "df": 5}}, "s": {"docs": {"icepool.Again": {"tf": 1}, "icepool.from_cumulative": {"tf": 1}, "icepool.evaluator.ExpandEvaluator.order": {"tf": 1}, "icepool.evaluator.SumEvaluator.order": {"tf": 1}, "icepool.evaluator.CountEvaluator.order": {"tf": 1}, "icepool.evaluator.AnyEvaluator.order": {"tf": 1}, "icepool.evaluator.HighestOutcomeAndCountEvaluator.order": {"tf": 1}, "icepool.evaluator.LargestCountEvaluator.order": {"tf": 1}, "icepool.evaluator.LargestCountAndOutcomeEvaluator.order": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.order": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.order": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.order": {"tf": 1}, "icepool.function.from_cumulative": {"tf": 1}}, "df": 13}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.binary_operator": {"tf": 1}}, "df": 2}}}}}, "p": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Symbols": {"tf": 1}}, "df": 1}}}}}}}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Reroll": {"tf": 1}, "icepool.MultisetGenerator": {"tf": 1}, "icepool.MultisetExpression.highest_outcome_and_count": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 1}, "icepool.evaluator.HighestOutcomeAndCountEvaluator": {"tf": 1}, "icepool.evaluator.LargestCountAndOutcomeEvaluator": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator": {"tf": 1}}, "df": 7}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.MultisetExpression.lowest": {"tf": 1}, "icepool.MultisetExpression.highest": {"tf": 1}}, "df": 2}}}}}}}}}}}, "g": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"icepool.Deal.__init__": {"tf": 1}, "icepool.MultiDeal.__init__": {"tf": 1}}, "df": 2}}}}}}}}}}, "t": {"docs": {"icepool.one_hot": {"tf": 1}, "icepool.Die": {"tf": 1}, "icepool.Die.clip": {"tf": 1}, "icepool.Die.keep": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.Population.has_zero_quantities": {"tf": 1}, "icepool.Population.to_one_hot": {"tf": 1}, "icepool.Again": {"tf": 1.4142135623730951}, "icepool.from_cumulative": {"tf": 1}, "icepool.reduce": {"tf": 1}, "icepool.accumulate": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.MultisetGenerator": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1}, "icepool.MultisetExpression.unique": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.keep": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.any": {"tf": 1}, "icepool.MultisetExpression.issuperset": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.MultisetEvaluator.alignment": {"tf": 1}, "icepool.Order.merge": {"tf": 1.4142135623730951}, "icepool.multiset_function": {"tf": 1}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AnyEvaluator": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.KeepEvaluator": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}, "icepool.function.one_hot": {"tf": 1}, "icepool.function.from_cumulative": {"tf": 1}, "icepool.function.reduce": {"tf": 1}, "icepool.function.accumulate": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.typing.Order.merge": {"tf": 1.4142135623730951}}, "df": 35, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Outcome": {"tf": 1}, "icepool.typing.Outcome": {"tf": 1}}, "df": 2}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Population.marginals": {"tf": 1}, "icepool.Symbols": {"tf": 2}}, "df": 2, "s": {"docs": {"icepool.Population.marginals": {"tf": 1}}, "df": 1}}}}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"icepool.MultisetExpression": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool.MultisetExpression.evaluate": {"tf": 1}}, "df": 1}, "d": {"docs": {"icepool.evaluator.KeepEvaluator": {"tf": 1}}, "df": 1}}}, "k": {"docs": {"icepool.MultisetExpression.compair_le": {"tf": 1}, "icepool.MultisetExpression.compair_gt": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.MultisetExpression.sort_match": {"tf": 2.449489742783178}, "icepool.MultisetExpression.maximum_match": {"tf": 2.23606797749979}, "icepool.MultisetExpression.compair_gt": {"tf": 1}}, "df": 3}}}}}}}, "s": {"docs": {"icepool.Die": {"tf": 1}, "icepool.Die.__init__": {"tf": 2}, "icepool.Die.unary_operator": {"tf": 1.7320508075688772}, "icepool.Die.clip": {"tf": 1}, "icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.pool": {"tf": 1.4142135623730951}, "icepool.Die.keep": {"tf": 2.23606797749979}, "icepool.Die.lowest": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.Die.explode_to_pool": {"tf": 1}, "icepool.Die.zero": {"tf": 1}, "icepool.Die.equals": {"tf": 1}, "icepool.Population.quantity": {"tf": 1}, "icepool.Population.format": {"tf": 1}, "icepool.tupleize": {"tf": 1.4142135623730951}, "icepool.vectorize": {"tf": 1.4142135623730951}, "icepool.Symbols": {"tf": 2.6457513110645907}, "icepool.Symbols.issubset": {"tf": 1}, "icepool.Symbols.issuperset": {"tf": 1}, "icepool.Again": {"tf": 1}, "icepool.CountsKeysView": {"tf": 1}, "icepool.CountsValuesView": {"tf": 1}, "icepool.CountsItemsView": {"tf": 1}, "icepool.from_rv": {"tf": 1.4142135623730951}, "icepool.lowest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.middle": {"tf": 1}, "icepool.accumulate": {"tf": 1}, "icepool.map": {"tf": 2.449489742783178}, "icepool.Pool.__init__": {"tf": 1.4142135623730951}, "icepool.Pool.additive_union": {"tf": 1}, "icepool.MultisetExpression": {"tf": 2}, "icepool.MultisetExpression.additive_union": {"tf": 1}, "icepool.MultisetExpression.difference": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.intersection": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.union": {"tf": 1}, "icepool.MultisetExpression.symmetric_difference": {"tf": 1}, "icepool.MultisetExpression.multiply_counts": {"tf": 1}, "icepool.MultisetExpression.divide_counts": {"tf": 1}, "icepool.MultisetExpression.modulo_counts": {"tf": 1}, "icepool.MultisetExpression.keep_counts": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.maximum_match": {"tf": 3.3166247903554}, "icepool.MultisetExpression.evaluate": {"tf": 1}, "icepool.MultisetExpression.all_counts": {"tf": 1}, "icepool.MultisetExpression.issubset": {"tf": 1}, "icepool.MultisetExpression.issuperset": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.alignment": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}, "icepool.Deck.union": {"tf": 1.4142135623730951}, "icepool.Deck.symmetric_difference": {"tf": 1.4142135623730951}, "icepool.Deal.hand_sizes": {"tf": 1}, "icepool.Deal.outcomes": {"tf": 1}, "icepool.MultiDeal.__init__": {"tf": 1}, "icepool.MultiDeal.hand_sizes": {"tf": 1}, "icepool.MultiDeal.outcomes": {"tf": 1}, "icepool.evaluator.JointEvaluator.next_state": {"tf": 1}, "icepool.evaluator.JointEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 1}, "icepool.evaluator.ExpandEvaluator": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 1.4142135623730951}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.function.from_rv": {"tf": 1.4142135623730951}, "icepool.function.accumulate": {"tf": 1}, "icepool.function.map": {"tf": 2.449489742783178}}, "df": 72, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.MultisetExpression.all_straights": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator": {"tf": 1}}, "df": 4}}, "s": {"docs": {"icepool.evaluator.ExpressionEvaluator": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Again": {"tf": 1}}, "df": 1}, "s": {"docs": {"icepool.evaluator.KeepEvaluator.__init__": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Again": {"tf": 1}}, "df": 1}}}}}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Population.outcomes": {"tf": 1}, "icepool.Pool.outcomes": {"tf": 1}, "icepool.MultisetGenerator.outcomes": {"tf": 1}, "icepool.Alignment.outcomes": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1}, "icepool.MultisetExpression.lowest": {"tf": 1}, "icepool.MultisetExpression.sort_match": {"tf": 1}, "icepool.MultisetExpression.maximum_match": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.expand": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.MultisetEvaluator.order": {"tf": 1.7320508075688772}, "icepool.MultisetEvaluator.alignment": {"tf": 1}, "icepool.Order.merge": {"tf": 1.7320508075688772}, "icepool.Deal.outcomes": {"tf": 1}, "icepool.MultiDeal.outcomes": {"tf": 1}, "icepool.evaluator.JointEvaluator.order": {"tf": 1}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.order": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.order": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.KeepEvaluator.__init__": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.order": {"tf": 1.7320508075688772}, "icepool.evaluator.CompairEvalautor.__init__": {"tf": 1.4142135623730951}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.order": {"tf": 1.7320508075688772}, "icepool.typing.Order.merge": {"tf": 1.7320508075688772}}, "df": 27}}}}}}}}, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.__init__": {"tf": 1.4142135623730951}, "icepool.Again": {"tf": 1}, "icepool.MultisetExpression.compair_lt": {"tf": 1}, "icepool.MultisetExpression.compair_le": {"tf": 1}, "icepool.MultisetExpression.compair_gt": {"tf": 1}, "icepool.MultisetExpression.compair_ge": {"tf": 1}, "icepool.MultisetExpression.compair_eq": {"tf": 1}, "icepool.MultisetExpression.compair_ne": {"tf": 1}}, "df": 8, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Alignment": {"tf": 1}}, "df": 1}}}, "s": {"docs": {"icepool.MultisetEvaluator": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die.keep": {"tf": 1}, "icepool.Population.format": {"tf": 1}, "icepool.map_and_time": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.keep": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 1}, "icepool.MultisetEvaluator.final_outcome": {"tf": 1}, "icepool.MultisetEvaluator.validate_arity": {"tf": 1}, "icepool.evaluator.JointEvaluator.validate_arity": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.validate_arity": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1.4142135623730951}}, "df": 15, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die.pool": {"tf": 1}, "icepool.MultisetExpression.lowest": {"tf": 1}, "icepool.MultisetExpression.highest": {"tf": 1}}, "df": 3}}}}}}}}}, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Die.__init__": {"tf": 3.1622776601683795}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.if_else": {"tf": 1.7320508075688772}, "icepool.Die.explode_to_pool": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.Symbols": {"tf": 1}, "icepool.Again": {"tf": 5.291502622129181}, "icepool.reduce": {"tf": 1.7320508075688772}, "icepool.map": {"tf": 2}, "icepool.map_function": {"tf": 2.6457513110645907}, "icepool.Reroll": {"tf": 1.7320508075688772}, "icepool.function.reduce": {"tf": 1.7320508075688772}, "icepool.function.map": {"tf": 2}, "icepool.function.map_function": {"tf": 2.6457513110645907}}, "df": 14, "s": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Population.nearest": {"tf": 1}, "icepool.Again": {"tf": 1}, "icepool.MultisetExpression.keep_counts": {"tf": 1}}, "df": 3}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Again": {"tf": 2}}, "df": 1}}}}}}}}}}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.lowest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.middle": {"tf": 1}, "icepool.min_outcome": {"tf": 1}, "icepool.max_outcome": {"tf": 1}, "icepool.map_function": {"tf": 1}, "icepool.Pool.outcomes": {"tf": 1}, "icepool.Pool.min_outcome": {"tf": 1}, "icepool.Pool.max_outcome": {"tf": 1}, "icepool.MultisetExpression.largest_count": {"tf": 1}, "icepool.MultisetExpression.largest_count_and_outcome": {"tf": 1}, "icepool.MultisetExpression.largest_straight": {"tf": 1}, "icepool.MultisetExpression.largest_straight_and_outcome": {"tf": 1}, "icepool.MultisetEvaluator.range_alignment": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"tf": 1}, "icepool.function.min_outcome": {"tf": 1}, "icepool.function.max_outcome": {"tf": 1}, "icepool.function.map_function": {"tf": 1}}, "df": 22}}}, "p": {"docs": {"icepool.Die.binary_operator": {"tf": 1}, "icepool.Vector.binary_operator": {"tf": 1}, "icepool.Symbols": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1}, "icepool.MultisetExpression.intersection": {"tf": 2}, "icepool.MultisetExpression.count": {"tf": 1}, "icepool.multiset_function": {"tf": 1}}, "df": 7}}, "b": {"docs": {"icepool.Symbols": {"tf": 1.7320508075688772}}, "df": 1, "s": {"docs": {"icepool.Die.unary_operator": {"tf": 1}, "icepool.Vector.unary_operator": {"tf": 1}, "icepool.Symbols": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1}}, "df": 4, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Population.kolmogorov_smirnov": {"tf": 1}, "icepool.Symbols.symmetric_difference": {"tf": 1}, "icepool.MultisetExpression.symmetric_difference": {"tf": 1}}, "df": 3}}}}, "r": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.map_and_time": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}}, "df": 2}}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"icepool.MultisetGenerator": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 1.4142135623730951}}, "df": 3}}}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"icepool.map_and_time": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}}, "df": 2}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.MultisetEvaluator": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.MultisetEvaluator.range_alignment": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}}, "df": 10}}}, "d": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.set_range": {"tf": 1}, "icepool.Die.set_outcomes": {"tf": 1}, "icepool.Population.format": {"tf": 1}, "icepool.Again": {"tf": 1}}, "df": 4, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Die.lowest": {"tf": 1}, "icepool.Die.highest": {"tf": 1}, "icepool.Die.middle": {"tf": 1}, "icepool.Population.quantile": {"tf": 1}, "icepool.lowest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.middle": {"tf": 1}}, "df": 7, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Die.unary_operator": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.accumulate": {"tf": 1}, "icepool.MultisetEvaluator.alignment": {"tf": 1}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 1}, "icepool.function.accumulate": {"tf": 1}}, "df": 6, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die.binary_operator": {"tf": 1}}, "df": 1}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Symbols": {"tf": 1}, "icepool.Again": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1}, "icepool.MultisetExpression.argsort": {"tf": 1.4142135623730951}, "icepool.evaluator.ArgsortEvaluator": {"tf": 1}}, "df": 5}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.explode": {"tf": 1}}, "df": 1}}}, "j": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.clip": {"tf": 1}, "icepool.evaluator.CountEvaluator": {"tf": 1}}, "df": 2}}, "s": {"docs": {"icepool.evaluator.ExpressionEvaluator.next_state": {"tf": 1}}, "df": 1}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"icepool.MultisetExpression.keep": {"tf": 1}}, "df": 1}}}}}}}}, "k": {"docs": {}, "df": 0, "a": {"docs": {"icepool.MultisetExpression": {"tf": 1}}, "df": 1}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.MultisetExpression.lowest": {"tf": 1}, "icepool.MultisetExpression.highest": {"tf": 1}}, "df": 2}}}}}}}}}}}}}, "s": {"docs": {"icepool.Die": {"tf": 1.7320508075688772}, "icepool.Die.__init__": {"tf": 2}, "icepool.Die.items": {"tf": 1}, "icepool.Die.keep": {"tf": 1.4142135623730951}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.Die.explode_to_pool": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.Die.zero_outcome": {"tf": 1}, "icepool.Die.sign": {"tf": 1}, "icepool.Population.items": {"tf": 1}, "icepool.Population.mode": {"tf": 1}, "icepool.tupleize": {"tf": 1.7320508075688772}, "icepool.vectorize": {"tf": 1.7320508075688772}, "icepool.Symbols": {"tf": 2.8284271247461903}, "icepool.Again": {"tf": 1.7320508075688772}, "icepool.from_rv": {"tf": 1.7320508075688772}, "icepool.map": {"tf": 2.23606797749979}, "icepool.map_to_pool": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.sort_match": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.largest_straight": {"tf": 1}, "icepool.MultisetExpression.largest_straight_and_outcome": {"tf": 1}, "icepool.MultisetExpression.all_straights_reduce_counts": {"tf": 1}, "icepool.MultisetExpression.issuperset": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 1}, "icepool.MultisetEvaluator.alignment": {"tf": 1}, "icepool.MultisetEvaluator.range_alignment": {"tf": 1}, "icepool.MultisetEvaluator.evaluate": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.sample": {"tf": 1}, "icepool.Deck.items": {"tf": 1}, "icepool.Deck.map": {"tf": 1}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"tf": 1}, "icepool.function.from_rv": {"tf": 1.7320508075688772}, "icepool.function.map": {"tf": 2.23606797749979}, "icepool.function.map_to_pool": {"tf": 1}, "icepool.typing.count_positional_parameters": {"tf": 1}}, "df": 41, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.split": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.Die.explode_to_pool": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.map_and_time": {"tf": 1}, "icepool.map_to_pool": {"tf": 1}, "icepool.Deck.map": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1}}, "df": 14, "t": {"docs": {"icepool.Population.marginals": {"tf": 1}, "icepool.Population.format": {"tf": 1}, "icepool.Again": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1}}, "df": 4, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1}}, "df": 2}}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"icepool.d": {"tf": 1.4142135623730951}, "icepool.Die.unary_operator": {"tf": 1}, "icepool.Die.binary_operator": {"tf": 1.4142135623730951}, "icepool.Population.sample": {"tf": 1}, "icepool.Vector.unary_operator": {"tf": 1}, "icepool.Vector.binary_operator": {"tf": 1}, "icepool.standard_pool": {"tf": 1}, "icepool.MultisetGenerator.sample": {"tf": 1}, "icepool.MultisetEvaluator.order": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.order": {"tf": 1}, "icepool.evaluator.CompairEvalautor.order": {"tf": 1}, "icepool.function.d": {"tf": 1.4142135623730951}}, "df": 12}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.map_and_time": {"tf": 1}, "icepool.map_and_time": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 4.69041575982343}, "icepool.MultisetEvaluator.next_state": {"tf": 3.3166247903554}, "icepool.MultisetEvaluator.final_outcome": {"tf": 2.23606797749979}, "icepool.MultisetEvaluator.order": {"tf": 1.7320508075688772}, "icepool.MultisetEvaluator.alignment": {"tf": 2.23606797749979}, "icepool.MultisetEvaluator.validate_arity": {"tf": 1}, "icepool.MultiDeal.__init__": {"tf": 1}, "icepool.evaluator.JointEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.JointEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 2.23606797749979}, "icepool.evaluator.JointEvaluator.validate_arity": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 3.3166247903554}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 2.23606797749979}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 3.3166247903554}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 2.23606797749979}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 2.23606797749979}, "icepool.evaluator.ArgsortEvaluator.order": {"tf": 1.7320508075688772}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 3.3166247903554}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 2.23606797749979}, "icepool.evaluator.CompairEvalautor.order": {"tf": 1.7320508075688772}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 2.23606797749979}, "icepool.evaluator.ExpressionEvaluator.validate_arity": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}}, "df": 25, "s": {"docs": {"icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.JointEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}}, "df": 5}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"icepool.Population.kolmogorov_smirnov": {"tf": 1}, "icepool.Population.cramer_von_mises": {"tf": 1}}, "df": 2}}}}}, "s": {"docs": {"icepool.from_rv": {"tf": 1.4142135623730951}, "icepool.function.from_rv": {"tf": 1.4142135623730951}}, "df": 2}}, "y": {"docs": {"icepool.map": {"tf": 1}, "icepool.map_and_time": {"tf": 1}, "icepool.Deck.map": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}}, "df": 5}, "g": {"docs": {}, "df": 0, "e": {"docs": {"icepool.map": {"tf": 1}, "icepool.Reroll": {"tf": 1}, "icepool.function.map": {"tf": 1}}, "df": 3}}}, "r": {"docs": {"icepool.Again": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Population.format": {"tf": 1}, "icepool.Symbols.__init__": {"tf": 1.4142135623730951}}, "df": 2}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"icepool.MultisetExpression": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.largest_straight": {"tf": 1}, "icepool.MultisetExpression.largest_straight_and_outcome": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.all_straights": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.all_straights_reduce_counts": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator": {"tf": 1.4142135623730951}, "icepool.evaluator.AllStraightsEvaluator": {"tf": 1.4142135623730951}, "icepool.evaluator.AllStraightsReduceCountsEvaluator": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.__init__": {"tf": 1.4142135623730951}}, "df": 10, "s": {"docs": {"icepool.MultisetExpression": {"tf": 1}, "icepool.MultisetExpression.all_straights": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.all_straights_reduce_counts": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator": {"tf": 1.4142135623730951}, "icepool.evaluator.AllStraightsReduceCountsEvaluator": {"tf": 1}}, "df": 5}}}}}}, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool.multiset_function": {"tf": 1}}, "df": 1}}}}}}}}, "o": {"docs": {}, "df": 0, "p": {"docs": {"icepool.MultisetExpression.keep": {"tf": 1}}, "df": 1}}, "e": {"docs": {}, "df": 0, "p": {"docs": {"icepool.MultisetExpression.keep": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"icepool.MultisetExpression.all_counts": {"tf": 1}}, "df": 1}}}, "y": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.MultisetExpression.all_straights_reduce_counts": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator": {"tf": 1}}, "df": 2}}}}, "e": {"docs": {}, "df": 0, "e": {"docs": {"icepool": {"tf": 1}, "icepool.Die.__init__": {"tf": 1.7320508075688772}, "icepool.Die.unary_operator": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.Reroll": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.order": {"tf": 1.7320508075688772}, "icepool.MultisetEvaluator.alignment": {"tf": 1.7320508075688772}, "icepool.Deck.deal": {"tf": 1}, "icepool.multiset_function": {"tf": 1}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 1.7320508075688772}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.ArgsortEvaluator.order": {"tf": 1.7320508075688772}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.CompairEvalautor.order": {"tf": 1.7320508075688772}, "icepool.function.map": {"tf": 1}}, "df": 17, "n": {"docs": {"icepool.Alignment": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 2.23606797749979}, "icepool.MultisetEvaluator.alignment": {"tf": 1.7320508075688772}, "icepool.Order": {"tf": 1}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 1.7320508075688772}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 2.23606797749979}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 2.23606797749979}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 2.23606797749979}, "icepool.typing.Order": {"tf": 1}}, "df": 9}, "s": {"docs": {"icepool.evaluator.HighestOutcomeAndCountEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.alignment": {"tf": 1}}, "df": 2}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"icepool": {"tf": 1}, "icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.split": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.explode_to_pool": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.lowest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.middle": {"tf": 1}, "icepool.Deck.map": {"tf": 1}}, "df": 11, "d": {"docs": {"icepool.Population.format": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "t": {"docs": {"icepool.one_hot": {"tf": 1}, "icepool.Die": {"tf": 1}, "icepool.Die.__init__": {"tf": 1}, "icepool.Die.binary_operator": {"tf": 1}, "icepool.Die.set_outcomes": {"tf": 1}, "icepool.Population.to_one_hot": {"tf": 1}, "icepool.from_rv": {"tf": 1}, "icepool.align": {"tf": 1}, "icepool.align_range": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.map_and_time": {"tf": 1}, "icepool.Pool.additive_union": {"tf": 1}, "icepool.MultisetExpression.additive_union": {"tf": 1}, "icepool.MultisetExpression.difference": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.intersection": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.union": {"tf": 1}, "icepool.MultisetExpression.keep_outcomes": {"tf": 1}, "icepool.MultisetExpression.drop_outcomes": {"tf": 1}, "icepool.MultisetExpression.largest_count": {"tf": 1}, "icepool.MultisetExpression.largest_count_and_outcome": {"tf": 1}, "icepool.MultisetExpression.count_subset": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.alignment": {"tf": 1}, "icepool.MultisetEvaluator.range_alignment": {"tf": 1.4142135623730951}, "icepool.multiset_function": {"tf": 1}, "icepool.evaluator.JointEvaluator": {"tf": 1}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.__init__": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"tf": 1.4142135623730951}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"tf": 1.4142135623730951}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"tf": 1.4142135623730951}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"tf": 1.4142135623730951}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1.4142135623730951}, "icepool.function.one_hot": {"tf": 1}, "icepool.function.from_rv": {"tf": 1}, "icepool.function.align": {"tf": 1}, "icepool.function.align_range": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}}, "df": 41, "s": {"docs": {"icepool.Die.set_range": {"tf": 1}, "icepool.Die.set_outcomes": {"tf": 1}, "icepool.Symbols.symmetric_difference": {"tf": 1}, "icepool.MultisetExpression.all_counts": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator": {"tf": 1}}, "df": 5}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.MultisetExpression.keep_outcomes": {"tf": 1}, "icepool.MultisetExpression.drop_outcomes": {"tf": 1}, "icepool.MultisetExpression.all_counts": {"tf": 1}}, "df": 3}}}}}, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.map": {"tf": 1.4142135623730951}, "icepool.function.map": {"tf": 1.4142135623730951}}, "df": 2, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Die": {"tf": 1}}, "df": 1}}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.split": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.explode_to_pool": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.Deck.map": {"tf": 1}}, "df": 7}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.__init__": {"tf": 1.7320508075688772}, "icepool.Die.pool": {"tf": 1}, "icepool.Die.keep": {"tf": 1}, "icepool.Population.marginals": {"tf": 1}, "icepool.CountsKeysView": {"tf": 1}, "icepool.CountsValuesView": {"tf": 1}, "icepool.CountsItemsView": {"tf": 1}, "icepool.from_cumulative": {"tf": 1}, "icepool.reduce": {"tf": 2}, "icepool.accumulate": {"tf": 1.7320508075688772}, "icepool.Pool.__init__": {"tf": 1.4142135623730951}, "icepool.MultisetExpression": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 1}, "icepool.MultisetEvaluator.prefix_generators": {"tf": 1}, "icepool.MultisetEvaluator.evaluate": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1.4142135623730951}, "icepool.evaluator.JointEvaluator.prefix_generators": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.prefix_generators": {"tf": 1}, "icepool.function.from_cumulative": {"tf": 1}, "icepool.function.reduce": {"tf": 2}, "icepool.function.accumulate": {"tf": 1.7320508075688772}, "icepool.typing.S": {"tf": 1}}, "df": 23, "s": {"docs": {"icepool.MultisetExpression": {"tf": 1}}, "df": 1}}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.lowest": {"tf": 1}, "icepool.Die.highest": {"tf": 1}, "icepool.Die.middle": {"tf": 1}, "icepool.Pool": {"tf": 1}, "icepool.Deck.map": {"tf": 1}}, "df": 6}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.if_else": {"tf": 1}, "icepool.Pool": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsSubsetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsProperSubsetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsSupersetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsProperSupersetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsEqualSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsNotEqualSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsDisjointSetEvaluator.any_all": {"tf": 1}, "icepool.typing.count_positional_parameters": {"tf": 1}}, "df": 11, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die.__init__": {"tf": 1}}, "df": 1}}}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Population.sample": {"tf": 1}, "icepool.MultisetGenerator.sample": {"tf": 1}}, "df": 2}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.split": {"tf": 1}, "icepool.Die.keep": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1}}, "df": 6}, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.split": {"tf": 1}, "icepool.Die.keep": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1.4142135623730951}}, "df": 3}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.MultisetExpression.keep": {"tf": 1}}, "df": 1}}}}}}, "f": {"docs": {"icepool.Die.split": {"tf": 1.4142135623730951}, "icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Die.mean_time_to_sum": {"tf": 1.4142135623730951}, "icepool.Die.lowest": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.Die.cmp": {"tf": 1.4142135623730951}, "icepool.Population.has_zero_quantities": {"tf": 1}, "icepool.Population.to_one_hot": {"tf": 1}, "icepool.Vector.binary_operator": {"tf": 1.4142135623730951}, "icepool.Symbols.issubset": {"tf": 1}, "icepool.Symbols.issuperset": {"tf": 1}, "icepool.Symbols.isdisjoint": {"tf": 1}, "icepool.MultisetExpression.multiply_counts": {"tf": 1}, "icepool.MultisetExpression.divide_counts": {"tf": 1}, "icepool.MultisetExpression.modulo_counts": {"tf": 1}, "icepool.MultisetExpression.sort_match": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.maximum_match": {"tf": 3.1622776601683795}, "icepool.MultisetExpression.argsort": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.issubset": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.issuperset": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.compair_lt": {"tf": 1}, "icepool.MultisetExpression.compair_le": {"tf": 1}, "icepool.MultisetExpression.compair_gt": {"tf": 1}, "icepool.MultisetExpression.compair_ge": {"tf": 1}, "icepool.MultisetExpression.compair_eq": {"tf": 1}, "icepool.MultisetExpression.compair_ne": {"tf": 1}}, "df": 27}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Population.format": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {"icepool.Population.format": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool": {"tf": 1}, "icepool.Die.keep": {"tf": 1}, "icepool.Symbols.__init__": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1}}, "df": 4}}, "c": {"docs": {"icepool.Die": {"tf": 1}, "icepool.Reroll": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.stochastic_round": {"tf": 1}, "icepool.Die.stochastic_round": {"tf": 1}, "icepool.function.stochastic_round": {"tf": 1}}, "df": 3}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die.keep": {"tf": 1}, "icepool.Symbols": {"tf": 1}, "icepool.MultisetExpression.symmetric_difference": {"tf": 1}, "icepool.MultisetExpression.issubset": {"tf": 1}, "icepool.MultisetExpression.issuperset": {"tf": 1}, "icepool.MultisetExpression.isdisjoint": {"tf": 1}}, "df": 6}}}}}}, "y": {"docs": {"icepool.MultisetExpression.all_counts": {"tf": 1}, "icepool.MultisetEvaluator.alignment": {"tf": 1}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 1}}, "df": 3}}, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Die.map_to_pool": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.map_and_time": {"tf": 1}, "icepool.map_to_pool": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1}}, "df": 11}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die.split": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Symbols": {"tf": 1}, "icepool.Reroll": {"tf": 1}}, "df": 2, "s": {"docs": {"icepool.Symbols": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.binary_operator": {"tf": 1.4142135623730951}, "icepool.Die.truncate": {"tf": 1}, "icepool.Die.clip": {"tf": 1}, "icepool.Die.keep": {"tf": 1.4142135623730951}, "icepool.Symbols": {"tf": 1.4142135623730951}, "icepool.Pool.__init__": {"tf": 1.4142135623730951}, "icepool.MultisetExpression": {"tf": 3.1622776601683795}, "icepool.MultisetExpression.difference": {"tf": 1}, "icepool.MultisetExpression.intersection": {"tf": 1}, "icepool.MultisetExpression.keep_outcomes": {"tf": 1}, "icepool.MultisetExpression.drop_outcomes": {"tf": 1}, "icepool.MultisetExpression.count_subset": {"tf": 1}, "icepool.multiset_function": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator": {"tf": 1.4142135623730951}, "icepool.evaluator.CountSubsetEvaluator.__init__": {"tf": 1}, "icepool.evaluator.CompairEvalautor.__init__": {"tf": 1.4142135623730951}}, "df": 16, "s": {"docs": {"icepool.d": {"tf": 1}, "icepool.z": {"tf": 1.4142135623730951}, "icepool.function.d": {"tf": 1}, "icepool.function.z": {"tf": 1.4142135623730951}}, "df": 4}, "d": {"docs": {"icepool.Die.keep": {"tf": 1}}, "df": 1}}}, "x": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.map_function": {"tf": 2}, "icepool.function.map_function": {"tf": 2}}, "df": 3, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool.one_hot": {"tf": 1}, "icepool.function.one_hot": {"tf": 1}}, "df": 2}}}, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.lowest": {"tf": 1}, "icepool.Die.highest": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.Die.explode_to_pool": {"tf": 1}, "icepool.Die.zero": {"tf": 1}, "icepool.Population.quantity": {"tf": 1}, "icepool.Population.modal_quantity": {"tf": 1}, "icepool.Population.sample": {"tf": 1}, "icepool.Symbols": {"tf": 1.7320508075688772}, "icepool.lowest": {"tf": 1.4142135623730951}, "icepool.highest": {"tf": 1.4142135623730951}, "icepool.middle": {"tf": 1}, "icepool.align": {"tf": 1}, "icepool.align_range": {"tf": 1}, "icepool.commonize_denominator": {"tf": 1}, "icepool.map": {"tf": 1.4142135623730951}, "icepool.map_and_time": {"tf": 1}, "icepool.map_to_pool": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1.4142135623730951}, "icepool.MultisetGenerator.sample": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1}, "icepool.MultisetExpression.lowest": {"tf": 1}, "icepool.MultisetExpression.highest": {"tf": 1}, "icepool.Deck": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}, "icepool.Deal": {"tf": 1}, "icepool.function.align": {"tf": 1}, "icepool.function.align_range": {"tf": 1}, "icepool.function.commonize_denominator": {"tf": 1}, "icepool.function.map": {"tf": 1.4142135623730951}, "icepool.function.map_and_time": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1}}, "df": 34, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.RerollType": {"tf": 1}, "icepool.typing.RerollType": {"tf": 1}}, "df": 2}}}, "s": {"docs": {"icepool.MultisetExpression.keep_counts": {"tf": 1}}, "df": 1}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.map_to_pool": {"tf": 1}, "icepool.Die.equals": {"tf": 1}, "icepool.Population.sample": {"tf": 1}, "icepool.Symbols": {"tf": 2}, "icepool.MultisetExpression.sort_match": {"tf": 1}}, "df": 5}}}, "g": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Symbols": {"tf": 1}, "icepool.Symbols.__init__": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1}}, "df": 3, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.split": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.Die.explode_to_pool": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.map_and_time": {"tf": 1}, "icepool.map_to_pool": {"tf": 1}, "icepool.Deck.map": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1}}, "df": 14}}}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die.clip": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die.equals": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.equals": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {"icepool.MultisetGenerator": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1}}, "df": 2, "s": {"docs": {}, "df": 0, "t": {"docs": {"icepool.map": {"tf": 1}, "icepool.function.map": {"tf": 1}}, "df": 2}}}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die.map_to_pool": {"tf": 1}, "icepool.lowest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.map_function": {"tf": 1}, "icepool.MultisetExpression.keep_outcomes": {"tf": 1}, "icepool.MultisetExpression.drop_outcomes": {"tf": 1}, "icepool.function.map_function": {"tf": 1}}, "df": 7}}}}}, "z": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.pool": {"tf": 1}, "icepool.Die.middle": {"tf": 1.4142135623730951}, "icepool.standard_pool": {"tf": 1}, "icepool.MultisetExpression.largest_count": {"tf": 1}, "icepool.MultisetExpression.largest_straight": {"tf": 1}, "icepool.MultisetExpression.largest_straight_and_outcome": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator": {"tf": 1}}, "df": 9, "s": {"docs": {"icepool.standard_pool": {"tf": 2}, "icepool.MultisetExpression.all_counts": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.all_straights": {"tf": 1.4142135623730951}, "icepool.MultiDeal.__init__": {"tf": 1.4142135623730951}, "icepool.evaluator.AllCountsEvaluator": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator": {"tf": 1}}, "df": 6}}}}, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"icepool.coin": {"tf": 1}, "icepool.Die.reroll": {"tf": 1.4142135623730951}, "icepool.Die.filter": {"tf": 1.4142135623730951}, "icepool.Die.split": {"tf": 1.4142135623730951}, "icepool.Die.explode": {"tf": 1.4142135623730951}, "icepool.Die.lowest": {"tf": 1}, "icepool.Die.highest": {"tf": 1}, "icepool.Die.middle": {"tf": 1}, "icepool.Die.explode_to_pool": {"tf": 1.4142135623730951}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.Population.format": {"tf": 1}, "icepool.Again": {"tf": 1.4142135623730951}, "icepool.lowest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.middle": {"tf": 1}, "icepool.reduce": {"tf": 1}, "icepool.accumulate": {"tf": 1}, "icepool.Reroll": {"tf": 1}, "icepool.RerollType.Reroll": {"tf": 1}, "icepool.Pool": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.MultisetGenerator.order": {"tf": 1}, "icepool.MultisetExpression.order": {"tf": 1}, "icepool.MultisetExpression.keep_outcomes": {"tf": 1}, "icepool.MultisetExpression.drop_outcomes": {"tf": 1}, "icepool.MultisetExpression.maximum_match": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 1.7320508075688772}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.MultisetEvaluator.final_outcome": {"tf": 1}, "icepool.MultisetEvaluator.order": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.alignment": {"tf": 1}, "icepool.Deck.map": {"tf": 1}, "icepool.multiset_function": {"tf": 1.7320508075688772}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.order": {"tf": 1.4142135623730951}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 1}, "icepool.evaluator.CompairEvalautor.order": {"tf": 1.4142135623730951}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1}, "icepool.function.coin": {"tf": 1}, "icepool.function.reduce": {"tf": 1}, "icepool.function.accumulate": {"tf": 1}, "icepool.typing.RerollType.Reroll": {"tf": 1}, "icepool.typing.guess_star": {"tf": 1}}, "df": 49}}}, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die.keep": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die": {"tf": 1}}, "df": 1, "d": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}}, "df": 2}}}}}, "o": {"docs": {"icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.Symbols": {"tf": 1.4142135623730951}, "icepool.align": {"tf": 1}, "icepool.align_range": {"tf": 1}, "icepool.commonize_denominator": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1}, "icepool.MultisetExpression.all_counts": {"tf": 1.4142135623730951}, "icepool.multiset_function": {"tf": 1}, "icepool.function.align": {"tf": 1}, "icepool.function.align_range": {"tf": 1}, "icepool.function.commonize_denominator": {"tf": 1}}, "df": 11, "m": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.__init__": {"tf": 1.4142135623730951}, "icepool.Die.clip": {"tf": 1}, "icepool.Die.lowest": {"tf": 1}, "icepool.Die.highest": {"tf": 1}, "icepool.Again": {"tf": 1}, "icepool.lowest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.middle": {"tf": 1}, "icepool.MultisetExpression.lowest": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.highest": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.count": {"tf": 1}, "icepool.MultisetExpression.issubset": {"tf": 1}, "icepool.MultisetExpression.issuperset": {"tf": 1}, "icepool.evaluator.JointEvaluator.order": {"tf": 1}}, "df": 14, "w": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"icepool.one_hot": {"tf": 1}, "icepool.function.one_hot": {"tf": 1}}, "df": 2}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Die.map_to_pool": {"tf": 1.4142135623730951}, "icepool.map_to_pool": {"tf": 1.4142135623730951}, "icepool.function.map_to_pool": {"tf": 1.4142135623730951}}, "df": 3}}}}}}}, "r": {"docs": {}, "df": 0, "t": {"docs": {"icepool.MultisetExpression.sort_match": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.maximum_match": {"tf": 1}}, "df": 2, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Outcome": {"tf": 1}, "icepool.typing.Outcome": {"tf": 1}}, "df": 2}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.keys": {"tf": 1}, "icepool.Die.items": {"tf": 1}, "icepool.Die.middle": {"tf": 1}, "icepool.Population.keys": {"tf": 1}, "icepool.Population.items": {"tf": 1}, "icepool.Population.quantities": {"tf": 1}, "icepool.Population.probabilities": {"tf": 1}, "icepool.Population.mode": {"tf": 1}, "icepool.from_cumulative": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.MultisetGenerator.sample": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1}, "icepool.MultisetExpression.sort_match": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.maximum_match": {"tf": 1}, "icepool.MultisetExpression.all_counts": {"tf": 1}, "icepool.MultisetExpression.compair_lt": {"tf": 1}, "icepool.MultisetExpression.compair_le": {"tf": 1}, "icepool.MultisetExpression.compair_gt": {"tf": 1}, "icepool.MultisetExpression.compair_ge": {"tf": 1}, "icepool.MultisetExpression.compair_eq": {"tf": 1}, "icepool.MultisetExpression.compair_ne": {"tf": 1}, "icepool.Deck.keys": {"tf": 1}, "icepool.Deck.items": {"tf": 1}, "icepool.evaluator.KeepEvaluator": {"tf": 1.4142135623730951}, "icepool.evaluator.CompairEvalautor": {"tf": 1}, "icepool.evaluator.CompairEvalautor.__init__": {"tf": 1}, "icepool.function.from_cumulative": {"tf": 1}, "icepool.function.map": {"tf": 1}}, "df": 28}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Die.keep": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1}}, "df": 2}}}, "s": {"docs": {"icepool.map": {"tf": 1}, "icepool.function.map": {"tf": 1}}, "df": 2}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Die": {"tf": 1}, "icepool.Deck": {"tf": 1}}, "df": 2}}}, "e": {"docs": {"icepool.Population.variance": {"tf": 1}, "icepool.Population.entropy": {"tf": 1}, "icepool.Population.sample": {"tf": 1}, "icepool.MultisetGenerator.sample": {"tf": 1}}, "df": 4, "s": {"docs": {"icepool.MultisetEvaluator.sample": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {"icepool.Die": {"tf": 1}, "icepool.Die.__init__": {"tf": 1}, "icepool.Die.binary_operator": {"tf": 1}, "icepool.Die.clip": {"tf": 1}, "icepool.Die.lowest": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.Die.explode_to_pool": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.Die.zero": {"tf": 1}, "icepool.Die.equals": {"tf": 1}, "icepool.tupleize": {"tf": 1}, "icepool.vectorize": {"tf": 1}, "icepool.Vector.binary_operator": {"tf": 1}, "icepool.Symbols.issubset": {"tf": 1}, "icepool.Symbols.issuperset": {"tf": 1}, "icepool.align": {"tf": 1}, "icepool.align_range": {"tf": 1}, "icepool.commonize_denominator": {"tf": 1.4142135623730951}, "icepool.reduce": {"tf": 1.4142135623730951}, "icepool.accumulate": {"tf": 1.4142135623730951}, "icepool.map": {"tf": 1.7320508075688772}, "icepool.map_and_time": {"tf": 1.4142135623730951}, "icepool.map_to_pool": {"tf": 1}, "icepool.Pool.__init__": {"tf": 2}, "icepool.Pool.additive_union": {"tf": 1}, "icepool.MultisetExpression": {"tf": 2}, "icepool.MultisetExpression.additive_union": {"tf": 1}, "icepool.MultisetExpression.difference": {"tf": 1}, "icepool.MultisetExpression.intersection": {"tf": 1}, "icepool.MultisetExpression.union": {"tf": 1}, "icepool.MultisetExpression.symmetric_difference": {"tf": 1}, "icepool.MultisetExpression.multiply_counts": {"tf": 1}, "icepool.MultisetExpression.divide_counts": {"tf": 1}, "icepool.MultisetExpression.modulo_counts": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1}, "icepool.MultisetExpression.maximum_match": {"tf": 1}, "icepool.MultisetExpression.issubset": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.issuperset": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.evaluate": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}, "icepool.Deck.map": {"tf": 1}, "icepool.multiset_function": {"tf": 1}, "icepool.evaluator.JointEvaluator": {"tf": 1}, "icepool.function.align": {"tf": 1}, "icepool.function.align_range": {"tf": 1}, "icepool.function.commonize_denominator": {"tf": 1.4142135623730951}, "icepool.function.reduce": {"tf": 1.4142135623730951}, "icepool.function.accumulate": {"tf": 1.4142135623730951}, "icepool.function.map": {"tf": 1.7320508075688772}, "icepool.function.map_and_time": {"tf": 1.4142135623730951}, "icepool.function.map_to_pool": {"tf": 1}}, "df": 51}}}, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"icepool.Die": {"tf": 1}, "icepool.Die.__init__": {"tf": 1.4142135623730951}, "icepool.Die.map_to_pool": {"tf": 1.4142135623730951}, "icepool.Population.nearest": {"tf": 1}, "icepool.Again": {"tf": 1}, "icepool.map": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.maximum_match": {"tf": 2}, "icepool.function.map": {"tf": 1.4142135623730951}}, "df": 8}}, "m": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.mean_time_to_sum": {"tf": 1.4142135623730951}, "icepool.Die.keep": {"tf": 1}, "icepool.Die.lowest": {"tf": 1.4142135623730951}, "icepool.Die.highest": {"tf": 1.4142135623730951}, "icepool.Die.middle": {"tf": 1.4142135623730951}, "icepool.Population.denominator": {"tf": 1}, "icepool.Population.cramer_von_mises": {"tf": 1}, "icepool.Symbols.additive_union": {"tf": 1}, "icepool.Again": {"tf": 1.4142135623730951}, "icepool.lowest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.middle": {"tf": 1.4142135623730951}, "icepool.MultisetExpression": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.lowest": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.highest": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.maximum_match": {"tf": 1}, "icepool.MultisetExpression.sum": {"tf": 1}, "icepool.MultisetEvaluator.evaluate": {"tf": 1.4142135623730951}, "icepool.Deck.size": {"tf": 1}}, "df": 20, "s": {"docs": {"icepool.Die.binary_operator": {"tf": 1}, "icepool.Die.keep": {"tf": 1}, "icepool.evaluator.SumEvaluator": {"tf": 1}}, "df": 3}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.lowest": {"tf": 1.7320508075688772}, "icepool.Die.highest": {"tf": 1.7320508075688772}, "icepool.lowest": {"tf": 1.7320508075688772}, "icepool.highest": {"tf": 2}}, "df": 4}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"icepool.MultisetExpression": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.evaluator.SumEvaluator.__init__": {"tf": 1}}, "df": 1}}}}}, "b": {"docs": {"icepool.evaluator.JointEvaluator": {"tf": 1}, "icepool.evaluator.JointEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.evaluator.JointEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.evaluator.JointEvaluator.order": {"tf": 1.4142135623730951}}, "df": 4, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"icepool.MultisetGenerator": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.range_alignment": {"tf": 1.4142135623730951}, "icepool.multiset_function": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"tf": 1.4142135623730951}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"tf": 1.4142135623730951}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"tf": 1.4142135623730951}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"tf": 1.4142135623730951}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1.4142135623730951}}, "df": 11, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Population": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 1}, "icepool.MultisetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1}, "icepool.function.map": {"tf": 1}}, "df": 11}}}}}}}, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.pool": {"tf": 1}, "icepool.Symbols": {"tf": 1.4142135623730951}}, "df": 2, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Symbols": {"tf": 1.7320508075688772}}, "df": 1}}}}}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Symbols": {"tf": 1}, "icepool.Symbols.issubset": {"tf": 1.4142135623730951}, "icepool.Symbols.issuperset": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1}, "icepool.MultisetExpression.issubset": {"tf": 1.4142135623730951}}, "df": 5}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Again": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.evaluator": {"tf": 1}}, "df": 1}}}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool.evaluator.JointEvaluator.final_outcome": {"tf": 1}}, "df": 1}}}}}}}}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.explode": {"tf": 1.4142135623730951}, "icepool.Die.explode_to_pool": {"tf": 1}}, "df": 2}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.lowest": {"tf": 1}, "icepool.Die.highest": {"tf": 1}, "icepool.Die.middle": {"tf": 1}, "icepool.Population.median": {"tf": 1}, "icepool.Population.quantile": {"tf": 1}, "icepool.lowest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.middle": {"tf": 1}}, "df": 8, "s": {"docs": {"icepool.Die.map_to_pool": {"tf": 1}, "icepool.Die.explode_to_pool": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.map_to_pool": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1}}, "df": 5}, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.MultisetExpression.keep": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"icepool.MultisetExpression.sort_match": {"tf": 1}, "icepool.MultisetExpression.maximum_match": {"tf": 1}}, "df": 2}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Symbols.issuperset": {"tf": 1}, "icepool.MultisetExpression.issuperset": {"tf": 1.4142135623730951}}, "df": 2}}}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Symbols.__init__": {"tf": 1}}, "df": 1}}}}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.from_cumulative": {"tf": 1}, "icepool.function.from_cumulative": {"tf": 1}}, "df": 2}}}}}, "e": {"docs": {"icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}}, "df": 4}}}, "k": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Die": {"tf": 1}}, "df": 1}}}}}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.commonize_denominator": {"tf": 1}, "icepool.function.commonize_denominator": {"tf": 1}}, "df": 2, "d": {"docs": {"icepool.Die.__init__": {"tf": 1}}, "df": 1}, "s": {"docs": {"icepool.Population.scale_quantities": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {"icepool.from_rv": {"tf": 1.4142135623730951}, "icepool.function.from_rv": {"tf": 1.4142135623730951}}, "df": 2}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"icepool.MultisetExpression.all_straights_reduce_counts": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator": {"tf": 1}, "icepool.evaluator.CompairEvalautor.__init__": {"tf": 1.7320508075688772}}, "df": 3, "s": {"docs": {"icepool.evaluator.CompairEvalautor": {"tf": 1}, "icepool.evaluator.CompairEvalautor.__init__": {"tf": 1}}, "df": 2}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.keep": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1}}, "df": 2}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Population.cramer_von_mises": {"tf": 1}}, "df": 1}}}}}}, "y": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Symbols.additive_union": {"tf": 1}, "icepool.Symbols.difference": {"tf": 1}, "icepool.Symbols.intersection": {"tf": 1}, "icepool.Symbols.union": {"tf": 1}, "icepool.Symbols.symmetric_difference": {"tf": 1}, "icepool.Again": {"tf": 1}}, "df": 6, "s": {"docs": {"icepool.Symbols": {"tf": 3}, "icepool.Symbols.__init__": {"tf": 1}}, "df": 2}}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"icepool.Symbols": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1}}, "df": 2}}}}}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.MultisetGenerator": {"tf": 1}}, "df": 1}}}}}}}, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"icepool": {"tf": 2}, "icepool.d": {"tf": 1}, "icepool.coin": {"tf": 1}, "icepool.stochastic_round": {"tf": 1.4142135623730951}, "icepool.one_hot": {"tf": 1.4142135623730951}, "icepool.Die": {"tf": 1.7320508075688772}, "icepool.Die.__init__": {"tf": 2}, "icepool.Die.binary_operator": {"tf": 1}, "icepool.Die.truncate": {"tf": 1.4142135623730951}, "icepool.Die.if_else": {"tf": 1.4142135623730951}, "icepool.Die.keep": {"tf": 1.7320508075688772}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.Die.stochastic_round": {"tf": 1}, "icepool.Die.cmp": {"tf": 1}, "icepool.Die.equals": {"tf": 1}, "icepool.Population": {"tf": 1}, "icepool.Population.denominator": {"tf": 1}, "icepool.Population.has_zero_quantities": {"tf": 1}, "icepool.Population.marginals": {"tf": 1}, "icepool.Population.sample": {"tf": 1}, "icepool.Population.format": {"tf": 1}, "icepool.tupleize": {"tf": 2}, "icepool.vectorize": {"tf": 2}, "icepool.Symbols": {"tf": 2.449489742783178}, "icepool.Symbols.isdisjoint": {"tf": 1}, "icepool.Again": {"tf": 2.449489742783178}, "icepool.lowest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.middle": {"tf": 1}, "icepool.align": {"tf": 1}, "icepool.align_range": {"tf": 1}, "icepool.commonize_denominator": {"tf": 1}, "icepool.accumulate": {"tf": 1.4142135623730951}, "icepool.map": {"tf": 2}, "icepool.map_function": {"tf": 1.4142135623730951}, "icepool.map_and_time": {"tf": 1}, "icepool.map_to_pool": {"tf": 1}, "icepool.Reroll": {"tf": 2.6457513110645907}, "icepool.RerollType.Reroll": {"tf": 1}, "icepool.Pool": {"tf": 1.4142135623730951}, "icepool.Pool.__init__": {"tf": 1}, "icepool.MultisetGenerator": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.keep": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.sort_match": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.maximum_match": {"tf": 2.449489742783178}, "icepool.MultisetExpression.highest_outcome_and_count": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.all_straights_reduce_counts": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.next_state": {"tf": 2}, "icepool.MultisetEvaluator.final_outcome": {"tf": 1}, "icepool.MultisetEvaluator.order": {"tf": 1}, "icepool.MultisetEvaluator.alignment": {"tf": 1}, "icepool.MultisetEvaluator.range_alignment": {"tf": 1}, "icepool.MultisetEvaluator.validate_arity": {"tf": 1}, "icepool.Deck.size": {"tf": 1}, "icepool.Deck.difference": {"tf": 1}, "icepool.Deck.map": {"tf": 1}, "icepool.multiset_function": {"tf": 1}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 1}, "icepool.evaluator.JointEvaluator.validate_arity": {"tf": 1}, "icepool.evaluator.ExpandEvaluator": {"tf": 1}, "icepool.evaluator.HighestOutcomeAndCountEvaluator": {"tf": 1.4142135623730951}, "icepool.evaluator.LargestCountAndOutcomeEvaluator": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 2}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 2}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.order": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 2}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 1}, "icepool.evaluator.CompairEvalautor.order": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.validate_arity": {"tf": 1}, "icepool.function.d": {"tf": 1}, "icepool.function.coin": {"tf": 1}, "icepool.function.stochastic_round": {"tf": 1.4142135623730951}, "icepool.function.one_hot": {"tf": 1.4142135623730951}, "icepool.function.align": {"tf": 1}, "icepool.function.align_range": {"tf": 1}, "icepool.function.commonize_denominator": {"tf": 1}, "icepool.function.accumulate": {"tf": 1.4142135623730951}, "icepool.function.map": {"tf": 2}, "icepool.function.map_function": {"tf": 1.4142135623730951}, "icepool.function.map_and_time": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1}, "icepool.typing.Qs": {"tf": 1}, "icepool.typing.RerollType.Reroll": {"tf": 1}}, "df": 95, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"icepool.stochastic_round": {"tf": 1}, "icepool.Die.stochastic_round": {"tf": 1}, "icepool.map_and_time": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.Alignment": {"tf": 1}, "icepool.Deck": {"tf": 1}, "icepool.function.stochastic_round": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}}, "df": 8}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Die.binary_operator": {"tf": 1}, "icepool.Die.keys": {"tf": 1}, "icepool.Die.values": {"tf": 1}, "icepool.Die.clip": {"tf": 1}, "icepool.Die.set_range": {"tf": 1}, "icepool.Population.keys": {"tf": 1}, "icepool.Population.values": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.Deck": {"tf": 1}, "icepool.Deck.keys": {"tf": 1}, "icepool.Deck.values": {"tf": 1}, "icepool.multiset_function": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.__init__": {"tf": 1}}, "df": 13}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"icepool.coin": {"tf": 1}, "icepool.stochastic_round": {"tf": 1.4142135623730951}, "icepool.Die": {"tf": 1.4142135623730951}, "icepool.Die.__init__": {"tf": 2.6457513110645907}, "icepool.Die.reroll": {"tf": 1.4142135623730951}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.split": {"tf": 1}, "icepool.Die.truncate": {"tf": 1}, "icepool.Die.clip": {"tf": 1.4142135623730951}, "icepool.Die.set_range": {"tf": 1.4142135623730951}, "icepool.Die.explode": {"tf": 2.449489742783178}, "icepool.Die.keep": {"tf": 2}, "icepool.Die.lowest": {"tf": 2.6457513110645907}, "icepool.Die.highest": {"tf": 2.449489742783178}, "icepool.Die.map_to_pool": {"tf": 2.449489742783178}, "icepool.Die.explode_to_pool": {"tf": 1.4142135623730951}, "icepool.Die.reroll_to_pool": {"tf": 2.23606797749979}, "icepool.Die.stochastic_round": {"tf": 1.4142135623730951}, "icepool.Die.zero": {"tf": 1}, "icepool.Die.cmp": {"tf": 1}, "icepool.Die.equals": {"tf": 1}, "icepool.Population.median": {"tf": 1}, "icepool.Population.quantile": {"tf": 1}, "icepool.Population.marginals": {"tf": 1.7320508075688772}, "icepool.Population.to_one_hot": {"tf": 1}, "icepool.Again": {"tf": 1}, "icepool.from_cumulative": {"tf": 1}, "icepool.from_rv": {"tf": 1.7320508075688772}, "icepool.lowest": {"tf": 2.6457513110645907}, "icepool.highest": {"tf": 2.8284271247461903}, "icepool.middle": {"tf": 1}, "icepool.reduce": {"tf": 1}, "icepool.accumulate": {"tf": 1}, "icepool.map": {"tf": 3.4641016151377544}, "icepool.map_and_time": {"tf": 2.23606797749979}, "icepool.map_to_pool": {"tf": 2.23606797749979}, "icepool.Pool.__init__": {"tf": 1.4142135623730951}, "icepool.standard_pool": {"tf": 1.4142135623730951}, "icepool.MultisetGenerator": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.difference": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.intersection": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1}, "icepool.MultisetExpression.lowest": {"tf": 2.449489742783178}, "icepool.MultisetExpression.highest": {"tf": 2.449489742783178}, "icepool.MultisetExpression.maximum_match": {"tf": 2.23606797749979}, "icepool.MultisetExpression.evaluate": {"tf": 1}, "icepool.MultisetExpression.count": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.highest_outcome_and_count": {"tf": 1}, "icepool.MultisetExpression.all_counts": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.count_subset": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.argsort": {"tf": 1}, "icepool.MultisetExpression.compair_lt": {"tf": 1}, "icepool.MultisetExpression.compair_le": {"tf": 1}, "icepool.MultisetExpression.compair_gt": {"tf": 1}, "icepool.MultisetExpression.compair_ge": {"tf": 1}, "icepool.MultisetExpression.compair_eq": {"tf": 1}, "icepool.MultisetExpression.compair_ne": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 2}, "icepool.MultisetEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.order": {"tf": 1}, "icepool.MultisetEvaluator.alignment": {"tf": 1}, "icepool.MultisetEvaluator.prefix_generators": {"tf": 1}, "icepool.MultisetEvaluator.validate_arity": {"tf": 1}, "icepool.MultisetEvaluator.evaluate": {"tf": 1}, "icepool.Deck.__init__": {"tf": 2}, "icepool.Deck.map": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1}, "icepool.MultiDeal.__init__": {"tf": 1.4142135623730951}, "icepool.multiset_function": {"tf": 1}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 1}, "icepool.evaluator.JointEvaluator.prefix_generators": {"tf": 1}, "icepool.evaluator.JointEvaluator.validate_arity": {"tf": 1}, "icepool.evaluator.ExpandEvaluator": {"tf": 1}, "icepool.evaluator.SumEvaluator.__init__": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.__init__": {"tf": 1.4142135623730951}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 2}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.evaluator.AllCountsEvaluator.__init__": {"tf": 1.7320508075688772}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 2}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.evaluator.ArgsortEvaluator.order": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 2}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 1.4142135623730951}, "icepool.evaluator.CompairEvalautor.order": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.evaluator.ExpressionEvaluator.prefix_generators": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.validate_arity": {"tf": 1}, "icepool.function.coin": {"tf": 1}, "icepool.function.stochastic_round": {"tf": 1.4142135623730951}, "icepool.function.from_cumulative": {"tf": 1}, "icepool.function.from_rv": {"tf": 1.7320508075688772}, "icepool.function.reduce": {"tf": 1}, "icepool.function.accumulate": {"tf": 1}, "icepool.function.map": {"tf": 3.4641016151377544}, "icepool.function.map_and_time": {"tf": 2.23606797749979}, "icepool.function.map_to_pool": {"tf": 2.23606797749979}, "icepool.typing.guess_star": {"tf": 1}}, "df": 98}}, "n": {"docs": {"icepool.MultisetExpression.sort_match": {"tf": 1}}, "df": 1, "s": {"docs": {"icepool.evaluator.CompairEvalautor": {"tf": 1}, "icepool.evaluator.CompairEvalautor.__init__": {"tf": 1.7320508075688772}}, "df": 2}}}, "a": {"docs": {}, "df": 0, "y": {"docs": {"icepool.one_hot": {"tf": 1}, "icepool.Population.quantile": {"tf": 1}, "icepool.Population.quantile_low": {"tf": 1}, "icepool.Population.quantile_high": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 1}, "icepool.multiset_function": {"tf": 1}, "icepool.function.one_hot": {"tf": 1}}, "df": 7, "s": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.__init__": {"tf": 1}}, "df": 2}}, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.truncate": {"tf": 1}, "icepool.Die.clip": {"tf": 1}, "icepool.Symbols": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.MultisetGenerator": {"tf": 1}, "icepool.MultisetExpression.difference": {"tf": 1}, "icepool.MultisetExpression.intersection": {"tf": 1}, "icepool.MultisetExpression.symmetric_difference": {"tf": 1}, "icepool.MultisetExpression.lowest": {"tf": 1}, "icepool.MultisetExpression.highest": {"tf": 1}, "icepool.MultisetExpression.sort_match": {"tf": 1}, "icepool.MultisetExpression.all_counts": {"tf": 1}, "icepool.MultisetEvaluator.final_outcome": {"tf": 1}, "icepool.MultisetEvaluator.alignment": {"tf": 1.4142135623730951}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 1.4142135623730951}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1}, "icepool.function.map": {"tf": 1}}, "df": 22}}, "s": {"docs": {"icepool.Die.keep": {"tf": 1}}, "df": 1}}, "e": {"docs": {"icepool.Again": {"tf": 2.449489742783178}, "icepool.MultisetExpression.all_counts": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.map_to_pool": {"tf": 1}, "icepool.map_to_pool": {"tf": 1}, "icepool.Pool.denominator": {"tf": 1}, "icepool.MultisetGenerator": {"tf": 1}, "icepool.MultisetGenerator.denominator": {"tf": 1}, "icepool.Alignment.denominator": {"tf": 1}, "icepool.Deal.denominator": {"tf": 1}, "icepool.MultiDeal.denominator": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1}}, "df": 9, "s": {"docs": {"icepool.Die": {"tf": 1}, "icepool.Population.denominator": {"tf": 1}, "icepool.commonize_denominator": {"tf": 1}, "icepool.Deck.size": {"tf": 1}, "icepool.function.commonize_denominator": {"tf": 1}}, "df": 5}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Die.__init__": {"tf": 1}}, "df": 1}}}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Die": {"tf": 1}, "icepool.Die.unary_operator": {"tf": 1}, "icepool.MultisetExpression.all_counts": {"tf": 1}}, "df": 3}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.reroll_to_pool": {"tf": 1.4142135623730951}, "icepool.map": {"tf": 1}, "icepool.MultisetExpression.maximum_match": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.__init__": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}, "icepool.function.map": {"tf": 1}}, "df": 10}}}, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Symbols": {"tf": 1}, "icepool.map_and_time": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}}, "df": 5}}, "c": {"docs": {}, "df": 0, "h": {"docs": {"icepool.Die.__init__": {"tf": 1.7320508075688772}, "icepool.Die.binary_operator": {"tf": 1}, "icepool.Die.reroll": {"tf": 1.7320508075688772}, "icepool.Die.filter": {"tf": 1.7320508075688772}, "icepool.Die.split": {"tf": 1.7320508075688772}, "icepool.Die.truncate": {"tf": 1}, "icepool.Die.explode": {"tf": 1.7320508075688772}, "icepool.Die.keep": {"tf": 1}, "icepool.Die.explode_to_pool": {"tf": 1.7320508075688772}, "icepool.Die.reroll_to_pool": {"tf": 2.449489742783178}, "icepool.Population.nearest": {"tf": 1}, "icepool.Population.quantity": {"tf": 1.4142135623730951}, "icepool.Population.entropy": {"tf": 1}, "icepool.Population.format": {"tf": 1.4142135623730951}, "icepool.Symbols": {"tf": 1}, "icepool.Again": {"tf": 1}, "icepool.reduce": {"tf": 1.4142135623730951}, "icepool.accumulate": {"tf": 1}, "icepool.map": {"tf": 1.4142135623730951}, "icepool.map_function": {"tf": 1}, "icepool.standard_pool": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1}, "icepool.MultisetExpression.sort_match": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.maximum_match": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.argsort": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.issubset": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.issuperset": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.isdisjoint": {"tf": 1}, "icepool.MultisetExpression.compair_lt": {"tf": 1}, "icepool.MultisetExpression.compair_le": {"tf": 1}, "icepool.MultisetExpression.compair_gt": {"tf": 1}, "icepool.MultisetExpression.compair_ge": {"tf": 1}, "icepool.MultisetExpression.compair_eq": {"tf": 1}, "icepool.MultisetExpression.compair_ne": {"tf": 1}, "icepool.MultisetEvaluator.order": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1.4142135623730951}, "icepool.Deck.map": {"tf": 1}, "icepool.multiset_function": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.__init__": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.order": {"tf": 1}, "icepool.evaluator.CompairEvalautor.order": {"tf": 1}, "icepool.function.reduce": {"tf": 1.4142135623730951}, "icepool.function.accumulate": {"tf": 1}, "icepool.function.map": {"tf": 1.4142135623730951}, "icepool.function.map_function": {"tf": 1}}, "df": 45, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.map_and_time": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}}, "df": 2}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Symbols.__init__": {"tf": 1}}, "df": 1}}}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Die.unary_operator": {"tf": 1}, "icepool.Again": {"tf": 1.4142135623730951}, "icepool.Reroll": {"tf": 1.4142135623730951}, "icepool.Pool.__init__": {"tf": 1}, "icepool.MultisetGenerator": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 1}, "icepool.multiset_function": {"tf": 1}}, "df": 7}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die.binary_operator": {"tf": 1}, "icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.split": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.explode_to_pool": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.Symbols.issubset": {"tf": 1}, "icepool.Symbols.issuperset": {"tf": 1}, "icepool.Symbols.isdisjoint": {"tf": 1}, "icepool.Symbols.has_negative_counts": {"tf": 1}, "icepool.MultisetGenerator.equals": {"tf": 1}, "icepool.MultisetExpression": {"tf": 2.449489742783178}, "icepool.MultisetExpression.sort_match": {"tf": 1}, "icepool.MultisetExpression.maximum_match": {"tf": 1}, "icepool.MultisetExpression.expand": {"tf": 1}, "icepool.MultisetExpression.any": {"tf": 1}, "icepool.MultisetExpression.all_counts": {"tf": 1}, "icepool.MultisetExpression.issubset": {"tf": 1}, "icepool.MultisetExpression.issuperset": {"tf": 1}, "icepool.MultisetExpression.isdisjoint": {"tf": 1}, "icepool.Deck.map": {"tf": 1}, "icepool.evaluator.KeepEvaluator.order": {"tf": 1}, "icepool.typing.guess_star": {"tf": 1}}, "df": 24}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Population.to_one_hot": {"tf": 1}, "icepool.Again": {"tf": 1}, "icepool.map_and_time": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}}, "df": 8}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.middle": {"tf": 1}, "icepool.middle": {"tf": 1}, "icepool.MultisetEvaluator.final_outcome": {"tf": 1}, "icepool.Order": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1}, "icepool.typing.Order": {"tf": 1}}, "df": 10}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.zero_outcome": {"tf": 1}, "icepool.MultisetEvaluator.prefix_generators": {"tf": 1}, "icepool.evaluator.JointEvaluator.prefix_generators": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.prefix_generators": {"tf": 1}}, "df": 4}}, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.evaluator.JointEvaluator.next_state": {"tf": 1}, "icepool.evaluator.JointEvaluator.final_outcome": {"tf": 1}}, "df": 2}}}, "y": {"docs": {"icepool.MultisetExpression.all_counts": {"tf": 1}}, "df": 1}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.keep": {"tf": 2}, "icepool.Die.equals": {"tf": 1}, "icepool.Population.nearest": {"tf": 1}, "icepool.tupleize": {"tf": 1.7320508075688772}, "icepool.vectorize": {"tf": 1.7320508075688772}, "icepool.Symbols": {"tf": 1}, "icepool.Again": {"tf": 1.4142135623730951}, "icepool.Pool.additive_union": {"tf": 1}, "icepool.MultisetExpression.additive_union": {"tf": 1}, "icepool.MultisetExpression.difference": {"tf": 1}, "icepool.MultisetExpression.intersection": {"tf": 1}, "icepool.MultisetExpression.union": {"tf": 1}, "icepool.MultisetExpression.keep_counts": {"tf": 1}, "icepool.MultisetExpression.unique": {"tf": 1}, "icepool.MultisetExpression.sort_match": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.all_counts": {"tf": 1}, "icepool.multiset_function": {"tf": 1}, "icepool.evaluator.CompairEvalautor.__init__": {"tf": 1.4142135623730951}}, "df": 20}}}, "r": {"docs": {}, "df": 0, "k": {"docs": {"icepool.Die.lowest": {"tf": 1}, "icepool.Die.highest": {"tf": 1}, "icepool.lowest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.MultisetExpression.lowest": {"tf": 1}, "icepool.MultisetExpression.highest": {"tf": 1}}, "df": 6, "s": {"docs": {"icepool.Symbols": {"tf": 1}}, "df": 1}}, "r": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.map_and_time": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}}, "df": 2}}}}}, "d": {"docs": {}, "df": 0, "s": {"docs": {"icepool.evaluator.AllCountsEvaluator": {"tf": 1}}, "df": 1}}}, "n": {"docs": {"icepool.evaluator.CompairEvalautor.__init__": {"tf": 1.4142135623730951}}, "df": 1}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.MultisetGenerator": {"tf": 1}}, "df": 1}}}, "e": {"docs": {"icepool.MultisetGenerator": {"tf": 1}}, "df": 1}}}}}, "v": {"0": {"docs": {"icepool": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool": {"tf": 1.4142135623730951}, "icepool.Vector.reverse_binary_operator": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.map_function": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.keep": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.function.map_function": {"tf": 1}}, "df": 8, "s": {"docs": {"icepool.MultisetExpression.lowest": {"tf": 1}, "icepool.MultisetExpression.highest": {"tf": 1}}, "df": 2}}}}, "a": {"docs": {"icepool.Die.middle": {"tf": 1}, "icepool.middle": {"tf": 1}}, "df": 2}, "u": {"docs": {}, "df": 0, "s": {"docs": {"icepool.MultisetExpression.sort_match": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Outcome": {"tf": 1}, "icepool.MultisetEvaluator.validate_arity": {"tf": 1}, "icepool.evaluator.JointEvaluator.validate_arity": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.validate_arity": {"tf": 1}, "icepool.typing.Outcome": {"tf": 1}}, "df": 5}}}, "y": {"docs": {"icepool.map": {"tf": 1}, "icepool.MultisetExpression.count": {"tf": 1}, "icepool.evaluator.CountEvaluator": {"tf": 1}, "icepool.function.map": {"tf": 1}}, "df": 4}}, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.one_hot": {"tf": 1}, "icepool.Die.__init__": {"tf": 1}, "icepool.Population.to_one_hot": {"tf": 1}, "icepool.vectorize": {"tf": 3.3166247903554}, "icepool.Vector.unary_operator": {"tf": 1}, "icepool.Vector.binary_operator": {"tf": 1.4142135623730951}, "icepool.map": {"tf": 1}, "icepool.function.one_hot": {"tf": 1}, "icepool.function.map": {"tf": 1}}, "df": 9, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"icepool.vectorize": {"tf": 1.7320508075688772}}, "df": 1}}}}}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"icepool": {"tf": 1}}, "df": 1}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.middle": {"tf": 1}, "icepool.middle": {"tf": 1}}, "df": 2}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"icepool.stochastic_round": {"tf": 1}, "icepool.Die.binary_operator": {"tf": 1}, "icepool.Die.explode": {"tf": 1.7320508075688772}, "icepool.Die.map_to_pool": {"tf": 1.4142135623730951}, "icepool.Die.equals": {"tf": 2.23606797749979}, "icepool.Vector.binary_operator": {"tf": 1}, "icepool.lowest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.middle": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.map_and_time": {"tf": 1}, "icepool.map_to_pool": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.maximum_match": {"tf": 1}, "icepool.MultisetExpression.all_counts": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.multiset_function": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.AllCountsEvaluator.__init__": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1.4142135623730951}, "icepool.function.stochastic_round": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1.4142135623730951}}, "df": 24, "s": {"docs": {"icepool.Die": {"tf": 1}, "icepool.Die.clip": {"tf": 1}, "icepool.Population.format": {"tf": 1}, "icepool.Again": {"tf": 1}, "icepool.from_cumulative": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator": {"tf": 1.4142135623730951}, "icepool.evaluator.KeepEvaluator": {"tf": 1}, "icepool.function.from_cumulative": {"tf": 1.4142135623730951}}, "df": 8, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {"icepool.CountsValuesView": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.unary_operator": {"tf": 1}, "icepool.Die.binary_operator": {"tf": 1}, "icepool.Die.mean_time_to_sum": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.Die.zero": {"tf": 1}, "icepool.Symbols.isdisjoint": {"tf": 1}, "icepool.lowest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.middle": {"tf": 1}, "icepool.map_to_pool": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.MultisetGenerator.order": {"tf": 1}, "icepool.MultisetExpression.order": {"tf": 1}, "icepool.MultisetEvaluator.validate_arity": {"tf": 1}, "icepool.Order.merge": {"tf": 1}, "icepool.evaluator.JointEvaluator.order": {"tf": 1}, "icepool.evaluator.JointEvaluator.validate_arity": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.validate_arity": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1}, "icepool.typing.Order.merge": {"tf": 1}}, "df": 21}}}}}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Symbols": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1}, "icepool.MultisetEvaluator.final_outcome": {"tf": 1}, "icepool.MultisetEvaluator.validate_arity": {"tf": 1}, "icepool.evaluator.JointEvaluator.validate_arity": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.validate_arity": {"tf": 1}}, "df": 12}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Population.variance": {"tf": 1.4142135623730951}}, "df": 1}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"icepool.Vector": {"tf": 1}, "icepool.typing.count_positional_parameters": {"tf": 1}}, "df": 2}}}, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.MultisetEvaluator.evaluate": {"tf": 1}}, "df": 1, "s": {"docs": {"icepool.MultisetExpression.keep": {"tf": 1}, "icepool.multiset_function": {"tf": 1}}, "df": 2}}}}}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Population.cramer_von_mises": {"tf": 1}}, "df": 1}}, "s": {"docs": {"icepool.MultisetExpression.sort_match": {"tf": 1.7320508075688772}}, "df": 1}}, "y": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {"icepool": {"tf": 1}, "icepool.d": {"tf": 1}, "icepool.Die": {"tf": 1}, "icepool.Die.__init__": {"tf": 1}, "icepool.Die.truncate": {"tf": 1}, "icepool.Die.clip": {"tf": 1}, "icepool.Die.pool": {"tf": 1}, "icepool.Population.format": {"tf": 1}, "icepool.Symbols": {"tf": 2.23606797749979}, "icepool.map": {"tf": 1.4142135623730951}, "icepool.map_and_time": {"tf": 1.4142135623730951}, "icepool.Pool.__init__": {"tf": 1}, "icepool.MultisetGenerator": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.difference": {"tf": 1}, "icepool.MultisetExpression.intersection": {"tf": 1}, "icepool.MultisetExpression.symmetric_difference": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.lowest": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.highest": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.sort_match": {"tf": 1}, "icepool.MultisetExpression.all_counts": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.MultisetEvaluator.alignment": {"tf": 2}, "icepool.MultisetEvaluator.range_alignment": {"tf": 1}, "icepool.MultisetEvaluator.evaluate": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1}, "icepool.MultiDeal.__init__": {"tf": 1}, "icepool.multiset_function": {"tf": 1.7320508075688772}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 2}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1.7320508075688772}, "icepool.function.d": {"tf": 1}, "icepool.function.map": {"tf": 1.4142135623730951}, "icepool.function.map_and_time": {"tf": 1.4142135623730951}}, "df": 39, "r": {"docs": {"icepool.MultisetGenerator": {"tf": 1.4142135623730951}, "icepool.multiset_function": {"tf": 1}}, "df": 2}}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.__init__": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.accumulate": {"tf": 1}, "icepool.function.accumulate": {"tf": 1}}, "df": 2}}}}}}}}, "r": {"docs": {"icepool.Symbols": {"tf": 3}, "icepool.MultisetExpression": {"tf": 2.23606797749979}}, "df": 2, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 2}, "icepool.map": {"tf": 1.7320508075688772}, "icepool.map_and_time": {"tf": 1}, "icepool.map_to_pool": {"tf": 2}, "icepool.Deck.map": {"tf": 1.4142135623730951}, "icepool.function.map": {"tf": 1.7320508075688772}, "icepool.function.map_and_time": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 2}}, "df": 10, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"icepool": {"tf": 1}, "icepool.Die.truncate": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.MultisetEvaluator.range_alignment": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}}, "df": 11, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die": {"tf": 1}, "icepool.Population.sample": {"tf": 1}, "icepool.Deck": {"tf": 1}}, "df": 3}}}}, "s": {"docs": {"icepool.Die.if_else": {"tf": 1}}, "df": 1}, "d": {"docs": {"icepool.Die.keep": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.Deck.map": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.typing.Qs": {"tf": 1}}, "df": 5}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die": {"tf": 1}, "icepool.Deck": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.one_hot": {"tf": 1}, "icepool.Die": {"tf": 1}, "icepool.Die.unary_operator": {"tf": 1}, "icepool.Die.binary_operator": {"tf": 1}, "icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Die.lowest": {"tf": 1}, "icepool.Die.highest": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.Die.explode_to_pool": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.from_cumulative": {"tf": 1}, "icepool.map_and_time": {"tf": 1}, "icepool.map_to_pool": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1}, "icepool.MultisetEvaluator.evaluate": {"tf": 1}, "icepool.multiset_function": {"tf": 1}, "icepool.function.one_hot": {"tf": 1}, "icepool.function.from_cumulative": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1}}, "df": 23}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Population.to_one_hot": {"tf": 1}}, "df": 1}}}}}, "s": {"docs": {"icepool.map": {"tf": 1}, "icepool.Pool": {"tf": 1}, "icepool.MultisetExpression.issuperset": {"tf": 1}, "icepool.Deal": {"tf": 1}, "icepool.MultiDeal": {"tf": 1}, "icepool.function.map": {"tf": 1}}, "df": 6}}}}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"icepool.map": {"tf": 1.4142135623730951}, "icepool.map_and_time": {"tf": 1.7320508075688772}, "icepool.function.map": {"tf": 1.4142135623730951}, "icepool.function.map_and_time": {"tf": 1.7320508075688772}}, "df": 4, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.map": {"tf": 1.4142135623730951}, "icepool.map_and_time": {"tf": 1}, "icepool.function.map": {"tf": 1.4142135623730951}, "icepool.function.map_and_time": {"tf": 1}}, "df": 4, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die.map_and_time": {"tf": 1}, "icepool.map_and_time": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}}, "df": 3}}}}, "s": {"docs": {"icepool.map_and_time": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}}, "df": 2}}}}}, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Die": {"tf": 1}, "icepool.Die.lowest": {"tf": 1}, "icepool.Die.highest": {"tf": 1}, "icepool.Die.equals": {"tf": 1}, "icepool.reduce": {"tf": 1}, "icepool.map_function": {"tf": 2}, "icepool.map_and_time": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 1}, "icepool.MultisetEvaluator.alignment": {"tf": 1}, "icepool.multiset_function": {"tf": 1.7320508075688772}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 1}, "icepool.function.reduce": {"tf": 1}, "icepool.function.map_function": {"tf": 2}, "icepool.function.map_and_time": {"tf": 1}}, "df": 14, "s": {"docs": {"icepool": {"tf": 1}, "icepool.Die.unary_operator": {"tf": 1.4142135623730951}, "icepool.Die.binary_operator": {"tf": 1}, "icepool.Die.reroll": {"tf": 1.4142135623730951}, "icepool.Die.filter": {"tf": 1.4142135623730951}, "icepool.Die.split": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.is_in": {"tf": 1}, "icepool.Die.lowest": {"tf": 1}, "icepool.Die.highest": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.Die.explode_to_pool": {"tf": 1.4142135623730951}, "icepool.Die.reroll_to_pool": {"tf": 1.4142135623730951}, "icepool.Population.nearest": {"tf": 1}, "icepool.Population.quantity": {"tf": 1}, "icepool.tupleize": {"tf": 1.4142135623730951}, "icepool.vectorize": {"tf": 1.4142135623730951}, "icepool.Symbols": {"tf": 1.4142135623730951}, "icepool.align": {"tf": 1}, "icepool.align_range": {"tf": 1}, "icepool.commonize_denominator": {"tf": 1}, "icepool.map_and_time": {"tf": 1}, "icepool.map_to_pool": {"tf": 1}, "icepool.MultisetGenerator.order": {"tf": 1}, "icepool.MultisetGenerator.sample": {"tf": 1}, "icepool.MultisetExpression.order": {"tf": 1}, "icepool.MultisetExpression.evaluate": {"tf": 1}, "icepool.MultisetExpression.argsort": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.MultisetEvaluator.final_outcome": {"tf": 1}, "icepool.MultisetEvaluator.order": {"tf": 1}, "icepool.MultisetEvaluator.alignment": {"tf": 1}, "icepool.MultisetEvaluator.range_alignment": {"tf": 1}, "icepool.MultisetEvaluator.evaluate": {"tf": 1.4142135623730951}, "icepool.Order.merge": {"tf": 1}, "icepool.evaluator.JointEvaluator.next_state": {"tf": 1}, "icepool.evaluator.JointEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 1}, "icepool.evaluator.CountEvaluator": {"tf": 1}, "icepool.evaluator.AnyEvaluator": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.ConstantEvaluator": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.order": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 1}, "icepool.evaluator.CompairEvalautor.order": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1}, "icepool.function.align": {"tf": 1}, "icepool.function.align_range": {"tf": 1}, "icepool.function.commonize_denominator": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1}, "icepool.typing.Order.merge": {"tf": 1}, "icepool.typing.count_positional_parameters": {"tf": 1}}, "df": 63}, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.equals": {"tf": 1}, "icepool.MultisetExpression.highest_outcome_and_count": {"tf": 1}}, "df": 3}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.map": {"tf": 1.4142135623730951}, "icepool.map_and_time": {"tf": 1}, "icepool.MultisetExpression.keep_outcomes": {"tf": 1}, "icepool.MultisetExpression.drop_outcomes": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.Deck.map": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}, "icepool.function.map": {"tf": 1.4142135623730951}, "icepool.function.map_and_time": {"tf": 1}}, "df": 11}}}}}}}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"icepool.coin": {"tf": 1}, "icepool.Die": {"tf": 1}, "icepool.Die.__init__": {"tf": 1}, "icepool.Die.unary_operator": {"tf": 1}, "icepool.Die.binary_operator": {"tf": 1}, "icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.truncate": {"tf": 1}, "icepool.Die.clip": {"tf": 1}, "icepool.Die.set_range": {"tf": 1.4142135623730951}, "icepool.Die.keep": {"tf": 1}, "icepool.Die.lowest": {"tf": 1}, "icepool.Die.highest": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.Die.zero": {"tf": 1}, "icepool.Population.common_outcome_length": {"tf": 1}, "icepool.Population.nearest": {"tf": 1}, "icepool.tupleize": {"tf": 1.4142135623730951}, "icepool.vectorize": {"tf": 1.4142135623730951}, "icepool.Vector.binary_operator": {"tf": 1}, "icepool.Again": {"tf": 1.7320508075688772}, "icepool.lowest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.middle": {"tf": 1}, "icepool.accumulate": {"tf": 1}, "icepool.map": {"tf": 2.23606797749979}, "icepool.map_function": {"tf": 1}, "icepool.map_and_time": {"tf": 1.4142135623730951}, "icepool.map_to_pool": {"tf": 1}, "icepool.Pool": {"tf": 1}, "icepool.MultisetExpression.difference": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1}, "icepool.MultisetExpression.maximum_match": {"tf": 1}, "icepool.MultisetExpression.all_straights_reduce_counts": {"tf": 1}, "icepool.MultisetExpression.issubset": {"tf": 1}, "icepool.MultisetExpression.issuperset": {"tf": 1}, "icepool.MultisetExpression.compair_lt": {"tf": 1}, "icepool.MultisetExpression.compair_le": {"tf": 1}, "icepool.MultisetExpression.compair_gt": {"tf": 1}, "icepool.MultisetExpression.compair_ge": {"tf": 1}, "icepool.MultisetExpression.compair_eq": {"tf": 1}, "icepool.MultisetExpression.compair_ne": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 1}, "icepool.MultisetEvaluator.final_outcome": {"tf": 1}, "icepool.MultisetEvaluator.order": {"tf": 1}, "icepool.MultisetEvaluator.sample": {"tf": 1.4142135623730951}, "icepool.Deck.__init__": {"tf": 1}, "icepool.multiset_function": {"tf": 1}, "icepool.evaluator.JointEvaluator.next_state": {"tf": 1}, "icepool.evaluator.JointEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.HighestOutcomeAndCountEvaluator": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator": {"tf": 1}, "icepool.evaluator.ConstantEvaluator": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.order": {"tf": 1}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 1}, "icepool.evaluator.CompairEvalautor.order": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1}, "icepool.function.coin": {"tf": 1}, "icepool.function.accumulate": {"tf": 1}, "icepool.function.map": {"tf": 2.23606797749979}, "icepool.function.map_function": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1.4142135623730951}, "icepool.function.map_to_pool": {"tf": 1}}, "df": 66, "s": {"docs": {"icepool.Die.middle": {"tf": 1}, "icepool.accumulate": {"tf": 1}, "icepool.function.accumulate": {"tf": 1}}, "df": 3}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Die.map_to_pool": {"tf": 1}, "icepool.from_cumulative": {"tf": 1}, "icepool.from_rv": {"tf": 1.4142135623730951}, "icepool.map_to_pool": {"tf": 1}, "icepool.Pool": {"tf": 1}, "icepool.Pool.additive_union": {"tf": 1}, "icepool.MultisetExpression.additive_union": {"tf": 1}, "icepool.MultisetExpression.difference": {"tf": 1}, "icepool.MultisetExpression.intersection": {"tf": 1}, "icepool.MultisetExpression.union": {"tf": 1}, "icepool.function.from_cumulative": {"tf": 1}, "icepool.function.from_rv": {"tf": 1.4142135623730951}, "icepool.function.map_to_pool": {"tf": 1}}, "df": 13}}}}}}, "t": {"docs": {"icepool.one_hot": {"tf": 1}, "icepool.Die.split": {"tf": 1}, "icepool.Die.lowest": {"tf": 1}, "icepool.Die.highest": {"tf": 1}, "icepool.Population.to_one_hot": {"tf": 1}, "icepool.Symbols": {"tf": 1}, "icepool.lowest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.MultisetGenerator": {"tf": 1}, "icepool.MultisetExpression.keep_outcomes": {"tf": 1}, "icepool.MultisetExpression.drop_outcomes": {"tf": 1}, "icepool.MultisetExpression.keep_counts": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1}, "icepool.MultisetExpression.lowest": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.highest": {"tf": 1.4142135623730951}, "icepool.function.one_hot": {"tf": 1}}, "df": 16}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.zero": {"tf": 1}}, "df": 1}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die.cmp": {"tf": 1}}, "df": 1}}}}}}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die": {"tf": 1}, "icepool.Die.set_range": {"tf": 1}, "icepool.Die.set_outcomes": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}}, "df": 7, "s": {"docs": {"icepool.Die.trim": {"tf": 1}, "icepool.Reroll": {"tf": 1}}, "df": 2}, "d": {"docs": {"icepool.Deck.difference": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Reroll": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die.cmp": {"tf": 1}}, "df": 1}}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.__init__": {"tf": 1}}, "df": 1}}, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.MultisetExpression.issubset": {"tf": 1}, "icepool.MultisetExpression.issuperset": {"tf": 1}}, "df": 2, "s": {"docs": {"icepool.Symbols": {"tf": 1}, "icepool.Symbols.issubset": {"tf": 1}, "icepool.Symbols.issuperset": {"tf": 1}}, "df": 3}}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.reroll": {"tf": 2.23606797749979}, "icepool.Die.filter": {"tf": 2.449489742783178}, "icepool.Die.split": {"tf": 1.7320508075688772}, "icepool.Die.clip": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 1.4142135623730951}, "icepool.Die.reroll_to_pool": {"tf": 1.4142135623730951}, "icepool.Again": {"tf": 2}, "icepool.reduce": {"tf": 1}, "icepool.map": {"tf": 2.23606797749979}, "icepool.map_and_time": {"tf": 1.4142135623730951}, "icepool.map_to_pool": {"tf": 1.4142135623730951}, "icepool.Reroll": {"tf": 1.4142135623730951}, "icepool.RerollType": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.JointEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.JointEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1}, "icepool.function.reduce": {"tf": 1}, "icepool.function.map": {"tf": 2.23606797749979}, "icepool.function.map_and_time": {"tf": 1.4142135623730951}, "icepool.function.map_to_pool": {"tf": 1.4142135623730951}, "icepool.typing.RerollType": {"tf": 1}}, "df": 32, "s": {"docs": {"icepool.Die.reroll": {"tf": 1.4142135623730951}, "icepool.Die.filter": {"tf": 1.4142135623730951}, "icepool.Die.truncate": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 2.23606797749979}, "icepool.Again": {"tf": 1.7320508075688772}}, "df": 5}, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.reroll": {"tf": 1.4142135623730951}, "icepool.Die.reroll_to_pool": {"tf": 3}, "icepool.Again": {"tf": 1.7320508075688772}, "icepool.reduce": {"tf": 1}, "icepool.Reroll": {"tf": 1.7320508075688772}, "icepool.RerollType.Reroll": {"tf": 1}, "icepool.function.reduce": {"tf": 1}, "icepool.typing.RerollType.Reroll": {"tf": 1}}, "df": 8}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Die.clip": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}}, "df": 3}}}}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"icepool.map_and_time": {"tf": 1}, "icepool.evaluator.KeepEvaluator": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}}, "df": 3, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.explode": {"tf": 1.4142135623730951}}, "df": 1}, "s": {"docs": {"icepool.map_and_time": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}}, "df": 2}}}}, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Deal.__init__": {"tf": 1}, "icepool.MultiDeal.__init__": {"tf": 1}}, "df": 2}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Population.format": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.MultisetGenerator.order": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.order": {"tf": 1.4142135623730951}, "icepool.evaluator.KeepEvaluator.order": {"tf": 1}, "icepool.typing.count_positional_parameters": {"tf": 1}}, "df": 4}, "s": {"docs": {"icepool.MultisetExpression.lowest": {"tf": 1}, "icepool.MultisetExpression.highest": {"tf": 1}, "icepool.MultisetExpression.maximum_match": {"tf": 2}}, "df": 3}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Vector.reverse_binary_operator": {"tf": 1}, "icepool.from_cumulative": {"tf": 1}, "icepool.function.from_cumulative": {"tf": 1}}, "df": 3, "s": {"docs": {"icepool.Symbols": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1}}, "df": 2}, "d": {"docs": {"icepool.from_cumulative": {"tf": 1}, "icepool.function.from_cumulative": {"tf": 1}}, "df": 2}}}}}}, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Symbols": {"tf": 1}}, "df": 1}}}, "e": {"docs": {"icepool.accumulate": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.MultisetExpression.all_straights_reduce_counts": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.__init__": {"tf": 1}, "icepool.function.accumulate": {"tf": 1}, "icepool.function.map": {"tf": 1}}, "df": 7, "s": {"docs": {"icepool.Symbols": {"tf": 1}}, "df": 1}, "r": {"docs": {"icepool.evaluator.AllStraightsReduceCountsEvaluator.__init__": {"tf": 1}}, "df": 1}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.MultisetEvaluator.validate_arity": {"tf": 1}, "icepool.evaluator.JointEvaluator.validate_arity": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.validate_arity": {"tf": 1}}, "df": 3}}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.from_cumulative": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.MultisetExpression.expand": {"tf": 1}, "icepool.Deck.map": {"tf": 1}, "icepool.evaluator.ExpandEvaluator": {"tf": 1}, "icepool.function.from_cumulative": {"tf": 1}, "icepool.function.map": {"tf": 1}}, "df": 7}}}}}}}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"icepool.MultiDeal.__init__": {"tf": 1}}, "df": 1}}}}}, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"icepool.MultisetExpression.difference": {"tf": 1}, "icepool.MultisetExpression.intersection": {"tf": 1}}, "df": 2}}}}}}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"icepool.MultisetEvaluator": {"tf": 1}}, "df": 1}}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.MultisetEvaluator.range_alignment": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}}, "df": 9}}}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.explode": {"tf": 1.7320508075688772}, "icepool.Die.is_in": {"tf": 1}, "icepool.Die.count": {"tf": 1}, "icepool.Die.keep": {"tf": 1.7320508075688772}, "icepool.Die.lowest": {"tf": 1.4142135623730951}, "icepool.Die.highest": {"tf": 1.4142135623730951}, "icepool.Die.middle": {"tf": 1.4142135623730951}, "icepool.Again": {"tf": 2.6457513110645907}, "icepool.Pool": {"tf": 1.4142135623730951}}, "df": 10, "s": {"docs": {"icepool": {"tf": 1}, "icepool.d": {"tf": 1}, "icepool.coin": {"tf": 1}, "icepool.Die.__init__": {"tf": 1.4142135623730951}, "icepool.Die.binary_operator": {"tf": 1.4142135623730951}, "icepool.Die.mean_time_to_sum": {"tf": 1}, "icepool.Die.pool": {"tf": 1}, "icepool.Die.keep": {"tf": 3.1622776601683795}, "icepool.Die.lowest": {"tf": 1}, "icepool.Die.highest": {"tf": 1}, "icepool.Die.middle": {"tf": 1}, "icepool.Die.explode_to_pool": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.Again": {"tf": 2}, "icepool.lowest": {"tf": 1.4142135623730951}, "icepool.highest": {"tf": 1.4142135623730951}, "icepool.middle": {"tf": 1.4142135623730951}, "icepool.map": {"tf": 1}, "icepool.Pool": {"tf": 2}, "icepool.MultisetExpression.sort_match": {"tf": 1}, "icepool.MultisetExpression.maximum_match": {"tf": 2}, "icepool.function.d": {"tf": 1}, "icepool.function.coin": {"tf": 1}, "icepool.function.map": {"tf": 1}}, "df": 24}, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.one_hot": {"tf": 1.4142135623730951}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.explode_to_pool": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1.4142135623730951}, "icepool.Again": {"tf": 1}, "icepool.MultisetExpression.sort_match": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}, "icepool.function.one_hot": {"tf": 1.4142135623730951}}, "df": 11}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Again": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}}, "df": 5}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.unary_operator": {"tf": 1}, "icepool.Vector.unary_operator": {"tf": 1}}, "df": 2, "s": {"docs": {"icepool.stochastic_round": {"tf": 1.4142135623730951}, "icepool.Die.stochastic_round": {"tf": 1.4142135623730951}, "icepool.function.stochastic_round": {"tf": 1.4142135623730951}}, "df": 3}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.stochastic_round": {"tf": 1.4142135623730951}, "icepool.Die.stochastic_round": {"tf": 1.4142135623730951}, "icepool.Symbols.divide_counts": {"tf": 1}, "icepool.MultisetExpression.divide_counts": {"tf": 1}, "icepool.Deck.divide_counts": {"tf": 1}, "icepool.function.stochastic_round": {"tf": 1.4142135623730951}}, "df": 6}}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"icepool.one_hot": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1.4142135623730951}, "icepool.Population.entropy": {"tf": 1}, "icepool.Population.sample": {"tf": 1.4142135623730951}, "icepool.MultisetGenerator.sample": {"tf": 1.4142135623730951}, "icepool.function.one_hot": {"tf": 1}}, "df": 6, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.stochastic_round": {"tf": 1}, "icepool.Die.stochastic_round": {"tf": 1}, "icepool.function.stochastic_round": {"tf": 1}}, "df": 3}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.truncate": {"tf": 1.4142135623730951}, "icepool.Die.clip": {"tf": 1.7320508075688772}, "icepool.Die.set_range": {"tf": 1.7320508075688772}, "icepool.MultisetEvaluator.alignment": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.range_alignment": {"tf": 1}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 1.4142135623730951}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"tf": 1}}, "df": 10}}, "k": {"docs": {"icepool.MultisetExpression.argsort": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator": {"tf": 1}}, "df": 2, "s": {"docs": {"icepool.MultisetExpression.argsort": {"tf": 1.7320508075688772}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die": {"tf": 1.4142135623730951}, "icepool.Die.keep": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.Symbols": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.map_and_time": {"tf": 1}, "icepool.map_to_pool": {"tf": 1}, "icepool.MultisetGenerator": {"tf": 1}, "icepool.MultisetExpression.sort_match": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1}}, "df": 12}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"icepool.MultisetGenerator.order": {"tf": 1}, "icepool.MultisetExpression.order": {"tf": 1}}, "df": 2, "s": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.unary_operator": {"tf": 1}, "icepool.Die.binary_operator": {"tf": 1}, "icepool.Die.mean_time_to_sum": {"tf": 1}, "icepool.Die.middle": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.Die.zero": {"tf": 1}, "icepool.Symbols.isdisjoint": {"tf": 1}, "icepool.lowest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.middle": {"tf": 1.4142135623730951}, "icepool.map_to_pool": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.MultisetExpression.count_subset": {"tf": 1}, "icepool.MultisetEvaluator.range_alignment": {"tf": 1}, "icepool.MultisetEvaluator.validate_arity": {"tf": 1}, "icepool.Order.merge": {"tf": 1}, "icepool.evaluator.JointEvaluator.order": {"tf": 1}, "icepool.evaluator.JointEvaluator.validate_arity": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.KeepEvaluator": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.validate_arity": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1}, "icepool.typing.Order.merge": {"tf": 1}}, "df": 27}, "d": {"docs": {"icepool.MultisetExpression.count_subset": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.__init__": {"tf": 1}}, "df": 2}}}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.binary_operator": {"tf": 1}, "icepool.Symbols": {"tf": 1}, "icepool.reduce": {"tf": 1}, "icepool.accumulate": {"tf": 1}, "icepool.MultisetExpression": {"tf": 2.449489742783178}, "icepool.MultisetExpression.difference": {"tf": 1}, "icepool.MultisetExpression.intersection": {"tf": 1}, "icepool.MultisetExpression.symmetric_difference": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.keep_outcomes": {"tf": 1}, "icepool.MultisetExpression.drop_outcomes": {"tf": 1}, "icepool.MultisetExpression.count_subset": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.__init__": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsSubsetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsProperSubsetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsSupersetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsProperSupersetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsEqualSetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsNotEqualSetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsDisjointSetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.CompairEvalautor.__init__": {"tf": 1.7320508075688772}, "icepool.function.reduce": {"tf": 1}, "icepool.function.accumulate": {"tf": 1}}, "df": 24}}}, "s": {"docs": {}, "df": 0, "k": {"docs": {"icepool.MultisetExpression.sort_match": {"tf": 1}, "icepool.MultisetExpression.compair_le": {"tf": 1}, "icepool.MultisetExpression.compair_gt": {"tf": 1}, "icepool.evaluator.CompairEvalautor": {"tf": 1}}, "df": 4}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Again": {"tf": 1}, "icepool.MultisetExpression.all_straights_reduce_counts": {"tf": 1.4142135623730951}, "icepool.evaluator.AllStraightsReduceCountsEvaluator": {"tf": 1.4142135623730951}}, "df": 3, "s": {"docs": {"icepool.evaluator.JointEvaluator.next_state": {"tf": 1}, "icepool.evaluator.JointEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.KeepEvaluator.__init__": {"tf": 1.4142135623730951}}, "df": 3}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool.map_function": {"tf": 1}, "icepool.function.map_function": {"tf": 1}}, "df": 2}}}}, "v": {"docs": {"icepool.from_rv": {"tf": 2}, "icepool.function.from_rv": {"tf": 2}}, "df": 2}}, "l": {"docs": {"icepool.Symbols": {"tf": 3}, "icepool.MultisetExpression": {"tf": 2.23606797749979}}, "df": 2, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"icepool": {"tf": 1}}, "df": 1}}}}, "z": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die.equals": {"tf": 1}}, "df": 1}}}}, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {"icepool.map": {"tf": 1}, "icepool.function.map": {"tf": 1}}, "df": 2}}}}, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"icepool.MultisetExpression.difference": {"tf": 1}, "icepool.MultisetExpression.intersection": {"tf": 1}}, "df": 2, "s": {"docs": {}, "df": 0, "t": {"docs": {"icepool.MultisetExpression": {"tf": 2.23606797749979}, "icepool.MultisetExpression.largest_count": {"tf": 1}, "icepool.MultisetExpression.largest_count_and_outcome": {"tf": 1}, "icepool.MultisetExpression.largest_straight": {"tf": 1}, "icepool.MultisetExpression.largest_straight_and_outcome": {"tf": 1}, "icepool.evaluator.LargestCountEvaluator": {"tf": 1}, "icepool.evaluator.LargestCountAndOutcomeEvaluator": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator": {"tf": 1}}, "df": 9}}}}}, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"icepool.multiset_function": {"tf": 1}}, "df": 1}}}}}}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "s": {"docs": {"icepool": {"tf": 1}}, "df": 1}}}, "w": {"docs": {"icepool.Die.middle": {"tf": 1}, "icepool.Population.median": {"tf": 1}, "icepool.Population.quantile": {"tf": 1}, "icepool.middle": {"tf": 1}, "icepool.MultisetExpression.maximum_match": {"tf": 1.4142135623730951}}, "df": 5, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.pool": {"tf": 1}, "icepool.Die.lowest": {"tf": 2.6457513110645907}, "icepool.Die.reroll_to_pool": {"tf": 1.4142135623730951}, "icepool.Population.mode": {"tf": 1}, "icepool.lowest": {"tf": 2.6457513110645907}, "icepool.MultisetExpression": {"tf": 1}, "icepool.MultisetExpression.lowest": {"tf": 2.449489742783178}}, "df": 7}}, "r": {"docs": {"icepool.Die.middle": {"tf": 1}, "icepool.Population.median_low": {"tf": 1}, "icepool.middle": {"tf": 1}, "icepool.evaluator.CompairEvalautor.__init__": {"tf": 1}}, "df": 4}}}, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die.keep": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.all_straights": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator": {"tf": 1}}, "df": 3}, "s": {"docs": {}, "df": 0, "t": {"docs": {"icepool.MultisetExpression": {"tf": 1}}, "df": 1}}}}}, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "m": {"docs": {"icepool.Population.entropy": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.MultisetGenerator.equals": {"tf": 1}}, "df": 1}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"icepool.MultisetExpression.sort_match": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {"icepool": {"tf": 1}, "icepool.Die": {"tf": 1.4142135623730951}, "icepool.Die.keep": {"tf": 1}, "icepool.Vector": {"tf": 1}, "icepool.evaluator.CompairEvalautor": {"tf": 1}}, "df": 5, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.MultisetGenerator": {"tf": 1}}, "df": 1}}, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"icepool.multiset_function": {"tf": 1}}, "df": 1}}}}}}, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"icepool.stochastic_round": {"tf": 1.4142135623730951}, "icepool.Die.stochastic_round": {"tf": 1.4142135623730951}, "icepool.Again": {"tf": 1}, "icepool.MultisetExpression.argsort": {"tf": 1}, "icepool.function.stochastic_round": {"tf": 1.4142135623730951}}, "df": 5, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.Reroll": {"tf": 1}, "icepool.multiset_function": {"tf": 1}}, "df": 3}}}}}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {"icepool.coin": {"tf": 1}, "icepool.Die.binary_operator": {"tf": 2}, "icepool.Die.cmp": {"tf": 1}, "icepool.Population.nearest": {"tf": 1}, "icepool.Population.quantities": {"tf": 1}, "icepool.Population.probabilities": {"tf": 1}, "icepool.Population.format": {"tf": 2.449489742783178}, "icepool.Vector.binary_operator": {"tf": 2}, "icepool.Symbols": {"tf": 2.23606797749979}, "icepool.Symbols.issubset": {"tf": 1.4142135623730951}, "icepool.Symbols.issuperset": {"tf": 1}, "icepool.MultisetExpression": {"tf": 2}, "icepool.MultisetExpression.sort_match": {"tf": 2}, "icepool.MultisetExpression.maximum_match": {"tf": 2.449489742783178}, "icepool.MultisetExpression.evaluate": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.issubset": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.compair_lt": {"tf": 1}, "icepool.MultisetExpression.compair_le": {"tf": 1}, "icepool.function.coin": {"tf": 1}}, "df": 19}, "e": {"docs": {"icepool.MultisetExpression.compair_le": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.MultisetExpression.sort_match": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Population.min_outcome": {"tf": 1}, "icepool.Population.has_zero_quantities": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1}, "icepool.MultisetExpression.any": {"tf": 1}, "icepool.MultisetExpression.issuperset": {"tf": 1}, "icepool.Order.merge": {"tf": 1.4142135623730951}, "icepool.evaluator.AnyEvaluator": {"tf": 1}, "icepool.typing.Order.merge": {"tf": 1.4142135623730951}}, "df": 8}}, "d": {"docs": {}, "df": 0, "s": {"docs": {"icepool.map_and_time": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}}, "df": 2}}}, "n": {"docs": {"icepool.Population.denominator": {"tf": 1}, "icepool.Deck.size": {"tf": 1}}, "df": 2, "g": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.unary_operator": {"tf": 1}, "icepool.Die.binary_operator": {"tf": 1}, "icepool.Die.keep": {"tf": 1.4142135623730951}, "icepool.Population.common_outcome_length": {"tf": 1}, "icepool.Vector.binary_operator": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1}, "icepool.MultisetExpression.all_straights_reduce_counts": {"tf": 1}, "icepool.MultisetExpression.argsort": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator": {"tf": 1}}, "df": 12, "s": {"docs": {"icepool.Population.common_outcome_length": {"tf": 1.4142135623730951}, "icepool.MultisetExpression": {"tf": 1}}, "df": 2}}}}}, "f": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.binary_operator": {"tf": 1}, "icepool.Symbols": {"tf": 1}, "icepool.reduce": {"tf": 1}, "icepool.accumulate": {"tf": 1}, "icepool.MultisetExpression": {"tf": 2.449489742783178}, "icepool.MultisetExpression.difference": {"tf": 1}, "icepool.MultisetExpression.symmetric_difference": {"tf": 1.4142135623730951}, "icepool.evaluator.CountSubsetEvaluator": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsSubsetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsProperSubsetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsSupersetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsProperSupersetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsEqualSetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsNotEqualSetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsDisjointSetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.CompairEvalautor.__init__": {"tf": 2.23606797749979}, "icepool.function.reduce": {"tf": 1}, "icepool.function.accumulate": {"tf": 1}}, "df": 19}}, "s": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.Die.sign": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.keep": {"tf": 1}}, "df": 4, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Population.quantile_low": {"tf": 1}, "icepool.map_and_time": {"tf": 1}, "icepool.MultisetExpression.maximum_match": {"tf": 1}, "icepool.MultisetExpression.issubset": {"tf": 1}, "icepool.MultisetExpression.issuperset": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}}, "df": 6}}}}, "x": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"icepool.Vector.binary_operator": {"tf": 1}, "icepool.Symbols": {"tf": 1}, "icepool.Symbols.issubset": {"tf": 1}, "icepool.Symbols.issuperset": {"tf": 1}}, "df": 4}}}}}}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Again": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {"icepool.MultisetExpression.difference": {"tf": 1}, "icepool.MultisetExpression.all_counts": {"tf": 1}, "icepool.evaluator.JointEvaluator.order": {"tf": 1}}, "df": 3, "n": {"docs": {"icepool": {"tf": 1}, "icepool.one_hot": {"tf": 1.4142135623730951}, "icepool.Die": {"tf": 2}, "icepool.Die.keys": {"tf": 1}, "icepool.Die.values": {"tf": 1}, "icepool.Die.items": {"tf": 1}, "icepool.Die.truncate": {"tf": 1}, "icepool.Die.clip": {"tf": 1}, "icepool.Die.set_range": {"tf": 1.4142135623730951}, "icepool.Die.set_outcomes": {"tf": 1.4142135623730951}, "icepool.Die.is_in": {"tf": 1}, "icepool.Die.count": {"tf": 1}, "icepool.Die.pool": {"tf": 1.4142135623730951}, "icepool.Die.keep": {"tf": 1.7320508075688772}, "icepool.Die.middle": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 1.4142135623730951}, "icepool.Die.explode_to_pool": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.Die.equals": {"tf": 1}, "icepool.Population.keys": {"tf": 1}, "icepool.Population.values": {"tf": 1}, "icepool.Population.items": {"tf": 1}, "icepool.Population.outcomes": {"tf": 1}, "icepool.Population.nearest": {"tf": 1}, "icepool.Population.quantity": {"tf": 1.4142135623730951}, "icepool.Population.quantities": {"tf": 1}, "icepool.Population.probabilities": {"tf": 1}, "icepool.Population.median": {"tf": 1.4142135623730951}, "icepool.Population.median_low": {"tf": 1}, "icepool.Population.median_high": {"tf": 1}, "icepool.Population.quantile": {"tf": 1.4142135623730951}, "icepool.Population.quantile_low": {"tf": 1}, "icepool.Population.quantile_high": {"tf": 1}, "icepool.Population.entropy": {"tf": 1}, "icepool.Population.to_one_hot": {"tf": 1}, "icepool.Vector": {"tf": 1}, "icepool.Vector.binary_operator": {"tf": 1.4142135623730951}, "icepool.Symbols": {"tf": 1.4142135623730951}, "icepool.Symbols.symmetric_difference": {"tf": 1}, "icepool.Symbols.count_subset": {"tf": 1}, "icepool.Symbols.isdisjoint": {"tf": 1}, "icepool.Again": {"tf": 1.4142135623730951}, "icepool.from_cumulative": {"tf": 1}, "icepool.lowest": {"tf": 1.4142135623730951}, "icepool.highest": {"tf": 1.4142135623730951}, "icepool.middle": {"tf": 1}, "icepool.reduce": {"tf": 1}, "icepool.accumulate": {"tf": 1}, "icepool.map": {"tf": 2.23606797749979}, "icepool.map_function": {"tf": 1}, "icepool.map_and_time": {"tf": 1}, "icepool.map_to_pool": {"tf": 1.4142135623730951}, "icepool.Reroll": {"tf": 1.7320508075688772}, "icepool.Pool": {"tf": 1.7320508075688772}, "icepool.Pool.__init__": {"tf": 1.7320508075688772}, "icepool.Pool.raw_size": {"tf": 1}, "icepool.Pool.unique_dice": {"tf": 1}, "icepool.Pool.outcomes": {"tf": 1.4142135623730951}, "icepool.Pool.min_outcome": {"tf": 1}, "icepool.Pool.max_outcome": {"tf": 1}, "icepool.standard_pool": {"tf": 1}, "icepool.MultisetGenerator": {"tf": 1.4142135623730951}, "icepool.MultisetGenerator.outcomes": {"tf": 1}, "icepool.Alignment.outcomes": {"tf": 1}, "icepool.MultisetExpression": {"tf": 2.6457513110645907}, "icepool.MultisetExpression.difference": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.intersection": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.union": {"tf": 1}, "icepool.MultisetExpression.symmetric_difference": {"tf": 1}, "icepool.MultisetExpression.keep_outcomes": {"tf": 1}, "icepool.MultisetExpression.drop_outcomes": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.lowest": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.highest": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.sort_match": {"tf": 2.23606797749979}, "icepool.MultisetExpression.maximum_match": {"tf": 2.23606797749979}, "icepool.MultisetExpression.expand": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.count": {"tf": 1}, "icepool.MultisetExpression.all_counts": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.count_subset": {"tf": 1}, "icepool.MultisetExpression.largest_straight_and_outcome": {"tf": 1}, "icepool.MultisetExpression.all_straights": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.argsort": {"tf": 1}, "icepool.MultisetExpression.issuperset": {"tf": 1}, "icepool.MultisetExpression.compair_lt": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.compair_le": {"tf": 2}, "icepool.MultisetExpression.compair_gt": {"tf": 2}, "icepool.MultisetExpression.compair_ge": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.compair_eq": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.compair_ne": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.MultisetEvaluator.order": {"tf": 1.7320508075688772}, "icepool.MultisetEvaluator.alignment": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.range_alignment": {"tf": 1}, "icepool.Order": {"tf": 1}, "icepool.Order.merge": {"tf": 1.7320508075688772}, "icepool.Deck.keys": {"tf": 1}, "icepool.Deck.values": {"tf": 1}, "icepool.Deck.items": {"tf": 1}, "icepool.Deck.map": {"tf": 1}, "icepool.Deal.outcomes": {"tf": 1}, "icepool.MultiDeal.__init__": {"tf": 1}, "icepool.MultiDeal.outcomes": {"tf": 1}, "icepool.multiset_function": {"tf": 1.7320508075688772}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 1.4142135623730951}, "icepool.evaluator.CountSubsetEvaluator": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.evaluator.AllCountsEvaluator": {"tf": 1.4142135623730951}, "icepool.evaluator.AllCountsEvaluator.__init__": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator": {"tf": 1.7320508075688772}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.evaluator.KeepEvaluator.__init__": {"tf": 1.4142135623730951}, "icepool.evaluator.ArgsortEvaluator": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.order": {"tf": 1.7320508075688772}, "icepool.evaluator.CompairEvalautor.__init__": {"tf": 1.7320508075688772}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1.7320508075688772}, "icepool.evaluator.CompairEvalautor.order": {"tf": 1.7320508075688772}, "icepool.function.one_hot": {"tf": 1.4142135623730951}, "icepool.function.from_cumulative": {"tf": 1}, "icepool.function.reduce": {"tf": 1}, "icepool.function.accumulate": {"tf": 1}, "icepool.function.map": {"tf": 2.23606797749979}, "icepool.function.map_function": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1.4142135623730951}, "icepool.typing.Qs": {"tf": 1}, "icepool.typing.Order": {"tf": 1}, "icepool.typing.Order.merge": {"tf": 1.7320508075688772}}, "df": 134, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"icepool": {"tf": 1.4142135623730951}, "icepool.Population": {"tf": 1}}, "df": 2, "s": {"docs": {"icepool": {"tf": 1}, "icepool.Population.sample": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 1.7320508075688772}}, "df": 3}}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.truncate": {"tf": 1}, "icepool.Population.median": {"tf": 1}, "icepool.Population.quantile": {"tf": 1}, "icepool.Again": {"tf": 1}, "icepool.MultisetExpression.difference": {"tf": 1}, "icepool.MultisetExpression.intersection": {"tf": 1}}, "df": 6}}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"icepool.map": {"tf": 1}, "icepool.multiset_function": {"tf": 1}, "icepool.function.map": {"tf": 1}}, "df": 3}}}}, "t": {"docs": {"icepool.coin": {"tf": 1.7320508075688772}, "icepool.Die.__init__": {"tf": 1.4142135623730951}, "icepool.Die.set_range": {"tf": 1}, "icepool.Die.pool": {"tf": 1}, "icepool.Die.keep": {"tf": 1.7320508075688772}, "icepool.Die.zero_outcome": {"tf": 1}, "icepool.Population": {"tf": 1}, "icepool.Symbols": {"tf": 1.4142135623730951}, "icepool.Again": {"tf": 1}, "icepool.from_cumulative": {"tf": 1}, "icepool.from_rv": {"tf": 1.4142135623730951}, "icepool.align_range": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.largest_straight": {"tf": 1}, "icepool.MultisetExpression.largest_straight_and_outcome": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.MultisetEvaluator.alignment": {"tf": 1}, "icepool.MultisetEvaluator.range_alignment": {"tf": 1.7320508075688772}, "icepool.Deck.__init__": {"tf": 1}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"tf": 1.7320508075688772}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"tf": 1.7320508075688772}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"tf": 1.7320508075688772}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"tf": 1.7320508075688772}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}, "icepool.function.coin": {"tf": 1.7320508075688772}, "icepool.function.from_cumulative": {"tf": 1}, "icepool.function.from_rv": {"tf": 1.4142135623730951}, "icepool.function.align_range": {"tf": 1}, "icepool.typing.count_positional_parameters": {"tf": 1}}, "df": 33, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool": {"tf": 1}}, "df": 1}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.unary_operator": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.equals": {"tf": 1}, "icepool.map_and_time": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}}, "df": 3}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.MultisetExpression.count": {"tf": 1}, "icepool.evaluator.CountEvaluator": {"tf": 1}}, "df": 2}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"icepool.MultisetExpression.intersection": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Symbols": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1}, "icepool.MultisetExpression.keep_outcomes": {"tf": 1}, "icepool.MultisetExpression.maximum_match": {"tf": 1}, "icepool.multiset_function": {"tf": 1.7320508075688772}}, "df": 5}}}}}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"icepool.MultisetEvaluator": {"tf": 1}}, "df": 1}}}}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.d": {"tf": 1}, "icepool.coin": {"tf": 1}, "icepool.stochastic_round": {"tf": 1}, "icepool.Die.binary_operator": {"tf": 1}, "icepool.Die.truncate": {"tf": 1}, "icepool.Die.stochastic_round": {"tf": 1}, "icepool.Population.scale_quantities": {"tf": 1}, "icepool.Symbols.multiply_counts": {"tf": 1}, "icepool.Symbols.divide_counts": {"tf": 1}, "icepool.function.d": {"tf": 1}, "icepool.function.coin": {"tf": 1}, "icepool.function.stochastic_round": {"tf": 1}}, "df": 12}}}, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"icepool.MultiDeal.__init__": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die": {"tf": 1}}, "df": 1}}}}}}, "o": {"docs": {"icepool.Die.__init__": {"tf": 1.4142135623730951}, "icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.split": {"tf": 1.4142135623730951}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.explode_to_pool": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1.7320508075688772}, "icepool.map": {"tf": 1}, "icepool.map_function": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.standard_pool": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1.4142135623730951}, "icepool.Deck.map": {"tf": 1}, "icepool.multiset_function": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.function.map_function": {"tf": 1}}, "df": 16}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"icepool.d": {"tf": 1}, "icepool.z": {"tf": 1}, "icepool.Die.set_range": {"tf": 1}, "icepool.from_cumulative": {"tf": 1}, "icepool.MultisetEvaluator.range_alignment": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"tf": 1}, "icepool.function.d": {"tf": 1}, "icepool.function.z": {"tf": 1}, "icepool.function.from_cumulative": {"tf": 1}}, "df": 12}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.cmp": {"tf": 1}, "icepool.Population": {"tf": 1}, "icepool.Symbols": {"tf": 1}, "icepool.MultisetGenerator": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1}, "icepool.MultisetEvaluator.validate_arity": {"tf": 1}, "icepool.evaluator.JointEvaluator.validate_arity": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.validate_arity": {"tf": 1}}, "df": 8, "d": {"docs": {"icepool.Die.truncate": {"tf": 1}, "icepool.Die.clip": {"tf": 1}, "icepool.Vector.binary_operator": {"tf": 1}}, "df": 3}, "s": {"docs": {"icepool.Die.reroll_to_pool": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Population.denominator": {"tf": 1}, "icepool.Again": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.Deck.size": {"tf": 1}, "icepool.function.map": {"tf": 1}}, "df": 5}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.MultisetGenerator": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 1}}, "df": 2}}}}}}}}}}, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool.MultisetGenerator.order": {"tf": 1}, "icepool.MultisetExpression.order": {"tf": 1}}, "df": 2}}}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"icepool.MultisetEvaluator": {"tf": 1}}, "df": 1}}}}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.d": {"tf": 1}, "icepool.Die.__init__": {"tf": 1}, "icepool.Die.explode_to_pool": {"tf": 1.4142135623730951}, "icepool.Population.format": {"tf": 1}, "icepool.lowest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.middle": {"tf": 1}, "icepool.Reroll": {"tf": 1}, "icepool.function.d": {"tf": 1}}, "df": 9}}}}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Again": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1.7320508075688772}}, "df": 5}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Reroll": {"tf": 1}, "icepool.RerollType.Reroll": {"tf": 1}, "icepool.typing.RerollType.Reroll": {"tf": 1}, "icepool.typing.ImplicitConversionError": {"tf": 1}}, "df": 4}}}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {"icepool.Die.keep": {"tf": 2.6457513110645907}, "icepool.Population.to_one_hot": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1}, "icepool.evaluator.KeepEvaluator": {"tf": 1.4142135623730951}, "icepool.evaluator.KeepEvaluator.__init__": {"tf": 1.4142135623730951}, "icepool.evaluator.KeepEvaluator.order": {"tf": 1}}, "df": 6, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die.middle": {"tf": 1}, "icepool.middle": {"tf": 1}, "icepool.evaluator.KeepEvaluator": {"tf": 1}}, "df": 3}}}}, "s": {"docs": {"icepool.MultisetExpression.argsort": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.MultisetEvaluator": {"tf": 1}}, "df": 1}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.MultisetEvaluator.order": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.order": {"tf": 1}, "icepool.evaluator.CompairEvalautor.order": {"tf": 1}}, "df": 3}}}}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Die.explode": {"tf": 1}, "icepool.Die.explode_to_pool": {"tf": 1}, "icepool.Again": {"tf": 1}, "icepool.reduce": {"tf": 1}, "icepool.accumulate": {"tf": 1.4142135623730951}, "icepool.function.reduce": {"tf": 1}, "icepool.function.accumulate": {"tf": 1.4142135623730951}}, "df": 7, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die.reroll_to_pool": {"tf": 1}}, "df": 1}}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.map_to_pool": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.MultisetGenerator": {"tf": 1}}, "df": 1}}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.multiset_function": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}}, "df": 4}}}}}}}}, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"icepool.tupleize": {"tf": 1}, "icepool.vectorize": {"tf": 1}, "icepool.MultisetEvaluator.validate_arity": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.evaluate": {"tf": 1}, "icepool.evaluator.JointEvaluator": {"tf": 1}, "icepool.evaluator.JointEvaluator.validate_arity": {"tf": 1.4142135623730951}, "icepool.evaluator.ExpressionEvaluator": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.validate_arity": {"tf": 1.4142135623730951}}, "df": 8, "s": {"docs": {"icepool.MultisetExpression.symmetric_difference": {"tf": 1}}, "df": 1}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"icepool.map": {"tf": 1}, "icepool.function.map": {"tf": 1}}, "df": 2}}}}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.evaluator.ExpressionEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.order": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.alignment": {"tf": 1}}, "df": 3}}}}, "m": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool": {"tf": 1}, "icepool.Die": {"tf": 1}, "icepool.Population.sample": {"tf": 1}, "icepool.Vector": {"tf": 1}, "icepool.Symbols": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 1}}, "df": 6}}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die.pool": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.MultisetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1}}, "df": 11}}}}}}}}}, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"icepool.d": {"tf": 1.4142135623730951}, "icepool.Die.__init__": {"tf": 1.4142135623730951}, "icepool.function.d": {"tf": 1.4142135623730951}}, "df": 3}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.MultisetEvaluator.validate_arity": {"tf": 1}, "icepool.evaluator.JointEvaluator.validate_arity": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.validate_arity": {"tf": 1}, "icepool.typing.ImplicitConversionError": {"tf": 1}}, "df": 5, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Symbols": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.MultisetEvaluator": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.MultisetEvaluator.alignment": {"tf": 1}, "icepool.MultisetEvaluator.range_alignment": {"tf": 1}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 1}, "icepool.evaluator.ExpandEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ExpandEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.SumEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CountEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CountEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.AnyEvaluator.next_state": {"tf": 1}, "icepool.evaluator.AnyEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.HighestOutcomeAndCountEvaluator.next_state": {"tf": 1}, "icepool.evaluator.LargestCountEvaluator.next_state": {"tf": 1}, "icepool.evaluator.LargestCountAndOutcomeEvaluator.next_state": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.next_state": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.next_state": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.next_state": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.next_state": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.next_state": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.KeepEvaluator.next_state": {"tf": 1}, "icepool.evaluator.KeepEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.next_state": {"tf": 1}}, "df": 32}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.multiset_function": {"tf": 1}}, "df": 1}}}}}}}}}}}, "t": {"docs": {"icepool": {"tf": 1}, "icepool.Outcome": {"tf": 1}, "icepool.Die": {"tf": 2}, "icepool.Die.__init__": {"tf": 1}, "icepool.Die.binary_operator": {"tf": 1}, "icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.split": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 2}, "icepool.Die.explode_to_pool": {"tf": 1.4142135623730951}, "icepool.Die.reroll_to_pool": {"tf": 1.4142135623730951}, "icepool.Die.equals": {"tf": 1}, "icepool.Population.quantity": {"tf": 1}, "icepool.Symbols": {"tf": 1.4142135623730951}, "icepool.Again": {"tf": 1}, "icepool.reduce": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.map_and_time": {"tf": 1.7320508075688772}, "icepool.map_to_pool": {"tf": 1.7320508075688772}, "icepool.Pool.__init__": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 2}, "icepool.MultisetExpression.evaluate": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1}, "icepool.MultiDeal.__init__": {"tf": 1}, "icepool.function.reduce": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1.7320508075688772}, "icepool.function.map_to_pool": {"tf": 1.7320508075688772}, "icepool.typing.Outcome": {"tf": 1}, "icepool.typing.guess_star": {"tf": 1}}, "df": 32, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.map": {"tf": 1}, "icepool.function.map": {"tf": 1}}, "df": 2}}}}, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Symbols.__init__": {"tf": 1}, "icepool.from_rv": {"tf": 1}, "icepool.lowest": {"tf": 1.7320508075688772}, "icepool.highest": {"tf": 1.7320508075688772}, "icepool.middle": {"tf": 1.7320508075688772}, "icepool.function.from_rv": {"tf": 1}}, "df": 6}}}}, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"icepool.accumulate": {"tf": 1}, "icepool.function.accumulate": {"tf": 1}}, "df": 2}}}}}}, "m": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die.split": {"tf": 1}}, "df": 1, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {"icepool.CountsItemsView": {"tf": 1}}, "df": 1}}}}}}}, "s": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Vector.binary_operator": {"tf": 1}, "icepool.Reroll": {"tf": 1}, "icepool.evaluator.ConstantEvaluator": {"tf": 1}}, "df": 4, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "f": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.map_and_time": {"tf": 1}, "icepool.MultisetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}}, "df": 9}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"icepool.d": {"tf": 2.23606797749979}, "icepool.Die": {"tf": 1}, "icepool.Die.__init__": {"tf": 2.23606797749979}, "icepool.Die.map": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 1.4142135623730951}, "icepool.Again": {"tf": 1.4142135623730951}, "icepool.map": {"tf": 1}, "icepool.map_function": {"tf": 1}, "icepool.map_and_time": {"tf": 1}, "icepool.map_to_pool": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.MultisetEvaluator.final_outcome": {"tf": 1}, "icepool.MultisetEvaluator.alignment": {"tf": 1}, "icepool.MultisetEvaluator.range_alignment": {"tf": 1}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1}, "icepool.function.d": {"tf": 2.23606797749979}, "icepool.function.map": {"tf": 1}, "icepool.function.map_function": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1}}, "df": 33}}}}}}, "f": {"docs": {"icepool.coin": {"tf": 1.4142135623730951}, "icepool.stochastic_round": {"tf": 1}, "icepool.one_hot": {"tf": 1}, "icepool.Die": {"tf": 1}, "icepool.Die.__init__": {"tf": 1.4142135623730951}, "icepool.Die.unary_operator": {"tf": 1}, "icepool.Die.binary_operator": {"tf": 1.4142135623730951}, "icepool.Die.reroll": {"tf": 2.23606797749979}, "icepool.Die.filter": {"tf": 2}, "icepool.Die.split": {"tf": 1.4142135623730951}, "icepool.Die.truncate": {"tf": 1.7320508075688772}, "icepool.Die.clip": {"tf": 1.7320508075688772}, "icepool.Die.set_range": {"tf": 2}, "icepool.Die.set_outcomes": {"tf": 1.4142135623730951}, "icepool.Die.mean_time_to_sum": {"tf": 1.4142135623730951}, "icepool.Die.explode": {"tf": 2}, "icepool.Die.keep": {"tf": 2.6457513110645907}, "icepool.Die.lowest": {"tf": 2.23606797749979}, "icepool.Die.highest": {"tf": 2.23606797749979}, "icepool.Die.middle": {"tf": 1.7320508075688772}, "icepool.Die.map_to_pool": {"tf": 2.23606797749979}, "icepool.Die.explode_to_pool": {"tf": 1.7320508075688772}, "icepool.Die.reroll_to_pool": {"tf": 2}, "icepool.Die.stochastic_round": {"tf": 1}, "icepool.Die.zero": {"tf": 1}, "icepool.Die.cmp": {"tf": 1}, "icepool.Die.sign": {"tf": 1.4142135623730951}, "icepool.Die.equals": {"tf": 2}, "icepool.Population.common_outcome_length": {"tf": 1}, "icepool.Population.nearest": {"tf": 1}, "icepool.Population.quantities": {"tf": 1}, "icepool.Population.probabilities": {"tf": 1}, "icepool.Population.median": {"tf": 1}, "icepool.Population.quantile": {"tf": 1}, "icepool.Population.to_one_hot": {"tf": 1.7320508075688772}, "icepool.Population.format": {"tf": 1.4142135623730951}, "icepool.tupleize": {"tf": 1.4142135623730951}, "icepool.vectorize": {"tf": 1.4142135623730951}, "icepool.Vector.binary_operator": {"tf": 1}, "icepool.Symbols": {"tf": 1}, "icepool.Symbols.__init__": {"tf": 1}, "icepool.Symbols.isdisjoint": {"tf": 1}, "icepool.Again": {"tf": 2.23606797749979}, "icepool.from_rv": {"tf": 1}, "icepool.lowest": {"tf": 2.6457513110645907}, "icepool.highest": {"tf": 2.6457513110645907}, "icepool.middle": {"tf": 2}, "icepool.reduce": {"tf": 1}, "icepool.accumulate": {"tf": 1.4142135623730951}, "icepool.map": {"tf": 2.449489742783178}, "icepool.map_function": {"tf": 1.4142135623730951}, "icepool.map_and_time": {"tf": 1.7320508075688772}, "icepool.map_to_pool": {"tf": 2}, "icepool.Pool.__init__": {"tf": 1.4142135623730951}, "icepool.standard_pool": {"tf": 1}, "icepool.MultisetExpression": {"tf": 2.23606797749979}, "icepool.MultisetExpression.difference": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.intersection": {"tf": 1}, "icepool.MultisetExpression.symmetric_difference": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.lowest": {"tf": 2.23606797749979}, "icepool.MultisetExpression.highest": {"tf": 2.23606797749979}, "icepool.MultisetExpression.sort_match": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.maximum_match": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.evaluate": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.highest_outcome_and_count": {"tf": 1}, "icepool.MultisetExpression.all_counts": {"tf": 1}, "icepool.MultisetExpression.count_subset": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.issubset": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.issuperset": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.isdisjoint": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.next_state": {"tf": 2.449489742783178}, "icepool.MultisetEvaluator.final_outcome": {"tf": 1}, "icepool.MultisetEvaluator.order": {"tf": 1.7320508075688772}, "icepool.MultisetEvaluator.alignment": {"tf": 1.7320508075688772}, "icepool.MultisetEvaluator.range_alignment": {"tf": 1}, "icepool.MultisetEvaluator.validate_arity": {"tf": 1}, "icepool.MultisetEvaluator.evaluate": {"tf": 1}, "icepool.Order.merge": {"tf": 2}, "icepool.Deck.__init__": {"tf": 1}, "icepool.Deck.map": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1}, "icepool.MultiDeal.__init__": {"tf": 1.4142135623730951}, "icepool.multiset_function": {"tf": 1}, "icepool.evaluator.JointEvaluator.next_state": {"tf": 1}, "icepool.evaluator.JointEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.JointEvaluator.order": {"tf": 1}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 1.7320508075688772}, "icepool.evaluator.JointEvaluator.validate_arity": {"tf": 1}, "icepool.evaluator.SumEvaluator.__init__": {"tf": 1}, "icepool.evaluator.HighestOutcomeAndCountEvaluator": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.__init__": {"tf": 1.4142135623730951}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 2.449489742783178}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.__init__": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsSubsetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsProperSubsetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsSupersetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsProperSupersetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsEqualSetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsNotEqualSetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsDisjointSetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 2.449489742783178}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.KeepEvaluator.__init__": {"tf": 1.7320508075688772}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.order": {"tf": 1.7320508075688772}, "icepool.evaluator.CompairEvalautor.__init__": {"tf": 1.4142135623730951}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 2.449489742783178}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 1}, "icepool.evaluator.CompairEvalautor.order": {"tf": 1.7320508075688772}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.validate_arity": {"tf": 1}, "icepool.function.coin": {"tf": 1.4142135623730951}, "icepool.function.stochastic_round": {"tf": 1}, "icepool.function.one_hot": {"tf": 1}, "icepool.function.from_rv": {"tf": 1}, "icepool.function.reduce": {"tf": 1}, "icepool.function.accumulate": {"tf": 1.4142135623730951}, "icepool.function.map": {"tf": 2.449489742783178}, "icepool.function.map_function": {"tf": 1.4142135623730951}, "icepool.function.map_and_time": {"tf": 1.7320508075688772}, "icepool.function.map_to_pool": {"tf": 2}, "icepool.typing.Order.merge": {"tf": 2}, "icepool.typing.count_positional_parameters": {"tf": 1}}, "df": 130, "f": {"docs": {"icepool.Die.is_in": {"tf": 1}, "icepool.Die.equals": {"tf": 1}, "icepool.Population.is_empty": {"tf": 1}, "icepool.Population.has_zero_quantities": {"tf": 1}, "icepool.from_cumulative": {"tf": 1}, "icepool.MultisetExpression.keep_outcomes": {"tf": 1}, "icepool.MultisetExpression.drop_outcomes": {"tf": 1}, "icepool.evaluator.AnyEvaluator": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsSubsetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsProperSubsetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsSupersetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsProperSupersetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsEqualSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsNotEqualSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsDisjointSetEvaluator.any_all": {"tf": 1}, "icepool.function.from_cumulative": {"tf": 1}}, "df": 17}}, "s": {"docs": {"icepool.coin": {"tf": 1}, "icepool.one_hot": {"tf": 1}, "icepool.Die": {"tf": 1}, "icepool.Die.__init__": {"tf": 1.7320508075688772}, "icepool.Die.unary_operator": {"tf": 1.7320508075688772}, "icepool.Die.binary_operator": {"tf": 2.23606797749979}, "icepool.Die.split": {"tf": 1}, "icepool.Die.truncate": {"tf": 1}, "icepool.Die.clip": {"tf": 1.7320508075688772}, "icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Die.mean_time_to_sum": {"tf": 1}, "icepool.Die.explode": {"tf": 1.4142135623730951}, "icepool.Die.is_in": {"tf": 1}, "icepool.Die.keep": {"tf": 2.8284271247461903}, "icepool.Die.lowest": {"tf": 1.4142135623730951}, "icepool.Die.highest": {"tf": 1.4142135623730951}, "icepool.Die.middle": {"tf": 2.23606797749979}, "icepool.Die.map_to_pool": {"tf": 1.7320508075688772}, "icepool.Die.explode_to_pool": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1.4142135623730951}, "icepool.Die.zero": {"tf": 1}, "icepool.Die.equals": {"tf": 2}, "icepool.Population.common_outcome_length": {"tf": 1}, "icepool.Population.nearest": {"tf": 1.4142135623730951}, "icepool.Population.quantity": {"tf": 1}, "icepool.Population.variance": {"tf": 1}, "icepool.Population.entropy": {"tf": 1}, "icepool.Population.to_one_hot": {"tf": 1.7320508075688772}, "icepool.Population.sample": {"tf": 1.4142135623730951}, "icepool.Population.format": {"tf": 1}, "icepool.tupleize": {"tf": 1.7320508075688772}, "icepool.vectorize": {"tf": 1.7320508075688772}, "icepool.Vector.unary_operator": {"tf": 1}, "icepool.Vector.binary_operator": {"tf": 2.449489742783178}, "icepool.Symbols": {"tf": 1.7320508075688772}, "icepool.Symbols.__init__": {"tf": 1}, "icepool.Symbols.count_subset": {"tf": 1}, "icepool.Symbols.issubset": {"tf": 1}, "icepool.Symbols.issuperset": {"tf": 1}, "icepool.Again": {"tf": 2.8284271247461903}, "icepool.from_cumulative": {"tf": 1}, "icepool.from_rv": {"tf": 1}, "icepool.lowest": {"tf": 2}, "icepool.highest": {"tf": 2}, "icepool.middle": {"tf": 2.449489742783178}, "icepool.reduce": {"tf": 1}, "icepool.accumulate": {"tf": 1.4142135623730951}, "icepool.map": {"tf": 2}, "icepool.map_function": {"tf": 1}, "icepool.map_and_time": {"tf": 1.7320508075688772}, "icepool.map_to_pool": {"tf": 1}, "icepool.Reroll": {"tf": 1.4142135623730951}, "icepool.Pool": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1.7320508075688772}, "icepool.Pool.raw_size": {"tf": 1}, "icepool.MultisetGenerator.equals": {"tf": 1}, "icepool.MultisetGenerator.order": {"tf": 1}, "icepool.MultisetGenerator.sample": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.order": {"tf": 1}, "icepool.MultisetExpression.keep_outcomes": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.drop_outcomes": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.keep": {"tf": 2.23606797749979}, "icepool.MultisetExpression.lowest": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.highest": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.sort_match": {"tf": 1}, "icepool.MultisetExpression.maximum_match": {"tf": 2.8284271247461903}, "icepool.MultisetExpression.evaluate": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.expand": {"tf": 1}, "icepool.MultisetExpression.count": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.count_subset": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.all_straights_reduce_counts": {"tf": 1}, "icepool.MultisetExpression.argsort": {"tf": 1}, "icepool.MultisetExpression.issubset": {"tf": 2.23606797749979}, "icepool.MultisetExpression.issuperset": {"tf": 2.449489742783178}, "icepool.MultisetExpression.isdisjoint": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.compair_lt": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.compair_le": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.compair_gt": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.compair_ge": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.compair_eq": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.compair_ne": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator": {"tf": 2}, "icepool.MultisetEvaluator.next_state": {"tf": 2.23606797749979}, "icepool.MultisetEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.order": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.alignment": {"tf": 1}, "icepool.MultisetEvaluator.range_alignment": {"tf": 1}, "icepool.MultisetEvaluator.validate_arity": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.evaluate": {"tf": 1}, "icepool.Order.merge": {"tf": 1.4142135623730951}, "icepool.Deck.__init__": {"tf": 1}, "icepool.Deck.map": {"tf": 1.4142135623730951}, "icepool.Deal.__init__": {"tf": 1}, "icepool.MultiDeal.__init__": {"tf": 1}, "icepool.multiset_function": {"tf": 1.7320508075688772}, "icepool.evaluator.JointEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.JointEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 1}, "icepool.evaluator.JointEvaluator.validate_arity": {"tf": 1.4142135623730951}, "icepool.evaluator.ExpandEvaluator": {"tf": 1}, "icepool.evaluator.AnyEvaluator": {"tf": 1}, "icepool.evaluator.HighestOutcomeAndCountEvaluator": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.__init__": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 2.23606797749979}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.__init__": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsSubsetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsProperSubsetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsSupersetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsProperSupersetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsEqualSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsNotEqualSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsDisjointSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 2.23606797749979}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.evaluator.KeepEvaluator.__init__": {"tf": 1}, "icepool.evaluator.KeepEvaluator.order": {"tf": 1.4142135623730951}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.evaluator.ArgsortEvaluator.order": {"tf": 1.4142135623730951}, "icepool.evaluator.CompairEvalautor.__init__": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 2.23606797749979}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 1.4142135623730951}, "icepool.evaluator.CompairEvalautor.order": {"tf": 1.4142135623730951}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.evaluator.ExpressionEvaluator.validate_arity": {"tf": 1.4142135623730951}, "icepool.function.coin": {"tf": 1}, "icepool.function.one_hot": {"tf": 1}, "icepool.function.from_cumulative": {"tf": 1}, "icepool.function.from_rv": {"tf": 1}, "icepool.function.reduce": {"tf": 1}, "icepool.function.accumulate": {"tf": 1.4142135623730951}, "icepool.function.map": {"tf": 2}, "icepool.function.map_function": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1.7320508075688772}, "icepool.function.map_to_pool": {"tf": 1}, "icepool.typing.Order.merge": {"tf": 1.4142135623730951}, "icepool.typing.count_positional_parameters": {"tf": 1.7320508075688772}}, "df": 146, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Symbols": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1}, "icepool.MultisetExpression.issubset": {"tf": 1}}, "df": 3}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Symbols": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1}, "icepool.MultisetExpression.issuperset": {"tf": 1}}, "df": 3}}}}}}, "e": {"docs": {"icepool.Deal.__init__": {"tf": 1}, "icepool.MultiDeal.__init__": {"tf": 1}}, "df": 2}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "j": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.MultisetExpression": {"tf": 1}}, "df": 1}}}}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Symbols": {"tf": 1}}, "df": 1}}}}}}}}}}, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool.evaluator.ConstantEvaluator": {"tf": 1}}, "df": 1}}}}}}}, "t": {"docs": {"icepool.d": {"tf": 1}, "icepool.Die.__init__": {"tf": 1.4142135623730951}, "icepool.MultisetExpression": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.symmetric_difference": {"tf": 1}, "icepool.multiset_function": {"tf": 1}, "icepool.function.d": {"tf": 1}}, "df": 6, "h": {"docs": {}, "df": 0, "e": {"docs": {"icepool": {"tf": 2}, "icepool.d": {"tf": 1.4142135623730951}, "icepool.coin": {"tf": 1.4142135623730951}, "icepool.stochastic_round": {"tf": 1.7320508075688772}, "icepool.one_hot": {"tf": 1.7320508075688772}, "icepool.Die": {"tf": 2}, "icepool.Die.__init__": {"tf": 5.0990195135927845}, "icepool.Die.unary_operator": {"tf": 2.8284271247461903}, "icepool.Die.binary_operator": {"tf": 4.58257569495584}, "icepool.Die.keys": {"tf": 1.4142135623730951}, "icepool.Die.values": {"tf": 1.4142135623730951}, "icepool.Die.items": {"tf": 1.4142135623730951}, "icepool.Die.reroll": {"tf": 2.6457513110645907}, "icepool.Die.filter": {"tf": 2.6457513110645907}, "icepool.Die.split": {"tf": 1.7320508075688772}, "icepool.Die.truncate": {"tf": 2.6457513110645907}, "icepool.Die.clip": {"tf": 3}, "icepool.Die.set_range": {"tf": 3}, "icepool.Die.set_outcomes": {"tf": 1.7320508075688772}, "icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Die.mean_time_to_sum": {"tf": 2}, "icepool.Die.explode": {"tf": 2.23606797749979}, "icepool.Die.if_else": {"tf": 1.7320508075688772}, "icepool.Die.is_in": {"tf": 1.7320508075688772}, "icepool.Die.count": {"tf": 1}, "icepool.Die.pool": {"tf": 3}, "icepool.Die.keep": {"tf": 3.605551275463989}, "icepool.Die.lowest": {"tf": 3.605551275463989}, "icepool.Die.highest": {"tf": 3.4641016151377544}, "icepool.Die.middle": {"tf": 3}, "icepool.Die.map_to_pool": {"tf": 4}, "icepool.Die.explode_to_pool": {"tf": 2.449489742783178}, "icepool.Die.reroll_to_pool": {"tf": 3.1622776601683795}, "icepool.Die.stochastic_round": {"tf": 1.7320508075688772}, "icepool.Die.zero": {"tf": 1.7320508075688772}, "icepool.Die.cmp": {"tf": 1.7320508075688772}, "icepool.Die.equals": {"tf": 2.8284271247461903}, "icepool.Population.keys": {"tf": 1.4142135623730951}, "icepool.Population.values": {"tf": 1.4142135623730951}, "icepool.Population.items": {"tf": 1.4142135623730951}, "icepool.Population.outcomes": {"tf": 2.23606797749979}, "icepool.Population.common_outcome_length": {"tf": 1.4142135623730951}, "icepool.Population.min_outcome": {"tf": 1}, "icepool.Population.max_outcome": {"tf": 1}, "icepool.Population.nearest": {"tf": 3}, "icepool.Population.quantity": {"tf": 2.23606797749979}, "icepool.Population.quantities": {"tf": 1.7320508075688772}, "icepool.Population.denominator": {"tf": 1.4142135623730951}, "icepool.Population.probability": {"tf": 1}, "icepool.Population.probabilities": {"tf": 1.7320508075688772}, "icepool.Population.mode": {"tf": 1.4142135623730951}, "icepool.Population.modal_quantity": {"tf": 1}, "icepool.Population.kolmogorov_smirnov": {"tf": 1}, "icepool.Population.cramer_von_mises": {"tf": 1}, "icepool.Population.median": {"tf": 1.7320508075688772}, "icepool.Population.median_low": {"tf": 1.4142135623730951}, "icepool.Population.median_high": {"tf": 1.4142135623730951}, "icepool.Population.quantile": {"tf": 2.23606797749979}, "icepool.Population.quantile_low": {"tf": 2}, "icepool.Population.quantile_high": {"tf": 2}, "icepool.Population.variance": {"tf": 1.4142135623730951}, "icepool.Population.entropy": {"tf": 1.7320508075688772}, "icepool.Population.marginals": {"tf": 1.7320508075688772}, "icepool.Population.to_one_hot": {"tf": 2}, "icepool.Population.sample": {"tf": 1}, "icepool.Population.format": {"tf": 2.6457513110645907}, "icepool.tupleize": {"tf": 3}, "icepool.vectorize": {"tf": 3}, "icepool.Vector": {"tf": 1}, "icepool.Vector.unary_operator": {"tf": 1}, "icepool.Vector.binary_operator": {"tf": 2.6457513110645907}, "icepool.Symbols": {"tf": 3.7416573867739413}, "icepool.Symbols.__init__": {"tf": 1.4142135623730951}, "icepool.Symbols.additive_union": {"tf": 1}, "icepool.Symbols.difference": {"tf": 1.4142135623730951}, "icepool.Symbols.intersection": {"tf": 1}, "icepool.Symbols.union": {"tf": 1}, "icepool.Symbols.symmetric_difference": {"tf": 1.4142135623730951}, "icepool.Symbols.count_subset": {"tf": 1.4142135623730951}, "icepool.Symbols.issubset": {"tf": 1.4142135623730951}, "icepool.Symbols.issuperset": {"tf": 1.4142135623730951}, "icepool.Symbols.isdisjoint": {"tf": 1}, "icepool.Symbols.count": {"tf": 1}, "icepool.Again": {"tf": 4.242640687119285}, "icepool.from_cumulative": {"tf": 2.6457513110645907}, "icepool.from_rv": {"tf": 2.23606797749979}, "icepool.lowest": {"tf": 3.4641016151377544}, "icepool.highest": {"tf": 3.4641016151377544}, "icepool.middle": {"tf": 3.4641016151377544}, "icepool.min_outcome": {"tf": 1.4142135623730951}, "icepool.max_outcome": {"tf": 1.4142135623730951}, "icepool.align": {"tf": 1}, "icepool.align_range": {"tf": 1}, "icepool.commonize_denominator": {"tf": 2}, "icepool.reduce": {"tf": 3.1622776601683795}, "icepool.accumulate": {"tf": 3.1622776601683795}, "icepool.map": {"tf": 4.898979485566356}, "icepool.map_function": {"tf": 1.7320508075688772}, "icepool.map_and_time": {"tf": 4.242640687119285}, "icepool.map_to_pool": {"tf": 3.7416573867739413}, "icepool.Reroll": {"tf": 2.449489742783178}, "icepool.RerollType": {"tf": 1.4142135623730951}, "icepool.Pool": {"tf": 2.6457513110645907}, "icepool.Pool.__init__": {"tf": 3.1622776601683795}, "icepool.Pool.clear_cache": {"tf": 1}, "icepool.Pool.raw_size": {"tf": 1.4142135623730951}, "icepool.Pool.denominator": {"tf": 1}, "icepool.Pool.unique_dice": {"tf": 1}, "icepool.Pool.outcomes": {"tf": 1}, "icepool.Pool.output_arity": {"tf": 1}, "icepool.Pool.min_outcome": {"tf": 1}, "icepool.Pool.max_outcome": {"tf": 1}, "icepool.Pool.additive_union": {"tf": 1.4142135623730951}, "icepool.standard_pool": {"tf": 1.7320508075688772}, "icepool.MultisetGenerator": {"tf": 1.7320508075688772}, "icepool.MultisetGenerator.outcomes": {"tf": 1}, "icepool.MultisetGenerator.output_arity": {"tf": 1}, "icepool.MultisetGenerator.denominator": {"tf": 1}, "icepool.MultisetGenerator.order": {"tf": 1}, "icepool.MultisetGenerator.sample": {"tf": 1}, "icepool.Alignment.outcomes": {"tf": 1}, "icepool.Alignment.output_arity": {"tf": 1}, "icepool.Alignment.denominator": {"tf": 1}, "icepool.MultisetExpression": {"tf": 4.795831523312719}, "icepool.MultisetExpression.order": {"tf": 1}, "icepool.MultisetExpression.additive_union": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.difference": {"tf": 2.23606797749979}, "icepool.MultisetExpression.intersection": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.union": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.symmetric_difference": {"tf": 2}, "icepool.MultisetExpression.keep_outcomes": {"tf": 2.23606797749979}, "icepool.MultisetExpression.drop_outcomes": {"tf": 2.23606797749979}, "icepool.MultisetExpression.map_counts": {"tf": 1}, "icepool.MultisetExpression.keep_counts": {"tf": 2}, "icepool.MultisetExpression.keep": {"tf": 3.4641016151377544}, "icepool.MultisetExpression.lowest": {"tf": 3.1622776601683795}, "icepool.MultisetExpression.highest": {"tf": 3.1622776601683795}, "icepool.MultisetExpression.sort_match": {"tf": 4}, "icepool.MultisetExpression.maximum_match": {"tf": 4.358898943540674}, "icepool.MultisetExpression.evaluate": {"tf": 2}, "icepool.MultisetExpression.expand": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.sum": {"tf": 1}, "icepool.MultisetExpression.count": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.any": {"tf": 1}, "icepool.MultisetExpression.highest_outcome_and_count": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.all_counts": {"tf": 2}, "icepool.MultisetExpression.largest_count": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.largest_count_and_outcome": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.count_subset": {"tf": 2.449489742783178}, "icepool.MultisetExpression.largest_straight": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.largest_straight_and_outcome": {"tf": 2}, "icepool.MultisetExpression.all_straights": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.all_straights_reduce_counts": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.argsort": {"tf": 2.23606797749979}, "icepool.MultisetExpression.issubset": {"tf": 2.6457513110645907}, "icepool.MultisetExpression.issuperset": {"tf": 3}, "icepool.MultisetExpression.isdisjoint": {"tf": 1}, "icepool.MultisetExpression.compair_lt": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.compair_le": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.compair_gt": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.compair_ge": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.compair_eq": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.compair_ne": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator": {"tf": 1.7320508075688772}, "icepool.MultisetEvaluator.next_state": {"tf": 4.242640687119285}, "icepool.MultisetEvaluator.final_outcome": {"tf": 1.7320508075688772}, "icepool.MultisetEvaluator.order": {"tf": 2.449489742783178}, "icepool.MultisetEvaluator.alignment": {"tf": 2}, "icepool.MultisetEvaluator.range_alignment": {"tf": 2}, "icepool.MultisetEvaluator.validate_arity": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.evaluate": {"tf": 3}, "icepool.MultisetEvaluator.sample": {"tf": 1.4142135623730951}, "icepool.Order.merge": {"tf": 2}, "icepool.Deck.__init__": {"tf": 3.1622776601683795}, "icepool.Deck.keys": {"tf": 1.4142135623730951}, "icepool.Deck.values": {"tf": 1.4142135623730951}, "icepool.Deck.items": {"tf": 1.4142135623730951}, "icepool.Deck.size": {"tf": 1.4142135623730951}, "icepool.Deck.difference": {"tf": 1}, "icepool.Deck.intersection": {"tf": 1}, "icepool.Deck.union": {"tf": 1}, "icepool.Deck.symmetric_difference": {"tf": 1}, "icepool.Deck.multiply_counts": {"tf": 1}, "icepool.Deck.map": {"tf": 2}, "icepool.Deal.__init__": {"tf": 1.7320508075688772}, "icepool.Deal.deck": {"tf": 1.4142135623730951}, "icepool.Deal.hand_sizes": {"tf": 1}, "icepool.Deal.total_cards_dealt": {"tf": 1}, "icepool.Deal.outcomes": {"tf": 2.23606797749979}, "icepool.Deal.output_arity": {"tf": 1}, "icepool.Deal.denominator": {"tf": 1}, "icepool.MultiDeal.__init__": {"tf": 2}, "icepool.MultiDeal.deck": {"tf": 1.4142135623730951}, "icepool.MultiDeal.hand_sizes": {"tf": 1}, "icepool.MultiDeal.total_cards_dealt": {"tf": 1}, "icepool.MultiDeal.outcomes": {"tf": 2.23606797749979}, "icepool.MultiDeal.output_arity": {"tf": 1}, "icepool.MultiDeal.denominator": {"tf": 1}, "icepool.multiset_function": {"tf": 2.6457513110645907}, "icepool.evaluator.JointEvaluator": {"tf": 1}, "icepool.evaluator.JointEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.evaluator.JointEvaluator.final_outcome": {"tf": 1.7320508075688772}, "icepool.evaluator.JointEvaluator.order": {"tf": 1.4142135623730951}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 2}, "icepool.evaluator.JointEvaluator.validate_arity": {"tf": 1.4142135623730951}, "icepool.evaluator.ExpandEvaluator": {"tf": 1}, "icepool.evaluator.CountEvaluator": {"tf": 1.4142135623730951}, "icepool.evaluator.HighestOutcomeAndCountEvaluator": {"tf": 1.7320508075688772}, "icepool.evaluator.LargestCountEvaluator": {"tf": 1}, "icepool.evaluator.LargestCountAndOutcomeEvaluator": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator": {"tf": 1.7320508075688772}, "icepool.evaluator.CountSubsetEvaluator.__init__": {"tf": 1.4142135623730951}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 4.242640687119285}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 1.7320508075688772}, "icepool.evaluator.AllCountsEvaluator": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.__init__": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator": {"tf": 1.4142135623730951}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"tf": 2}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator": {"tf": 1.7320508075688772}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"tf": 2}, "icepool.evaluator.AllStraightsEvaluator": {"tf": 1.4142135623730951}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"tf": 2}, "icepool.evaluator.AllStraightsReduceCountsEvaluator": {"tf": 1.4142135623730951}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.__init__": {"tf": 1.7320508075688772}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"tf": 2}, "icepool.evaluator.ComparisonEvaluator": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.any_all": {"tf": 1.7320508075688772}, "icepool.evaluator.ComparisonEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsSubsetEvaluator": {"tf": 1}, "icepool.evaluator.IsSubsetEvaluator.any_all": {"tf": 1.7320508075688772}, "icepool.evaluator.IsSubsetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsProperSubsetEvaluator": {"tf": 1}, "icepool.evaluator.IsProperSubsetEvaluator.any_all": {"tf": 1.7320508075688772}, "icepool.evaluator.IsProperSubsetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsSupersetEvaluator": {"tf": 1}, "icepool.evaluator.IsSupersetEvaluator.any_all": {"tf": 1.7320508075688772}, "icepool.evaluator.IsSupersetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsProperSupersetEvaluator": {"tf": 1}, "icepool.evaluator.IsProperSupersetEvaluator.any_all": {"tf": 1.7320508075688772}, "icepool.evaluator.IsProperSupersetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsEqualSetEvaluator": {"tf": 1}, "icepool.evaluator.IsEqualSetEvaluator.any_all": {"tf": 1.7320508075688772}, "icepool.evaluator.IsEqualSetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsNotEqualSetEvaluator": {"tf": 1}, "icepool.evaluator.IsNotEqualSetEvaluator.any_all": {"tf": 1.7320508075688772}, "icepool.evaluator.IsNotEqualSetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsDisjointSetEvaluator": {"tf": 1}, "icepool.evaluator.IsDisjointSetEvaluator.any_all": {"tf": 1.7320508075688772}, "icepool.evaluator.IsDisjointSetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 4.242640687119285}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 1.7320508075688772}, "icepool.evaluator.KeepEvaluator": {"tf": 1.7320508075688772}, "icepool.evaluator.KeepEvaluator.__init__": {"tf": 1}, "icepool.evaluator.KeepEvaluator.order": {"tf": 1.4142135623730951}, "icepool.evaluator.ArgsortEvaluator": {"tf": 1.4142135623730951}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 1.7320508075688772}, "icepool.evaluator.ArgsortEvaluator.order": {"tf": 2.449489742783178}, "icepool.evaluator.CompairEvalautor.__init__": {"tf": 2.8284271247461903}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 4.242640687119285}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 1.7320508075688772}, "icepool.evaluator.CompairEvalautor.order": {"tf": 2.449489742783178}, "icepool.evaluator.ExpressionEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1.7320508075688772}, "icepool.evaluator.ExpressionEvaluator.validate_arity": {"tf": 1.4142135623730951}, "icepool.function.d": {"tf": 1.4142135623730951}, "icepool.function.coin": {"tf": 1.4142135623730951}, "icepool.function.stochastic_round": {"tf": 1.7320508075688772}, "icepool.function.one_hot": {"tf": 1.7320508075688772}, "icepool.function.from_cumulative": {"tf": 2.6457513110645907}, "icepool.function.from_rv": {"tf": 2.23606797749979}, "icepool.function.min_outcome": {"tf": 1.4142135623730951}, "icepool.function.max_outcome": {"tf": 1.4142135623730951}, "icepool.function.align": {"tf": 1}, "icepool.function.align_range": {"tf": 1}, "icepool.function.commonize_denominator": {"tf": 2}, "icepool.function.reduce": {"tf": 3.1622776601683795}, "icepool.function.accumulate": {"tf": 3.1622776601683795}, "icepool.function.map": {"tf": 4.898979485566356}, "icepool.function.map_function": {"tf": 1.7320508075688772}, "icepool.function.map_and_time": {"tf": 4.242640687119285}, "icepool.function.map_to_pool": {"tf": 3.7416573867739413}, "icepool.typing.Order.merge": {"tf": 2}, "icepool.typing.RerollType": {"tf": 1.4142135623730951}, "icepool.typing.count_positional_parameters": {"tf": 2.23606797749979}, "icepool.typing.guess_star": {"tf": 2}}, "df": 286, "y": {"docs": {"icepool.Die": {"tf": 1}, "icepool.Die.__init__": {"tf": 1}, "icepool.Die.set_range": {"tf": 1.4142135623730951}, "icepool.Die.set_outcomes": {"tf": 1.4142135623730951}, "icepool.Die.cmp": {"tf": 1}, "icepool.Die.equals": {"tf": 1.4142135623730951}, "icepool.tupleize": {"tf": 1}, "icepool.vectorize": {"tf": 1}, "icepool.Symbols": {"tf": 1}, "icepool.from_cumulative": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 2}, "icepool.MultisetEvaluator.alignment": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1}, "icepool.MultiDeal.__init__": {"tf": 1}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 2}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 2}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 2}, "icepool.function.from_cumulative": {"tf": 1}}, "df": 21}, "s": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die": {"tf": 1.4142135623730951}, "icepool.Die.__init__": {"tf": 1.4142135623730951}, "icepool.Die.lowest": {"tf": 1}, "icepool.Die.highest": {"tf": 1}, "icepool.Die.equals": {"tf": 1.4142135623730951}, "icepool.Population.outcomes": {"tf": 1}, "icepool.Population.mode": {"tf": 1}, "icepool.Again": {"tf": 1}, "icepool.from_cumulative": {"tf": 1}, "icepool.from_rv": {"tf": 1}, "icepool.lowest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.MultisetGenerator": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.lowest": {"tf": 1}, "icepool.MultisetExpression.highest": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 1}, "icepool.MultisetEvaluator.alignment": {"tf": 1}, "icepool.Deal.outcomes": {"tf": 1}, "icepool.MultiDeal.outcomes": {"tf": 1}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 1}, "icepool.function.from_cumulative": {"tf": 1}, "icepool.function.from_rv": {"tf": 1}, "icepool.function.map": {"tf": 1}}, "df": 24}}, "m": {"docs": {"icepool.Die": {"tf": 1}, "icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.split": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.keep": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.Die.explode_to_pool": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.commonize_denominator": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.map_and_time": {"tf": 1}, "icepool.map_to_pool": {"tf": 1}, "icepool.MultisetExpression.maximum_match": {"tf": 1}, "icepool.Deck.union": {"tf": 1}, "icepool.Deck.symmetric_difference": {"tf": 1}, "icepool.Deck.map": {"tf": 1}, "icepool.multiset_function": {"tf": 1}, "icepool.function.commonize_denominator": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1}}, "df": 22, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.binary_operator": {"tf": 1}}, "df": 2}}}}}}}, "i": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die": {"tf": 1}, "icepool.Die.simplify": {"tf": 1}, "icepool.MultisetGenerator.order": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.order": {"tf": 1}, "icepool.MultisetExpression.keep_outcomes": {"tf": 1}, "icepool.MultisetExpression.drop_outcomes": {"tf": 1}, "icepool.MultisetExpression.sort_match": {"tf": 1}, "icepool.MultisetExpression.argsort": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator": {"tf": 1}}, "df": 10}}, "n": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.binary_operator": {"tf": 1}, "icepool.Die.lowest": {"tf": 1}, "icepool.Die.highest": {"tf": 1}, "icepool.Again": {"tf": 1}, "icepool.lowest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.MultisetExpression.lowest": {"tf": 1}, "icepool.MultisetExpression.highest": {"tf": 1}, "icepool.MultisetExpression.sort_match": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.maximum_match": {"tf": 1.7320508075688772}, "icepool.evaluator.ExpressionEvaluator.next_state": {"tf": 1}}, "df": 12}, "r": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.Population.nearest": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1}, "icepool.MultisetExpression.expand": {"tf": 1}, "icepool.MultisetExpression.issubset": {"tf": 1}, "icepool.MultisetExpression.issuperset": {"tf": 1}, "icepool.MultisetExpression.isdisjoint": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.final_outcome": {"tf": 1}, "icepool.MultisetEvaluator.range_alignment": {"tf": 1}, "icepool.Order.merge": {"tf": 1.4142135623730951}, "icepool.evaluator.ExpandEvaluator": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1}, "icepool.typing.Order.merge": {"tf": 1.4142135623730951}, "icepool.typing.count_positional_parameters": {"tf": 1}}, "df": 28, "o": {"docs": {}, "df": 0, "f": {"docs": {"icepool.tupleize": {"tf": 1}, "icepool.vectorize": {"tf": 1}}, "df": 2}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"icepool.map_and_time": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}}, "df": 3}}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {"icepool": {"tf": 1.4142135623730951}, "icepool.d": {"tf": 1}, "icepool.coin": {"tf": 1}, "icepool.Outcome": {"tf": 1}, "icepool.Die": {"tf": 1}, "icepool.Die.__init__": {"tf": 1.7320508075688772}, "icepool.Die.binary_operator": {"tf": 1}, "icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.split": {"tf": 1}, "icepool.Die.truncate": {"tf": 1}, "icepool.Die.clip": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.is_in": {"tf": 1}, "icepool.Die.pool": {"tf": 1}, "icepool.Die.keep": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 2}, "icepool.Die.explode_to_pool": {"tf": 1.7320508075688772}, "icepool.Die.reroll_to_pool": {"tf": 2.449489742783178}, "icepool.Die.sign": {"tf": 1}, "icepool.Die.equals": {"tf": 1}, "icepool.Population.nearest": {"tf": 1}, "icepool.Population.marginals": {"tf": 1.4142135623730951}, "icepool.Population.sample": {"tf": 1}, "icepool.Vector": {"tf": 1}, "icepool.Symbols": {"tf": 1.7320508075688772}, "icepool.Symbols.issubset": {"tf": 1}, "icepool.Symbols.issuperset": {"tf": 1}, "icepool.Again": {"tf": 2}, "icepool.from_cumulative": {"tf": 1}, "icepool.from_rv": {"tf": 1}, "icepool.lowest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.middle": {"tf": 1}, "icepool.align": {"tf": 1}, "icepool.align_range": {"tf": 1}, "icepool.commonize_denominator": {"tf": 1}, "icepool.map": {"tf": 1.7320508075688772}, "icepool.map_function": {"tf": 1.7320508075688772}, "icepool.map_and_time": {"tf": 1.4142135623730951}, "icepool.map_to_pool": {"tf": 1.7320508075688772}, "icepool.Reroll": {"tf": 1.4142135623730951}, "icepool.Pool": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.Pool.additive_union": {"tf": 1}, "icepool.standard_pool": {"tf": 1.4142135623730951}, "icepool.MultisetGenerator.outcomes": {"tf": 1}, "icepool.MultisetGenerator.order": {"tf": 1}, "icepool.Alignment": {"tf": 1.4142135623730951}, "icepool.Alignment.outcomes": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.order": {"tf": 1}, "icepool.MultisetExpression.additive_union": {"tf": 1}, "icepool.MultisetExpression.difference": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.intersection": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.union": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.symmetric_difference": {"tf": 1}, "icepool.MultisetExpression.map_counts": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.sort_match": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.maximum_match": {"tf": 3}, "icepool.MultisetExpression.highest_outcome_and_count": {"tf": 1}, "icepool.MultisetExpression.largest_straight_and_outcome": {"tf": 1}, "icepool.MultisetExpression.all_straights": {"tf": 1}, "icepool.MultisetExpression.issuperset": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 1.7320508075688772}, "icepool.MultisetEvaluator.next_state": {"tf": 2}, "icepool.MultisetEvaluator.final_outcome": {"tf": 1.7320508075688772}, "icepool.MultisetEvaluator.alignment": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.range_alignment": {"tf": 1.4142135623730951}, "icepool.Deck.__init__": {"tf": 1}, "icepool.Deck.intersection": {"tf": 1}, "icepool.Deck.union": {"tf": 1}, "icepool.Deck.symmetric_difference": {"tf": 1}, "icepool.multiset_function": {"tf": 1.7320508075688772}, "icepool.evaluator.JointEvaluator": {"tf": 1}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 1.4142135623730951}, "icepool.evaluator.HighestOutcomeAndCountEvaluator": {"tf": 1.4142135623730951}, "icepool.evaluator.LargestCountAndOutcomeEvaluator": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 2}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 1.7320508075688772}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"tf": 1.4142135623730951}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"tf": 1.4142135623730951}, "icepool.evaluator.AllStraightsEvaluator": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"tf": 1.4142135623730951}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"tf": 1.4142135623730951}, "icepool.evaluator.ConstantEvaluator": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 2}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 1.7320508075688772}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 1.7320508075688772}, "icepool.evaluator.CompairEvalautor.__init__": {"tf": 1.7320508075688772}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 2}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 1.7320508075688772}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1.7320508075688772}, "icepool.function.d": {"tf": 1}, "icepool.function.coin": {"tf": 1}, "icepool.function.from_cumulative": {"tf": 1}, "icepool.function.from_rv": {"tf": 1}, "icepool.function.align": {"tf": 1}, "icepool.function.align_range": {"tf": 1}, "icepool.function.commonize_denominator": {"tf": 1}, "icepool.function.map": {"tf": 1.7320508075688772}, "icepool.function.map_function": {"tf": 1.7320508075688772}, "icepool.function.map_and_time": {"tf": 1.4142135623730951}, "icepool.function.map_to_pool": {"tf": 1.7320508075688772}, "icepool.typing.Outcome": {"tf": 1}, "icepool.typing.ImplicitConversionError": {"tf": 1}, "icepool.typing.guess_star": {"tf": 1}}, "df": 109}, "n": {"docs": {"icepool.Die": {"tf": 1.4142135623730951}, "icepool.Die.keep": {"tf": 2.23606797749979}, "icepool.Die.middle": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 2}, "icepool.Die.sign": {"tf": 1.4142135623730951}, "icepool.Population.nearest": {"tf": 1}, "icepool.Symbols": {"tf": 1.7320508075688772}, "icepool.Again": {"tf": 1.4142135623730951}, "icepool.map": {"tf": 2}, "icepool.map_and_time": {"tf": 1}, "icepool.map_to_pool": {"tf": 1}, "icepool.MultisetGenerator": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.keep": {"tf": 1}, "icepool.MultisetExpression.sort_match": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.issubset": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.issuperset": {"tf": 1.4142135623730951}, "icepool.multiset_function": {"tf": 1}, "icepool.function.map": {"tf": 2}, "icepool.function.map_and_time": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1}}, "df": 22}}, "i": {"docs": {}, "df": 0, "s": {"docs": {"icepool": {"tf": 1}, "icepool.d": {"tf": 1}, "icepool.one_hot": {"tf": 1}, "icepool.Die.__init__": {"tf": 2.23606797749979}, "icepool.Die.unary_operator": {"tf": 1.7320508075688772}, "icepool.Die.binary_operator": {"tf": 1.7320508075688772}, "icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.split": {"tf": 1.4142135623730951}, "icepool.Die.truncate": {"tf": 1.4142135623730951}, "icepool.Die.clip": {"tf": 2.23606797749979}, "icepool.Die.set_range": {"tf": 2.23606797749979}, "icepool.Die.set_outcomes": {"tf": 1.4142135623730951}, "icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Die.explode": {"tf": 1.4142135623730951}, "icepool.Die.if_else": {"tf": 1}, "icepool.Die.count": {"tf": 1}, "icepool.Die.pool": {"tf": 1.7320508075688772}, "icepool.Die.keep": {"tf": 2}, "icepool.Die.lowest": {"tf": 1}, "icepool.Die.highest": {"tf": 1}, "icepool.Die.middle": {"tf": 1.4142135623730951}, "icepool.Die.map_to_pool": {"tf": 2.23606797749979}, "icepool.Die.explode_to_pool": {"tf": 1.4142135623730951}, "icepool.Die.reroll_to_pool": {"tf": 2.23606797749979}, "icepool.Die.zero": {"tf": 1.7320508075688772}, "icepool.Die.zero_outcome": {"tf": 1}, "icepool.Die.cmp": {"tf": 1}, "icepool.Die.equals": {"tf": 1.7320508075688772}, "icepool.Population.is_empty": {"tf": 1}, "icepool.Population.nearest": {"tf": 1}, "icepool.Population.quantity": {"tf": 1.4142135623730951}, "icepool.Population.quantities": {"tf": 1}, "icepool.Population.probabilities": {"tf": 1}, "icepool.Population.median": {"tf": 1.4142135623730951}, "icepool.Population.quantile": {"tf": 1.4142135623730951}, "icepool.Population.variance": {"tf": 1}, "icepool.Population.entropy": {"tf": 1}, "icepool.Population.to_one_hot": {"tf": 1}, "icepool.Population.sample": {"tf": 1.7320508075688772}, "icepool.Population.format": {"tf": 1.4142135623730951}, "icepool.Vector.unary_operator": {"tf": 1}, "icepool.Vector.binary_operator": {"tf": 1.7320508075688772}, "icepool.Symbols": {"tf": 1.4142135623730951}, "icepool.Symbols.count_subset": {"tf": 1}, "icepool.Again": {"tf": 1.4142135623730951}, "icepool.CountsKeysView": {"tf": 1}, "icepool.CountsValuesView": {"tf": 1}, "icepool.CountsItemsView": {"tf": 1}, "icepool.from_cumulative": {"tf": 1.4142135623730951}, "icepool.from_rv": {"tf": 1}, "icepool.lowest": {"tf": 1}, "icepool.highest": {"tf": 1.4142135623730951}, "icepool.middle": {"tf": 1}, "icepool.reduce": {"tf": 1}, "icepool.accumulate": {"tf": 1}, "icepool.map": {"tf": 2.8284271247461903}, "icepool.map_function": {"tf": 1}, "icepool.map_and_time": {"tf": 2}, "icepool.map_to_pool": {"tf": 1.7320508075688772}, "icepool.Reroll": {"tf": 1.7320508075688772}, "icepool.Pool": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1.7320508075688772}, "icepool.Pool.raw_size": {"tf": 1}, "icepool.Pool.denominator": {"tf": 1}, "icepool.Pool.unique_dice": {"tf": 1}, "icepool.Pool.outcomes": {"tf": 1}, "icepool.Pool.min_outcome": {"tf": 1}, "icepool.Pool.max_outcome": {"tf": 1}, "icepool.MultisetGenerator": {"tf": 1}, "icepool.MultisetGenerator.denominator": {"tf": 1}, "icepool.MultisetGenerator.equals": {"tf": 1}, "icepool.MultisetGenerator.order": {"tf": 1.4142135623730951}, "icepool.MultisetGenerator.sample": {"tf": 1.7320508075688772}, "icepool.Alignment": {"tf": 1}, "icepool.Alignment.denominator": {"tf": 1}, "icepool.MultisetExpression.order": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.difference": {"tf": 1}, "icepool.MultisetExpression.intersection": {"tf": 1}, "icepool.MultisetExpression.symmetric_difference": {"tf": 1}, "icepool.MultisetExpression.keep_outcomes": {"tf": 1}, "icepool.MultisetExpression.drop_outcomes": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.lowest": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.highest": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.sort_match": {"tf": 1}, "icepool.MultisetExpression.maximum_match": {"tf": 2}, "icepool.MultisetExpression.evaluate": {"tf": 1}, "icepool.MultisetExpression.expand": {"tf": 1}, "icepool.MultisetExpression.count": {"tf": 1}, "icepool.MultisetExpression.all_counts": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.count_subset": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.all_straights": {"tf": 1}, "icepool.MultisetExpression.all_straights_reduce_counts": {"tf": 1}, "icepool.MultisetExpression.issubset": {"tf": 2.23606797749979}, "icepool.MultisetExpression.issuperset": {"tf": 2.449489742783178}, "icepool.MultisetExpression.isdisjoint": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 2}, "icepool.MultisetEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.order": {"tf": 1}, "icepool.MultisetEvaluator.alignment": {"tf": 1}, "icepool.MultisetEvaluator.range_alignment": {"tf": 1}, "icepool.MultisetEvaluator.validate_arity": {"tf": 1.4142135623730951}, "icepool.Deck.__init__": {"tf": 1}, "icepool.Deck.deal": {"tf": 1}, "icepool.Deck.difference": {"tf": 1}, "icepool.Deck.map": {"tf": 1.7320508075688772}, "icepool.Deal.__init__": {"tf": 1.4142135623730951}, "icepool.Deal.denominator": {"tf": 1}, "icepool.MultiDeal.__init__": {"tf": 1.7320508075688772}, "icepool.MultiDeal.denominator": {"tf": 1}, "icepool.multiset_function": {"tf": 1.4142135623730951}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 1}, "icepool.evaluator.JointEvaluator.validate_arity": {"tf": 1.4142135623730951}, "icepool.evaluator.ExpandEvaluator": {"tf": 1}, "icepool.evaluator.SumEvaluator.__init__": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.__init__": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 2}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.evaluator.AllCountsEvaluator": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.__init__": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 2}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.evaluator.KeepEvaluator": {"tf": 1}, "icepool.evaluator.KeepEvaluator.__init__": {"tf": 1.7320508075688772}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.evaluator.ArgsortEvaluator.order": {"tf": 1}, "icepool.evaluator.CompairEvalautor": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 2}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 1.4142135623730951}, "icepool.evaluator.CompairEvalautor.order": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.evaluator.ExpressionEvaluator.validate_arity": {"tf": 1.4142135623730951}, "icepool.function.d": {"tf": 1}, "icepool.function.one_hot": {"tf": 1}, "icepool.function.from_cumulative": {"tf": 1.4142135623730951}, "icepool.function.from_rv": {"tf": 1}, "icepool.function.reduce": {"tf": 1}, "icepool.function.accumulate": {"tf": 1}, "icepool.function.map": {"tf": 2.8284271247461903}, "icepool.function.map_function": {"tf": 1}, "icepool.function.map_and_time": {"tf": 2}, "icepool.function.map_to_pool": {"tf": 1.7320508075688772}, "icepool.typing.Qs": {"tf": 1.4142135623730951}}, "df": 152}, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.multiset_function": {"tf": 1}}, "df": 1}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.cmp": {"tf": 1}}, "df": 1, "s": {"docs": {"icepool.one_hot": {"tf": 1}, "icepool.function.one_hot": {"tf": 1}}, "df": 2}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {"icepool.Die": {"tf": 1}, "icepool.Population.quantile": {"tf": 1}, "icepool.Population.quantile_low": {"tf": 1}, "icepool.Population.quantile_high": {"tf": 1}, "icepool.Pool.denominator": {"tf": 1}, "icepool.MultisetGenerator.denominator": {"tf": 1}, "icepool.Alignment.denominator": {"tf": 1}, "icepool.Deal.denominator": {"tf": 1}, "icepool.MultiDeal.denominator": {"tf": 1}}, "df": 9}}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {"icepool.Die": {"tf": 1.4142135623730951}, "icepool.Die.__init__": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.Die.explode_to_pool": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.accumulate": {"tf": 1}, "icepool.map_function": {"tf": 1}, "icepool.map_to_pool": {"tf": 1}, "icepool.MultisetExpression.all_straights": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator": {"tf": 1}, "icepool.function.accumulate": {"tf": 1}, "icepool.function.map_function": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1}}, "df": 13}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.truncate": {"tf": 1}, "icepool.Population.denominator": {"tf": 1}, "icepool.Symbols": {"tf": 1}, "icepool.MultisetEvaluator.evaluate": {"tf": 1}, "icepool.Deck.size": {"tf": 1}}, "df": 5}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {"icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.MultisetEvaluator.range_alignment": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}}, "df": 9}}}, "o": {"docs": {"icepool": {"tf": 1}, "icepool.d": {"tf": 1}, "icepool.z": {"tf": 1.4142135623730951}, "icepool.stochastic_round": {"tf": 1.7320508075688772}, "icepool.one_hot": {"tf": 1}, "icepool.Outcome": {"tf": 1.4142135623730951}, "icepool.Die": {"tf": 2}, "icepool.Die.__init__": {"tf": 2.8284271247461903}, "icepool.Die.unary_operator": {"tf": 1.4142135623730951}, "icepool.Die.binary_operator": {"tf": 1.7320508075688772}, "icepool.Die.reroll": {"tf": 2}, "icepool.Die.filter": {"tf": 2}, "icepool.Die.split": {"tf": 2}, "icepool.Die.truncate": {"tf": 1.7320508075688772}, "icepool.Die.clip": {"tf": 2}, "icepool.Die.set_range": {"tf": 1}, "icepool.Die.set_outcomes": {"tf": 1}, "icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Die.mean_time_to_sum": {"tf": 1}, "icepool.Die.explode": {"tf": 2.6457513110645907}, "icepool.Die.if_else": {"tf": 1}, "icepool.Die.pool": {"tf": 1.4142135623730951}, "icepool.Die.keep": {"tf": 2.6457513110645907}, "icepool.Die.lowest": {"tf": 1}, "icepool.Die.highest": {"tf": 1}, "icepool.Die.middle": {"tf": 1.7320508075688772}, "icepool.Die.map_to_pool": {"tf": 3}, "icepool.Die.explode_to_pool": {"tf": 2.23606797749979}, "icepool.Die.reroll_to_pool": {"tf": 2}, "icepool.Die.stochastic_round": {"tf": 1.4142135623730951}, "icepool.Die.zero": {"tf": 1}, "icepool.Die.cmp": {"tf": 1}, "icepool.Die.equals": {"tf": 1.4142135623730951}, "icepool.Population": {"tf": 1}, "icepool.Population.outcomes": {"tf": 1}, "icepool.Population.nearest": {"tf": 1}, "icepool.Population.quantity": {"tf": 1.4142135623730951}, "icepool.Population.quantities": {"tf": 1}, "icepool.Population.probabilities": {"tf": 1}, "icepool.Population.mode": {"tf": 1}, "icepool.Population.entropy": {"tf": 1}, "icepool.Population.marginals": {"tf": 1}, "icepool.Population.to_one_hot": {"tf": 2}, "icepool.Vector.binary_operator": {"tf": 1.7320508075688772}, "icepool.Symbols": {"tf": 2}, "icepool.Symbols.__init__": {"tf": 1}, "icepool.Again": {"tf": 2.6457513110645907}, "icepool.from_cumulative": {"tf": 1}, "icepool.from_rv": {"tf": 1.4142135623730951}, "icepool.lowest": {"tf": 1}, "icepool.highest": {"tf": 1.4142135623730951}, "icepool.middle": {"tf": 1.4142135623730951}, "icepool.align": {"tf": 1}, "icepool.align_range": {"tf": 1}, "icepool.commonize_denominator": {"tf": 1}, "icepool.reduce": {"tf": 2.6457513110645907}, "icepool.accumulate": {"tf": 2.6457513110645907}, "icepool.map": {"tf": 3}, "icepool.map_function": {"tf": 1.4142135623730951}, "icepool.map_and_time": {"tf": 2.449489742783178}, "icepool.map_to_pool": {"tf": 2.23606797749979}, "icepool.Reroll": {"tf": 1.4142135623730951}, "icepool.Pool": {"tf": 1}, "icepool.Pool.__init__": {"tf": 2.6457513110645907}, "icepool.Pool.additive_union": {"tf": 1}, "icepool.standard_pool": {"tf": 1.7320508075688772}, "icepool.MultisetGenerator": {"tf": 1.4142135623730951}, "icepool.MultisetGenerator.equals": {"tf": 1}, "icepool.Alignment": {"tf": 1}, "icepool.MultisetExpression": {"tf": 2.23606797749979}, "icepool.MultisetExpression.additive_union": {"tf": 1}, "icepool.MultisetExpression.difference": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.intersection": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.union": {"tf": 1}, "icepool.MultisetExpression.symmetric_difference": {"tf": 1}, "icepool.MultisetExpression.keep_outcomes": {"tf": 2}, "icepool.MultisetExpression.drop_outcomes": {"tf": 2}, "icepool.MultisetExpression.map_counts": {"tf": 1}, "icepool.MultisetExpression.keep_counts": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.keep": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.lowest": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.highest": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.sort_match": {"tf": 2}, "icepool.MultisetExpression.maximum_match": {"tf": 2}, "icepool.MultisetExpression.evaluate": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.count": {"tf": 1}, "icepool.MultisetExpression.all_counts": {"tf": 2}, "icepool.MultisetExpression.count_subset": {"tf": 1}, "icepool.MultisetExpression.all_straights": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.all_straights_reduce_counts": {"tf": 1}, "icepool.MultisetExpression.argsort": {"tf": 2}, "icepool.MultisetExpression.issubset": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.issuperset": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.isdisjoint": {"tf": 1}, "icepool.MultisetExpression.compair_lt": {"tf": 1}, "icepool.MultisetExpression.compair_le": {"tf": 1}, "icepool.MultisetExpression.compair_gt": {"tf": 1}, "icepool.MultisetExpression.compair_ge": {"tf": 1}, "icepool.MultisetExpression.compair_eq": {"tf": 1}, "icepool.MultisetExpression.compair_ne": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 2}, "icepool.MultisetEvaluator.next_state": {"tf": 3.1622776601683795}, "icepool.MultisetEvaluator.final_outcome": {"tf": 1.7320508075688772}, "icepool.MultisetEvaluator.order": {"tf": 1}, "icepool.MultisetEvaluator.alignment": {"tf": 1.7320508075688772}, "icepool.MultisetEvaluator.range_alignment": {"tf": 2.23606797749979}, "icepool.MultisetEvaluator.prefix_generators": {"tf": 1}, "icepool.MultisetEvaluator.validate_arity": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.evaluate": {"tf": 1}, "icepool.Order": {"tf": 1}, "icepool.Deck.__init__": {"tf": 2}, "icepool.Deck.map": {"tf": 1.7320508075688772}, "icepool.Deal.__init__": {"tf": 2.23606797749979}, "icepool.Deal.hand_sizes": {"tf": 1}, "icepool.Deal.outcomes": {"tf": 1}, "icepool.MultiDeal.__init__": {"tf": 2.6457513110645907}, "icepool.MultiDeal.hand_sizes": {"tf": 1}, "icepool.MultiDeal.outcomes": {"tf": 1}, "icepool.multiset_function": {"tf": 1.4142135623730951}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 1.7320508075688772}, "icepool.evaluator.JointEvaluator.prefix_generators": {"tf": 1}, "icepool.evaluator.JointEvaluator.validate_arity": {"tf": 1.4142135623730951}, "icepool.evaluator.SumEvaluator.__init__": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 3.1622776601683795}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 1.7320508075688772}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"tf": 2.23606797749979}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"tf": 2.23606797749979}, "icepool.evaluator.AllStraightsEvaluator": {"tf": 1.4142135623730951}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"tf": 2.23606797749979}, "icepool.evaluator.AllStraightsReduceCountsEvaluator": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.__init__": {"tf": 1.4142135623730951}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"tf": 2.23606797749979}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 3.1622776601683795}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 1.7320508075688772}, "icepool.evaluator.KeepEvaluator": {"tf": 1}, "icepool.evaluator.KeepEvaluator.__init__": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 1.7320508075688772}, "icepool.evaluator.ArgsortEvaluator.order": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 3.1622776601683795}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 1.7320508075688772}, "icepool.evaluator.CompairEvalautor.order": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator": {"tf": 1.4142135623730951}, "icepool.evaluator.ExpressionEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1.7320508075688772}, "icepool.evaluator.ExpressionEvaluator.order": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.alignment": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.prefix_generators": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.validate_arity": {"tf": 1.4142135623730951}, "icepool.function.d": {"tf": 1}, "icepool.function.z": {"tf": 1.4142135623730951}, "icepool.function.stochastic_round": {"tf": 1.7320508075688772}, "icepool.function.one_hot": {"tf": 1}, "icepool.function.from_cumulative": {"tf": 1}, "icepool.function.from_rv": {"tf": 1.4142135623730951}, "icepool.function.align": {"tf": 1}, "icepool.function.align_range": {"tf": 1}, "icepool.function.commonize_denominator": {"tf": 1}, "icepool.function.reduce": {"tf": 2.6457513110645907}, "icepool.function.accumulate": {"tf": 2.6457513110645907}, "icepool.function.map": {"tf": 3}, "icepool.function.map_function": {"tf": 1.4142135623730951}, "icepool.function.map_and_time": {"tf": 2.449489742783178}, "icepool.function.map_to_pool": {"tf": 2.23606797749979}, "icepool.typing.Order": {"tf": 1}, "icepool.typing.Outcome": {"tf": 1.4142135623730951}, "icepool.typing.guess_star": {"tf": 1.4142135623730951}}, "df": 167, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Outcome": {"tf": 1}, "icepool.Die.__init__": {"tf": 1}, "icepool.Die.split": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Population.quantity": {"tf": 1}, "icepool.Population.probability": {"tf": 1}, "icepool.Population.probabilities": {"tf": 1}, "icepool.Symbols.count": {"tf": 1}, "icepool.Again": {"tf": 1}, "icepool.Pool.denominator": {"tf": 1}, "icepool.MultisetGenerator.denominator": {"tf": 1}, "icepool.Alignment.denominator": {"tf": 1}, "icepool.MultisetExpression.count": {"tf": 1}, "icepool.MultisetEvaluator.validate_arity": {"tf": 1.4142135623730951}, "icepool.Deal.total_cards_dealt": {"tf": 1}, "icepool.Deal.denominator": {"tf": 1}, "icepool.MultiDeal.total_cards_dealt": {"tf": 1}, "icepool.MultiDeal.denominator": {"tf": 1}, "icepool.evaluator.JointEvaluator.validate_arity": {"tf": 1.4142135623730951}, "icepool.evaluator.CountEvaluator": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.validate_arity": {"tf": 1.4142135623730951}, "icepool.typing.Outcome": {"tf": 1}, "icepool.typing.count_positional_parameters": {"tf": 1}}, "df": 23, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Population": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.evaluate": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1.4142135623730951}}, "df": 9}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die.lowest": {"tf": 1}, "icepool.Die.highest": {"tf": 1}, "icepool.lowest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.MultisetExpression.lowest": {"tf": 1}, "icepool.MultisetExpression.highest": {"tf": 1}, "icepool.Deck.additive_union": {"tf": 1}}, "df": 7}}}}}}}, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"icepool.coin": {"tf": 1}, "icepool.one_hot": {"tf": 1}, "icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.split": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.is_in": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.Die.explode_to_pool": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.Die.equals": {"tf": 1.4142135623730951}, "icepool.Population.is_empty": {"tf": 1}, "icepool.Population.has_zero_quantities": {"tf": 1}, "icepool.Population.to_one_hot": {"tf": 1}, "icepool.from_cumulative": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.map_and_time": {"tf": 1}, "icepool.map_to_pool": {"tf": 1}, "icepool.MultisetExpression.keep_outcomes": {"tf": 1}, "icepool.MultisetExpression.drop_outcomes": {"tf": 1}, "icepool.MultisetExpression.issubset": {"tf": 1}, "icepool.MultisetExpression.issuperset": {"tf": 1}, "icepool.MultisetExpression.isdisjoint": {"tf": 1}, "icepool.evaluator.AnyEvaluator": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.any_all": {"tf": 1.4142135623730951}, "icepool.evaluator.IsSubsetEvaluator.any_all": {"tf": 1.4142135623730951}, "icepool.evaluator.IsProperSubsetEvaluator.any_all": {"tf": 1.4142135623730951}, "icepool.evaluator.IsSupersetEvaluator.any_all": {"tf": 1.4142135623730951}, "icepool.evaluator.IsProperSupersetEvaluator.any_all": {"tf": 1.4142135623730951}, "icepool.evaluator.IsEqualSetEvaluator.any_all": {"tf": 1.4142135623730951}, "icepool.evaluator.IsNotEqualSetEvaluator.any_all": {"tf": 1.4142135623730951}, "icepool.evaluator.IsDisjointSetEvaluator.any_all": {"tf": 1.4142135623730951}, "icepool.function.coin": {"tf": 1}, "icepool.function.one_hot": {"tf": 1}, "icepool.function.from_cumulative": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1}}, "df": 38}, "n": {"docs": {}, "df": 0, "c": {"docs": {"icepool.Die.unary_operator": {"tf": 1}, "icepool.Die.truncate": {"tf": 1}, "icepool.Vector.unary_operator": {"tf": 1}}, "df": 3, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.clip": {"tf": 1}}, "df": 1, "s": {"docs": {"icepool.Die.truncate": {"tf": 1}}, "df": 1}, "d": {"docs": {"icepool.Die.truncate": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Die.truncate": {"tf": 1}}, "df": 1, "s": {"docs": {"icepool.Pool.__init__": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {"icepool.Die.binary_operator": {"tf": 1}, "icepool.Die.equals": {"tf": 2}, "icepool.Vector.binary_operator": {"tf": 1}}, "df": 3, "y": {"docs": {"icepool.Die.if_else": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.explode": {"tf": 1}, "icepool.Die.equals": {"tf": 1}, "icepool.Population.quantity": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1}, "icepool.evaluator.ExpandEvaluator": {"tf": 1}}, "df": 5}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.MultisetExpression.keep_counts": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {"icepool.Reroll": {"tf": 1}}, "df": 1}}, "y": {"docs": {"icepool.MultisetExpression": {"tf": 1}, "icepool.MultiDeal.__init__": {"tf": 1}, "icepool.multiset_function": {"tf": 1}}, "df": 3}, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"icepool.MultisetExpression.keep_counts": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}}, "df": 4}}}}}}}}}, "w": {"docs": {}, "df": 0, "o": {"docs": {"icepool.stochastic_round": {"tf": 1.4142135623730951}, "icepool.Die.keep": {"tf": 1.7320508075688772}, "icepool.Die.stochastic_round": {"tf": 1}, "icepool.Population.marginals": {"tf": 1}, "icepool.tupleize": {"tf": 1}, "icepool.vectorize": {"tf": 1}, "icepool.Symbols.symmetric_difference": {"tf": 1}, "icepool.lowest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.middle": {"tf": 1}, "icepool.reduce": {"tf": 1.7320508075688772}, "icepool.accumulate": {"tf": 1.7320508075688772}, "icepool.Pool": {"tf": 1}, "icepool.MultisetGenerator": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.issubset": {"tf": 1}, "icepool.MultisetExpression.issuperset": {"tf": 1.4142135623730951}, "icepool.multiset_function": {"tf": 1.4142135623730951}, "icepool.evaluator.ComparisonEvaluator": {"tf": 1}, "icepool.evaluator.IsSubsetEvaluator": {"tf": 1}, "icepool.evaluator.IsProperSubsetEvaluator": {"tf": 1}, "icepool.evaluator.IsSupersetEvaluator": {"tf": 1}, "icepool.evaluator.IsProperSupersetEvaluator": {"tf": 1}, "icepool.evaluator.IsEqualSetEvaluator": {"tf": 1}, "icepool.evaluator.IsNotEqualSetEvaluator": {"tf": 1}, "icepool.evaluator.IsDisjointSetEvaluator": {"tf": 1}, "icepool.evaluator.CompairEvalautor": {"tf": 1}, "icepool.evaluator.CompairEvalautor.__init__": {"tf": 1}, "icepool.function.stochastic_round": {"tf": 1.4142135623730951}, "icepool.function.reduce": {"tf": 1.7320508075688772}, "icepool.function.accumulate": {"tf": 1.7320508075688772}, "icepool.typing.count_positional_parameters": {"tf": 1}}, "df": 32, "s": {"docs": {"icepool.one_hot": {"tf": 1}, "icepool.function.one_hot": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Again": {"tf": 1}, "icepool.MultisetExpression.unique": {"tf": 1}}, "df": 2}}}}, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"icepool.tupleize": {"tf": 1}, "icepool.vectorize": {"tf": 1}, "icepool.Vector": {"tf": 1}, "icepool.Symbols": {"tf": 1}, "icepool.reduce": {"tf": 1}, "icepool.RerollType": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1}, "icepool.MultiDeal.__init__": {"tf": 1}, "icepool.function.reduce": {"tf": 1}, "icepool.typing.S": {"tf": 1}, "icepool.typing.T": {"tf": 1}, "icepool.typing.T_co": {"tf": 1}, "icepool.typing.T_contra": {"tf": 1}, "icepool.typing.U": {"tf": 1}, "icepool.typing.U_co": {"tf": 1}, "icepool.typing.RerollType": {"tf": 1}}, "df": 18, "s": {"docs": {"icepool.Outcome": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.typing.Qs": {"tf": 1}, "icepool.typing.Outcome": {"tf": 1}}, "df": 7}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.MultisetEvaluator.range_alignment": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"tf": 1}}, "df": 5}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.typing.Qs": {"tf": 1}}, "df": 1}}}}}}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.MultisetExpression.issuperset": {"tf": 1}}, "df": 1, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die.clip": {"tf": 1}}, "df": 1}}}}}, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.map_function": {"tf": 1}, "icepool.function.map_function": {"tf": 1}}, "df": 2}}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.__init__": {"tf": 1.7320508075688772}, "icepool.Die.binary_operator": {"tf": 1.7320508075688772}, "icepool.Die.pool": {"tf": 1}, "icepool.Population.mode": {"tf": 1}, "icepool.tupleize": {"tf": 1.7320508075688772}, "icepool.Vector": {"tf": 1}, "icepool.Again": {"tf": 1}, "icepool.align": {"tf": 1}, "icepool.align_range": {"tf": 1}, "icepool.commonize_denominator": {"tf": 1}, "icepool.map": {"tf": 1.4142135623730951}, "icepool.Pool.raw_size": {"tf": 1}, "icepool.MultisetGenerator.sample": {"tf": 1}, "icepool.MultisetExpression.all_counts": {"tf": 1}, "icepool.MultisetExpression.all_straights_reduce_counts": {"tf": 1}, "icepool.Deal.hand_sizes": {"tf": 1}, "icepool.MultiDeal.hand_sizes": {"tf": 1}, "icepool.multiset_function": {"tf": 1}, "icepool.evaluator.JointEvaluator.next_state": {"tf": 1}, "icepool.evaluator.JointEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator": {"tf": 1}, "icepool.function.align": {"tf": 1}, "icepool.function.align_range": {"tf": 1}, "icepool.function.commonize_denominator": {"tf": 1}, "icepool.function.map": {"tf": 1.4142135623730951}, "icepool.typing.Qs": {"tf": 1}}, "df": 26, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.tupleize": {"tf": 1.7320508075688772}, "icepool.map": {"tf": 1}, "icepool.function.map": {"tf": 1}}, "df": 4}}}, "s": {"docs": {"icepool.Die.unary_operator": {"tf": 1}, "icepool.Die.binary_operator": {"tf": 1}, "icepool.map": {"tf": 1.4142135623730951}, "icepool.multiset_function": {"tf": 1.4142135623730951}, "icepool.evaluator.AllCountsEvaluator": {"tf": 1}, "icepool.function.map": {"tf": 1.4142135623730951}}, "df": 6}}}}, "r": {"docs": {}, "df": 0, "n": {"docs": {"icepool.accumulate": {"tf": 1}, "icepool.function.accumulate": {"tf": 1}}, "df": 2, "s": {"docs": {"icepool.map_function": {"tf": 1}, "icepool.multiset_function": {"tf": 1}, "icepool.function.map_function": {"tf": 1}}, "df": 3}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.binary_operator": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Again": {"tf": 1}, "icepool.map_and_time": {"tf": 1.7320508075688772}, "icepool.MultisetGenerator": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 1}, "icepool.multiset_function": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1.7320508075688772}}, "df": 8, "s": {"docs": {"icepool.Die.__init__": {"tf": 1.4142135623730951}, "icepool.Die.binary_operator": {"tf": 1}, "icepool.Die.reroll": {"tf": 1.4142135623730951}, "icepool.Die.filter": {"tf": 1.4142135623730951}, "icepool.Die.count": {"tf": 1}, "icepool.Die.keep": {"tf": 1.4142135623730951}, "icepool.Symbols.count_subset": {"tf": 1}, "icepool.map": {"tf": 1.4142135623730951}, "icepool.map_and_time": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1.7320508075688772}, "icepool.MultisetExpression": {"tf": 1}, "icepool.MultisetExpression.unique": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1}, "icepool.MultisetExpression.count_subset": {"tf": 1}, "icepool.Deck.__init__": {"tf": 2.23606797749979}, "icepool.multiset_function": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator": {"tf": 1}, "icepool.function.map": {"tf": 1.4142135623730951}, "icepool.function.map_and_time": {"tf": 1}}, "df": 19, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die.map_and_time": {"tf": 1}, "icepool.map_and_time": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}}, "df": 3}}}}}}}, "e": {"docs": {"icepool.Die.middle": {"tf": 1}, "icepool.Population.median": {"tf": 1}, "icepool.Population.median_low": {"tf": 1}, "icepool.Population.median_high": {"tf": 1}, "icepool.Population.quantile": {"tf": 1}, "icepool.Population.quantile_low": {"tf": 1}, "icepool.Population.quantile_high": {"tf": 1}, "icepool.middle": {"tf": 1}, "icepool.evaluator.CompairEvalautor.__init__": {"tf": 1.4142135623730951}}, "df": 9, "s": {"docs": {"icepool.evaluator.CompairEvalautor": {"tf": 1}, "icepool.evaluator.CompairEvalautor.__init__": {"tf": 1}}, "df": 2}}}, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {"icepool.reduce": {"tf": 1}, "icepool.accumulate": {"tf": 1}, "icepool.multiset_function": {"tf": 1.4142135623730951}, "icepool.function.reduce": {"tf": 1}, "icepool.function.accumulate": {"tf": 1}}, "df": 5, "s": {"docs": {"icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.split": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.pool": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.Die.explode_to_pool": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.map_function": {"tf": 1.4142135623730951}, "icepool.map_to_pool": {"tf": 1}, "icepool.MultisetExpression.map_counts": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.function.map_function": {"tf": 1.4142135623730951}, "icepool.function.map_to_pool": {"tf": 1}}, "df": 15}, "n": {"docs": {"icepool.Die.lowest": {"tf": 1}, "icepool.Die.highest": {"tf": 1}, "icepool.Die.middle": {"tf": 1.4142135623730951}, "icepool.lowest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.middle": {"tf": 1.4142135623730951}}, "df": 6}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Population.median": {"tf": 1}, "icepool.Population.median_low": {"tf": 1}, "icepool.Population.median_high": {"tf": 1}, "icepool.Population.quantile": {"tf": 1}, "icepool.Population.quantile_low": {"tf": 1}, "icepool.Population.quantile_high": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1}}, "df": 7}}}}, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.mean_time_to_sum": {"tf": 1.7320508075688772}, "icepool.Die.is_in": {"tf": 1}, "icepool.Die.count": {"tf": 1}, "icepool.MultisetExpression.keep_outcomes": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.drop_outcomes": {"tf": 1.4142135623730951}, "icepool.multiset_function": {"tf": 1.7320508075688772}}, "df": 6}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}}, "df": 2}}}}}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die.if_else": {"tf": 1}}, "df": 1}}}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die.map_to_pool": {"tf": 1}, "icepool.Die.explode_to_pool": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.map_to_pool": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1}}, "df": 5}}}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.MultisetExpression.issuperset": {"tf": 1}}, "df": 1}}}}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "l": {"docs": {"icepool": {"tf": 1}}, "df": 1}}, "n": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"icepool": {"tf": 1}, "icepool.Die": {"tf": 1}, "icepool.MultisetExpression.expand": {"tf": 1}, "icepool.MultisetExpression.count": {"tf": 1}, "icepool.evaluator.ExpandEvaluator": {"tf": 1}, "icepool.evaluator.CountEvaluator": {"tf": 1}}, "df": 6}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Reroll": {"tf": 1}, "icepool.RerollType.Reroll": {"tf": 1}, "icepool.MultisetExpression.keep_outcomes": {"tf": 1}, "icepool.MultisetExpression.drop_outcomes": {"tf": 1}, "icepool.typing.RerollType.Reroll": {"tf": 1}}, "df": 7}}}}}}}, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.d": {"tf": 1}, "icepool.z": {"tf": 1}, "icepool.one_hot": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.function.d": {"tf": 1}, "icepool.function.z": {"tf": 1}, "icepool.function.one_hot": {"tf": 1}}, "df": 7}}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Population.denominator": {"tf": 1}, "icepool.Pool.unique_dice": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1}, "icepool.MultisetExpression.unique": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.count": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.argsort": {"tf": 1}, "icepool.Deck.size": {"tf": 1}, "icepool.evaluator.CountEvaluator": {"tf": 1}}, "df": 8}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Symbols": {"tf": 1.4142135623730951}, "icepool.Pool.outcomes": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.argsort": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.MultisetEvaluator.evaluate": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}}, "df": 10}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die.unary_operator": {"tf": 1.4142135623730951}, "icepool.Vector.unary_operator": {"tf": 1.4142135623730951}, "icepool.Symbols": {"tf": 1.4142135623730951}, "icepool.MultisetExpression": {"tf": 1.4142135623730951}}, "df": 4}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.split": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.Die.explode_to_pool": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.Population.format": {"tf": 1.4142135623730951}, "icepool.map": {"tf": 1}, "icepool.map_and_time": {"tf": 1}, "icepool.map_to_pool": {"tf": 1}, "icepool.Deck.map": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1}, "icepool.typing.guess_star": {"tf": 1}}, "df": 16}}}}, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.MultisetExpression.compair_lt": {"tf": 1}, "icepool.MultisetExpression.compair_le": {"tf": 1}, "icepool.MultisetExpression.compair_gt": {"tf": 1}, "icepool.MultisetExpression.compair_ge": {"tf": 1}, "icepool.MultisetExpression.compair_eq": {"tf": 1}, "icepool.MultisetExpression.compair_ne": {"tf": 1}}, "df": 6}}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Die.filter": {"tf": 1.7320508075688772}, "icepool.Die.split": {"tf": 1.4142135623730951}, "icepool.Die.mean_time_to_sum": {"tf": 1}, "icepool.Die.explode": {"tf": 1}}, "df": 4}}}, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Die.equals": {"tf": 1}}, "df": 1}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Population.marginals": {"tf": 1}}, "df": 1, "s": {"docs": {"icepool.Symbols": {"tf": 1}}, "df": 1}}}}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}}, "df": 4}}}}}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Symbols": {"tf": 1}}, "df": 1}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.map": {"tf": 1}, "icepool.map_and_time": {"tf": 1}, "icepool.Deck.map": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}}, "df": 5}}}}, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.MultisetExpression.maximum_match": {"tf": 2.23606797749979}}, "df": 1}}}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Deal": {"tf": 1}, "icepool.MultiDeal": {"tf": 1}}, "df": 2}}}}}}}}, "p": {"docs": {"icepool.stochastic_round": {"tf": 1.7320508075688772}, "icepool.Die.__init__": {"tf": 1}, "icepool.Die.clip": {"tf": 1}, "icepool.Die.keep": {"tf": 1.7320508075688772}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.Die.stochastic_round": {"tf": 1.4142135623730951}, "icepool.map": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1}, "icepool.MultisetExpression.count": {"tf": 1}, "icepool.function.stochastic_round": {"tf": 1.7320508075688772}, "icepool.function.map": {"tf": 1}}, "df": 11}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.stochastic_round": {"tf": 1}, "icepool.Die.stochastic_round": {"tf": 1}, "icepool.Population.format": {"tf": 1}, "icepool.Symbols": {"tf": 1}, "icepool.Symbols.__init__": {"tf": 1}, "icepool.from_cumulative": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.MultisetGenerator": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.multiset_function": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}, "icepool.function.stochastic_round": {"tf": 1}, "icepool.function.from_cumulative": {"tf": 1}, "icepool.function.map": {"tf": 1}}, "df": 16}}}, "e": {"docs": {"icepool.Die": {"tf": 1.7320508075688772}, "icepool.Die.__init__": {"tf": 2}, "icepool.Die.binary_operator": {"tf": 1}, "icepool.Die.truncate": {"tf": 1}, "icepool.Die.clip": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.Population.outcomes": {"tf": 1}, "icepool.Population.quantity": {"tf": 1}, "icepool.Population.denominator": {"tf": 1}, "icepool.Population.median": {"tf": 1}, "icepool.Population.quantile": {"tf": 1}, "icepool.Population.entropy": {"tf": 1}, "icepool.Symbols": {"tf": 1.4142135623730951}, "icepool.Again": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.Reroll": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1}, "icepool.MultisetExpression.difference": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.intersection": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.keep_counts": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1}, "icepool.MultisetExpression.lowest": {"tf": 1}, "icepool.MultisetExpression.highest": {"tf": 1}, "icepool.MultisetExpression.sort_match": {"tf": 1}, "icepool.MultisetExpression.all_counts": {"tf": 1}, "icepool.MultisetExpression.issuperset": {"tf": 1}, "icepool.MultisetEvaluator.range_alignment": {"tf": 1}, "icepool.Deck.size": {"tf": 1}, "icepool.Deal.outcomes": {"tf": 1}, "icepool.MultiDeal.outcomes": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"tf": 1}, "icepool.function.map": {"tf": 1}}, "df": 35, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Die": {"tf": 1}, "icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Symbols": {"tf": 1}, "icepool.map_and_time": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}}, "df": 6}}}, "d": {"docs": {"icepool.Die.unary_operator": {"tf": 1.7320508075688772}, "icepool.Die.binary_operator": {"tf": 1}, "icepool.Die.set_range": {"tf": 1.4142135623730951}, "icepool.Die.explode": {"tf": 1.4142135623730951}, "icepool.Die.pool": {"tf": 1}, "icepool.Die.keep": {"tf": 1.4142135623730951}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.Population.to_one_hot": {"tf": 1}, "icepool.Vector.unary_operator": {"tf": 1}, "icepool.Vector.binary_operator": {"tf": 1.4142135623730951}, "icepool.Symbols": {"tf": 1}, "icepool.Again": {"tf": 1.7320508075688772}, "icepool.map": {"tf": 1}, "icepool.map_function": {"tf": 1}, "icepool.Reroll": {"tf": 2}, "icepool.Pool": {"tf": 1}, "icepool.Alignment": {"tf": 1}, "icepool.MultisetExpression.symmetric_difference": {"tf": 1}, "icepool.MultisetExpression.maximum_match": {"tf": 1}, "icepool.MultisetExpression.all_straights_reduce_counts": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.MultisetEvaluator.final_outcome": {"tf": 1}, "icepool.Order": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CompairEvalautor": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.function.map_function": {"tf": 1}, "icepool.typing.Order": {"tf": 1}}, "df": 36}, "s": {"docs": {"icepool.Population.sample": {"tf": 1}, "icepool.MultisetGenerator.sample": {"tf": 1}}, "df": 2}}, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.MultisetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1}}, "df": 6, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Again": {"tf": 1}, "icepool.MultisetExpression.count": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CountEvaluator": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}}, "df": 8}}}}}}}, "o": {"docs": {"icepool.Population.format": {"tf": 1.4142135623730951}}, "df": 1, "l": {"docs": {}, "df": 0, "d": {"docs": {"icepool": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 1.4142135623730951}, "icepool.map": {"tf": 1.7320508075688772}, "icepool.map_and_time": {"tf": 2}, "icepool.map_to_pool": {"tf": 1.4142135623730951}, "icepool.Deck.map": {"tf": 1.7320508075688772}, "icepool.function.map": {"tf": 1.7320508075688772}, "icepool.function.map_and_time": {"tf": 2}, "icepool.function.map_to_pool": {"tf": 1.4142135623730951}}, "df": 9}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die": {"tf": 1.4142135623730951}, "icepool.Die.__init__": {"tf": 1.4142135623730951}, "icepool.Die.binary_operator": {"tf": 1.4142135623730951}, "icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Die.keep": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.Die.cmp": {"tf": 1.4142135623730951}, "icepool.Die.equals": {"tf": 1.4142135623730951}, "icepool.Vector.binary_operator": {"tf": 1.7320508075688772}, "icepool.Symbols": {"tf": 1.4142135623730951}, "icepool.Symbols.issubset": {"tf": 1}, "icepool.Symbols.issuperset": {"tf": 1}, "icepool.Symbols.isdisjoint": {"tf": 1}, "icepool.Again": {"tf": 1.4142135623730951}, "icepool.map": {"tf": 1.4142135623730951}, "icepool.map_function": {"tf": 1}, "icepool.map_and_time": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.MultisetExpression.lowest": {"tf": 1}, "icepool.MultisetExpression.highest": {"tf": 1}, "icepool.MultisetExpression.sort_match": {"tf": 2}, "icepool.MultisetExpression.maximum_match": {"tf": 3.605551275463989}, "icepool.MultisetExpression.count": {"tf": 1}, "icepool.MultisetExpression.issubset": {"tf": 2.23606797749979}, "icepool.MultisetExpression.issuperset": {"tf": 2.23606797749979}, "icepool.MultisetExpression.isdisjoint": {"tf": 1}, "icepool.MultisetExpression.compair_lt": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.compair_le": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.compair_gt": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.compair_ge": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.compair_eq": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.compair_ne": {"tf": 1.7320508075688772}, "icepool.MultisetEvaluator": {"tf": 1}, "icepool.Deck.difference": {"tf": 1}, "icepool.Deck.map": {"tf": 1}, "icepool.multiset_function": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator": {"tf": 1}, "icepool.function.map": {"tf": 1.4142135623730951}, "icepool.function.map_function": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}}, "df": 41, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"icepool": {"tf": 1}, "icepool.coin": {"tf": 1}, "icepool.stochastic_round": {"tf": 1.4142135623730951}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.Die.stochastic_round": {"tf": 1.4142135623730951}, "icepool.Die.sign": {"tf": 1}, "icepool.Die.equals": {"tf": 1}, "icepool.tupleize": {"tf": 1}, "icepool.vectorize": {"tf": 1}, "icepool.Vector.binary_operator": {"tf": 1}, "icepool.map_to_pool": {"tf": 1}, "icepool.Alignment": {"tf": 1}, "icepool.MultisetExpression.maximum_match": {"tf": 2}, "icepool.MultisetExpression.evaluate": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 1}, "icepool.MultisetEvaluator.evaluate": {"tf": 1}, "icepool.evaluator.KeepEvaluator": {"tf": 1}, "icepool.function.coin": {"tf": 1}, "icepool.function.stochastic_round": {"tf": 1.4142135623730951}, "icepool.function.map_to_pool": {"tf": 1}}, "df": 20}}}}, "s": {"docs": {"icepool.MultisetExpression.difference": {"tf": 1}, "icepool.evaluator.JointEvaluator.order": {"tf": 1}}, "df": 2}}}}}, "r": {"docs": {"icepool.coin": {"tf": 1.4142135623730951}, "icepool.stochastic_round": {"tf": 1}, "icepool.Die.__init__": {"tf": 2.23606797749979}, "icepool.Die.binary_operator": {"tf": 1.4142135623730951}, "icepool.Die.mean_time_to_sum": {"tf": 1}, "icepool.Die.pool": {"tf": 1}, "icepool.Die.keep": {"tf": 1}, "icepool.Die.lowest": {"tf": 1}, "icepool.Die.highest": {"tf": 1}, "icepool.Die.middle": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 1.4142135623730951}, "icepool.Die.stochastic_round": {"tf": 1}, "icepool.Die.equals": {"tf": 1}, "icepool.Population.common_outcome_length": {"tf": 1}, "icepool.Population.nearest": {"tf": 1}, "icepool.Population.denominator": {"tf": 1}, "icepool.Population.median": {"tf": 1}, "icepool.Population.quantile": {"tf": 1}, "icepool.Population.to_one_hot": {"tf": 1}, "icepool.Population.format": {"tf": 2}, "icepool.tupleize": {"tf": 1.4142135623730951}, "icepool.vectorize": {"tf": 1.4142135623730951}, "icepool.Symbols.__init__": {"tf": 1}, "icepool.Again": {"tf": 2.23606797749979}, "icepool.from_rv": {"tf": 1}, "icepool.lowest": {"tf": 2}, "icepool.highest": {"tf": 2}, "icepool.middle": {"tf": 2.23606797749979}, "icepool.align": {"tf": 1}, "icepool.align_range": {"tf": 1}, "icepool.commonize_denominator": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.map_function": {"tf": 1}, "icepool.map_and_time": {"tf": 1}, "icepool.map_to_pool": {"tf": 1.4142135623730951}, "icepool.Reroll": {"tf": 1}, "icepool.Pool.__init__": {"tf": 2.449489742783178}, "icepool.standard_pool": {"tf": 1}, "icepool.MultisetGenerator": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1}, "icepool.MultisetExpression.difference": {"tf": 1}, "icepool.MultisetExpression.intersection": {"tf": 1}, "icepool.MultisetExpression.symmetric_difference": {"tf": 1}, "icepool.MultisetExpression.keep_outcomes": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.drop_outcomes": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.keep": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.maximum_match": {"tf": 2}, "icepool.MultisetExpression.expand": {"tf": 1}, "icepool.MultisetExpression.issubset": {"tf": 1}, "icepool.MultisetExpression.issuperset": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.MultisetEvaluator.final_outcome": {"tf": 1}, "icepool.MultisetEvaluator.alignment": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.range_alignment": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}, "icepool.Deck.size": {"tf": 1}, "icepool.multiset_function": {"tf": 1.4142135623730951}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 1.4142135623730951}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.KeepEvaluator": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1.7320508075688772}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1}, "icepool.function.coin": {"tf": 1.4142135623730951}, "icepool.function.stochastic_round": {"tf": 1}, "icepool.function.from_rv": {"tf": 1}, "icepool.function.align": {"tf": 1}, "icepool.function.align_range": {"tf": 1}, "icepool.function.commonize_denominator": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.function.map_function": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1.4142135623730951}, "icepool.typing.count_positional_parameters": {"tf": 1}}, "df": 83, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die.keys": {"tf": 1}, "icepool.Die.values": {"tf": 1}, "icepool.Die.items": {"tf": 1}, "icepool.Die.keep": {"tf": 1}, "icepool.Population.keys": {"tf": 1}, "icepool.Population.values": {"tf": 1}, "icepool.Population.items": {"tf": 1}, "icepool.Population.outcomes": {"tf": 1}, "icepool.Population.quantities": {"tf": 1}, "icepool.Population.probabilities": {"tf": 1}, "icepool.Symbols": {"tf": 1}, "icepool.Again": {"tf": 1}, "icepool.from_cumulative": {"tf": 1.4142135623730951}, "icepool.accumulate": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.Pool.outcomes": {"tf": 1}, "icepool.MultisetGenerator.outcomes": {"tf": 1}, "icepool.MultisetGenerator.order": {"tf": 1.4142135623730951}, "icepool.Alignment.outcomes": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.order": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.lowest": {"tf": 1}, "icepool.MultisetExpression.highest": {"tf": 1}, "icepool.MultisetExpression.sort_match": {"tf": 2.23606797749979}, "icepool.MultisetExpression.maximum_match": {"tf": 2.23606797749979}, "icepool.MultisetExpression.expand": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.all_counts": {"tf": 1}, "icepool.MultisetExpression.all_straights": {"tf": 1}, "icepool.MultisetExpression.argsort": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.compair_lt": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.compair_le": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.compair_gt": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.compair_ge": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.compair_eq": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.compair_ne": {"tf": 1.7320508075688772}, "icepool.MultisetEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.order": {"tf": 2.8284271247461903}, "icepool.MultisetEvaluator.alignment": {"tf": 1}, "icepool.Order": {"tf": 1}, "icepool.Deck.keys": {"tf": 1}, "icepool.Deck.values": {"tf": 1}, "icepool.Deck.items": {"tf": 1}, "icepool.Deal.outcomes": {"tf": 1}, "icepool.MultiDeal.__init__": {"tf": 1}, "icepool.MultiDeal.outcomes": {"tf": 1}, "icepool.evaluator.JointEvaluator.order": {"tf": 1}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 1}, "icepool.evaluator.ExpandEvaluator.order": {"tf": 1}, "icepool.evaluator.SumEvaluator.order": {"tf": 1}, "icepool.evaluator.CountEvaluator.order": {"tf": 1}, "icepool.evaluator.AnyEvaluator.order": {"tf": 1}, "icepool.evaluator.HighestOutcomeAndCountEvaluator.order": {"tf": 1}, "icepool.evaluator.LargestCountEvaluator.order": {"tf": 1}, "icepool.evaluator.LargestCountAndOutcomeEvaluator.order": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.CountSubsetEvaluator.order": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.order": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.order": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.order": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.order": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.KeepEvaluator.__init__": {"tf": 1.4142135623730951}, "icepool.evaluator.KeepEvaluator.order": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.order": {"tf": 2.8284271247461903}, "icepool.evaluator.CompairEvalautor.__init__": {"tf": 1.7320508075688772}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.CompairEvalautor.order": {"tf": 2.8284271247461903}, "icepool.function.from_cumulative": {"tf": 1.4142135623730951}, "icepool.function.accumulate": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.typing.Order": {"tf": 1}}, "df": 73, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Outcome": {"tf": 1}, "icepool.Vector.binary_operator": {"tf": 1}, "icepool.MultisetGenerator.order": {"tf": 1}, "icepool.MultisetExpression.order": {"tf": 1}, "icepool.typing.Outcome": {"tf": 1}}, "df": 5, "s": {"docs": {"icepool.Symbols": {"tf": 1}, "icepool.Symbols.issubset": {"tf": 1}, "icepool.Symbols.issuperset": {"tf": 1}}, "df": 3}}}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Population": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.MultisetEvaluator.evaluate": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1.7320508075688772}}, "df": 9}}}}, "s": {"docs": {"icepool.Order.merge": {"tf": 1}, "icepool.evaluator.JointEvaluator.order": {"tf": 1}, "icepool.typing.Order.merge": {"tf": 1}}, "df": 3}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"icepool.multiset_function": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.MultisetExpression.argsort": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator": {"tf": 1}}, "df": 2}}}}}}}}}}, "n": {"docs": {"icepool.Die.unary_operator": {"tf": 1}, "icepool.Die.binary_operator": {"tf": 1}, "icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.split": {"tf": 1}, "icepool.Die.truncate": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.keep": {"tf": 2.23606797749979}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.Die.explode_to_pool": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1.4142135623730951}, "icepool.Vector.unary_operator": {"tf": 1}, "icepool.Vector.binary_operator": {"tf": 1.4142135623730951}, "icepool.Again": {"tf": 1}, "icepool.map": {"tf": 1.7320508075688772}, "icepool.map_and_time": {"tf": 1.4142135623730951}, "icepool.map_to_pool": {"tf": 1}, "icepool.Pool": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.difference": {"tf": 1}, "icepool.MultisetExpression.intersection": {"tf": 1}, "icepool.MultisetExpression.sort_match": {"tf": 1}, "icepool.MultisetExpression.all_straights_reduce_counts": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.Deck.map": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1}, "icepool.MultiDeal.__init__": {"tf": 1}, "icepool.multiset_function": {"tf": 1.4142135623730951}, "icepool.evaluator.JointEvaluator": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}, "icepool.function.map": {"tf": 1.7320508075688772}, "icepool.function.map_and_time": {"tf": 1.4142135623730951}, "icepool.function.map_to_pool": {"tf": 1}}, "df": 37, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.coin": {"tf": 1}, "icepool.Die.__init__": {"tf": 1}, "icepool.Die.keep": {"tf": 1}, "icepool.Die.lowest": {"tf": 1.4142135623730951}, "icepool.Die.highest": {"tf": 1.4142135623730951}, "icepool.Die.reroll_to_pool": {"tf": 1.4142135623730951}, "icepool.Die.equals": {"tf": 1.4142135623730951}, "icepool.Symbols": {"tf": 1.7320508075688772}, "icepool.Again": {"tf": 1.7320508075688772}, "icepool.lowest": {"tf": 1.4142135623730951}, "icepool.highest": {"tf": 1.4142135623730951}, "icepool.map": {"tf": 1}, "icepool.map_and_time": {"tf": 1}, "icepool.Reroll": {"tf": 1}, "icepool.MultisetExpression.difference": {"tf": 1}, "icepool.MultisetExpression.intersection": {"tf": 1}, "icepool.MultisetExpression.lowest": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.highest": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.all_counts": {"tf": 1}, "icepool.MultisetExpression.all_straights": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.__init__": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.KeepEvaluator.__init__": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}, "icepool.function.coin": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}}, "df": 31}}, "e": {"docs": {"icepool.coin": {"tf": 1}, "icepool.one_hot": {"tf": 1.4142135623730951}, "icepool.Die.__init__": {"tf": 1.7320508075688772}, "icepool.Die.binary_operator": {"tf": 1.4142135623730951}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.split": {"tf": 1}, "icepool.Die.truncate": {"tf": 1}, "icepool.Die.clip": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.pool": {"tf": 1}, "icepool.Die.keep": {"tf": 2}, "icepool.Die.map_to_pool": {"tf": 1.7320508075688772}, "icepool.Die.equals": {"tf": 1}, "icepool.Population.has_zero_quantities": {"tf": 1}, "icepool.Population.to_one_hot": {"tf": 1}, "icepool.tupleize": {"tf": 1.4142135623730951}, "icepool.vectorize": {"tf": 1.4142135623730951}, "icepool.Symbols": {"tf": 1}, "icepool.Symbols.__init__": {"tf": 1.4142135623730951}, "icepool.Again": {"tf": 1.7320508075688772}, "icepool.accumulate": {"tf": 1}, "icepool.map": {"tf": 1.7320508075688772}, "icepool.map_and_time": {"tf": 1}, "icepool.map_to_pool": {"tf": 1.7320508075688772}, "icepool.Pool": {"tf": 1.4142135623730951}, "icepool.Pool.__init__": {"tf": 1}, "icepool.standard_pool": {"tf": 1}, "icepool.MultisetGenerator": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.keep": {"tf": 1}, "icepool.MultisetExpression.maximum_match": {"tf": 1}, "icepool.MultisetExpression.count": {"tf": 1}, "icepool.MultisetExpression.any": {"tf": 1}, "icepool.MultisetExpression.all_straights": {"tf": 1}, "icepool.MultisetExpression.issuperset": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 1.7320508075688772}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.MultisetEvaluator.evaluate": {"tf": 1}, "icepool.MultisetEvaluator.sample": {"tf": 1}, "icepool.Order.merge": {"tf": 1.4142135623730951}, "icepool.Deck.__init__": {"tf": 1.4142135623730951}, "icepool.Deck.map": {"tf": 1.4142135623730951}, "icepool.MultiDeal.__init__": {"tf": 1}, "icepool.evaluator.AnyEvaluator": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.KeepEvaluator.__init__": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}, "icepool.function.coin": {"tf": 1}, "icepool.function.one_hot": {"tf": 1.4142135623730951}, "icepool.function.accumulate": {"tf": 1}, "icepool.function.map": {"tf": 1.7320508075688772}, "icepool.function.map_and_time": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1.7320508075688772}, "icepool.typing.Order.merge": {"tf": 1.4142135623730951}}, "df": 55, "s": {"docs": {"icepool.one_hot": {"tf": 1}, "icepool.function.one_hot": {"tf": 1}}, "df": 2}}, "c": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.explode": {"tf": 1}, "icepool.Die.keep": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1.4142135623730951}}, "df": 3}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die": {"tf": 1}, "icepool.Die.keep": {"tf": 1}, "icepool.Again": {"tf": 1}}, "df": 3, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"icepool.coin": {"tf": 1}, "icepool.Outcome": {"tf": 1}, "icepool.Die": {"tf": 1.4142135623730951}, "icepool.Die.__init__": {"tf": 1.4142135623730951}, "icepool.Die.unary_operator": {"tf": 1}, "icepool.Die.values": {"tf": 1}, "icepool.Die.items": {"tf": 1}, "icepool.Die.reroll": {"tf": 1.4142135623730951}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.split": {"tf": 1}, "icepool.Die.truncate": {"tf": 1}, "icepool.Die.clip": {"tf": 1}, "icepool.Die.set_range": {"tf": 2.449489742783178}, "icepool.Die.explode": {"tf": 2}, "icepool.Die.middle": {"tf": 1.4142135623730951}, "icepool.Die.map_to_pool": {"tf": 1.4142135623730951}, "icepool.Die.explode_to_pool": {"tf": 2}, "icepool.Die.reroll_to_pool": {"tf": 1.4142135623730951}, "icepool.Die.zero": {"tf": 1}, "icepool.Die.zero_outcome": {"tf": 1}, "icepool.Die.cmp": {"tf": 1}, "icepool.Die.equals": {"tf": 1.4142135623730951}, "icepool.Population.values": {"tf": 1}, "icepool.Population.items": {"tf": 1}, "icepool.Population.min_outcome": {"tf": 1}, "icepool.Population.max_outcome": {"tf": 1}, "icepool.Population.nearest": {"tf": 2.449489742783178}, "icepool.Population.quantity": {"tf": 1.7320508075688772}, "icepool.Population.has_zero_quantities": {"tf": 1}, "icepool.Population.probabilities": {"tf": 1}, "icepool.Population.mode": {"tf": 1}, "icepool.Population.modal_quantity": {"tf": 1}, "icepool.Population.quantile": {"tf": 1}, "icepool.Population.quantile_low": {"tf": 1}, "icepool.Population.quantile_high": {"tf": 1}, "icepool.Population.to_one_hot": {"tf": 1.7320508075688772}, "icepool.Population.format": {"tf": 1.7320508075688772}, "icepool.Symbols": {"tf": 1}, "icepool.lowest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.middle": {"tf": 1.4142135623730951}, "icepool.min_outcome": {"tf": 1}, "icepool.max_outcome": {"tf": 1}, "icepool.reduce": {"tf": 1.4142135623730951}, "icepool.accumulate": {"tf": 1}, "icepool.map": {"tf": 2.449489742783178}, "icepool.map_and_time": {"tf": 2.449489742783178}, "icepool.map_to_pool": {"tf": 2}, "icepool.Reroll": {"tf": 1.4142135623730951}, "icepool.RerollType.Reroll": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1.4142135623730951}, "icepool.Pool.min_outcome": {"tf": 1}, "icepool.Pool.max_outcome": {"tf": 1}, "icepool.MultisetGenerator": {"tf": 1.4142135623730951}, "icepool.MultisetExpression": {"tf": 3.1622776601683795}, "icepool.MultisetExpression.union": {"tf": 1}, "icepool.MultisetExpression.keep_outcomes": {"tf": 1}, "icepool.MultisetExpression.drop_outcomes": {"tf": 1}, "icepool.MultisetExpression.map_counts": {"tf": 1}, "icepool.MultisetExpression.unique": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.highest_outcome_and_count": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.largest_count_and_outcome": {"tf": 1}, "icepool.MultisetExpression.count_subset": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.largest_straight_and_outcome": {"tf": 1}, "icepool.MultisetExpression.argsort": {"tf": 1}, "icepool.MultisetExpression.issubset": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.issuperset": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.isdisjoint": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 2.23606797749979}, "icepool.MultisetEvaluator.next_state": {"tf": 2.8284271247461903}, "icepool.MultisetEvaluator.final_outcome": {"tf": 2.23606797749979}, "icepool.MultisetEvaluator.range_alignment": {"tf": 1.7320508075688772}, "icepool.MultisetEvaluator.evaluate": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1.4142135623730951}, "icepool.Deck.values": {"tf": 1}, "icepool.Deck.items": {"tf": 1}, "icepool.Deck.map": {"tf": 1.4142135623730951}, "icepool.Deal.__init__": {"tf": 1}, "icepool.MultiDeal.__init__": {"tf": 1}, "icepool.evaluator.JointEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.HighestOutcomeAndCountEvaluator": {"tf": 1.4142135623730951}, "icepool.evaluator.LargestCountEvaluator": {"tf": 1}, "icepool.evaluator.LargestCountAndOutcomeEvaluator": {"tf": 1.4142135623730951}, "icepool.evaluator.CountSubsetEvaluator.__init__": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 2.8284271247461903}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 2.23606797749979}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"tf": 1.7320508075688772}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"tf": 1.7320508075688772}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"tf": 1.7320508075688772}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"tf": 1.7320508075688772}, "icepool.evaluator.ComparisonEvaluator.any_all": {"tf": 1.4142135623730951}, "icepool.evaluator.ComparisonEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsSubsetEvaluator.any_all": {"tf": 1.4142135623730951}, "icepool.evaluator.IsSubsetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsProperSubsetEvaluator.any_all": {"tf": 1.4142135623730951}, "icepool.evaluator.IsProperSubsetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsSupersetEvaluator.any_all": {"tf": 1.4142135623730951}, "icepool.evaluator.IsSupersetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsProperSupersetEvaluator.any_all": {"tf": 1.4142135623730951}, "icepool.evaluator.IsProperSupersetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsEqualSetEvaluator.any_all": {"tf": 1.4142135623730951}, "icepool.evaluator.IsEqualSetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsNotEqualSetEvaluator.any_all": {"tf": 1.4142135623730951}, "icepool.evaluator.IsNotEqualSetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsDisjointSetEvaluator.any_all": {"tf": 1.4142135623730951}, "icepool.evaluator.IsDisjointSetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 2.8284271247461903}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 2.23606797749979}, "icepool.evaluator.KeepEvaluator": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 2.23606797749979}, "icepool.evaluator.CompairEvalautor.__init__": {"tf": 1.4142135623730951}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 2.8284271247461903}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 2.23606797749979}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 2.23606797749979}, "icepool.function.coin": {"tf": 1}, "icepool.function.min_outcome": {"tf": 1}, "icepool.function.max_outcome": {"tf": 1}, "icepool.function.reduce": {"tf": 1.4142135623730951}, "icepool.function.accumulate": {"tf": 1}, "icepool.function.map": {"tf": 2.449489742783178}, "icepool.function.map_and_time": {"tf": 2.449489742783178}, "icepool.function.map_to_pool": {"tf": 2}, "icepool.typing.T": {"tf": 1}, "icepool.typing.T_co": {"tf": 1}, "icepool.typing.T_contra": {"tf": 1}, "icepool.typing.U": {"tf": 1}, "icepool.typing.U_co": {"tf": 1}, "icepool.typing.RerollType.Reroll": {"tf": 1}, "icepool.typing.Outcome": {"tf": 1}}, "df": 130, "s": {"docs": {"icepool.stochastic_round": {"tf": 1}, "icepool.one_hot": {"tf": 1.4142135623730951}, "icepool.Die": {"tf": 2.6457513110645907}, "icepool.Die.__init__": {"tf": 3.3166247903554}, "icepool.Die.unary_operator": {"tf": 1.4142135623730951}, "icepool.Die.binary_operator": {"tf": 1.7320508075688772}, "icepool.Die.keys": {"tf": 1}, "icepool.Die.reroll": {"tf": 2.23606797749979}, "icepool.Die.filter": {"tf": 2.23606797749979}, "icepool.Die.split": {"tf": 1.7320508075688772}, "icepool.Die.truncate": {"tf": 1.7320508075688772}, "icepool.Die.clip": {"tf": 1.7320508075688772}, "icepool.Die.set_range": {"tf": 1.7320508075688772}, "icepool.Die.set_outcomes": {"tf": 1.7320508075688772}, "icepool.Die.trim": {"tf": 1}, "icepool.Die.map": {"tf": 1.4142135623730951}, "icepool.Die.map_and_time": {"tf": 1.4142135623730951}, "icepool.Die.mean_time_to_sum": {"tf": 1}, "icepool.Die.explode": {"tf": 2}, "icepool.Die.if_else": {"tf": 1.4142135623730951}, "icepool.Die.lowest": {"tf": 1.4142135623730951}, "icepool.Die.highest": {"tf": 1}, "icepool.Die.middle": {"tf": 1.4142135623730951}, "icepool.Die.map_to_pool": {"tf": 2.23606797749979}, "icepool.Die.explode_to_pool": {"tf": 2}, "icepool.Die.reroll_to_pool": {"tf": 1.7320508075688772}, "icepool.Die.stochastic_round": {"tf": 1}, "icepool.Die.zero": {"tf": 1.4142135623730951}, "icepool.Die.zero_outcome": {"tf": 1}, "icepool.Die.cmp": {"tf": 1.4142135623730951}, "icepool.Die.sign": {"tf": 1}, "icepool.Die.equals": {"tf": 1}, "icepool.Population": {"tf": 1.4142135623730951}, "icepool.Population.keys": {"tf": 1}, "icepool.Population.outcomes": {"tf": 1.4142135623730951}, "icepool.Population.common_outcome_length": {"tf": 1.4142135623730951}, "icepool.Population.is_empty": {"tf": 1}, "icepool.Population.denominator": {"tf": 1}, "icepool.Population.probability": {"tf": 1}, "icepool.Population.median": {"tf": 1}, "icepool.Population.quantile": {"tf": 1}, "icepool.Population.marginals": {"tf": 1.7320508075688772}, "icepool.Population.to_one_hot": {"tf": 2.23606797749979}, "icepool.Population.format": {"tf": 1.7320508075688772}, "icepool.tupleize": {"tf": 2}, "icepool.vectorize": {"tf": 2}, "icepool.Again": {"tf": 1}, "icepool.from_cumulative": {"tf": 1.7320508075688772}, "icepool.from_rv": {"tf": 1.7320508075688772}, "icepool.lowest": {"tf": 1.4142135623730951}, "icepool.highest": {"tf": 1.4142135623730951}, "icepool.middle": {"tf": 2}, "icepool.align": {"tf": 1.4142135623730951}, "icepool.align_range": {"tf": 1.4142135623730951}, "icepool.commonize_denominator": {"tf": 1}, "icepool.map": {"tf": 3}, "icepool.map_function": {"tf": 1}, "icepool.map_and_time": {"tf": 2.8284271247461903}, "icepool.map_to_pool": {"tf": 2}, "icepool.Reroll": {"tf": 1.4142135623730951}, "icepool.Pool": {"tf": 1}, "icepool.Pool.__init__": {"tf": 2.23606797749979}, "icepool.Pool.outcomes": {"tf": 1}, "icepool.MultisetGenerator.outcomes": {"tf": 1}, "icepool.MultisetGenerator.sample": {"tf": 1}, "icepool.Alignment": {"tf": 1}, "icepool.Alignment.outcomes": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.difference": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.intersection": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.keep_outcomes": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.drop_outcomes": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.lowest": {"tf": 1}, "icepool.MultisetExpression.highest": {"tf": 1}, "icepool.MultisetExpression.maximum_match": {"tf": 2}, "icepool.MultisetExpression.count": {"tf": 1}, "icepool.MultisetExpression.highest_outcome_and_count": {"tf": 1}, "icepool.MultisetExpression.largest_straight": {"tf": 1}, "icepool.MultisetExpression.largest_straight_and_outcome": {"tf": 1}, "icepool.MultisetExpression.all_straights": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 3}, "icepool.MultisetEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.order": {"tf": 1.7320508075688772}, "icepool.MultisetEvaluator.alignment": {"tf": 2.6457513110645907}, "icepool.MultisetEvaluator.range_alignment": {"tf": 1}, "icepool.MultisetEvaluator.evaluate": {"tf": 2}, "icepool.Order": {"tf": 1}, "icepool.Deck.__init__": {"tf": 2.449489742783178}, "icepool.Deck.keys": {"tf": 1}, "icepool.Deck.size": {"tf": 1}, "icepool.Deck.map": {"tf": 2.6457513110645907}, "icepool.Deal.outcomes": {"tf": 1.4142135623730951}, "icepool.MultiDeal.outcomes": {"tf": 1.4142135623730951}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 2.6457513110645907}, "icepool.evaluator.ExpandEvaluator": {"tf": 1}, "icepool.evaluator.SumEvaluator": {"tf": 1}, "icepool.evaluator.SumEvaluator.__init__": {"tf": 1}, "icepool.evaluator.CountEvaluator": {"tf": 1}, "icepool.evaluator.HighestOutcomeAndCountEvaluator": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 3}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsSubsetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsProperSubsetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsSupersetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsProperSupersetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsEqualSetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsNotEqualSetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsDisjointSetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 3}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.evaluator.ArgsortEvaluator.order": {"tf": 1.7320508075688772}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 3}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 1.4142135623730951}, "icepool.evaluator.CompairEvalautor.order": {"tf": 1.7320508075688772}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.function.stochastic_round": {"tf": 1}, "icepool.function.one_hot": {"tf": 1.4142135623730951}, "icepool.function.from_cumulative": {"tf": 1.7320508075688772}, "icepool.function.from_rv": {"tf": 1.7320508075688772}, "icepool.function.align": {"tf": 1.4142135623730951}, "icepool.function.align_range": {"tf": 1.4142135623730951}, "icepool.function.commonize_denominator": {"tf": 1}, "icepool.function.map": {"tf": 3}, "icepool.function.map_function": {"tf": 1}, "icepool.function.map_and_time": {"tf": 2.8284271247461903}, "icepool.function.map_to_pool": {"tf": 2}, "icepool.typing.Order": {"tf": 1}}, "df": 134}}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.truncate": {"tf": 1}}, "df": 1}}}}, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Population.format": {"tf": 1}, "icepool.MultisetGenerator.sample": {"tf": 1}, "icepool.Alignment": {"tf": 1}, "icepool.MultisetExpression.all_counts": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.multiset_function": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.__init__": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}}, "df": 10}}}}}, "f": {"docs": {"icepool.one_hot": {"tf": 1.4142135623730951}, "icepool.Die": {"tf": 1}, "icepool.Die.__init__": {"tf": 4.242640687119285}, "icepool.Die.unary_operator": {"tf": 1}, "icepool.Die.binary_operator": {"tf": 2.449489742783178}, "icepool.Die.items": {"tf": 1}, "icepool.Die.reroll": {"tf": 1.7320508075688772}, "icepool.Die.filter": {"tf": 2.23606797749979}, "icepool.Die.split": {"tf": 1}, "icepool.Die.truncate": {"tf": 1.4142135623730951}, "icepool.Die.clip": {"tf": 1.4142135623730951}, "icepool.Die.set_range": {"tf": 2.23606797749979}, "icepool.Die.set_outcomes": {"tf": 1}, "icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1}, "icepool.Die.mean_time_to_sum": {"tf": 1}, "icepool.Die.explode": {"tf": 1.4142135623730951}, "icepool.Die.is_in": {"tf": 1}, "icepool.Die.count": {"tf": 1}, "icepool.Die.pool": {"tf": 2.23606797749979}, "icepool.Die.keep": {"tf": 2.23606797749979}, "icepool.Die.lowest": {"tf": 2.23606797749979}, "icepool.Die.highest": {"tf": 2.23606797749979}, "icepool.Die.middle": {"tf": 1.7320508075688772}, "icepool.Die.map_to_pool": {"tf": 3.605551275463989}, "icepool.Die.explode_to_pool": {"tf": 2.23606797749979}, "icepool.Die.reroll_to_pool": {"tf": 2.449489742783178}, "icepool.Die.zero": {"tf": 1}, "icepool.Die.cmp": {"tf": 1}, "icepool.Die.equals": {"tf": 1}, "icepool.Population.items": {"tf": 1}, "icepool.Population.outcomes": {"tf": 1.4142135623730951}, "icepool.Population.common_outcome_length": {"tf": 1}, "icepool.Population.quantity": {"tf": 1}, "icepool.Population.quantities": {"tf": 1}, "icepool.Population.denominator": {"tf": 1.4142135623730951}, "icepool.Population.probability": {"tf": 1}, "icepool.Population.mode": {"tf": 1}, "icepool.Population.modal_quantity": {"tf": 1}, "icepool.Population.cramer_von_mises": {"tf": 1}, "icepool.Population.median": {"tf": 1}, "icepool.Population.median_low": {"tf": 1}, "icepool.Population.median_high": {"tf": 1}, "icepool.Population.quantile": {"tf": 1.4142135623730951}, "icepool.Population.quantile_low": {"tf": 1.4142135623730951}, "icepool.Population.quantile_high": {"tf": 1.4142135623730951}, "icepool.Population.entropy": {"tf": 1}, "icepool.Population.marginals": {"tf": 1}, "icepool.Population.to_one_hot": {"tf": 1}, "icepool.Population.format": {"tf": 1}, "icepool.tupleize": {"tf": 2}, "icepool.vectorize": {"tf": 2}, "icepool.Vector.binary_operator": {"tf": 1.4142135623730951}, "icepool.Vector.reverse_binary_operator": {"tf": 1}, "icepool.Symbols": {"tf": 2.6457513110645907}, "icepool.Symbols.__init__": {"tf": 1.4142135623730951}, "icepool.Symbols.additive_union": {"tf": 1.4142135623730951}, "icepool.Symbols.difference": {"tf": 1}, "icepool.Symbols.intersection": {"tf": 1}, "icepool.Symbols.union": {"tf": 1}, "icepool.Symbols.count_subset": {"tf": 1}, "icepool.Symbols.issubset": {"tf": 1}, "icepool.Symbols.issuperset": {"tf": 1}, "icepool.Symbols.count": {"tf": 1}, "icepool.Again": {"tf": 2.6457513110645907}, "icepool.from_cumulative": {"tf": 2}, "icepool.from_rv": {"tf": 1.7320508075688772}, "icepool.lowest": {"tf": 1.4142135623730951}, "icepool.highest": {"tf": 1.7320508075688772}, "icepool.middle": {"tf": 2.23606797749979}, "icepool.align": {"tf": 1.7320508075688772}, "icepool.align_range": {"tf": 1.7320508075688772}, "icepool.commonize_denominator": {"tf": 2}, "icepool.reduce": {"tf": 2.8284271247461903}, "icepool.accumulate": {"tf": 3.1622776601683795}, "icepool.map": {"tf": 4}, "icepool.map_function": {"tf": 1}, "icepool.map_and_time": {"tf": 2.8284271247461903}, "icepool.map_to_pool": {"tf": 3.3166247903554}, "icepool.Reroll": {"tf": 1}, "icepool.RerollType": {"tf": 1}, "icepool.Pool": {"tf": 2.23606797749979}, "icepool.Pool.__init__": {"tf": 3.3166247903554}, "icepool.Pool.raw_size": {"tf": 1}, "icepool.Pool.denominator": {"tf": 1}, "icepool.Pool.unique_dice": {"tf": 1}, "icepool.Pool.outcomes": {"tf": 1}, "icepool.Pool.output_arity": {"tf": 1}, "icepool.Pool.additive_union": {"tf": 1}, "icepool.standard_pool": {"tf": 2.449489742783178}, "icepool.MultisetGenerator": {"tf": 2}, "icepool.MultisetGenerator.output_arity": {"tf": 1}, "icepool.MultisetGenerator.denominator": {"tf": 1}, "icepool.MultisetGenerator.sample": {"tf": 1.4142135623730951}, "icepool.Alignment.output_arity": {"tf": 1}, "icepool.Alignment.denominator": {"tf": 1}, "icepool.MultisetExpression": {"tf": 2.8284271247461903}, "icepool.MultisetExpression.additive_union": {"tf": 1}, "icepool.MultisetExpression.difference": {"tf": 2}, "icepool.MultisetExpression.intersection": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.union": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.keep_outcomes": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.drop_outcomes": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.keep": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.lowest": {"tf": 1}, "icepool.MultisetExpression.highest": {"tf": 1}, "icepool.MultisetExpression.sort_match": {"tf": 2}, "icepool.MultisetExpression.maximum_match": {"tf": 3.872983346207417}, "icepool.MultisetExpression.evaluate": {"tf": 1}, "icepool.MultisetExpression.expand": {"tf": 1}, "icepool.MultisetExpression.sum": {"tf": 1}, "icepool.MultisetExpression.count": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.all_counts": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.largest_count": {"tf": 1}, "icepool.MultisetExpression.count_subset": {"tf": 1}, "icepool.MultisetExpression.largest_straight": {"tf": 1}, "icepool.MultisetExpression.largest_straight_and_outcome": {"tf": 1}, "icepool.MultisetExpression.all_straights": {"tf": 1}, "icepool.MultisetExpression.all_straights_reduce_counts": {"tf": 1}, "icepool.MultisetExpression.argsort": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.issubset": {"tf": 1}, "icepool.MultisetExpression.issuperset": {"tf": 2.23606797749979}, "icepool.MultisetExpression.compair_lt": {"tf": 1}, "icepool.MultisetExpression.compair_le": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.compair_gt": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.compair_ge": {"tf": 1}, "icepool.MultisetExpression.compair_eq": {"tf": 1}, "icepool.MultisetExpression.compair_ne": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 3.605551275463989}, "icepool.MultisetEvaluator.next_state": {"tf": 2.8284271247461903}, "icepool.MultisetEvaluator.final_outcome": {"tf": 1}, "icepool.MultisetEvaluator.order": {"tf": 1}, "icepool.MultisetEvaluator.range_alignment": {"tf": 2}, "icepool.MultisetEvaluator.prefix_generators": {"tf": 1}, "icepool.MultisetEvaluator.validate_arity": {"tf": 1}, "icepool.MultisetEvaluator.evaluate": {"tf": 2.6457513110645907}, "icepool.Deck.__init__": {"tf": 2.8284271247461903}, "icepool.Deck.items": {"tf": 1}, "icepool.Deck.size": {"tf": 1.4142135623730951}, "icepool.Deck.difference": {"tf": 1}, "icepool.Deck.union": {"tf": 1.4142135623730951}, "icepool.Deck.symmetric_difference": {"tf": 1.4142135623730951}, "icepool.Deck.multiply_counts": {"tf": 1}, "icepool.Deck.map": {"tf": 1.4142135623730951}, "icepool.Deal": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1}, "icepool.Deal.hand_sizes": {"tf": 1}, "icepool.Deal.total_cards_dealt": {"tf": 1}, "icepool.Deal.outcomes": {"tf": 1.4142135623730951}, "icepool.Deal.output_arity": {"tf": 1}, "icepool.Deal.denominator": {"tf": 1}, "icepool.MultiDeal": {"tf": 1}, "icepool.MultiDeal.__init__": {"tf": 1.4142135623730951}, "icepool.MultiDeal.hand_sizes": {"tf": 1}, "icepool.MultiDeal.total_cards_dealt": {"tf": 1}, "icepool.MultiDeal.outcomes": {"tf": 1.4142135623730951}, "icepool.MultiDeal.output_arity": {"tf": 1}, "icepool.MultiDeal.denominator": {"tf": 1}, "icepool.multiset_function": {"tf": 2.449489742783178}, "icepool.evaluator.JointEvaluator": {"tf": 1}, "icepool.evaluator.JointEvaluator.next_state": {"tf": 1}, "icepool.evaluator.JointEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.JointEvaluator.order": {"tf": 1}, "icepool.evaluator.JointEvaluator.prefix_generators": {"tf": 1}, "icepool.evaluator.JointEvaluator.validate_arity": {"tf": 1}, "icepool.evaluator.ExpandEvaluator": {"tf": 1}, "icepool.evaluator.CountEvaluator": {"tf": 1}, "icepool.evaluator.HighestOutcomeAndCountEvaluator": {"tf": 1}, "icepool.evaluator.LargestCountEvaluator": {"tf": 1}, "icepool.evaluator.LargestCountAndOutcomeEvaluator": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 2.8284271247461903}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator": {"tf": 1.4142135623730951}, "icepool.evaluator.LargestStraightEvaluator": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"tf": 2}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"tf": 2}, "icepool.evaluator.AllStraightsEvaluator": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"tf": 2}, "icepool.evaluator.AllStraightsReduceCountsEvaluator": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.__init__": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"tf": 2}, "icepool.evaluator.ComparisonEvaluator.any_all": {"tf": 1.7320508075688772}, "icepool.evaluator.IsSubsetEvaluator.any_all": {"tf": 1.7320508075688772}, "icepool.evaluator.IsProperSubsetEvaluator.any_all": {"tf": 1.7320508075688772}, "icepool.evaluator.IsSupersetEvaluator.any_all": {"tf": 1.7320508075688772}, "icepool.evaluator.IsProperSupersetEvaluator.any_all": {"tf": 1.7320508075688772}, "icepool.evaluator.IsEqualSetEvaluator.any_all": {"tf": 1.7320508075688772}, "icepool.evaluator.IsNotEqualSetEvaluator.any_all": {"tf": 1.7320508075688772}, "icepool.evaluator.IsDisjointSetEvaluator.any_all": {"tf": 1.7320508075688772}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 2.8284271247461903}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.order": {"tf": 1}, "icepool.evaluator.CompairEvalautor": {"tf": 1}, "icepool.evaluator.CompairEvalautor.__init__": {"tf": 1.4142135623730951}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 2.8284271247461903}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 1}, "icepool.evaluator.CompairEvalautor.order": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.prefix_generators": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.validate_arity": {"tf": 1}, "icepool.function.one_hot": {"tf": 1.4142135623730951}, "icepool.function.from_cumulative": {"tf": 2}, "icepool.function.from_rv": {"tf": 1.7320508075688772}, "icepool.function.align": {"tf": 1.7320508075688772}, "icepool.function.align_range": {"tf": 1.7320508075688772}, "icepool.function.commonize_denominator": {"tf": 2}, "icepool.function.reduce": {"tf": 2.8284271247461903}, "icepool.function.accumulate": {"tf": 3.1622776601683795}, "icepool.function.map": {"tf": 4}, "icepool.function.map_function": {"tf": 1}, "icepool.function.map_and_time": {"tf": 2.8284271247461903}, "icepool.function.map_to_pool": {"tf": 3.3166247903554}, "icepool.typing.Qs": {"tf": 1}, "icepool.typing.RerollType": {"tf": 1}, "icepool.typing.count_positional_parameters": {"tf": 2}, "icepool.typing.guess_star": {"tf": 1}}, "df": 221, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"icepool.MultisetEvaluator": {"tf": 1}}, "df": 1}}}, "f": {"docs": {"icepool.multiset_function": {"tf": 1}}, "df": 1}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die.unary_operator": {"tf": 1.4142135623730951}, "icepool.Die.binary_operator": {"tf": 1.7320508075688772}, "icepool.Die.if_else": {"tf": 1}, "icepool.Population.marginals": {"tf": 1}, "icepool.Vector.binary_operator": {"tf": 1}, "icepool.Vector.reverse_binary_operator": {"tf": 1}, "icepool.Again": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.__init__": {"tf": 1}}, "df": 9, "s": {"docs": {"icepool.Die": {"tf": 1}, "icepool.Die.unary_operator": {"tf": 1}, "icepool.Die.binary_operator": {"tf": 1}, "icepool.Die.equals": {"tf": 1}, "icepool.Vector": {"tf": 1}, "icepool.Vector.unary_operator": {"tf": 1.4142135623730951}, "icepool.Vector.binary_operator": {"tf": 1.4142135623730951}, "icepool.Symbols": {"tf": 1}, "icepool.Symbols.issubset": {"tf": 1}, "icepool.Symbols.issuperset": {"tf": 1}, "icepool.Again": {"tf": 1.4142135623730951}, "icepool.Pool": {"tf": 1}, "icepool.MultisetGenerator": {"tf": 1}, "icepool.MultisetExpression.evaluate": {"tf": 1}}, "df": 14}}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Die.unary_operator": {"tf": 1.4142135623730951}, "icepool.Die.binary_operator": {"tf": 1}, "icepool.Symbols": {"tf": 1}, "icepool.Again": {"tf": 1}, "icepool.Reroll": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1}, "icepool.MultisetExpression.difference": {"tf": 1}, "icepool.MultisetExpression.intersection": {"tf": 1}, "icepool.MultisetExpression.count": {"tf": 1}, "icepool.MultisetExpression.all_straights_reduce_counts": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator": {"tf": 1}}, "df": 11, "s": {"docs": {"icepool.Die.map_to_pool": {"tf": 1}, "icepool.Die.explode_to_pool": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.Symbols": {"tf": 1.4142135623730951}, "icepool.map_to_pool": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1.4142135623730951}, "icepool.multiset_function": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1}}, "df": 8}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool.MultisetExpression": {"tf": 1}, "icepool.MultisetExpression.all_counts": {"tf": 1}}, "df": 2}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.binary_operator": {"tf": 1}, "icepool.Vector.binary_operator": {"tf": 1.4142135623730951}}, "df": 2, "s": {"docs": {"icepool.Die.__init__": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.split": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.explode_to_pool": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1.4142135623730951}}, "df": 6}, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Population.quantities": {"tf": 1}, "icepool.Population.probabilities": {"tf": 1}, "icepool.MultisetEvaluator.final_outcome": {"tf": 1}, "icepool.MultisetEvaluator.order": {"tf": 1}, "icepool.MultisetEvaluator.alignment": {"tf": 1}, "icepool.MultisetEvaluator.prefix_generators": {"tf": 1}, "icepool.MultisetEvaluator.validate_arity": {"tf": 1}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 1}, "icepool.evaluator.JointEvaluator.prefix_generators": {"tf": 1}, "icepool.evaluator.JointEvaluator.validate_arity": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.order": {"tf": 1}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 1}, "icepool.evaluator.CompairEvalautor.order": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.prefix_generators": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.validate_arity": {"tf": 1}}, "df": 19, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Population.format": {"tf": 1.4142135623730951}, "icepool.Symbols.__init__": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 1}}, "df": 3}}}}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Again": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Die.__init__": {"tf": 1}}, "df": 1}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {"icepool.MultisetExpression.all_straights": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator": {"tf": 1}}, "df": 2}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"icepool.MultisetEvaluator": {"tf": 1}}, "df": 1}}}, "e": {"docs": {"icepool.MultisetEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1.4142135623730951}}, "df": 4}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.MultisetEvaluator.validate_arity": {"tf": 1}, "icepool.evaluator.JointEvaluator.validate_arity": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.validate_arity": {"tf": 1}}, "df": 3}}}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"icepool.multiset_function": {"tf": 1}}, "df": 1}}}}}}}, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.set_range": {"tf": 1.4142135623730951}, "icepool.Die.keep": {"tf": 1}, "icepool.Population.quantity": {"tf": 1}, "icepool.Population.quantities": {"tf": 1}, "icepool.Population.probabilities": {"tf": 1}, "icepool.Population.format": {"tf": 1}}, "df": 6}}}}}}, "d": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.middle": {"tf": 1}, "icepool.middle": {"tf": 1}}, "df": 2}}, "|": {"docs": {}, "df": 0, "q": {"docs": {"icepool.Population.format": {"tf": 1}}, "df": 1}}, "c": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Again": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}, "b": {"docs": {}, "df": 0, "j": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"icepool.from_rv": {"tf": 1.4142135623730951}, "icepool.MultisetGenerator.equals": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.evaluate": {"tf": 1}, "icepool.Deck.deal": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1.4142135623730951}, "icepool.function.from_rv": {"tf": 1.4142135623730951}}, "df": 9}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Reroll": {"tf": 1}}, "df": 1}}}}}}}}}}}, "w": {"docs": {}, "df": 0, "n": {"docs": {"icepool.MultisetGenerator": {"tf": 1.4142135623730951}, "icepool.multiset_function": {"tf": 1}}, "df": 2}}}, "n": {"docs": {"icepool.coin": {"tf": 2}, "icepool.Population.quantile": {"tf": 1}, "icepool.Population.quantile_low": {"tf": 1}, "icepool.Population.quantile_high": {"tf": 1}, "icepool.Symbols": {"tf": 1.4142135623730951}, "icepool.Again": {"tf": 1.4142135623730951}, "icepool.MultisetExpression": {"tf": 2.23606797749979}, "icepool.MultisetExpression.multiply_counts": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.divide_counts": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.modulo_counts": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.keep_counts": {"tf": 1}, "icepool.MultisetExpression.unique": {"tf": 1}, "icepool.function.coin": {"tf": 2}}, "df": 13, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool": {"tf": 1}, "icepool.one_hot": {"tf": 1}, "icepool.Die.__init__": {"tf": 1}, "icepool.Die.reroll": {"tf": 1.4142135623730951}, "icepool.Die.filter": {"tf": 1.4142135623730951}, "icepool.Die.mean_time_to_sum": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.count": {"tf": 1}, "icepool.Die.pool": {"tf": 1}, "icepool.Die.keep": {"tf": 1.7320508075688772}, "icepool.Die.lowest": {"tf": 1}, "icepool.Die.highest": {"tf": 1}, "icepool.Die.middle": {"tf": 1.4142135623730951}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.Die.explode_to_pool": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1.7320508075688772}, "icepool.Population.denominator": {"tf": 1}, "icepool.Symbols": {"tf": 1.4142135623730951}, "icepool.Symbols.count_subset": {"tf": 1}, "icepool.Symbols.count": {"tf": 1}, "icepool.Again": {"tf": 1.4142135623730951}, "icepool.highest": {"tf": 1}, "icepool.middle": {"tf": 1.4142135623730951}, "icepool.align": {"tf": 1}, "icepool.align_range": {"tf": 1}, "icepool.commonize_denominator": {"tf": 1}, "icepool.accumulate": {"tf": 1.4142135623730951}, "icepool.map": {"tf": 1.4142135623730951}, "icepool.map_and_time": {"tf": 1.7320508075688772}, "icepool.map_to_pool": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.Pool.raw_size": {"tf": 1}, "icepool.Pool.output_arity": {"tf": 1}, "icepool.MultisetGenerator.output_arity": {"tf": 1}, "icepool.Alignment.output_arity": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.difference": {"tf": 1}, "icepool.MultisetExpression.intersection": {"tf": 1}, "icepool.MultisetExpression.keep_counts": {"tf": 1}, "icepool.MultisetExpression.sort_match": {"tf": 1}, "icepool.MultisetExpression.count": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.count_subset": {"tf": 1}, "icepool.MultisetExpression.compair_le": {"tf": 1}, "icepool.MultisetExpression.compair_gt": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.range_alignment": {"tf": 1}, "icepool.MultisetEvaluator.validate_arity": {"tf": 1}, "icepool.MultisetEvaluator.evaluate": {"tf": 1.4142135623730951}, "icepool.Deck.__init__": {"tf": 1}, "icepool.Deck.size": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1}, "icepool.Deal.hand_sizes": {"tf": 1}, "icepool.Deal.total_cards_dealt": {"tf": 1}, "icepool.Deal.output_arity": {"tf": 1}, "icepool.MultiDeal.__init__": {"tf": 1.4142135623730951}, "icepool.MultiDeal.hand_sizes": {"tf": 1}, "icepool.MultiDeal.total_cards_dealt": {"tf": 1}, "icepool.MultiDeal.output_arity": {"tf": 1}, "icepool.multiset_function": {"tf": 1}, "icepool.evaluator.JointEvaluator.validate_arity": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.__init__": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.CompairEvalautor.__init__": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.ExpressionEvaluator.validate_arity": {"tf": 1}, "icepool.function.one_hot": {"tf": 1}, "icepool.function.align": {"tf": 1}, "icepool.function.align_range": {"tf": 1}, "icepool.function.commonize_denominator": {"tf": 1}, "icepool.function.accumulate": {"tf": 1.4142135623730951}, "icepool.function.map": {"tf": 1.4142135623730951}, "icepool.function.map_and_time": {"tf": 1.7320508075688772}, "icepool.function.map_to_pool": {"tf": 1}, "icepool.typing.count_positional_parameters": {"tf": 1.7320508075688772}, "icepool.typing.guess_star": {"tf": 1}}, "df": 82, "s": {"docs": {"icepool.MultisetEvaluator": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.coin": {"tf": 1}, "icepool.function.coin": {"tf": 1}}, "df": 2}}}}}}}}, "o": {"docs": {"icepool.Die": {"tf": 1}, "icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.keep": {"tf": 1.4142135623730951}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1.4142135623730951}, "icepool.Population.common_outcome_length": {"tf": 1}, "icepool.Population.is_empty": {"tf": 1}, "icepool.Population.nearest": {"tf": 1}, "icepool.Symbols": {"tf": 1}, "icepool.lowest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.middle": {"tf": 1}, "icepool.accumulate": {"tf": 1}, "icepool.map_function": {"tf": 1}, "icepool.Reroll": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1}, "icepool.MultisetExpression.difference": {"tf": 1}, "icepool.MultisetExpression.highest_outcome_and_count": {"tf": 1}, "icepool.MultisetExpression.all_counts": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.MultisetEvaluator.final_outcome": {"tf": 1}, "icepool.MultisetEvaluator.range_alignment": {"tf": 1}, "icepool.MultisetEvaluator.evaluate": {"tf": 1}, "icepool.evaluator.HighestOutcomeAndCountEvaluator": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.__init__": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsSubsetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsProperSubsetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsSupersetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsProperSupersetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsEqualSetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsNotEqualSetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsDisjointSetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1}, "icepool.function.accumulate": {"tf": 1}, "icepool.function.map_function": {"tf": 1}}, "df": 48, "n": {"docs": {"icepool.coin": {"tf": 1}, "icepool.Die.__init__": {"tf": 1}, "icepool.Die.binary_operator": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Again": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1}, "icepool.MultisetEvaluator.range_alignment": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1}, "icepool.MultiDeal.__init__": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.KeepEvaluator.__init__": {"tf": 1}, "icepool.function.coin": {"tf": 1}}, "df": 15, "e": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Population.common_outcome_length": {"tf": 1}, "icepool.Population.nearest": {"tf": 1}, "icepool.tupleize": {"tf": 1}, "icepool.vectorize": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.MultisetExpression.all_counts": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.evaluator.AllCountsEvaluator.__init__": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.evaluator.KeepEvaluator.__init__": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 1.4142135623730951}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1.4142135623730951}, "icepool.function.map": {"tf": 1}, "icepool.typing.count_positional_parameters": {"tf": 1}}, "df": 24}, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {"icepool.MultisetEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1.4142135623730951}}, "df": 4}}}}}, "t": {"docs": {"icepool.coin": {"tf": 1.4142135623730951}, "icepool.Die": {"tf": 1.7320508075688772}, "icepool.Die.__init__": {"tf": 1.4142135623730951}, "icepool.Die.unary_operator": {"tf": 1}, "icepool.Die.binary_operator": {"tf": 1.7320508075688772}, "icepool.Die.reroll": {"tf": 1.4142135623730951}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.split": {"tf": 1}, "icepool.Die.truncate": {"tf": 1.7320508075688772}, "icepool.Die.clip": {"tf": 1.7320508075688772}, "icepool.Die.set_range": {"tf": 1.4142135623730951}, "icepool.Die.set_outcomes": {"tf": 1.4142135623730951}, "icepool.Die.explode": {"tf": 2}, "icepool.Die.map_to_pool": {"tf": 2}, "icepool.Die.explode_to_pool": {"tf": 1.7320508075688772}, "icepool.Die.reroll_to_pool": {"tf": 1.7320508075688772}, "icepool.Die.zero": {"tf": 1}, "icepool.Die.equals": {"tf": 2}, "icepool.Population.nearest": {"tf": 1}, "icepool.Population.median": {"tf": 1}, "icepool.Population.quantile": {"tf": 1}, "icepool.Population.variance": {"tf": 1}, "icepool.Population.marginals": {"tf": 1}, "icepool.Population.to_one_hot": {"tf": 1.4142135623730951}, "icepool.Population.sample": {"tf": 1}, "icepool.tupleize": {"tf": 1}, "icepool.vectorize": {"tf": 1}, "icepool.Vector.binary_operator": {"tf": 1}, "icepool.Symbols.issubset": {"tf": 1}, "icepool.Symbols.issuperset": {"tf": 1}, "icepool.Again": {"tf": 2.449489742783178}, "icepool.from_cumulative": {"tf": 1}, "icepool.map": {"tf": 2}, "icepool.map_and_time": {"tf": 1}, "icepool.map_to_pool": {"tf": 1.4142135623730951}, "icepool.Reroll": {"tf": 1.4142135623730951}, "icepool.Pool": {"tf": 1.4142135623730951}, "icepool.Pool.__init__": {"tf": 1}, "icepool.MultisetGenerator.sample": {"tf": 1}, "icepool.Alignment": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1}, "icepool.MultisetExpression.difference": {"tf": 1}, "icepool.MultisetExpression.symmetric_difference": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.lowest": {"tf": 1}, "icepool.MultisetExpression.highest": {"tf": 1}, "icepool.MultisetExpression.sort_match": {"tf": 1}, "icepool.MultisetExpression.maximum_match": {"tf": 1}, "icepool.MultisetExpression.expand": {"tf": 1}, "icepool.MultisetExpression.count": {"tf": 1}, "icepool.MultisetExpression.all_counts": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.count_subset": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.isdisjoint": {"tf": 1}, "icepool.MultisetExpression.compair_lt": {"tf": 1}, "icepool.MultisetExpression.compair_le": {"tf": 1}, "icepool.MultisetExpression.compair_gt": {"tf": 1}, "icepool.MultisetExpression.compair_ge": {"tf": 1}, "icepool.MultisetExpression.compair_eq": {"tf": 1}, "icepool.MultisetExpression.compair_ne": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.MultisetEvaluator.final_outcome": {"tf": 1}, "icepool.MultisetEvaluator.alignment": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.validate_arity": {"tf": 1.4142135623730951}, "icepool.Deck.difference": {"tf": 1}, "icepool.Deck.map": {"tf": 1.4142135623730951}, "icepool.Deal.__init__": {"tf": 1.4142135623730951}, "icepool.MultiDeal.__init__": {"tf": 1.4142135623730951}, "icepool.multiset_function": {"tf": 1.4142135623730951}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 1.4142135623730951}, "icepool.evaluator.JointEvaluator.validate_arity": {"tf": 1.4142135623730951}, "icepool.evaluator.ExpandEvaluator": {"tf": 1}, "icepool.evaluator.CountEvaluator": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.__init__": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.__init__": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1.7320508075688772}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.validate_arity": {"tf": 1.4142135623730951}, "icepool.function.coin": {"tf": 1.4142135623730951}, "icepool.function.from_cumulative": {"tf": 1}, "icepool.function.map": {"tf": 2}, "icepool.function.map_and_time": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1.4142135623730951}}, "df": 89, "e": {"docs": {"icepool.Die.pool": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 1.4142135623730951}, "icepool.Die.explode_to_pool": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1.4142135623730951}, "icepool.Die.sign": {"tf": 1}, "icepool.Population.sample": {"tf": 1}, "icepool.Symbols": {"tf": 1}, "icepool.Symbols.issubset": {"tf": 1}, "icepool.Symbols.issuperset": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.map_to_pool": {"tf": 1}, "icepool.Pool": {"tf": 1}, "icepool.MultisetExpression.difference": {"tf": 1}, "icepool.MultisetExpression.intersection": {"tf": 1}, "icepool.MultisetEvaluator.final_outcome": {"tf": 1}, "icepool.multiset_function": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1}}, "df": 23, "s": {"docs": {"icepool.Symbols": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1}}, "df": 2}}}, "r": {"docs": {"icepool.Die": {"tf": 1}}, "df": 1}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"icepool.stochastic_round": {"tf": 1}, "icepool.Die.truncate": {"tf": 1}, "icepool.Die.stochastic_round": {"tf": 1}, "icepool.Population.nearest": {"tf": 1.4142135623730951}, "icepool.function.stochastic_round": {"tf": 1}}, "df": 5}}}}}, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.mean_time_to_sum": {"tf": 1}, "icepool.Die.keep": {"tf": 1.4142135623730951}, "icepool.Symbols": {"tf": 1}, "icepool.Symbols.__init__": {"tf": 1.4142135623730951}, "icepool.Symbols.isdisjoint": {"tf": 1}, "icepool.Symbols.has_negative_counts": {"tf": 1}, "icepool.Again": {"tf": 1}, "icepool.Pool.additive_union": {"tf": 1}, "icepool.MultisetExpression.additive_union": {"tf": 1}, "icepool.MultisetExpression.difference": {"tf": 1}, "icepool.MultisetExpression.intersection": {"tf": 1}, "icepool.MultisetExpression.union": {"tf": 1}, "icepool.MultisetExpression.symmetric_difference": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1.7320508075688772}, "icepool.evaluator.ExpandEvaluator": {"tf": 1}, "icepool.evaluator.KeepEvaluator.__init__": {"tf": 1.4142135623730951}, "icepool.evaluator.KeepEvaluator.order": {"tf": 1}}, "df": 18}}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.from_cumulative": {"tf": 1}, "icepool.function.from_cumulative": {"tf": 1}}, "df": 3}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.MultisetExpression.sort_match": {"tf": 1}}, "df": 1}}}}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}}, "df": 2}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die.lowest": {"tf": 1}, "icepool.Die.highest": {"tf": 1}, "icepool.Again": {"tf": 1}, "icepool.lowest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.MultisetExpression.lowest": {"tf": 1}, "icepool.MultisetExpression.highest": {"tf": 1}}, "df": 7}}}}}, "x": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.lowest": {"tf": 1}, "icepool.Die.highest": {"tf": 1}, "icepool.lowest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.MultisetExpression.lowest": {"tf": 1}, "icepool.MultisetExpression.highest": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 2.8284271247461903}, "icepool.MultisetEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.MultisetEvaluator.order": {"tf": 1.7320508075688772}, "icepool.MultisetEvaluator.alignment": {"tf": 2.23606797749979}, "icepool.MultisetEvaluator.validate_arity": {"tf": 1}, "icepool.MultiDeal.__init__": {"tf": 1}, "icepool.evaluator.JointEvaluator.next_state": {"tf": 1}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 2.23606797749979}, "icepool.evaluator.JointEvaluator.validate_arity": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.evaluator.ArgsortEvaluator.order": {"tf": 1.7320508075688772}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1.7320508075688772}, "icepool.evaluator.CompairEvalautor.order": {"tf": 1.7320508075688772}, "icepool.evaluator.ExpressionEvaluator.validate_arity": {"tf": 1}}, "df": 21}}, "w": {"docs": {"icepool.Die.map_to_pool": {"tf": 1}, "icepool.map": {"tf": 1.7320508075688772}, "icepool.map_and_time": {"tf": 1.7320508075688772}, "icepool.map_to_pool": {"tf": 1}, "icepool.MultisetExpression.map_counts": {"tf": 1}, "icepool.MultisetEvaluator.evaluate": {"tf": 1}, "icepool.Deck.map": {"tf": 1.7320508075688772}, "icepool.function.map": {"tf": 1.7320508075688772}, "icepool.function.map_and_time": {"tf": 1.7320508075688772}, "icepool.function.map_to_pool": {"tf": 1}}, "df": 10}, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Symbols": {"tf": 1}, "icepool.MultisetExpression.all_counts": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}}, "df": 6, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.map_and_time": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}}, "df": 2}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"icepool.map": {"tf": 1}, "icepool.function.map": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.multiset_function": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Population.outcomes": {"tf": 1}, "icepool.reduce": {"tf": 1}, "icepool.accumulate": {"tf": 1}, "icepool.Deal.outcomes": {"tf": 1}, "icepool.MultiDeal.outcomes": {"tf": 1}, "icepool.function.reduce": {"tf": 1}, "icepool.function.accumulate": {"tf": 1}}, "df": 7, "d": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Population.marginals": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.function.map": {"tf": 1}}, "df": 4}}}}}}}}, "n": {"docs": {"icepool.Die.sign": {"tf": 1}}, "df": 1}}}, "g": {"docs": {"icepool.d": {"tf": 1}, "icepool.Outcome": {"tf": 1}, "icepool.Die.pool": {"tf": 1}, "icepool.Die.keep": {"tf": 2}, "icepool.Die.zero_outcome": {"tf": 1}, "icepool.Die.equals": {"tf": 1}, "icepool.Population.denominator": {"tf": 1}, "icepool.Population.marginals": {"tf": 1}, "icepool.Symbols": {"tf": 2.449489742783178}, "icepool.Again": {"tf": 1}, "icepool.from_cumulative": {"tf": 1}, "icepool.standard_pool": {"tf": 1}, "icepool.MultisetExpression.all_straights_reduce_counts": {"tf": 1}, "icepool.MultisetExpression.issuperset": {"tf": 1}, "icepool.MultisetEvaluator.evaluate": {"tf": 1}, "icepool.Deck.size": {"tf": 1}, "icepool.multiset_function": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.__init__": {"tf": 1}, "icepool.evaluator.CompairEvalautor": {"tf": 1}, "icepool.function.d": {"tf": 1}, "icepool.function.from_cumulative": {"tf": 1}, "icepool.typing.Outcome": {"tf": 1}}, "df": 23, "e": {"docs": {"icepool.MultisetExpression": {"tf": 1}, "icepool.MultisetExpression.all_counts": {"tf": 1.4142135623730951}}, "df": 2, "t": {"docs": {"icepool": {"tf": 1}, "icepool.Symbols": {"tf": 1}, "icepool.Pool": {"tf": 1}}, "df": 3, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Die.filter": {"tf": 1}}, "df": 1}}}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool": {"tf": 1}}, "df": 1}, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die.keep": {"tf": 1}, "icepool.Pool.denominator": {"tf": 1}, "icepool.MultisetGenerator": {"tf": 1}, "icepool.MultisetGenerator.denominator": {"tf": 1}, "icepool.MultisetGenerator.equals": {"tf": 1}, "icepool.MultisetGenerator.sample": {"tf": 1.4142135623730951}, "icepool.Alignment": {"tf": 1}, "icepool.Alignment.denominator": {"tf": 1}, "icepool.MultisetExpression.unique": {"tf": 1}, "icepool.MultisetExpression.count": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.alignment": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.range_alignment": {"tf": 1}, "icepool.MultisetEvaluator.evaluate": {"tf": 2}, "icepool.MultisetEvaluator.sample": {"tf": 1}, "icepool.Deal.denominator": {"tf": 1}, "icepool.MultiDeal.denominator": {"tf": 1}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 1.4142135623730951}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.KeepEvaluator": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1.4142135623730951}}, "df": 26, "s": {"docs": {"icepool.MultisetGenerator": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 1.7320508075688772}, "icepool.MultisetEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.alignment": {"tf": 1}, "icepool.MultisetEvaluator.range_alignment": {"tf": 1.7320508075688772}, "icepool.MultisetEvaluator.prefix_generators": {"tf": 1}, "icepool.MultisetEvaluator.validate_arity": {"tf": 1.4142135623730951}, "icepool.evaluator.JointEvaluator": {"tf": 1}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 1}, "icepool.evaluator.JointEvaluator.prefix_generators": {"tf": 1}, "icepool.evaluator.JointEvaluator.validate_arity": {"tf": 1.4142135623730951}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"tf": 1.7320508075688772}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"tf": 1.7320508075688772}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"tf": 1.7320508075688772}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"tf": 1.7320508075688772}, "icepool.evaluator.ComparisonEvaluator": {"tf": 1}, "icepool.evaluator.IsSubsetEvaluator": {"tf": 1}, "icepool.evaluator.IsProperSubsetEvaluator": {"tf": 1}, "icepool.evaluator.IsSupersetEvaluator": {"tf": 1}, "icepool.evaluator.IsProperSupersetEvaluator": {"tf": 1}, "icepool.evaluator.IsEqualSetEvaluator": {"tf": 1}, "icepool.evaluator.IsNotEqualSetEvaluator": {"tf": 1}, "icepool.evaluator.IsDisjointSetEvaluator": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.ExpressionEvaluator.prefix_generators": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.validate_arity": {"tf": 1.4142135623730951}}, "df": 28}}}, "e": {"docs": {"icepool.Pool": {"tf": 1}, "icepool.MultisetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1}}, "df": 7, "d": {"docs": {"icepool.Pool.output_arity": {"tf": 1}, "icepool.MultisetGenerator": {"tf": 1.4142135623730951}, "icepool.MultisetGenerator.outcomes": {"tf": 1}, "icepool.MultisetGenerator.output_arity": {"tf": 1}, "icepool.Alignment.outcomes": {"tf": 1}, "icepool.Alignment.output_arity": {"tf": 1}, "icepool.Deal.output_arity": {"tf": 1}, "icepool.MultiDeal.output_arity": {"tf": 1}}, "df": 8}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.MultisetGenerator": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {"icepool.Vector": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {"icepool.coin": {"tf": 1}, "icepool.Die.binary_operator": {"tf": 2}, "icepool.Die.cmp": {"tf": 1}, "icepool.Population.format": {"tf": 2.449489742783178}, "icepool.Vector.binary_operator": {"tf": 2}, "icepool.Symbols": {"tf": 2.23606797749979}, "icepool.Symbols.issubset": {"tf": 1}, "icepool.Symbols.issuperset": {"tf": 1.4142135623730951}, "icepool.Pool.additive_union": {"tf": 1}, "icepool.MultisetExpression": {"tf": 2.23606797749979}, "icepool.MultisetExpression.additive_union": {"tf": 1}, "icepool.MultisetExpression.difference": {"tf": 1}, "icepool.MultisetExpression.intersection": {"tf": 1}, "icepool.MultisetExpression.union": {"tf": 1}, "icepool.MultisetExpression.symmetric_difference": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.multiply_counts": {"tf": 1}, "icepool.MultisetExpression.divide_counts": {"tf": 1}, "icepool.MultisetExpression.modulo_counts": {"tf": 1}, "icepool.MultisetExpression.keep_counts": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.unique": {"tf": 1}, "icepool.MultisetExpression.sort_match": {"tf": 2.23606797749979}, "icepool.MultisetExpression.maximum_match": {"tf": 2}, "icepool.MultisetExpression.evaluate": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.issuperset": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.compair_gt": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.compair_ge": {"tf": 1}, "icepool.MultisetExpression.compair_eq": {"tf": 1}, "icepool.MultisetExpression.compair_ne": {"tf": 1}, "icepool.function.coin": {"tf": 1}}, "df": 29}, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.evaluator.CompairEvalautor.__init__": {"tf": 1}}, "df": 2, "n": {"docs": {"icepool.Die.unary_operator": {"tf": 1}, "icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.truncate": {"tf": 1.4142135623730951}, "icepool.Die.clip": {"tf": 1}, "icepool.Die.set_range": {"tf": 1}, "icepool.from_cumulative": {"tf": 1}, "icepool.Reroll": {"tf": 1}, "icepool.MultisetExpression.difference": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.Order.merge": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.KeepEvaluator": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}, "icepool.function.from_cumulative": {"tf": 1}, "icepool.typing.Order.merge": {"tf": 1}}, "df": 18}, "s": {"docs": {"icepool.Population.quantities": {"tf": 1}, "icepool.Population.probabilities": {"tf": 1}, "icepool.Population.entropy": {"tf": 1}}, "df": 3}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Die.map_to_pool": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.map_and_time": {"tf": 1}, "icepool.map_to_pool": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1}, "icepool.typing.guess_star": {"tf": 1}}, "df": 8}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.simplify": {"tf": 1}, "icepool.Population.max_outcome": {"tf": 1}, "icepool.Population.nearest": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator": {"tf": 1}}, "df": 4}}, "r": {"docs": {"icepool.Die.mean_time_to_sum": {"tf": 1}, "icepool.Die.middle": {"tf": 1}, "icepool.Die.sign": {"tf": 1}, "icepool.Population.nearest": {"tf": 1}, "icepool.Population.quantile_high": {"tf": 1}, "icepool.Population.format": {"tf": 1}, "icepool.MultisetExpression.issubset": {"tf": 1}, "icepool.MultisetExpression.issuperset": {"tf": 1}}, "df": 8}}}}}}, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.split": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.Die.explode_to_pool": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.map_and_time": {"tf": 1}, "icepool.map_to_pool": {"tf": 1}, "icepool.Deck.map": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1}}, "df": 14}, "s": {"docs": {"icepool.typing.guess_star": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {"icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}}, "df": 4, "d": {"docs": {"icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}}, "df": 4}}}}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Pool.clear_cache": {"tf": 1}}, "df": 1, "s": {"docs": {"icepool.multiset_function": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"icepool.MultisetExpression.sort_match": {"tf": 1}}, "df": 1}}}}, "j": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"icepool": {"tf": 1}}, "df": 1}}}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.__init__": {"tf": 1.4142135623730951}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.map_and_time": {"tf": 1}, "icepool.map_to_pool": {"tf": 1}, "icepool.MultisetExpression.all_counts": {"tf": 1}, "icepool.evaluator.SumEvaluator.__init__": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1}}, "df": 10}}}, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.map": {"tf": 1.4142135623730951}, "icepool.map_to_pool": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1}, "icepool.multiset_function": {"tf": 1}, "icepool.function.map": {"tf": 1.4142135623730951}, "icepool.function.map_to_pool": {"tf": 1}}, "df": 6, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.multiset_function": {"tf": 1}}, "df": 1}}}}}}}}}, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.evaluator.JointEvaluator": {"tf": 1}}, "df": 1}}}}}}}, "e": {"docs": {"icepool.d": {"tf": 1}, "icepool.Outcome": {"tf": 1}, "icepool.Die.pool": {"tf": 1}, "icepool.Die.keep": {"tf": 2}, "icepool.Die.zero_outcome": {"tf": 1}, "icepool.Die.equals": {"tf": 1}, "icepool.Population.denominator": {"tf": 1}, "icepool.Population.marginals": {"tf": 1}, "icepool.Symbols": {"tf": 2.449489742783178}, "icepool.Again": {"tf": 1}, "icepool.from_cumulative": {"tf": 1}, "icepool.standard_pool": {"tf": 1}, "icepool.MultisetExpression.difference": {"tf": 1}, "icepool.MultisetExpression.all_counts": {"tf": 1}, "icepool.MultisetExpression.all_straights_reduce_counts": {"tf": 1}, "icepool.MultisetExpression.issuperset": {"tf": 1}, "icepool.MultisetEvaluator.evaluate": {"tf": 1}, "icepool.Deck.size": {"tf": 1}, "icepool.multiset_function": {"tf": 1}, "icepool.evaluator.JointEvaluator.order": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.__init__": {"tf": 1}, "icepool.evaluator.CompairEvalautor": {"tf": 1}, "icepool.function.d": {"tf": 1}, "icepool.function.from_cumulative": {"tf": 1}, "icepool.typing.Outcome": {"tf": 1}}, "df": 26, "x": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.one_hot": {"tf": 1}, "icepool.Die.binary_operator": {"tf": 1}, "icepool.Population.nearest": {"tf": 1}, "icepool.Population.quantities": {"tf": 1}, "icepool.Population.probabilities": {"tf": 1}, "icepool.Population.marginals": {"tf": 1.4142135623730951}, "icepool.tupleize": {"tf": 1}, "icepool.vectorize": {"tf": 1}, "icepool.Symbols": {"tf": 1}, "icepool.Symbols.__init__": {"tf": 1}, "icepool.Again": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.Pool": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.Pool.additive_union": {"tf": 1}, "icepool.MultisetExpression.additive_union": {"tf": 1}, "icepool.MultisetExpression.difference": {"tf": 1}, "icepool.MultisetExpression.intersection": {"tf": 1}, "icepool.MultisetExpression.union": {"tf": 1}, "icepool.MultisetExpression.symmetric_difference": {"tf": 1}, "icepool.MultisetExpression.multiply_counts": {"tf": 1}, "icepool.MultisetExpression.divide_counts": {"tf": 1}, "icepool.MultisetExpression.modulo_counts": {"tf": 1}, "icepool.MultisetExpression.keep_counts": {"tf": 1}, "icepool.MultisetExpression.unique": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.sort_match": {"tf": 1}, "icepool.MultisetExpression.maximum_match": {"tf": 1}, "icepool.MultisetExpression.all_counts": {"tf": 1}, "icepool.MultisetExpression.argsort": {"tf": 1}, "icepool.MultisetExpression.compair_le": {"tf": 1}, "icepool.MultisetExpression.compair_gt": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 1}, "icepool.MultisetEvaluator.range_alignment": {"tf": 1}, "icepool.multiset_function": {"tf": 1.4142135623730951}, "icepool.evaluator.AllCountsEvaluator.__init__": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.CompairEvalautor.__init__": {"tf": 1}, "icepool.function.one_hot": {"tf": 1}, "icepool.function.map": {"tf": 1}}, "df": 42, "s": {"docs": {"icepool": {"tf": 1}, "icepool.Again": {"tf": 1}, "icepool.MultisetExpression.count": {"tf": 1}}, "df": 3}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die.map_to_pool": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.map_to_pool": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1}, "icepool.MultisetExpression.issubset": {"tf": 1}, "icepool.MultisetExpression.issuperset": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1}}, "df": 8}}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.MultisetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1}}, "df": 6}}}}}}, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.explode": {"tf": 2}, "icepool.Die.explode_to_pool": {"tf": 2}, "icepool.map_function": {"tf": 2}, "icepool.function.map_function": {"tf": 2}}, "df": 4, "d": {"docs": {"icepool.Die.explode": {"tf": 1}, "icepool.Die.explode_to_pool": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Die.explode": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die.explode": {"tf": 1}, "icepool.Die.explode_to_pool": {"tf": 1}}, "df": 2}}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"icepool.one_hot": {"tf": 1}, "icepool.MultisetExpression.expand": {"tf": 1}, "icepool.evaluator.ExpandEvaluator": {"tf": 1}, "icepool.function.one_hot": {"tf": 1}}, "df": 4}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Die.__init__": {"tf": 1.4142135623730951}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.Die.explode_to_pool": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.Symbols": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.map_to_pool": {"tf": 1}, "icepool.MultisetGenerator.sample": {"tf": 1}, "icepool.MultisetExpression.sort_match": {"tf": 1}, "icepool.MultisetExpression.maximum_match": {"tf": 1}, "icepool.MultisetExpression.all_straights_reduce_counts": {"tf": 1}, "icepool.MultisetExpression.argsort": {"tf": 1}, "icepool.MultisetExpression.compair_lt": {"tf": 1}, "icepool.MultisetExpression.compair_le": {"tf": 1}, "icepool.MultisetExpression.compair_gt": {"tf": 1}, "icepool.MultisetExpression.compair_ge": {"tf": 1}, "icepool.MultisetExpression.compair_eq": {"tf": 1}, "icepool.MultisetExpression.compair_ne": {"tf": 1}, "icepool.MultisetEvaluator.sample": {"tf": 1}, "icepool.multiset_function": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1}}, "df": 22}}}}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {"icepool.MultisetEvaluator.evaluate": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.MultisetEvaluator": {"tf": 1.4142135623730951}}, "df": 1}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.MultisetEvaluator.range_alignment": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}}, "df": 9}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.map": {"tf": 1}, "icepool.Pool": {"tf": 1}, "icepool.MultisetGenerator.order": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.order": {"tf": 1}, "icepool.MultisetExpression.keep_outcomes": {"tf": 1}, "icepool.MultisetExpression.drop_outcomes": {"tf": 1}, "icepool.MultisetExpression.keep_counts": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1}, "icepool.MultisetExpression.evaluate": {"tf": 1.4142135623730951}, "icepool.multiset_function": {"tf": 1}, "icepool.evaluator.KeepEvaluator": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator": {"tf": 1}, "icepool.function.map": {"tf": 1}}, "df": 14, "s": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Again": {"tf": 1}, "icepool.MultisetGenerator.order": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1}, "icepool.MultisetExpression.order": {"tf": 1}, "icepool.MultisetExpression.evaluate": {"tf": 1}, "icepool.MultisetExpression.argsort": {"tf": 1}}, "df": 7}}}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.map_to_pool": {"tf": 1}, "icepool.map": {"tf": 1.4142135623730951}, "icepool.MultisetExpression": {"tf": 1}, "icepool.multiset_function": {"tf": 1.4142135623730951}, "icepool.function.map": {"tf": 1.4142135623730951}}, "df": 5}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {"icepool.Die.explode": {"tf": 1}, "icepool.Again": {"tf": 1}, "icepool.map_function": {"tf": 1}, "icepool.map_and_time": {"tf": 1}, "icepool.MultisetExpression.sort_match": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.compair_lt": {"tf": 1}, "icepool.MultisetExpression.compair_le": {"tf": 1}, "icepool.MultisetExpression.compair_gt": {"tf": 1}, "icepool.MultisetExpression.compair_ge": {"tf": 1}, "icepool.MultisetExpression.compair_eq": {"tf": 1}, "icepool.MultisetExpression.compair_ne": {"tf": 1}, "icepool.MultisetEvaluator.prefix_generators": {"tf": 1}, "icepool.MultisetEvaluator.validate_arity": {"tf": 1}, "icepool.evaluator.JointEvaluator.prefix_generators": {"tf": 1}, "icepool.evaluator.JointEvaluator.validate_arity": {"tf": 1}, "icepool.evaluator.CompairEvalautor": {"tf": 1}, "icepool.evaluator.CompairEvalautor.__init__": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.prefix_generators": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.validate_arity": {"tf": 1}, "icepool.function.map_function": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}}, "df": 21}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die.reroll_to_pool": {"tf": 1}}, "df": 1}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Again": {"tf": 1.4142135623730951}}, "df": 1}}, "p": {"docs": {}, "df": 0, "t": {"docs": {"icepool.map": {"tf": 1}, "icepool.MultisetExpression.keep_outcomes": {"tf": 1}, "icepool.MultisetExpression.drop_outcomes": {"tf": 1}, "icepool.MultisetExpression.issubset": {"tf": 1}, "icepool.MultisetExpression.issuperset": {"tf": 1}, "icepool.function.map": {"tf": 1}}, "df": 6}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Again": {"tf": 1}}, "df": 1}}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.one_hot": {"tf": 1}, "icepool.Die.__init__": {"tf": 1}, "icepool.Die.binary_operator": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 1.4142135623730951}, "icepool.Population.to_one_hot": {"tf": 1}, "icepool.tupleize": {"tf": 1.4142135623730951}, "icepool.vectorize": {"tf": 1.4142135623730951}, "icepool.Vector.binary_operator": {"tf": 1}, "icepool.accumulate": {"tf": 1}, "icepool.map": {"tf": 1.4142135623730951}, "icepool.map_to_pool": {"tf": 1.4142135623730951}, "icepool.Pool.__init__": {"tf": 1}, "icepool.standard_pool": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.lowest": {"tf": 1}, "icepool.MultisetExpression.highest": {"tf": 1}, "icepool.MultisetExpression.maximum_match": {"tf": 2.8284271247461903}, "icepool.MultisetExpression.all_straights": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator": {"tf": 1}, "icepool.evaluator.KeepEvaluator.__init__": {"tf": 1}, "icepool.evaluator.CompairEvalautor.__init__": {"tf": 1.4142135623730951}, "icepool.function.one_hot": {"tf": 1}, "icepool.function.accumulate": {"tf": 1}, "icepool.function.map": {"tf": 1.4142135623730951}, "icepool.function.map_to_pool": {"tf": 1.4142135623730951}}, "df": 27, "s": {"docs": {"icepool": {"tf": 1}, "icepool.Die.__init__": {"tf": 1}, "icepool.Die.keep": {"tf": 1.7320508075688772}, "icepool.Population.marginals": {"tf": 1}, "icepool.Vector.binary_operator": {"tf": 1}, "icepool.Symbols.isdisjoint": {"tf": 1.4142135623730951}, "icepool.Symbols.count": {"tf": 1}, "icepool.Again": {"tf": 1}, "icepool.accumulate": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.Pool.additive_union": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.additive_union": {"tf": 1}, "icepool.MultisetExpression.difference": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.intersection": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.symmetric_difference": {"tf": 1}, "icepool.MultisetExpression.keep_outcomes": {"tf": 1}, "icepool.MultisetExpression.drop_outcomes": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.lowest": {"tf": 2.23606797749979}, "icepool.MultisetExpression.highest": {"tf": 2.23606797749979}, "icepool.MultisetExpression.sort_match": {"tf": 2.6457513110645907}, "icepool.MultisetExpression.maximum_match": {"tf": 3.7416573867739413}, "icepool.MultisetExpression.expand": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.sum": {"tf": 1}, "icepool.MultisetExpression.count": {"tf": 1}, "icepool.MultisetExpression.largest_count": {"tf": 1}, "icepool.MultisetExpression.largest_count_and_outcome": {"tf": 1}, "icepool.MultisetExpression.largest_straight": {"tf": 1}, "icepool.MultisetExpression.largest_straight_and_outcome": {"tf": 1}, "icepool.MultisetExpression.all_straights": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.compair_lt": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.compair_le": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.compair_gt": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.compair_ge": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.compair_eq": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.compair_ne": {"tf": 1.7320508075688772}, "icepool.Deck.__init__": {"tf": 1}, "icepool.multiset_function": {"tf": 1}, "icepool.evaluator.ExpandEvaluator": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator": {"tf": 1.4142135623730951}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.__init__": {"tf": 1}, "icepool.evaluator.CompairEvalautor": {"tf": 1}, "icepool.evaluator.CompairEvalautor.__init__": {"tf": 1}, "icepool.function.accumulate": {"tf": 1}}, "df": 45}, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Vector": {"tf": 1}, "icepool.Vector.unary_operator": {"tf": 1}, "icepool.Vector.binary_operator": {"tf": 1}}, "df": 3}}}}}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die.keep": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1.4142135623730951}}, "df": 2}}}}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.reroll_to_pool": {"tf": 2.449489742783178}}, "df": 1}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"icepool.map_function": {"tf": 1.4142135623730951}, "icepool.MultisetExpression": {"tf": 1.7320508075688772}, "icepool.function.map_function": {"tf": 1.4142135623730951}}, "df": 3}}}, "t": {"docs": {}, "df": 0, "c": {"docs": {"icepool": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1}, "icepool.MultisetExpression.keep_counts": {"tf": 1}, "icepool.evaluator.CountEvaluator": {"tf": 1}}, "df": 4}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.z": {"tf": 1}, "icepool.Die.mean_time_to_sum": {"tf": 1}, "icepool.Die.keep": {"tf": 1.4142135623730951}, "icepool.Die.cmp": {"tf": 1}, "icepool.Die.equals": {"tf": 1}, "icepool.Symbols": {"tf": 1}, "icepool.accumulate": {"tf": 1}, "icepool.map_and_time": {"tf": 1}, "icepool.MultisetGenerator.equals": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.maximum_match": {"tf": 1}, "icepool.MultisetExpression.argsort": {"tf": 1}, "icepool.MultisetExpression.issubset": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.issuperset": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1}, "icepool.function.z": {"tf": 1}, "icepool.function.accumulate": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}}, "df": 23, "s": {"docs": {"icepool.Die.equals": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.binary_operator": {"tf": 1}, "icepool.Die.split": {"tf": 1}}, "df": 2}}}}}}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"icepool.stochastic_round": {"tf": 1}, "icepool.one_hot": {"tf": 1}, "icepool.Die.__init__": {"tf": 2}, "icepool.Die.binary_operator": {"tf": 1}, "icepool.Die.truncate": {"tf": 1}, "icepool.Die.keep": {"tf": 1.7320508075688772}, "icepool.Die.reroll_to_pool": {"tf": 1.4142135623730951}, "icepool.Die.stochastic_round": {"tf": 1}, "icepool.Population": {"tf": 1}, "icepool.Population.probabilities": {"tf": 1}, "icepool.Population.to_one_hot": {"tf": 1}, "icepool.Population.format": {"tf": 1.7320508075688772}, "icepool.Vector.binary_operator": {"tf": 1.4142135623730951}, "icepool.Symbols": {"tf": 1}, "icepool.Symbols.additive_union": {"tf": 1}, "icepool.Symbols.difference": {"tf": 1}, "icepool.Symbols.intersection": {"tf": 1}, "icepool.Symbols.union": {"tf": 1}, "icepool.Again": {"tf": 1.4142135623730951}, "icepool.reduce": {"tf": 1}, "icepool.accumulate": {"tf": 1.4142135623730951}, "icepool.map_and_time": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1.4142135623730951}, "icepool.standard_pool": {"tf": 1}, "icepool.MultisetGenerator": {"tf": 1}, "icepool.MultisetGenerator.sample": {"tf": 1}, "icepool.MultisetExpression.union": {"tf": 1}, "icepool.MultisetExpression.unique": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.keep": {"tf": 1}, "icepool.MultisetExpression.count": {"tf": 1}, "icepool.MultisetExpression.all_straights": {"tf": 1}, "icepool.MultisetExpression.argsort": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.issubset": {"tf": 1}, "icepool.MultisetExpression.issuperset": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.evaluate": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1.7320508075688772}, "icepool.Deck.difference": {"tf": 1}, "icepool.Deck.union": {"tf": 1}, "icepool.Deck.symmetric_difference": {"tf": 1}, "icepool.Deck.map": {"tf": 1}, "icepool.Deal.hand_sizes": {"tf": 1}, "icepool.MultiDeal.__init__": {"tf": 1}, "icepool.MultiDeal.hand_sizes": {"tf": 1}, "icepool.multiset_function": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.AllStraightsEvaluator": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.__init__": {"tf": 1.4142135623730951}, "icepool.evaluator.ComparisonEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsSubsetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsProperSubsetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsSupersetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsProperSupersetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsEqualSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsNotEqualSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsDisjointSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.ArgsortEvaluator": {"tf": 1}, "icepool.evaluator.CompairEvalautor.__init__": {"tf": 2}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.ExpressionEvaluator": {"tf": 1}, "icepool.function.stochastic_round": {"tf": 1}, "icepool.function.one_hot": {"tf": 1}, "icepool.function.reduce": {"tf": 1}, "icepool.function.accumulate": {"tf": 1.4142135623730951}, "icepool.function.map_and_time": {"tf": 1}}, "df": 66}}, "s": {"docs": {}, "df": 0, "y": {"docs": {"icepool.one_hot": {"tf": 1}, "icepool.function.one_hot": {"tf": 1}}, "df": 2}}, "r": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.map_and_time": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}}, "df": 2}}}}, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Outcome": {"tf": 1}, "icepool.Alignment": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}, "icepool.typing.Outcome": {"tf": 1}}, "df": 7}}}}}, "d": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.if_else": {"tf": 1}, "icepool.Again": {"tf": 2}, "icepool.reduce": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.map_function": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1.4142135623730951}, "icepool.function.reduce": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.function.map_function": {"tf": 1}}, "df": 11, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.truncate": {"tf": 1}, "icepool.Die.clip": {"tf": 1}}, "df": 2, "s": {"docs": {"icepool.Die.truncate": {"tf": 1}, "icepool.Die.clip": {"tf": 1}}, "df": 2}}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.reroll_to_pool": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {"icepool.Die.keep": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1}, "icepool.evaluator.KeepEvaluator": {"tf": 1}}, "df": 3}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Population.entropy": {"tf": 1.4142135623730951}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Again": {"tf": 1.4142135623730951}, "icepool.reduce": {"tf": 1}, "icepool.Reroll": {"tf": 1.4142135623730951}, "icepool.Deck.__init__": {"tf": 1}, "icepool.function.reduce": {"tf": 1}}, "df": 5}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die": {"tf": 1}, "icepool.lowest": {"tf": 1.4142135623730951}, "icepool.highest": {"tf": 1.4142135623730951}, "icepool.middle": {"tf": 1.4142135623730951}, "icepool.Pool": {"tf": 1}, "icepool.standard_pool": {"tf": 1}, "icepool.MultisetExpression.difference": {"tf": 1}, "icepool.MultisetExpression.count_subset": {"tf": 2.23606797749979}, "icepool.Deal.__init__": {"tf": 1.4142135623730951}, "icepool.MultiDeal.__init__": {"tf": 1.4142135623730951}, "icepool.evaluator.CountSubsetEvaluator.__init__": {"tf": 1.7320508075688772}}, "df": 11}}}, "o": {"docs": {}, "df": 0, "j": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Symbols": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {"icepool.MultisetExpression.argsort": {"tf": 1.4142135623730951}}, "df": 1, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.MultisetExpression.argsort": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Symbols.isdisjoint": {"tf": 1}, "icepool.map_function": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.MultisetExpression.difference": {"tf": 1}, "icepool.MultisetExpression.intersection": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}, "icepool.function.map_function": {"tf": 1}}, "df": 12}}}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die.filter": {"tf": 1}}, "df": 1}}}}}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Pool.__init__": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1}, "icepool.MultiDeal.__init__": {"tf": 1}}, "df": 3}}}}}}}}}, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.keep": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.Symbols": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1}, "icepool.MultisetEvaluator.evaluate": {"tf": 1}}, "df": 5, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die.truncate": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.Again": {"tf": 1}, "icepool.reduce": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.Reroll": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.multiset_function": {"tf": 1.4142135623730951}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}, "icepool.function.reduce": {"tf": 1}, "icepool.function.map": {"tf": 1}}, "df": 13}}}}}, "s": {"docs": {"icepool.multiset_function": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.map_to_pool": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.map": {"tf": 1.4142135623730951}, "icepool.Pool.__init__": {"tf": 1}, "icepool.function.map": {"tf": 1.4142135623730951}}, "df": 5}}}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Die.middle": {"tf": 1}, "icepool.Die.cmp": {"tf": 1}, "icepool.Die.equals": {"tf": 1}, "icepool.Population.sample": {"tf": 1}, "icepool.middle": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.alignment": {"tf": 1}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1.4142135623730951}, "icepool.function.map": {"tf": 1}}, "df": 14}, "r": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Again": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"icepool.MultisetExpression.all_straights_reduce_counts": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.MultisetEvaluator.evaluate": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}}, "df": 7, "d": {"docs": {"icepool.Die.equals": {"tf": 1}, "icepool.MultisetExpression.lowest": {"tf": 1}, "icepool.MultisetExpression.highest": {"tf": 1}, "icepool.MultisetExpression.maximum_match": {"tf": 2}, "icepool.MultisetExpression.evaluate": {"tf": 1}, "icepool.MultisetExpression.argsort": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator": {"tf": 1}}, "df": 7}, "s": {"docs": {"icepool.MultisetExpression.keep": {"tf": 1}, "icepool.MultisetExpression.issubset": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.issuperset": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.isdisjoint": {"tf": 1}, "icepool.MultisetEvaluator.evaluate": {"tf": 1}, "icepool.MultisetEvaluator.sample": {"tf": 1}, "icepool.evaluator.JointEvaluator": {"tf": 1}}, "df": 7}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Reroll": {"tf": 1}, "icepool.Alignment": {"tf": 1}, "icepool.MultisetExpression.lowest": {"tf": 1}, "icepool.MultisetExpression.highest": {"tf": 1}, "icepool.MultisetExpression.expand": {"tf": 1}, "icepool.MultisetExpression.sum": {"tf": 1}, "icepool.MultisetExpression.count": {"tf": 1}, "icepool.MultisetExpression.any": {"tf": 1}, "icepool.MultisetExpression.highest_outcome_and_count": {"tf": 1}, "icepool.MultisetExpression.all_counts": {"tf": 1}, "icepool.MultisetExpression.largest_count": {"tf": 1}, "icepool.MultisetExpression.largest_count_and_outcome": {"tf": 1}, "icepool.MultisetExpression.count_subset": {"tf": 1}, "icepool.MultisetExpression.largest_straight": {"tf": 1}, "icepool.MultisetExpression.largest_straight_and_outcome": {"tf": 1}, "icepool.MultisetExpression.all_straights": {"tf": 1}, "icepool.MultisetExpression.issubset": {"tf": 1}, "icepool.MultisetExpression.issuperset": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.isdisjoint": {"tf": 1}, "icepool.MultisetExpression.compair_lt": {"tf": 1}, "icepool.MultisetExpression.compair_le": {"tf": 1}, "icepool.MultisetExpression.compair_gt": {"tf": 1}, "icepool.MultisetExpression.compair_ge": {"tf": 1}, "icepool.MultisetExpression.compair_eq": {"tf": 1}, "icepool.MultisetExpression.compair_ne": {"tf": 1}, "icepool.MultisetEvaluator.order": {"tf": 1}, "icepool.Deck": {"tf": 1}, "icepool.multiset_function": {"tf": 1.7320508075688772}, "icepool.evaluator.ArgsortEvaluator.order": {"tf": 1}, "icepool.evaluator.CompairEvalautor.order": {"tf": 1}}, "df": 30, "s": {"docs": {"icepool.MultisetGenerator": {"tf": 1.4142135623730951}, "icepool.MultisetExpression": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.evaluate": {"tf": 1}}, "df": 3}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.MultisetExpression": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.evaluate": {"tf": 1.7320508075688772}, "icepool.multiset_function": {"tf": 1.4142135623730951}, "icepool.evaluator.JointEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.JointEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ConstantEvaluator": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator": {"tf": 1}}, "df": 7, "s": {"docs": {"icepool.Pool.__init__": {"tf": 1}, "icepool.MultisetEvaluator.evaluate": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1}, "icepool.MultiDeal.__init__": {"tf": 1}, "icepool.multiset_function": {"tf": 1}, "icepool.evaluator": {"tf": 1}, "icepool.evaluator.JointEvaluator": {"tf": 1}, "icepool.evaluator.JointEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.JointEvaluator.order": {"tf": 1.4142135623730951}}, "df": 9}}}}}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Pool.__init__": {"tf": 1}}, "df": 1}}, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.MultisetEvaluator": {"tf": 1}}, "df": 1}}}}}}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die.middle": {"tf": 1}, "icepool.middle": {"tf": 1}}, "df": 2}}}}}, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {"icepool.evaluator.AllStraightsReduceCountsEvaluator.__init__": {"tf": 1}}, "df": 1, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Symbols": {"tf": 1}, "icepool.Symbols.count_subset": {"tf": 1}, "icepool.Pool": {"tf": 1.7320508075688772}, "icepool.MultisetGenerator": {"tf": 1}, "icepool.Alignment": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1}, "icepool.MultisetExpression.difference": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.intersection": {"tf": 1}, "icepool.MultisetExpression.symmetric_difference": {"tf": 1}, "icepool.MultisetExpression.lowest": {"tf": 1}, "icepool.MultisetExpression.highest": {"tf": 1}, "icepool.MultisetExpression.sort_match": {"tf": 1}, "icepool.MultisetExpression.maximum_match": {"tf": 1}, "icepool.MultisetExpression.expand": {"tf": 1}, "icepool.MultisetExpression.count": {"tf": 1}, "icepool.MultisetExpression.any": {"tf": 1}, "icepool.MultisetExpression.count_subset": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.argsort": {"tf": 1}, "icepool.MultisetExpression.issubset": {"tf": 2.449489742783178}, "icepool.MultisetExpression.issuperset": {"tf": 2.449489742783178}, "icepool.MultisetExpression.isdisjoint": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.compair_lt": {"tf": 1}, "icepool.MultisetExpression.compair_le": {"tf": 1}, "icepool.MultisetExpression.compair_gt": {"tf": 1}, "icepool.MultisetExpression.compair_ge": {"tf": 1}, "icepool.MultisetExpression.compair_eq": {"tf": 1}, "icepool.MultisetExpression.compair_ne": {"tf": 1}, "icepool.multiset_function": {"tf": 2.6457513110645907}, "icepool.evaluator.ExpandEvaluator": {"tf": 1}}, "df": 29, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die": {"tf": 1.4142135623730951}, "icepool.map": {"tf": 1}, "icepool.Reroll": {"tf": 1}, "icepool.Pool": {"tf": 1}, "icepool.MultisetGenerator": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1}, "icepool.MultisetExpression.evaluate": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator": {"tf": 1}, "icepool.MultisetEvaluator.alignment": {"tf": 1}, "icepool.MultisetEvaluator.range_alignment": {"tf": 1}, "icepool.MultisetEvaluator.evaluate": {"tf": 1}, "icepool.MultiDeal.__init__": {"tf": 1}, "icepool.multiset_function": {"tf": 1.4142135623730951}, "icepool.evaluator.JointEvaluator": {"tf": 1}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"tf": 1}, "icepool.function.map": {"tf": 1}}, "df": 20, "s": {"docs": {"icepool.Order": {"tf": 1}, "icepool.typing.Order": {"tf": 1}}, "df": 2}}}}}}}}}, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.map": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.evaluate": {"tf": 1}, "icepool.MultisetExpression.argsort": {"tf": 1}, "icepool.MultisetEvaluator.evaluate": {"tf": 1}, "icepool.multiset_function": {"tf": 1}, "icepool.function.map": {"tf": 1.7320508075688772}}, "df": 6}}}}}}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die.map_to_pool": {"tf": 1.4142135623730951}, "icepool.Die.explode_to_pool": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.map_to_pool": {"tf": 2}, "icepool.MultisetGenerator": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 2}}, "df": 8}}}}}}}}}, "s": {"docs": {"icepool.Pool.additive_union": {"tf": 1}, "icepool.MultisetGenerator": {"tf": 1.4142135623730951}, "icepool.MultisetExpression": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.additive_union": {"tf": 1}, "icepool.MultisetExpression.intersection": {"tf": 1}, "icepool.MultisetExpression.union": {"tf": 1}, "icepool.MultisetExpression.argsort": {"tf": 1}, "icepool.MultisetExpression.issubset": {"tf": 1}, "icepool.MultisetExpression.issuperset": {"tf": 1}, "icepool.MultisetExpression.isdisjoint": {"tf": 1}, "icepool.MultisetEvaluator.evaluate": {"tf": 1}, "icepool.multiset_function": {"tf": 1.4142135623730951}, "icepool.evaluator.ComparisonEvaluator": {"tf": 1}, "icepool.evaluator.IsSubsetEvaluator": {"tf": 1}, "icepool.evaluator.IsProperSubsetEvaluator": {"tf": 1}, "icepool.evaluator.IsSupersetEvaluator": {"tf": 1}, "icepool.evaluator.IsProperSupersetEvaluator": {"tf": 1}, "icepool.evaluator.IsEqualSetEvaluator": {"tf": 1}, "icepool.evaluator.IsNotEqualSetEvaluator": {"tf": 1}, "icepool.evaluator.IsDisjointSetEvaluator": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator": {"tf": 1}, "icepool.evaluator.CompairEvalautor": {"tf": 1}, "icepool.evaluator.CompairEvalautor.__init__": {"tf": 1}}, "df": 23, "/": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Pool.output_arity": {"tf": 1}, "icepool.MultisetGenerator.output_arity": {"tf": 1}, "icepool.Alignment.output_arity": {"tf": 1}, "icepool.Deal.output_arity": {"tf": 1}, "icepool.MultiDeal.output_arity": {"tf": 1}}, "df": 5}}}}}}}}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Symbols.multiply_counts": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.MultisetExpression.multiply_counts": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}}, "df": 5}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Die.lowest": {"tf": 1}, "icepool.Die.highest": {"tf": 1}, "icepool.Die.middle": {"tf": 1}, "icepool.lowest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.middle": {"tf": 1}}, "df": 6}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"icepool.MultisetExpression.keep_outcomes": {"tf": 1}, "icepool.MultisetExpression.drop_outcomes": {"tf": 1}}, "df": 2}}}}}, "e": {"docs": {"icepool.Die.keep": {"tf": 1}, "icepool.Symbols": {"tf": 1}, "icepool.MultisetGenerator": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.Deck.multiply_counts": {"tf": 1}, "icepool.MultiDeal": {"tf": 1}, "icepool.MultiDeal.__init__": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}}, "df": 10}, "y": {"docs": {"icepool.Symbols": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Die.zero": {"tf": 1}}, "df": 1}}}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.__init__": {"tf": 1.4142135623730951}, "icepool.Die.binary_operator": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.Population": {"tf": 1}, "icepool.Population.nearest": {"tf": 1}, "icepool.tupleize": {"tf": 1}, "icepool.vectorize": {"tf": 1}, "icepool.Vector.binary_operator": {"tf": 1}, "icepool.from_rv": {"tf": 1}, "icepool.map": {"tf": 1.4142135623730951}, "icepool.map_function": {"tf": 1}, "icepool.map_to_pool": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.Pool.output_arity": {"tf": 1}, "icepool.MultisetGenerator.output_arity": {"tf": 1}, "icepool.Alignment.output_arity": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.largest_straight": {"tf": 1}, "icepool.MultisetExpression.largest_straight_and_outcome": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.evaluate": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1}, "icepool.Deal.output_arity": {"tf": 1}, "icepool.MultiDeal.__init__": {"tf": 1}, "icepool.MultiDeal.output_arity": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.KeepEvaluator": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1.4142135623730951}, "icepool.function.from_rv": {"tf": 1}, "icepool.function.map": {"tf": 1.4142135623730951}, "icepool.function.map_function": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1}}, "df": 34}}, "c": {"docs": {}, "df": 0, "h": {"docs": {"icepool.Die.map_to_pool": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.d": {"tf": 1}, "icepool.function.d": {"tf": 1}}, "df": 2}, "o": {"docs": {"icepool.MultisetExpression": {"tf": 1}, "icepool.Deck.modulo_counts": {"tf": 1}}, "df": 2}}, "o": {"docs": {}, "df": 0, "s": {"docs": {"icepool.MultisetExpression.modulo_counts": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.map_and_time": {"tf": 1}, "icepool.Reroll": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}}, "df": 4}}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.MultisetEvaluator": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {"icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.Again": {"tf": 2.23606797749979}}, "df": 2, "s": {"docs": {"icepool.Die.reroll_to_pool": {"tf": 1}}, "df": 1}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die": {"tf": 1.4142135623730951}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.Die.explode_to_pool": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.Population.mode": {"tf": 1}, "icepool.Vector": {"tf": 1}, "icepool.Again": {"tf": 1}, "icepool.map_to_pool": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.MultisetGenerator": {"tf": 1}, "icepool.MultisetExpression.union": {"tf": 1}, "icepool.MultisetExpression.unique": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator": {"tf": 1}, "icepool.MultisetEvaluator.evaluate": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1}}, "df": 15, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.keep": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1.7320508075688772}, "icepool.Symbols": {"tf": 1.4142135623730951}, "icepool.Again": {"tf": 1}, "icepool.lowest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.middle": {"tf": 1}, "icepool.map": {"tf": 1.4142135623730951}, "icepool.MultisetGenerator": {"tf": 1.4142135623730951}, "icepool.MultisetExpression": {"tf": 1}, "icepool.MultisetExpression.sort_match": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 1}, "icepool.Deck.union": {"tf": 1}, "icepool.Deck.symmetric_difference": {"tf": 1}, "icepool.function.map": {"tf": 1.4142135623730951}}, "df": 15}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}}, "df": 4}}}}}}}}, "a": {"docs": {}, "df": 0, "x": {"docs": {"icepool.stochastic_round": {"tf": 1.4142135623730951}, "icepool.Die.set_range": {"tf": 1.7320508075688772}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.explode_to_pool": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1.7320508075688772}, "icepool.Die.stochastic_round": {"tf": 1.4142135623730951}, "icepool.Symbols": {"tf": 1}, "icepool.Symbols.union": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.Pool.max_outcome": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1}, "icepool.MultisetEvaluator.range_alignment": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"tf": 1}, "icepool.function.stochastic_round": {"tf": 1.4142135623730951}}, "df": 17, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {"icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.explode_to_pool": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.Population.kolmogorov_smirnov": {"tf": 1}, "icepool.max_outcome": {"tf": 1}, "icepool.map_and_time": {"tf": 1}, "icepool.MultisetExpression.sort_match": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.maximum_match": {"tf": 1.4142135623730951}, "icepool.function.max_outcome": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}}, "df": 12}}}}}, "n": {"docs": {}, "df": 0, "y": {"docs": {"icepool.one_hot": {"tf": 1}, "icepool.Die.binary_operator": {"tf": 1}, "icepool.Die.count": {"tf": 1}, "icepool.Die.keep": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.map_and_time": {"tf": 1}, "icepool.Reroll": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.standard_pool": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.maximum_match": {"tf": 1}, "icepool.MultisetExpression.argsort": {"tf": 1}, "icepool.MultisetExpression.compair_lt": {"tf": 1}, "icepool.MultisetExpression.compair_le": {"tf": 1}, "icepool.MultisetExpression.compair_gt": {"tf": 1}, "icepool.MultisetExpression.compair_ge": {"tf": 1}, "icepool.MultisetExpression.compair_eq": {"tf": 1}, "icepool.MultisetExpression.compair_ne": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}, "icepool.Deck.union": {"tf": 1}, "icepool.Deck.symmetric_difference": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1}, "icepool.MultiDeal.__init__": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.__init__": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}, "icepool.function.one_hot": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}}, "df": 34}}, "k": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Die": {"tf": 1}}, "df": 1}}}, "e": {"docs": {"icepool.Die.explode": {"tf": 1}, "icepool.Die.keep": {"tf": 1.4142135623730951}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.MultisetEvaluator.validate_arity": {"tf": 1}, "icepool.evaluator.JointEvaluator.validate_arity": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.validate_arity": {"tf": 1}}, "df": 10, "s": {"docs": {"icepool.MultisetExpression.argsort": {"tf": 1}}, "df": 1}}}, "p": {"docs": {"icepool.Die.map": {"tf": 1}, "icepool.Die.map_and_time": {"tf": 1.4142135623730951}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.Again": {"tf": 1}, "icepool.reduce": {"tf": 1.4142135623730951}, "icepool.accumulate": {"tf": 1.4142135623730951}, "icepool.map": {"tf": 2.23606797749979}, "icepool.map_function": {"tf": 2}, "icepool.map_and_time": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1}, "icepool.Deck.map": {"tf": 1}, "icepool.evaluator.SumEvaluator.__init__": {"tf": 1}, "icepool.function.reduce": {"tf": 1.4142135623730951}, "icepool.function.accumulate": {"tf": 1.4142135623730951}, "icepool.function.map": {"tf": 2.23606797749979}, "icepool.function.map_function": {"tf": 2}, "icepool.function.map_and_time": {"tf": 1}}, "df": 17, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.Die.unary_operator": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.Population": {"tf": 1}, "icepool.Population.outcomes": {"tf": 1.4142135623730951}, "icepool.Population.quantities": {"tf": 1}, "icepool.Population.format": {"tf": 1}, "icepool.Symbols.__init__": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.map_and_time": {"tf": 1}, "icepool.map_to_pool": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.standard_pool": {"tf": 1}, "icepool.MultisetEvaluator.evaluate": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}, "icepool.Deal.outcomes": {"tf": 1}, "icepool.MultiDeal.outcomes": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1}}, "df": 20}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Population.to_one_hot": {"tf": 1}, "icepool.evaluator.SumEvaluator.__init__": {"tf": 1}}, "df": 2}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.MultisetEvaluator.evaluate": {"tf": 1}}, "df": 1}}}}}, "s": {"docs": {"icepool.Die.map": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.MultisetExpression.map_counts": {"tf": 1}, "icepool.Deck.map": {"tf": 1}}, "df": 4}}, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Symbols": {"tf": 1}}, "df": 1, "s": {"docs": {"icepool.Die.unary_operator": {"tf": 1}, "icepool.Population.marginals": {"tf": 1}, "icepool.Symbols": {"tf": 1.4142135623730951}}, "df": 3, "[": {"docs": {}, "df": 0, ":": {"2": {"docs": {"icepool.Population.marginals": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}}}, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Population.marginals": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}, "k": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Population.format": {"tf": 1}}, "df": 1}}}}}}, "y": {"docs": {"icepool.Die.set_range": {"tf": 1}, "icepool.Die.set_outcomes": {"tf": 1}, "icepool.Die.keep": {"tf": 1.7320508075688772}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.Die.equals": {"tf": 1}, "icepool.Population.format": {"tf": 1.4142135623730951}, "icepool.Vector": {"tf": 1}, "icepool.Symbols": {"tf": 1}, "icepool.Again": {"tf": 1}, "icepool.from_cumulative": {"tf": 1}, "icepool.reduce": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.map_and_time": {"tf": 1}, "icepool.map_to_pool": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.MultisetExpression.count_subset": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.MultisetEvaluator.alignment": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.evaluate": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}, "icepool.Deck.map": {"tf": 1}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 1.4142135623730951}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1.7320508075688772}, "icepool.function.from_cumulative": {"tf": 1}, "icepool.function.reduce": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1}, "icepool.typing.Qs": {"tf": 1}}, "df": 33}, "d": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.map_to_pool": {"tf": 1}, "icepool.map_to_pool": {"tf": 1}, "icepool.evaluator.CompairEvalautor.__init__": {"tf": 1.4142135623730951}, "icepool.function.map_to_pool": {"tf": 1}}, "df": 4}}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die.equals": {"tf": 1}}, "df": 1}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {"icepool.MultisetExpression.sort_match": {"tf": 2}, "icepool.MultisetExpression.maximum_match": {"tf": 2}}, "df": 2, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Pool": {"tf": 1}, "icepool.MultisetExpression.all_counts": {"tf": 1}, "icepool.MultisetExpression.largest_count": {"tf": 1}, "icepool.MultisetExpression.largest_count_and_outcome": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator": {"tf": 1}}, "df": 5}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool.MultisetExpression.sort_match": {"tf": 1.4142135623730951}}, "df": 1}, "d": {"docs": {"icepool.MultisetExpression.maximum_match": {"tf": 3}, "icepool.MultisetExpression.compair_lt": {"tf": 1}, "icepool.MultisetExpression.compair_le": {"tf": 1}, "icepool.MultisetExpression.compair_gt": {"tf": 1}, "icepool.MultisetExpression.compair_ge": {"tf": 1}, "icepool.MultisetExpression.compair_eq": {"tf": 1}, "icepool.MultisetExpression.compair_ne": {"tf": 1}}, "df": 7}}}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.binary_operator": {"tf": 1}, "icepool.Die.pool": {"tf": 1}, "icepool.Die.equals": {"tf": 1}, "icepool.Symbols": {"tf": 1}, "icepool.Reroll": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 1}, "icepool.MultisetEvaluator.alignment": {"tf": 1}, "icepool.MultisetEvaluator.validate_arity": {"tf": 1}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 1}, "icepool.evaluator.JointEvaluator.validate_arity": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.validate_arity": {"tf": 1}}, "df": 12, "s": {"docs": {"icepool.Die": {"tf": 1.4142135623730951}, "icepool.Die.__init__": {"tf": 1}, "icepool.Die.unary_operator": {"tf": 1}, "icepool.Die.equals": {"tf": 1}, "icepool.Again": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.MultisetGenerator": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1}, "icepool.MultisetExpression.evaluate": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 1.4142135623730951}, "icepool.function.map": {"tf": 1}}, "df": 11}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Die.mean_time_to_sum": {"tf": 1.4142135623730951}, "icepool.Population.median": {"tf": 1}, "icepool.Population.quantile": {"tf": 1}}, "df": 3, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Vector.binary_operator": {"tf": 1}, "icepool.Pool": {"tf": 1}}, "df": 2}}}, "s": {"docs": {"icepool.Again": {"tf": 1}, "icepool.MultisetExpression.evaluate": {"tf": 1}, "icepool.MultisetEvaluator.alignment": {"tf": 1}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 1}}, "df": 4}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Population.median": {"tf": 1.7320508075688772}, "icepool.Population.median_low": {"tf": 1}, "icepool.Population.median_high": {"tf": 1}}, "df": 3}}}}, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Deck.multiply_counts": {"tf": 1}}, "df": 1, "s": {"docs": {"icepool.Order.merge": {"tf": 1}, "icepool.typing.Order.merge": {"tf": 1}}, "df": 2}, "d": {"docs": {"icepool.Deck.additive_union": {"tf": 1}}, "df": 1}}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "s": {"docs": {"icepool.evaluator.CompairEvalautor": {"tf": 1}}, "df": 1}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Die.reroll": {"tf": 1}, "icepool.Die.set_range": {"tf": 1.7320508075688772}, "icepool.Symbols": {"tf": 1}, "icepool.Symbols.intersection": {"tf": 1}, "icepool.lowest": {"tf": 1}, "icepool.Pool.min_outcome": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.highest_outcome_and_count": {"tf": 1}, "icepool.MultisetEvaluator.range_alignment": {"tf": 1}, "icepool.evaluator.HighestOutcomeAndCountEvaluator": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"tf": 1}}, "df": 14, "d": {"docs": {"icepool.Die": {"tf": 1}}, "df": 1}, "i": {"docs": {"icepool.multiset_function": {"tf": 1}}, "df": 1, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.__init__": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {"icepool.Die.map_to_pool": {"tf": 1}, "icepool.min_outcome": {"tf": 1}, "icepool.map_to_pool": {"tf": 1}, "icepool.MultiDeal.__init__": {"tf": 1}, "icepool.function.min_outcome": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1}}, "df": 6}}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Symbols.__init__": {"tf": 1}}, "df": 1}}}, "x": {"docs": {"icepool.Die.__init__": {"tf": 1}}, "df": 1, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.map_to_pool": {"tf": 1.7320508075688772}, "icepool.Die.explode_to_pool": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.tupleize": {"tf": 1}, "icepool.vectorize": {"tf": 1}, "icepool.map_to_pool": {"tf": 1.4142135623730951}, "icepool.function.map_to_pool": {"tf": 1.4142135623730951}}, "df": 7}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.MultisetEvaluator.order": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.order": {"tf": 1}, "icepool.evaluator.CompairEvalautor.order": {"tf": 1}}, "df": 3}}}, "s": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.unary_operator": {"tf": 1}, "icepool.Die.binary_operator": {"tf": 1}}, "df": 2}}}}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Die.keep": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Population.cramer_von_mises": {"tf": 1}}, "df": 1}}}, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.pool": {"tf": 1}, "icepool.MultisetExpression.all_counts": {"tf": 1}}, "df": 2}}}, "d": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.keep": {"tf": 1}, "icepool.Die.middle": {"tf": 1}, "icepool.middle": {"tf": 1.4142135623730951}}, "df": 3}}}}}, "d": {"docs": {"icepool.Population.format": {"tf": 1}}, "df": 1}}, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {"icepool": {"tf": 1}, "icepool.Die": {"tf": 2.23606797749979}, "icepool.Die.__init__": {"tf": 1}, "icepool.Die.unary_operator": {"tf": 1}, "icepool.Die.set_range": {"tf": 1}, "icepool.Die.set_outcomes": {"tf": 1}, "icepool.Die.trim": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.keep": {"tf": 1.4142135623730951}, "icepool.Die.zero_outcome": {"tf": 1}, "icepool.Die.cmp": {"tf": 1}, "icepool.Die.sign": {"tf": 1.4142135623730951}, "icepool.Die.equals": {"tf": 1}, "icepool.Population.denominator": {"tf": 1}, "icepool.Population.has_zero_quantities": {"tf": 1}, "icepool.Symbols": {"tf": 1}, "icepool.align": {"tf": 1}, "icepool.align_range": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.Pool.additive_union": {"tf": 1}, "icepool.standard_pool": {"tf": 1}, "icepool.MultisetExpression.additive_union": {"tf": 1}, "icepool.MultisetExpression.difference": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.intersection": {"tf": 1}, "icepool.MultisetExpression.union": {"tf": 1}, "icepool.MultisetExpression.keep_outcomes": {"tf": 1}, "icepool.MultisetExpression.drop_outcomes": {"tf": 1}, "icepool.MultisetExpression.keep_counts": {"tf": 1}, "icepool.MultisetExpression.all_counts": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.MultisetEvaluator.alignment": {"tf": 1.4142135623730951}, "icepool.Deck.size": {"tf": 1}, "icepool.Deck.difference": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1.4142135623730951}, "icepool.MultiDeal.__init__": {"tf": 1.4142135623730951}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 1.4142135623730951}, "icepool.evaluator.HighestOutcomeAndCountEvaluator.alignment": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.evaluator.AllCountsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1.7320508075688772}, "icepool.function.align": {"tf": 1}, "icepool.function.align_range": {"tf": 1}}, "df": 43, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die.mean_time_to_sum": {"tf": 1}, "icepool.MultisetExpression.count_subset": {"tf": 1.4142135623730951}, "icepool.evaluator.CountSubsetEvaluator.__init__": {"tf": 1}}, "df": 3}}}}}}}}}}}}}, "s": {"docs": {"icepool.Die.zero": {"tf": 1.4142135623730951}, "icepool.standard_pool": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1}}, "df": 3}}}}}, "q": {"docs": {"icepool.Population.format": {"tf": 1.7320508075688772}}, "df": 1, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"icepool": {"tf": 1}, "icepool.Die": {"tf": 2.23606797749979}, "icepool.Die.__init__": {"tf": 1.7320508075688772}, "icepool.Die.items": {"tf": 1}, "icepool.Die.clip": {"tf": 1}, "icepool.Die.set_range": {"tf": 1}, "icepool.Die.set_outcomes": {"tf": 1}, "icepool.Die.trim": {"tf": 1}, "icepool.Die.cmp": {"tf": 1}, "icepool.Die.equals": {"tf": 1}, "icepool.Population.items": {"tf": 1}, "icepool.Population.quantity": {"tf": 1.4142135623730951}, "icepool.Population.denominator": {"tf": 1}, "icepool.Population.has_zero_quantities": {"tf": 1}, "icepool.Population.modal_quantity": {"tf": 1}, "icepool.Population.format": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}, "icepool.Deck.items": {"tf": 1}, "icepool.Deck.size": {"tf": 1}}, "df": 20}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die": {"tf": 1}, "icepool.Die.__init__": {"tf": 1.7320508075688772}, "icepool.Die.values": {"tf": 1}, "icepool.Die.simplify": {"tf": 1}, "icepool.Die.cmp": {"tf": 1}, "icepool.Die.equals": {"tf": 1}, "icepool.Population": {"tf": 1}, "icepool.Population.values": {"tf": 1}, "icepool.Population.quantities": {"tf": 1}, "icepool.Population.denominator": {"tf": 1}, "icepool.Population.scale_quantities": {"tf": 1}, "icepool.Population.format": {"tf": 1.7320508075688772}, "icepool.from_cumulative": {"tf": 1}, "icepool.align": {"tf": 1}, "icepool.align_range": {"tf": 1}, "icepool.Deck": {"tf": 1}, "icepool.Deck.__init__": {"tf": 1}, "icepool.Deck.values": {"tf": 1}, "icepool.Deck.size": {"tf": 1}, "icepool.function.from_cumulative": {"tf": 1}, "icepool.function.align": {"tf": 1}, "icepool.function.align_range": {"tf": 1}}, "df": 22}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Population.quantile": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Population.quantity": {"tf": 1}}, "df": 1}}, "u": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Again": {"tf": 1}}, "df": 1, "d": {"docs": {"icepool.Again": {"tf": 1}}, "df": 1}}}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"icepool.coin": {"tf": 1}, "icepool.Die": {"tf": 2.449489742783178}, "icepool.Die.__init__": {"tf": 1.4142135623730951}, "icepool.Die.binary_operator": {"tf": 1}, "icepool.Die.keep": {"tf": 1}, "icepool.Die.lowest": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.Die.zero": {"tf": 1}, "icepool.Die.cmp": {"tf": 1}, "icepool.Die.equals": {"tf": 1.7320508075688772}, "icepool.Population.common_outcome_length": {"tf": 1}, "icepool.Vector.binary_operator": {"tf": 1}, "icepool.align": {"tf": 1}, "icepool.align_range": {"tf": 1}, "icepool.commonize_denominator": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.map_to_pool": {"tf": 1}, "icepool.MultisetExpression.intersection": {"tf": 1}, "icepool.MultisetExpression.keep_outcomes": {"tf": 1}, "icepool.MultisetExpression.drop_outcomes": {"tf": 1}, "icepool.MultisetExpression.highest_outcome_and_count": {"tf": 1}, "icepool.MultisetExpression.isdisjoint": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.MultisetEvaluator.final_outcome": {"tf": 1}, "icepool.MultisetEvaluator.alignment": {"tf": 1}, "icepool.Deck.intersection": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1}, "icepool.MultiDeal.__init__": {"tf": 1}, "icepool.multiset_function": {"tf": 1}, "icepool.evaluator.JointEvaluator.order": {"tf": 1}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 1}, "icepool.evaluator.HighestOutcomeAndCountEvaluator": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsSubsetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsProperSubsetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsSupersetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsProperSupersetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsEqualSetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsNotEqualSetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsDisjointSetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1.7320508075688772}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1}, "icepool.function.coin": {"tf": 1}, "icepool.function.align": {"tf": 1}, "icepool.function.align_range": {"tf": 1}, "icepool.function.commonize_denominator": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1}}, "df": 55}}, "s": {"docs": {"icepool.Die.binary_operator": {"tf": 1}, "icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.mean_time_to_sum": {"tf": 1}, "icepool.Die.keep": {"tf": 1.4142135623730951}, "icepool.Die.equals": {"tf": 1}, "icepool.Population.is_empty": {"tf": 1}, "icepool.Vector.binary_operator": {"tf": 1}, "icepool.Symbols": {"tf": 1.7320508075688772}, "icepool.Symbols.__init__": {"tf": 1}, "icepool.Symbols.isdisjoint": {"tf": 1.4142135623730951}, "icepool.map_function": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.sort_match": {"tf": 1}, "icepool.MultisetExpression.any": {"tf": 1}, "icepool.MultisetExpression.issubset": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.issuperset": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.order": {"tf": 1}, "icepool.MultisetEvaluator.range_alignment": {"tf": 1}, "icepool.Deck.union": {"tf": 1}, "icepool.Deck.symmetric_difference": {"tf": 1}, "icepool.multiset_function": {"tf": 1.4142135623730951}, "icepool.evaluator.HighestOutcomeAndCountEvaluator": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.order": {"tf": 1}, "icepool.evaluator.CompairEvalautor.__init__": {"tf": 1.4142135623730951}, "icepool.evaluator.CompairEvalautor.order": {"tf": 1}, "icepool.function.map_function": {"tf": 1}}, "df": 31, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Outcome": {"tf": 1}, "icepool.Die.__init__": {"tf": 1}, "icepool.Population": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.Deck.__init__": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1.7320508075688772}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1.7320508075688772}, "icepool.typing.Outcome": {"tf": 1}}, "df": 9}}}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {"icepool.MultisetExpression.issuperset": {"tf": 1}, "icepool.Deal": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1}, "icepool.Deal.hand_sizes": {"tf": 1}, "icepool.MultiDeal.__init__": {"tf": 2}, "icepool.MultiDeal.hand_sizes": {"tf": 1}}, "df": 6, "l": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Pool.__init__": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.MultisetEvaluator.final_outcome": {"tf": 1}, "icepool.MultisetEvaluator.range_alignment": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1}, "icepool.MultiDeal.__init__": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1.4142135623730951}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1}}, "df": 19, "d": {"docs": {"icepool.Die.__init__": {"tf": 1}}, "df": 1}}}, "s": {"docs": {"icepool.MultiDeal": {"tf": 1}, "icepool.MultiDeal.__init__": {"tf": 1}}, "df": 2}}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"icepool.MultisetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1}}, "df": 6}}}}}}, "o": {"docs": {}, "df": 0, "w": {"docs": {"icepool.one_hot": {"tf": 1}, "icepool.Die.__init__": {"tf": 1}, "icepool.Die.count": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1.4142135623730951}, "icepool.Again": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.standard_pool": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1}, "icepool.MultisetExpression.argsort": {"tf": 1}, "icepool.MultisetExpression.compair_lt": {"tf": 1}, "icepool.MultisetExpression.compair_le": {"tf": 1}, "icepool.MultisetExpression.compair_gt": {"tf": 1}, "icepool.MultisetExpression.compair_ge": {"tf": 1}, "icepool.MultisetExpression.compair_eq": {"tf": 1}, "icepool.MultisetExpression.compair_ne": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1}, "icepool.MultiDeal.__init__": {"tf": 1}, "icepool.multiset_function": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.__init__": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.__init__": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}, "icepool.function.one_hot": {"tf": 1}}, "df": 27, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die": {"tf": 1}, "icepool.Die.__init__": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}}, "df": 6}}}}}, "t": {"docs": {"icepool.one_hot": {"tf": 1}, "icepool.Population.to_one_hot": {"tf": 1}, "icepool.function.one_hot": {"tf": 1}}, "df": 3}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.__init__": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {"icepool.Die.middle": {"tf": 1}, "icepool.Population.median": {"tf": 1}, "icepool.Population.quantile": {"tf": 1}, "icepool.middle": {"tf": 1}, "icepool.MultisetExpression.maximum_match": {"tf": 1.4142135623730951}}, "df": 5, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.pool": {"tf": 1}, "icepool.Die.highest": {"tf": 2.6457513110645907}, "icepool.Die.reroll_to_pool": {"tf": 1.4142135623730951}, "icepool.Population.mode": {"tf": 1}, "icepool.Population.modal_quantity": {"tf": 1}, "icepool.highest": {"tf": 2.8284271247461903}, "icepool.MultisetExpression": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.highest": {"tf": 2.449489742783178}, "icepool.MultisetExpression.sort_match": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.maximum_match": {"tf": 1}, "icepool.MultisetExpression.highest_outcome_and_count": {"tf": 1}, "icepool.MultisetExpression.largest_straight_and_outcome": {"tf": 1}, "icepool.evaluator.HighestOutcomeAndCountEvaluator": {"tf": 1}}, "df": 13}}, "r": {"docs": {"icepool.Die.middle": {"tf": 1}, "icepool.Population.median_high": {"tf": 1}, "icepool.middle": {"tf": 1}, "icepool.evaluator.CompairEvalautor.__init__": {"tf": 1.7320508075688772}}, "df": 4}}}}}, "t": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Population.format": {"tf": 1.4142135623730951}}, "df": 1}}}}, "b": {"docs": {"icepool.Symbols": {"tf": 1.4142135623730951}, "icepool.Symbols.__init__": {"tf": 1.4142135623730951}, "icepool.map": {"tf": 1.4142135623730951}, "icepool.Pool.additive_union": {"tf": 1}, "icepool.MultisetExpression.additive_union": {"tf": 1}, "icepool.MultisetExpression.difference": {"tf": 1}, "icepool.MultisetExpression.intersection": {"tf": 1}, "icepool.MultisetExpression.union": {"tf": 1}, "icepool.MultisetExpression.symmetric_difference": {"tf": 1}, "icepool.MultisetExpression.issuperset": {"tf": 1.4142135623730951}, "icepool.multiset_function": {"tf": 2.23606797749979}, "icepool.function.map": {"tf": 1.4142135623730951}}, "df": 12, "e": {"docs": {"icepool.coin": {"tf": 1}, "icepool.stochastic_round": {"tf": 1.4142135623730951}, "icepool.Die": {"tf": 1}, "icepool.Die.__init__": {"tf": 3.3166247903554}, "icepool.Die.reroll": {"tf": 2}, "icepool.Die.filter": {"tf": 1.7320508075688772}, "icepool.Die.split": {"tf": 1.7320508075688772}, "icepool.Die.truncate": {"tf": 1.4142135623730951}, "icepool.Die.clip": {"tf": 1}, "icepool.Die.set_range": {"tf": 1.4142135623730951}, "icepool.Die.explode": {"tf": 2.6457513110645907}, "icepool.Die.pool": {"tf": 1}, "icepool.Die.keep": {"tf": 2.6457513110645907}, "icepool.Die.lowest": {"tf": 2.449489742783178}, "icepool.Die.highest": {"tf": 2.449489742783178}, "icepool.Die.map_to_pool": {"tf": 2.6457513110645907}, "icepool.Die.explode_to_pool": {"tf": 2}, "icepool.Die.reroll_to_pool": {"tf": 3.4641016151377544}, "icepool.Die.stochastic_round": {"tf": 1.4142135623730951}, "icepool.Die.equals": {"tf": 1.4142135623730951}, "icepool.Population": {"tf": 1}, "icepool.Population.quantity": {"tf": 1.4142135623730951}, "icepool.Population.marginals": {"tf": 1}, "icepool.Population.to_one_hot": {"tf": 1}, "icepool.Population.format": {"tf": 1.4142135623730951}, "icepool.tupleize": {"tf": 1}, "icepool.vectorize": {"tf": 1}, "icepool.Symbols": {"tf": 1}, "icepool.Symbols.__init__": {"tf": 1.4142135623730951}, "icepool.Again": {"tf": 2.6457513110645907}, "icepool.from_cumulative": {"tf": 1.4142135623730951}, "icepool.from_rv": {"tf": 2}, "icepool.lowest": {"tf": 2.6457513110645907}, "icepool.highest": {"tf": 3}, "icepool.middle": {"tf": 1}, "icepool.reduce": {"tf": 1}, "icepool.accumulate": {"tf": 1}, "icepool.map": {"tf": 3.605551275463989}, "icepool.map_function": {"tf": 1.4142135623730951}, "icepool.map_and_time": {"tf": 2.23606797749979}, "icepool.map_to_pool": {"tf": 2.449489742783178}, "icepool.Reroll": {"tf": 1.7320508075688772}, "icepool.RerollType.Reroll": {"tf": 1}, "icepool.Pool": {"tf": 1}, "icepool.Pool.__init__": {"tf": 2}, "icepool.Pool.output_arity": {"tf": 1}, "icepool.Pool.additive_union": {"tf": 1}, "icepool.standard_pool": {"tf": 1}, "icepool.MultisetGenerator": {"tf": 1}, "icepool.MultisetGenerator.outcomes": {"tf": 1}, "icepool.MultisetGenerator.output_arity": {"tf": 1}, "icepool.Alignment": {"tf": 1}, "icepool.Alignment.outcomes": {"tf": 1}, "icepool.Alignment.output_arity": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1}, "icepool.MultisetExpression.additive_union": {"tf": 1}, "icepool.MultisetExpression.difference": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.intersection": {"tf": 1}, "icepool.MultisetExpression.union": {"tf": 1}, "icepool.MultisetExpression.symmetric_difference": {"tf": 1}, "icepool.MultisetExpression.keep_outcomes": {"tf": 1}, "icepool.MultisetExpression.drop_outcomes": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 2.23606797749979}, "icepool.MultisetExpression.lowest": {"tf": 2.6457513110645907}, "icepool.MultisetExpression.highest": {"tf": 2.6457513110645907}, "icepool.MultisetExpression.sort_match": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.maximum_match": {"tf": 3.4641016151377544}, "icepool.MultisetExpression.evaluate": {"tf": 1}, "icepool.MultisetExpression.highest_outcome_and_count": {"tf": 1}, "icepool.MultisetExpression.all_counts": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.count_subset": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.largest_straight": {"tf": 1}, "icepool.MultisetExpression.largest_straight_and_outcome": {"tf": 1}, "icepool.MultisetExpression.all_straights_reduce_counts": {"tf": 1}, "icepool.MultisetExpression.argsort": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.compair_lt": {"tf": 1}, "icepool.MultisetExpression.compair_le": {"tf": 1}, "icepool.MultisetExpression.compair_gt": {"tf": 1}, "icepool.MultisetExpression.compair_ge": {"tf": 1}, "icepool.MultisetExpression.compair_eq": {"tf": 1}, "icepool.MultisetExpression.compair_ne": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 2}, "icepool.MultisetEvaluator.next_state": {"tf": 2.8284271247461903}, "icepool.MultisetEvaluator.final_outcome": {"tf": 2}, "icepool.MultisetEvaluator.alignment": {"tf": 2}, "icepool.MultisetEvaluator.range_alignment": {"tf": 1}, "icepool.MultisetEvaluator.prefix_generators": {"tf": 1}, "icepool.MultisetEvaluator.evaluate": {"tf": 1.4142135623730951}, "icepool.Order": {"tf": 1}, "icepool.Deck.__init__": {"tf": 2.6457513110645907}, "icepool.Deck.map": {"tf": 1.7320508075688772}, "icepool.Deal.output_arity": {"tf": 1}, "icepool.MultiDeal.__init__": {"tf": 1}, "icepool.MultiDeal.output_arity": {"tf": 1}, "icepool.multiset_function": {"tf": 1}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 2}, "icepool.evaluator.JointEvaluator.prefix_generators": {"tf": 1}, "icepool.evaluator.ExpandEvaluator": {"tf": 1}, "icepool.evaluator.SumEvaluator.__init__": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.__init__": {"tf": 1.4142135623730951}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 2.8284271247461903}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 2}, "icepool.evaluator.AllCountsEvaluator.__init__": {"tf": 1.4142135623730951}, "icepool.evaluator.LargestStraightEvaluator.alignment": {"tf": 1}, "icepool.evaluator.LargestStraightAndOutcomeEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator": {"tf": 1}, "icepool.evaluator.AllStraightsReduceCountsEvaluator.alignment": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 2.8284271247461903}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 2}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 2}, "icepool.evaluator.CompairEvalautor": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 2.8284271247461903}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 2}, "icepool.evaluator.ExpressionEvaluator": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 2}, "icepool.evaluator.ExpressionEvaluator.prefix_generators": {"tf": 1}, "icepool.function.coin": {"tf": 1}, "icepool.function.stochastic_round": {"tf": 1.4142135623730951}, "icepool.function.from_cumulative": {"tf": 1.4142135623730951}, "icepool.function.from_rv": {"tf": 2}, "icepool.function.reduce": {"tf": 1}, "icepool.function.accumulate": {"tf": 1}, "icepool.function.map": {"tf": 3.605551275463989}, "icepool.function.map_function": {"tf": 1.4142135623730951}, "icepool.function.map_and_time": {"tf": 2.23606797749979}, "icepool.function.map_to_pool": {"tf": 2.449489742783178}, "icepool.typing.Qs": {"tf": 1}, "icepool.typing.Order": {"tf": 1}, "icepool.typing.RerollType.Reroll": {"tf": 1}, "icepool.typing.guess_star": {"tf": 1.4142135623730951}}, "df": 131, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Die": {"tf": 1}, "icepool.MultisetGenerator": {"tf": 1}, "icepool.MultisetExpression.all_counts": {"tf": 1}, "icepool.MultisetEvaluator.order": {"tf": 1}, "icepool.multiset_function": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.__init__": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.order": {"tf": 1}, "icepool.evaluator.CompairEvalautor.order": {"tf": 1}}, "df": 8}}}, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Die.binary_operator": {"tf": 1}, "icepool.Die.pool": {"tf": 1}, "icepool.Population.kolmogorov_smirnov": {"tf": 1}, "icepool.Population.cramer_von_mises": {"tf": 1}, "icepool.Symbols.difference": {"tf": 1}, "icepool.Symbols.symmetric_difference": {"tf": 1}, "icepool.MultisetExpression.symmetric_difference": {"tf": 1}}, "df": 7}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Die": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.multiset_function": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}}, "df": 6}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {"icepool.Die.binary_operator": {"tf": 1}, "icepool.MultisetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1}}, "df": 7}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.split": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.Die.explode_to_pool": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.Die.equals": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.map_and_time": {"tf": 1}, "icepool.map_to_pool": {"tf": 1}, "icepool.Pool.raw_size": {"tf": 1}, "icepool.MultisetExpression.sort_match": {"tf": 1}, "icepool.MultisetExpression.all_counts": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.Deck.map": {"tf": 1}, "icepool.evaluator.SumEvaluator.__init__": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1}, "icepool.typing.guess_star": {"tf": 1}}, "df": 25}}}}, "y": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.clip": {"tf": 1.4142135623730951}}, "df": 1}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Die.sign": {"tf": 1.4142135623730951}, "icepool.Vector": {"tf": 1}}, "df": 2}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.Again": {"tf": 1}, "icepool.map_function": {"tf": 1}, "icepool.MultisetEvaluator": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.MultisetEvaluator.order": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.order": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.order": {"tf": 1}, "icepool.function.map_function": {"tf": 1}}, "df": 11}}}, "e": {"docs": {"icepool.multiset_function": {"tf": 1}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {"icepool.MultisetExpression.evaluate": {"tf": 1}, "icepool.MultisetExpression.all_counts": {"tf": 1}, "icepool.MultisetEvaluator.alignment": {"tf": 1}, "icepool.Deck.difference": {"tf": 1}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 1}, "icepool.evaluator.AllCountsEvaluator.__init__": {"tf": 1}}, "df": 6}}}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"icepool.Die.unary_operator": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsSubsetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsProperSubsetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsSupersetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsProperSupersetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsEqualSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsNotEqualSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsDisjointSetEvaluator.any_all": {"tf": 1}}, "df": 9, "s": {"docs": {"icepool.evaluator.ComparisonEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsSubsetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsProperSubsetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsSupersetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsProperSupersetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsEqualSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsNotEqualSetEvaluator.any_all": {"tf": 1}, "icepool.evaluator.IsDisjointSetEvaluator.any_all": {"tf": 1}}, "df": 8}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {"icepool.Die.lowest": {"tf": 1}, "icepool.Die.highest": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.Die.equals": {"tf": 1}, "icepool.Vector.binary_operator": {"tf": 1}, "icepool.CountsKeysView": {"tf": 1}, "icepool.CountsValuesView": {"tf": 1}, "icepool.CountsItemsView": {"tf": 1}, "icepool.from_cumulative": {"tf": 1}, "icepool.lowest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.MultisetExpression.symmetric_difference": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.lowest": {"tf": 1}, "icepool.MultisetExpression.highest": {"tf": 1}, "icepool.MultisetExpression.all_counts": {"tf": 1}, "icepool.MultisetExpression.isdisjoint": {"tf": 1}, "icepool.Order.merge": {"tf": 1}, "icepool.Deck.additive_union": {"tf": 1}, "icepool.Deck.intersection": {"tf": 1}, "icepool.multiset_function": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsSubsetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsProperSubsetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsSupersetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsProperSupersetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsEqualSetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsNotEqualSetEvaluator.default_outcome": {"tf": 1}, "icepool.evaluator.IsDisjointSetEvaluator.default_outcome": {"tf": 1}, "icepool.function.from_cumulative": {"tf": 1}, "icepool.typing.Order.merge": {"tf": 1}}, "df": 31}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"icepool.map": {"tf": 1}, "icepool.map_function": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1}, "icepool.MultisetExpression.evaluate": {"tf": 1.4142135623730951}, "icepool.multiset_function": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.function.map_function": {"tf": 1}}, "df": 7}}}}, "y": {"docs": {"icepool.Die.binary_operator": {"tf": 1}, "icepool.Die.simplify": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.Die.zero": {"tf": 1.4142135623730951}, "icepool.Die.equals": {"tf": 1.7320508075688772}, "icepool.Population.scale_quantities": {"tf": 1}, "icepool.Population.format": {"tf": 1}, "icepool.Symbols.__init__": {"tf": 1}, "icepool.Symbols.multiply_counts": {"tf": 1}, "icepool.Symbols.divide_counts": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.Reroll": {"tf": 1}, "icepool.MultisetGenerator.order": {"tf": 1}, "icepool.MultisetExpression.order": {"tf": 1}, "icepool.MultisetExpression.keep_outcomes": {"tf": 1}, "icepool.MultisetExpression.drop_outcomes": {"tf": 1}, "icepool.MultisetExpression.multiply_counts": {"tf": 1}, "icepool.MultisetExpression.divide_counts": {"tf": 1}, "icepool.MultisetExpression.modulo_counts": {"tf": 1}, "icepool.MultisetExpression.keep": {"tf": 1}, "icepool.MultisetExpression.sort_match": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.maximum_match": {"tf": 1}, "icepool.MultisetExpression.all_counts": {"tf": 1}, "icepool.MultisetExpression.count_subset": {"tf": 1}, "icepool.MultisetExpression.compair_le": {"tf": 1}, "icepool.MultisetExpression.compair_gt": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.MultisetEvaluator.final_outcome": {"tf": 1}, "icepool.MultisetEvaluator.alignment": {"tf": 2}, "icepool.Order": {"tf": 1}, "icepool.evaluator.JointEvaluator.alignment": {"tf": 2}, "icepool.evaluator.CountEvaluator": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.ComparisonEvaluator": {"tf": 1}, "icepool.evaluator.IsSubsetEvaluator": {"tf": 1}, "icepool.evaluator.IsProperSubsetEvaluator": {"tf": 1}, "icepool.evaluator.IsSupersetEvaluator": {"tf": 1}, "icepool.evaluator.IsProperSupersetEvaluator": {"tf": 1}, "icepool.evaluator.IsEqualSetEvaluator": {"tf": 1}, "icepool.evaluator.IsNotEqualSetEvaluator": {"tf": 1}, "icepool.evaluator.IsDisjointSetEvaluator": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.KeepEvaluator.order": {"tf": 1}, "icepool.evaluator.ArgsortEvaluator.final_outcome": {"tf": 1}, "icepool.evaluator.CompairEvalautor.__init__": {"tf": 1.4142135623730951}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.final_outcome": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.final_outcome": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.typing.Order": {"tf": 1}}, "df": 53}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"icepool.Die.binary_operator": {"tf": 2}, "icepool.Vector.binary_operator": {"tf": 1.4142135623730951}, "icepool.Vector.reverse_binary_operator": {"tf": 1}, "icepool.Symbols": {"tf": 1}, "icepool.Again": {"tf": 1}}, "df": 5}}}}, "t": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Population.entropy": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Population.entropy": {"tf": 1.4142135623730951}, "icepool.MultisetGenerator": {"tf": 1}, "icepool.MultisetExpression": {"tf": 1}, "icepool.MultisetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CountSubsetEvaluator.next_state": {"tf": 1}, "icepool.evaluator.ConstantEvaluator.next_state": {"tf": 1}, "icepool.evaluator.CompairEvalautor.next_state": {"tf": 1}}, "df": 7, "d": {"docs": {"icepool.Die.reroll": {"tf": 1}, "icepool.Die.filter": {"tf": 1}, "icepool.Die.split": {"tf": 1}, "icepool.Die.explode": {"tf": 1}, "icepool.Die.map_to_pool": {"tf": 1}, "icepool.Die.explode_to_pool": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.Vector.binary_operator": {"tf": 1}, "icepool.map": {"tf": 1}, "icepool.map_and_time": {"tf": 1}, "icepool.map_to_pool": {"tf": 1}, "icepool.Deck.map": {"tf": 1}, "icepool.function.map": {"tf": 1}, "icepool.function.map_and_time": {"tf": 1}, "icepool.function.map_to_pool": {"tf": 1}}, "df": 15}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"icepool.map_function": {"tf": 1}, "icepool.function.map_function": {"tf": 1}}, "df": 2}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Pool.__init__": {"tf": 1}}, "df": 1}}, "d": {"docs": {"icepool.multiset_function": {"tf": 1}}, "df": 1}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"icepool.Die.clip": {"tf": 1}}, "df": 1}}}, "t": {"docs": {"icepool.Die.set_range": {"tf": 1}, "icepool.Die.middle": {"tf": 1}, "icepool.Die.reroll_to_pool": {"tf": 1}, "icepool.Symbols": {"tf": 1.4142135623730951}, "icepool.Again": {"tf": 1}, "icepool.from_cumulative": {"tf": 1}, "icepool.middle": {"tf": 1}, "icepool.map": {"tf": 1.4142135623730951}, "icepool.Pool": {"tf": 1}, "icepool.Pool.__init__": {"tf": 1}, "icepool.MultisetExpression": {"tf": 2}, "icepool.MultisetExpression.symmetric_difference": {"tf": 1}, "icepool.MultisetExpression.maximum_match": {"tf": 2}, "icepool.MultisetEvaluator.validate_arity": {"tf": 1}, "icepool.Deck.difference": {"tf": 1}, "icepool.Deal.__init__": {"tf": 1}, "icepool.MultiDeal.__init__": {"tf": 1}, "icepool.evaluator.JointEvaluator.validate_arity": {"tf": 1}, "icepool.evaluator.ExpressionEvaluator.validate_arity": {"tf": 1}, "icepool.function.from_cumulative": {"tf": 1}, "icepool.function.map": {"tf": 1.4142135623730951}}, "df": 21}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"icepool.lowest": {"tf": 1}, "icepool.highest": {"tf": 1}, "icepool.MultisetGenerator": {"tf": 1}}, "df": 3}, "d": {"docs": {"icepool.MultisetExpression": {"tf": 1}}, "df": 1}}}}, "b": {"docs": {"icepool.Symbols": {"tf": 1.4142135623730951}}, "df": 1, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"icepool.Population.format": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Vector.binary_operator": {"tf": 1}}, "df": 1}}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"icepool.multiset_function": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"icepool.MultisetExpression.maximum_match": {"tf": 1.4142135623730951}}, "df": 1, "e": {"docs": {}, "df": 0, "d": {"docs": {"icepool.MultisetExpression.maximum_match": {"tf": 1}}, "df": 1}}}}}}}, "x": {"docs": {"icepool.stochastic_round": {"tf": 1.7320508075688772}, "icepool.Die.stochastic_round": {"tf": 1.7320508075688772}, "icepool.Population.marginals": {"tf": 1.4142135623730951}, "icepool.map_function": {"tf": 2.449489742783178}, "icepool.MultisetExpression": {"tf": 1}, "icepool.function.stochastic_round": {"tf": 1.7320508075688772}, "icepool.function.map_function": {"tf": 2.449489742783178}}, "df": 7}, "k": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.from_rv": {"tf": 1}, "icepool.function.from_rv": {"tf": 1}}, "df": 3}}}}}, "e": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"icepool.Die.__init__": {"tf": 1}, "icepool.map_function": {"tf": 1}, "icepool.function.map_function": {"tf": 1}}, "df": 3}}}}, "s": {"docs": {"icepool.Population.outcomes": {"tf": 1}, "icepool.Deal.outcomes": {"tf": 1}, "icepool.MultiDeal.outcomes": {"tf": 1}}, "df": 3, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {"icepool.CountsKeysView": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "p": {"docs": {"icepool.Die.pool": {"tf": 1}, "icepool.Die.lowest": {"tf": 2.23606797749979}, "icepool.Die.highest": {"tf": 2.23606797749979}, "icepool.Die.middle": {"tf": 2.23606797749979}, "icepool.Symbols": {"tf": 1}, "icepool.lowest": {"tf": 2.23606797749979}, "icepool.highest": {"tf": 2.23606797749979}, "icepool.middle": {"tf": 1.7320508075688772}, "icepool.Pool.raw_size": {"tf": 1}, "icepool.MultisetExpression": {"tf": 2}, "icepool.MultisetExpression.intersection": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.symmetric_difference": {"tf": 1.4142135623730951}, "icepool.MultisetExpression.keep_outcomes": {"tf": 1}, "icepool.MultisetExpression.keep_counts": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.lowest": {"tf": 2.23606797749979}, "icepool.MultisetExpression.highest": {"tf": 2.23606797749979}, "icepool.MultisetExpression.sort_match": {"tf": 1}, "icepool.MultisetExpression.maximum_match": {"tf": 2.23606797749979}, "icepool.MultisetExpression.all_counts": {"tf": 1.4142135623730951}, "icepool.MultiDeal.__init__": {"tf": 1}, "icepool.evaluator.KeepEvaluator.__init__": {"tf": 1}}, "df": 21, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"icepool.Die.explode_to_pool": {"tf": 1}, "icepool.Symbols": {"tf": 1}, "icepool.highest": {"tf": 1}}, "df": 3}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"icepool.MultisetExpression": {"tf": 1.7320508075688772}, "icepool.MultisetExpression.keep": {"tf": 1}}, "df": 2}}}}}}}}}, "s": {"docs": {"icepool.MultisetExpression.keep_outcomes": {"tf": 1}, "icepool.MultisetExpression.drop_outcomes": {"tf": 1}, "icepool.MultisetExpression.keep_counts": {"tf": 1}, "icepool.MultisetExpression.sort_match": {"tf": 1}, "icepool.MultisetExpression.maximum_match": {"tf": 1}}, "df": 5}}}, "p": {"docs": {}, "df": 0, "t": {"docs": {"icepool.Die.middle": {"tf": 1}, "icepool.MultisetExpression.keep_outcomes": {"tf": 1}, "icepool.MultisetExpression.lowest": {"tf": 2}, "icepool.MultisetExpression.highest": {"tf": 2}, "icepool.MultisetExpression.sort_match": {"tf": 1}, "icepool.MultisetExpression.maximum_match": {"tf": 1}}, "df": 6}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "\u2013": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {"icepool.Population.kolmogorov_smirnov": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"icepool.MultisetExpression": {"tf": 1}}, "df": 1}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {"icepool.MultisetExpression.keep": {"tf": 1}}, "df": 1}}}}}}}, "pipeline": ["trimmer"], "_isPrebuiltIndex": true};

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();
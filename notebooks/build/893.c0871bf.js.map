{"version":3,"file":"893.c0871bf.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/filebrowser-extension/lib/index.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * @packageDocumentation\n * @module filebrowser-extension\n */\nimport { ILabShell, ILayoutRestorer, IRouter, ITreePathUpdater, JupyterFrontEnd } from '@jupyterlab/application';\nimport { Clipboard, createToolbarFactory, ICommandPalette, InputDialog, IToolbarWidgetRegistry, setToolbar, showErrorMessage, WidgetTracker } from '@jupyterlab/apputils';\nimport { PageConfig, PathExt } from '@jupyterlab/coreutils';\nimport { IDocumentManager } from '@jupyterlab/docmanager';\nimport { FileBrowser, FileUploadStatus, FilterFileBrowserModel, IFileBrowserCommands, IFileBrowserFactory, Uploader } from '@jupyterlab/filebrowser';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { IStateDB } from '@jupyterlab/statedb';\nimport { IStatusBar } from '@jupyterlab/statusbar';\nimport { ITranslator } from '@jupyterlab/translation';\nimport { addIcon, closeIcon, copyIcon, cutIcon, downloadIcon, editIcon, fileIcon, folderIcon, linkIcon, markdownIcon, newFolderIcon, pasteIcon, refreshIcon, stopIcon, textEditorIcon } from '@jupyterlab/ui-components';\nimport { find, map, reduce, toArray } from '@lumino/algorithm';\nimport { CommandRegistry } from '@lumino/commands';\nconst FILE_BROWSER_FACTORY = 'FileBrowser';\n/**\n * The command IDs used by the file browser plugin.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.copy = 'filebrowser:copy';\n    CommandIDs.copyDownloadLink = 'filebrowser:copy-download-link';\n    // For main browser only.\n    CommandIDs.createLauncher = 'filebrowser:create-main-launcher';\n    CommandIDs.cut = 'filebrowser:cut';\n    CommandIDs.del = 'filebrowser:delete';\n    CommandIDs.download = 'filebrowser:download';\n    CommandIDs.duplicate = 'filebrowser:duplicate';\n    // For main browser only.\n    CommandIDs.hideBrowser = 'filebrowser:hide-main';\n    CommandIDs.goToPath = 'filebrowser:go-to-path';\n    CommandIDs.goUp = 'filebrowser:go-up';\n    CommandIDs.openPath = 'filebrowser:open-path';\n    CommandIDs.openUrl = 'filebrowser:open-url';\n    CommandIDs.open = 'filebrowser:open';\n    CommandIDs.openBrowserTab = 'filebrowser:open-browser-tab';\n    CommandIDs.paste = 'filebrowser:paste';\n    CommandIDs.createNewDirectory = 'filebrowser:create-new-directory';\n    CommandIDs.createNewFile = 'filebrowser:create-new-file';\n    CommandIDs.createNewMarkdownFile = 'filebrowser:create-new-markdown-file';\n    CommandIDs.refresh = 'filebrowser:refresh';\n    CommandIDs.rename = 'filebrowser:rename';\n    // For main browser only.\n    CommandIDs.copyShareableLink = 'filebrowser:share-main';\n    // For main browser only.\n    CommandIDs.copyPath = 'filebrowser:copy-path';\n    CommandIDs.showBrowser = 'filebrowser:activate';\n    CommandIDs.shutdown = 'filebrowser:shutdown';\n    // For main browser only.\n    CommandIDs.toggleBrowser = 'filebrowser:toggle-main';\n    CommandIDs.toggleNavigateToCurrentDirectory = 'filebrowser:toggle-navigate-to-current-directory';\n    CommandIDs.toggleLastModified = 'filebrowser:toggle-last-modified';\n    CommandIDs.search = 'filebrowser:search';\n    CommandIDs.toggleHiddenFiles = 'filebrowser:toggle-hidden-files';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * The file browser namespace token.\n */\nconst namespace = 'filebrowser';\n/**\n * The default file browser extension.\n */\nconst browser = {\n    id: '@jupyterlab/filebrowser-extension:browser',\n    requires: [IFileBrowserFactory, ITranslator],\n    optional: [\n        ILayoutRestorer,\n        ISettingRegistry,\n        ITreePathUpdater,\n        ICommandPalette\n    ],\n    provides: IFileBrowserCommands,\n    autoStart: true,\n    activate: async (app, factory, translator, restorer, settingRegistry, treePathUpdater, commandPalette) => {\n        const trans = translator.load('jupyterlab');\n        const browser = factory.defaultBrowser;\n        // Let the application restorer track the primary file browser (that is\n        // automatically created) for restoration of application state (e.g. setting\n        // the file browser as the current side bar widget).\n        //\n        // All other file browsers created by using the factory function are\n        // responsible for their own restoration behavior, if any.\n        if (restorer) {\n            restorer.add(browser, namespace);\n        }\n        // Navigate to preferred-dir trait if found\n        const preferredPath = PageConfig.getOption('preferredPath');\n        if (preferredPath) {\n            await browser.model.cd(preferredPath);\n        }\n        addCommands(app, factory, translator, settingRegistry, commandPalette);\n        // Show the current file browser shortcut in its title.\n        const updateBrowserTitle = () => {\n            const binding = find(app.commands.keyBindings, b => b.command === CommandIDs.toggleBrowser);\n            if (binding) {\n                const ks = binding.keys.map(CommandRegistry.formatKeystroke).join(', ');\n                browser.title.caption = trans.__('File Browser (%1)', ks);\n            }\n            else {\n                browser.title.caption = trans.__('File Browser');\n            }\n        };\n        updateBrowserTitle();\n        app.commands.keyBindingChanged.connect(() => {\n            updateBrowserTitle();\n        });\n        return void Promise.all([app.restored, browser.model.restored]).then(() => {\n            if (treePathUpdater) {\n                browser.model.pathChanged.connect((sender, args) => {\n                    treePathUpdater(args.newValue);\n                });\n            }\n            if (settingRegistry) {\n                void settingRegistry\n                    .load('@jupyterlab/filebrowser-extension:browser')\n                    .then(settings => {\n                    /**\n                     * File browser configuration.\n                     */\n                    const fileBrowserConfig = {\n                        navigateToCurrentDirectory: false,\n                        showLastModifiedColumn: true,\n                        useFuzzyFilter: true,\n                        showHiddenFiles: false\n                    };\n                    const fileBrowserModelConfig = {\n                        filterDirectories: true\n                    };\n                    function onSettingsChanged(settings) {\n                        for (const key in fileBrowserConfig) {\n                            const value = settings.get(key).composite;\n                            fileBrowserConfig[key] = value;\n                            browser[key] = value;\n                        }\n                        const value = settings.get('filterDirectories')\n                            .composite;\n                        fileBrowserModelConfig.filterDirectories = value;\n                        browser.model.filterDirectories = value;\n                    }\n                    settings.changed.connect(onSettingsChanged);\n                    onSettingsChanged(settings);\n                });\n            }\n        });\n    }\n};\n/**\n * The default file browser factory provider.\n */\nconst factory = {\n    id: '@jupyterlab/filebrowser-extension:factory',\n    provides: IFileBrowserFactory,\n    requires: [IDocumentManager, ITranslator],\n    optional: [IStateDB, IRouter, JupyterFrontEnd.ITreeResolver],\n    activate: async (app, docManager, translator, state, router, tree) => {\n        const { commands } = app;\n        const tracker = new WidgetTracker({ namespace });\n        const createFileBrowser = (id, options = {}) => {\n            var _a;\n            const model = new FilterFileBrowserModel({\n                translator: translator,\n                auto: (_a = options.auto) !== null && _a !== void 0 ? _a : true,\n                manager: docManager,\n                driveName: options.driveName || '',\n                refreshInterval: options.refreshInterval,\n                state: options.state === null\n                    ? undefined\n                    : options.state || state || undefined\n            });\n            const restore = options.restore;\n            const widget = new FileBrowser({ id, model, restore, translator });\n            // Track the newly created file browser.\n            void tracker.add(widget);\n            return widget;\n        };\n        // Manually restore and load the default file browser.\n        const defaultBrowser = createFileBrowser('filebrowser', {\n            auto: false,\n            restore: false\n        });\n        void Private.restoreBrowser(defaultBrowser, commands, router, tree);\n        return { createFileBrowser, defaultBrowser, tracker };\n    }\n};\n/**\n * A plugin providing download + copy download link commands in the context menu.\n *\n * Disabling this plugin will NOT disable downloading files from the server.\n * Users will still be able to retrieve files from the file download URLs the\n * server provides.\n */\nconst downloadPlugin = {\n    id: '@jupyterlab/filebrowser-extension:download',\n    requires: [IFileBrowserFactory, ITranslator],\n    autoStart: true,\n    activate: (app, factory, translator) => {\n        const trans = translator.load('jupyterlab');\n        const { commands } = app;\n        const { tracker } = factory;\n        commands.addCommand(CommandIDs.download, {\n            execute: () => {\n                const widget = tracker.currentWidget;\n                if (widget) {\n                    return widget.download();\n                }\n            },\n            icon: downloadIcon.bindprops({ stylesheet: 'menuItem' }),\n            label: trans.__('Download')\n        });\n        commands.addCommand(CommandIDs.copyDownloadLink, {\n            execute: () => {\n                const widget = tracker.currentWidget;\n                if (!widget) {\n                    return;\n                }\n                return widget.model.manager.services.contents\n                    .getDownloadUrl(widget.selectedItems().next().path)\n                    .then(url => {\n                    Clipboard.copyToSystem(url);\n                });\n            },\n            icon: copyIcon.bindprops({ stylesheet: 'menuItem' }),\n            label: trans.__('Copy Download Link'),\n            mnemonic: 0\n        });\n    }\n};\n/**\n * A plugin to add the file browser widget to an ILabShell\n */\nconst browserWidget = {\n    id: '@jupyterlab/filebrowser-extension:widget',\n    requires: [\n        IDocumentManager,\n        IFileBrowserFactory,\n        ISettingRegistry,\n        IToolbarWidgetRegistry,\n        ITranslator,\n        ILabShell,\n        IFileBrowserCommands\n    ],\n    autoStart: true,\n    activate: (app, docManager, factory, settings, toolbarRegistry, translator, labShell) => {\n        const { commands } = app;\n        const { defaultBrowser: browser, tracker } = factory;\n        const trans = translator.load('jupyterlab');\n        // Set attributes when adding the browser to the UI\n        browser.node.setAttribute('role', 'region');\n        browser.node.setAttribute('aria-label', trans.__('File Browser Section'));\n        browser.title.icon = folderIcon;\n        // Toolbar\n        toolbarRegistry.registerFactory(FILE_BROWSER_FACTORY, 'uploader', (browser) => new Uploader({ model: browser.model, translator }));\n        setToolbar(browser, createToolbarFactory(toolbarRegistry, settings, FILE_BROWSER_FACTORY, browserWidget.id, translator));\n        labShell.add(browser, 'left', { rank: 100 });\n        commands.addCommand(CommandIDs.showBrowser, {\n            execute: args => {\n                const path = args.path || '';\n                const browserForPath = Private.getBrowserForPath(path, factory);\n                // Check for browser not found\n                if (!browserForPath) {\n                    return;\n                }\n                // Shortcut if we are using the main file browser\n                if (browser === browserForPath) {\n                    labShell.activateById(browser.id);\n                    return;\n                }\n                else {\n                    const areas = ['left', 'right'];\n                    for (const area of areas) {\n                        const it = labShell.widgets(area);\n                        let widget = it.next();\n                        while (widget) {\n                            if (widget.contains(browserForPath)) {\n                                labShell.activateById(widget.id);\n                                return;\n                            }\n                            widget = it.next();\n                        }\n                    }\n                }\n            }\n        });\n        commands.addCommand(CommandIDs.hideBrowser, {\n            execute: () => {\n                const widget = tracker.currentWidget;\n                if (widget && !widget.isHidden) {\n                    labShell.collapseLeft();\n                }\n            }\n        });\n        // If the layout is a fresh session without saved data and not in single document\n        // mode, open file browser.\n        void labShell.restored.then(layout => {\n            if (layout.fresh && labShell.mode !== 'single-document') {\n                void commands.execute(CommandIDs.showBrowser, void 0);\n            }\n        });\n        void Promise.all([app.restored, browser.model.restored]).then(() => {\n            function maybeCreate() {\n                // Create a launcher if there are no open items.\n                if (labShell.isEmpty('main') &&\n                    commands.hasCommand('launcher:create')) {\n                    void Private.createLauncher(commands, browser);\n                }\n            }\n            // When layout is modified, create a launcher if there are no open items.\n            labShell.layoutModified.connect(() => {\n                maybeCreate();\n            });\n            // Whether to automatically navigate to a document's current directory\n            labShell.currentChanged.connect(async (_, change) => {\n                if (browser.navigateToCurrentDirectory && change.newValue) {\n                    const { newValue } = change;\n                    const context = docManager.contextForWidget(newValue);\n                    if (context) {\n                        const { path } = context;\n                        try {\n                            await Private.navigateToPath(path, factory, translator);\n                        }\n                        catch (reason) {\n                            console.warn(`${CommandIDs.goToPath} failed to open: ${path}`, reason);\n                        }\n                    }\n                }\n            });\n            maybeCreate();\n        });\n    }\n};\n/**\n * The default file browser share-file plugin\n *\n * This extension adds a \"Copy Shareable Link\" command that generates a copy-\n * pastable URL. This url can be used to open a particular file in JupyterLab,\n * handy for emailing links or bookmarking for reference.\n *\n * If you need to change how this link is generated (for instance, to copy a\n * /user-redirect URL for JupyterHub), disable this plugin and replace it\n * with another implementation.\n */\nconst shareFile = {\n    id: '@jupyterlab/filebrowser-extension:share-file',\n    requires: [IFileBrowserFactory, ITranslator],\n    autoStart: true,\n    activate: (app, factory, translator) => {\n        const trans = translator.load('jupyterlab');\n        const { commands } = app;\n        const { tracker } = factory;\n        commands.addCommand(CommandIDs.copyShareableLink, {\n            execute: () => {\n                const widget = tracker.currentWidget;\n                const model = widget === null || widget === void 0 ? void 0 : widget.selectedItems().next();\n                if (!model) {\n                    return;\n                }\n                Clipboard.copyToSystem(PageConfig.getUrl({\n                    workspace: PageConfig.defaultWorkspace,\n                    treePath: model.path,\n                    toShare: true\n                }));\n            },\n            isVisible: () => !!tracker.currentWidget &&\n                toArray(tracker.currentWidget.selectedItems()).length === 1,\n            icon: linkIcon.bindprops({ stylesheet: 'menuItem' }),\n            label: trans.__('Copy Shareable Link')\n        });\n    }\n};\n/**\n * The \"Open With\" context menu.\n *\n * This is its own plugin in case you would like to disable this feature.\n * e.g. jupyter labextension disable @jupyterlab/filebrowser-extension:open-with\n */\nconst openWithPlugin = {\n    id: '@jupyterlab/filebrowser-extension:open-with',\n    requires: [IFileBrowserFactory],\n    autoStart: true,\n    activate: (app, factory) => {\n        const { docRegistry } = app;\n        const { tracker } = factory;\n        let items = [];\n        function updateOpenWithMenu(contextMenu) {\n            var _a, _b;\n            const openWith = (_b = (_a = contextMenu.menu.items.find(item => {\n                var _a;\n                return item.type === 'submenu' &&\n                    ((_a = item.submenu) === null || _a === void 0 ? void 0 : _a.id) === 'jp-contextmenu-open-with';\n            })) === null || _a === void 0 ? void 0 : _a.submenu) !== null && _b !== void 0 ? _b : null;\n            if (!openWith) {\n                return; // Bail early if the open with menu is not displayed\n            }\n            // clear the current menu items\n            items.forEach(item => item.dispose());\n            items.length = 0;\n            // Ensure that the menu is empty\n            openWith.clearItems();\n            // get the widget factories that could be used to open all of the items\n            // in the current filebrowser selection\n            const factories = tracker.currentWidget\n                ? Private.OpenWith.intersection(map(tracker.currentWidget.selectedItems(), i => {\n                    return Private.OpenWith.getFactories(docRegistry, i);\n                }))\n                : new Set();\n            // make new menu items from the widget factories\n            items = [...factories].map(factory => openWith.addItem({\n                args: { factory: factory },\n                command: CommandIDs.open\n            }));\n        }\n        app.contextMenu.opened.connect(updateOpenWithMenu);\n    }\n};\n/**\n * The \"Open in New Browser Tab\" context menu.\n *\n * This is its own plugin in case you would like to disable this feature.\n * e.g. jupyter labextension disable @jupyterlab/filebrowser-extension:open-browser-tab\n *\n * Note: If disabling this, you may also want to disable:\n * @jupyterlab/docmanager-extension:open-browser-tab\n */\nconst openBrowserTabPlugin = {\n    id: '@jupyterlab/filebrowser-extension:open-browser-tab',\n    requires: [IFileBrowserFactory, ITranslator],\n    autoStart: true,\n    activate: (app, factory, translator) => {\n        const { commands } = app;\n        const trans = translator.load('jupyterlab');\n        const { tracker } = factory;\n        commands.addCommand(CommandIDs.openBrowserTab, {\n            execute: args => {\n                const widget = tracker.currentWidget;\n                if (!widget) {\n                    return;\n                }\n                const mode = args['mode'];\n                return Promise.all(toArray(map(widget.selectedItems(), item => {\n                    if (mode === 'single-document') {\n                        const url = PageConfig.getUrl({\n                            mode: 'single-document',\n                            treePath: item.path\n                        });\n                        const opened = window.open();\n                        if (opened) {\n                            opened.opener = null;\n                            opened.location.href = url;\n                        }\n                        else {\n                            throw new Error('Failed to open new browser tab.');\n                        }\n                    }\n                    else {\n                        return commands.execute('docmanager:open-browser-tab', {\n                            path: item.path\n                        });\n                    }\n                })));\n            },\n            icon: addIcon.bindprops({ stylesheet: 'menuItem' }),\n            label: args => args['mode'] === 'single-document'\n                ? trans.__('Open in Simple Mode')\n                : trans.__('Open in New Browser Tab'),\n            mnemonic: 0\n        });\n    }\n};\n/**\n * A plugin providing file upload status.\n */\nexport const fileUploadStatus = {\n    id: '@jupyterlab/filebrowser-extension:file-upload-status',\n    autoStart: true,\n    requires: [IFileBrowserFactory, ITranslator],\n    optional: [IStatusBar],\n    activate: (app, browser, translator, statusBar) => {\n        if (!statusBar) {\n            // Automatically disable if statusbar missing\n            return;\n        }\n        const item = new FileUploadStatus({\n            tracker: browser.tracker,\n            translator\n        });\n        statusBar.registerStatusItem('@jupyterlab/filebrowser-extension:file-upload-status', {\n            item,\n            align: 'middle',\n            isActive: () => {\n                return !!item.model && item.model.items.length > 0;\n            },\n            activeStateChanged: item.model.stateChanged\n        });\n    }\n};\n/**\n * A plugin to open files from remote URLs\n */\nconst openUrlPlugin = {\n    id: '@jupyterlab/filebrowser-extension:open-url',\n    autoStart: true,\n    requires: [IFileBrowserFactory, ITranslator],\n    optional: [ICommandPalette],\n    activate: (app, factory, translator, palette) => {\n        const { commands } = app;\n        const trans = translator.load('jupyterlab');\n        const { defaultBrowser: browser } = factory;\n        const command = CommandIDs.openUrl;\n        commands.addCommand(command, {\n            label: args => args.url ? trans.__('Open %1', args.url) : trans.__('Open from URL…'),\n            caption: args => args.url ? trans.__('Open %1', args.url) : trans.__('Open from URL'),\n            execute: async (args) => {\n                var _a, _b, _c;\n                let url = (_a = args === null || args === void 0 ? void 0 : args.url) !== null && _a !== void 0 ? _a : '';\n                if (!url) {\n                    url = (_b = (await InputDialog.getText({\n                        label: trans.__('URL'),\n                        placeholder: 'https://example.com/path/to/file',\n                        title: trans.__('Open URL'),\n                        okLabel: trans.__('Open')\n                    })).value) !== null && _b !== void 0 ? _b : undefined;\n                }\n                if (!url) {\n                    return;\n                }\n                let type = '';\n                let blob;\n                // fetch the file from the URL\n                try {\n                    const req = await fetch(url);\n                    blob = await req.blob();\n                    type = (_c = req.headers.get('Content-Type')) !== null && _c !== void 0 ? _c : '';\n                }\n                catch (reason) {\n                    if (reason.response && reason.response.status !== 200) {\n                        reason.message = trans.__('Could not open URL: %1', url);\n                    }\n                    return showErrorMessage(trans.__('Cannot fetch'), reason);\n                }\n                // upload the content of the file to the server\n                try {\n                    const name = PathExt.basename(url);\n                    const file = new File([blob], name, { type });\n                    const model = await browser.model.upload(file);\n                    return commands.execute('docmanager:open', {\n                        path: model.path\n                    });\n                }\n                catch (error) {\n                    return showErrorMessage(trans._p('showErrorMessage', 'Upload Error'), error);\n                }\n            }\n        });\n        if (palette) {\n            palette.addItem({\n                command,\n                category: trans.__('File Operations')\n            });\n        }\n    }\n};\n/**\n * Add the main file browser commands to the application's command registry.\n */\nfunction addCommands(app, factory, translator, settingRegistry, commandPalette) {\n    const trans = translator.load('jupyterlab');\n    const { docRegistry: registry, commands } = app;\n    const { defaultBrowser: browser, tracker } = factory;\n    commands.addCommand(CommandIDs.del, {\n        execute: () => {\n            const widget = tracker.currentWidget;\n            if (widget) {\n                return widget.delete();\n            }\n        },\n        icon: closeIcon.bindprops({ stylesheet: 'menuItem' }),\n        label: trans.__('Delete'),\n        mnemonic: 0\n    });\n    commands.addCommand(CommandIDs.copy, {\n        execute: () => {\n            const widget = tracker.currentWidget;\n            if (widget) {\n                return widget.copy();\n            }\n        },\n        icon: copyIcon.bindprops({ stylesheet: 'menuItem' }),\n        label: trans.__('Copy'),\n        mnemonic: 0\n    });\n    commands.addCommand(CommandIDs.cut, {\n        execute: () => {\n            const widget = tracker.currentWidget;\n            if (widget) {\n                return widget.cut();\n            }\n        },\n        icon: cutIcon.bindprops({ stylesheet: 'menuItem' }),\n        label: trans.__('Cut')\n    });\n    commands.addCommand(CommandIDs.duplicate, {\n        execute: () => {\n            const widget = tracker.currentWidget;\n            if (widget) {\n                return widget.duplicate();\n            }\n        },\n        icon: copyIcon.bindprops({ stylesheet: 'menuItem' }),\n        label: trans.__('Duplicate')\n    });\n    commands.addCommand(CommandIDs.goToPath, {\n        execute: async (args) => {\n            var _a;\n            const path = args.path || '';\n            const showBrowser = !((_a = args === null || args === void 0 ? void 0 : args.dontShowBrowser) !== null && _a !== void 0 ? _a : false);\n            try {\n                const item = await Private.navigateToPath(path, factory, translator);\n                if (item.type !== 'directory' && showBrowser) {\n                    const browserForPath = Private.getBrowserForPath(path, factory);\n                    if (browserForPath) {\n                        browserForPath.clearSelectedItems();\n                        const parts = path.split('/');\n                        const name = parts[parts.length - 1];\n                        if (name) {\n                            await browserForPath.selectItemByName(name);\n                        }\n                    }\n                }\n            }\n            catch (reason) {\n                console.warn(`${CommandIDs.goToPath} failed to go to: ${path}`, reason);\n            }\n            if (showBrowser) {\n                return commands.execute(CommandIDs.showBrowser, { path });\n            }\n        }\n    });\n    commands.addCommand(CommandIDs.goUp, {\n        label: 'go up',\n        execute: async () => {\n            const browserForPath = Private.getBrowserForPath('', factory);\n            if (!browserForPath) {\n                return;\n            }\n            const { model } = browserForPath;\n            await model.restored;\n            if (model.path === model.rootPath) {\n                return;\n            }\n            try {\n                await model.cd('..');\n            }\n            catch (reason) {\n                console.warn(`${CommandIDs.goUp} failed to go to parent directory of ${model.path}`, reason);\n            }\n        }\n    });\n    commands.addCommand(CommandIDs.openPath, {\n        label: args => args.path ? trans.__('Open %1', args.path) : trans.__('Open from Path…'),\n        caption: args => args.path ? trans.__('Open %1', args.path) : trans.__('Open from path'),\n        execute: async (args) => {\n            var _a;\n            let path;\n            if (args === null || args === void 0 ? void 0 : args.path) {\n                path = args.path;\n            }\n            else {\n                path = (_a = (await InputDialog.getText({\n                    label: trans.__('Path'),\n                    placeholder: '/path/relative/to/jlab/root',\n                    title: trans.__('Open Path'),\n                    okLabel: trans.__('Open')\n                })).value) !== null && _a !== void 0 ? _a : undefined;\n            }\n            if (!path) {\n                return;\n            }\n            try {\n                const trailingSlash = path !== '/' && path.endsWith('/');\n                if (trailingSlash) {\n                    // The normal contents service errors on paths ending in slash\n                    path = path.slice(0, path.length - 1);\n                }\n                const browserForPath = Private.getBrowserForPath(path, factory);\n                const { services } = browserForPath.model.manager;\n                const item = await services.contents.get(path, {\n                    content: false\n                });\n                if (trailingSlash && item.type !== 'directory') {\n                    throw new Error(`Path ${path}/ is not a directory`);\n                }\n                await commands.execute(CommandIDs.goToPath, {\n                    path,\n                    dontShowBrowser: args.dontShowBrowser\n                });\n                if (item.type === 'directory') {\n                    return;\n                }\n                return commands.execute('docmanager:open', { path });\n            }\n            catch (reason) {\n                if (reason.response && reason.response.status === 404) {\n                    reason.message = trans.__('Could not find path: %1', path);\n                }\n                return showErrorMessage(trans.__('Cannot open'), reason);\n            }\n        }\n    });\n    // Add the openPath command to the command palette\n    if (commandPalette) {\n        commandPalette.addItem({\n            command: CommandIDs.openPath,\n            category: trans.__('File Operations')\n        });\n    }\n    commands.addCommand(CommandIDs.open, {\n        execute: args => {\n            const factory = args['factory'] || void 0;\n            const widget = tracker.currentWidget;\n            if (!widget) {\n                return;\n            }\n            const { contents } = widget.model.manager.services;\n            return Promise.all(toArray(map(widget.selectedItems(), item => {\n                if (item.type === 'directory') {\n                    const localPath = contents.localPath(item.path);\n                    return widget.model.cd(`/${localPath}`);\n                }\n                return commands.execute('docmanager:open', {\n                    factory: factory,\n                    path: item.path\n                });\n            })));\n        },\n        icon: args => {\n            var _a;\n            const factory = args['factory'] || void 0;\n            if (factory) {\n                // if an explicit factory is passed...\n                const ft = registry.getFileType(factory);\n                // ...set an icon if the factory name corresponds to a file type name...\n                // ...or leave the icon blank\n                return (_a = ft === null || ft === void 0 ? void 0 : ft.icon) === null || _a === void 0 ? void 0 : _a.bindprops({ stylesheet: 'menuItem' });\n            }\n            else {\n                return folderIcon.bindprops({ stylesheet: 'menuItem' });\n            }\n        },\n        // FIXME-TRANS: Is this localizable?\n        label: args => (args['label'] || args['factory'] || trans.__('Open')),\n        mnemonic: 0\n    });\n    commands.addCommand(CommandIDs.paste, {\n        execute: () => {\n            const widget = tracker.currentWidget;\n            if (widget) {\n                return widget.paste();\n            }\n        },\n        icon: pasteIcon.bindprops({ stylesheet: 'menuItem' }),\n        label: trans.__('Paste'),\n        mnemonic: 0\n    });\n    commands.addCommand(CommandIDs.createNewDirectory, {\n        execute: () => {\n            const widget = tracker.currentWidget;\n            if (widget) {\n                return widget.createNewDirectory();\n            }\n        },\n        icon: newFolderIcon.bindprops({ stylesheet: 'menuItem' }),\n        label: trans.__('New Folder')\n    });\n    commands.addCommand(CommandIDs.createNewFile, {\n        execute: () => {\n            const widget = tracker.currentWidget;\n            if (widget) {\n                return widget.createNewFile({ ext: 'txt' });\n            }\n        },\n        icon: textEditorIcon.bindprops({ stylesheet: 'menuItem' }),\n        label: trans.__('New File')\n    });\n    commands.addCommand(CommandIDs.createNewMarkdownFile, {\n        execute: () => {\n            const widget = tracker.currentWidget;\n            if (widget) {\n                return widget.createNewFile({ ext: 'md' });\n            }\n        },\n        icon: markdownIcon.bindprops({ stylesheet: 'menuItem' }),\n        label: trans.__('New Markdown File')\n    });\n    commands.addCommand(CommandIDs.refresh, {\n        execute: args => {\n            const widget = tracker.currentWidget;\n            if (widget) {\n                return widget.model.refresh();\n            }\n        },\n        icon: refreshIcon.bindprops({ stylesheet: 'menuItem' }),\n        caption: trans.__('Refresh the file browser.'),\n        label: trans.__('Refresh File List')\n    });\n    commands.addCommand(CommandIDs.rename, {\n        execute: args => {\n            const widget = tracker.currentWidget;\n            if (widget) {\n                return widget.rename();\n            }\n        },\n        icon: editIcon.bindprops({ stylesheet: 'menuItem' }),\n        label: trans.__('Rename'),\n        mnemonic: 0\n    });\n    commands.addCommand(CommandIDs.copyPath, {\n        execute: () => {\n            const widget = tracker.currentWidget;\n            if (!widget) {\n                return;\n            }\n            const item = widget.selectedItems().next();\n            if (!item) {\n                return;\n            }\n            Clipboard.copyToSystem(item.path);\n        },\n        isVisible: () => !!tracker.currentWidget &&\n            tracker.currentWidget.selectedItems().next !== undefined,\n        icon: fileIcon.bindprops({ stylesheet: 'menuItem' }),\n        label: trans.__('Copy Path')\n    });\n    commands.addCommand(CommandIDs.shutdown, {\n        execute: () => {\n            const widget = tracker.currentWidget;\n            if (widget) {\n                return widget.shutdownKernels();\n            }\n        },\n        icon: stopIcon.bindprops({ stylesheet: 'menuItem' }),\n        label: trans.__('Shut Down Kernel')\n    });\n    commands.addCommand(CommandIDs.toggleBrowser, {\n        execute: () => {\n            if (browser.isHidden) {\n                return commands.execute(CommandIDs.showBrowser, void 0);\n            }\n            return commands.execute(CommandIDs.hideBrowser, void 0);\n        }\n    });\n    commands.addCommand(CommandIDs.createLauncher, {\n        label: trans.__('New Launcher'),\n        icon: args => (args.toolbar ? addIcon : undefined),\n        execute: (args) => {\n            if (commands.hasCommand('launcher:create')) {\n                return Private.createLauncher(commands, browser, args);\n            }\n        }\n    });\n    if (settingRegistry) {\n        commands.addCommand(CommandIDs.toggleNavigateToCurrentDirectory, {\n            label: trans.__('Show Active File in File Browser'),\n            isToggled: () => browser.navigateToCurrentDirectory,\n            execute: () => {\n                const value = !browser.navigateToCurrentDirectory;\n                const key = 'navigateToCurrentDirectory';\n                return settingRegistry\n                    .set('@jupyterlab/filebrowser-extension:browser', key, value)\n                    .catch((reason) => {\n                    console.error(`Failed to set navigateToCurrentDirectory setting`);\n                });\n            }\n        });\n    }\n    commands.addCommand(CommandIDs.toggleLastModified, {\n        label: trans.__('Show Last Modified Column'),\n        isToggled: () => browser.showLastModifiedColumn,\n        execute: () => {\n            const value = !browser.showLastModifiedColumn;\n            const key = 'showLastModifiedColumn';\n            if (settingRegistry) {\n                return settingRegistry\n                    .set('@jupyterlab/filebrowser-extension:browser', key, value)\n                    .catch((reason) => {\n                    console.error(`Failed to set showLastModifiedColumn setting`);\n                });\n            }\n        }\n    });\n    commands.addCommand(CommandIDs.toggleHiddenFiles, {\n        label: trans.__('Show Hidden Files'),\n        isToggled: () => browser.showHiddenFiles,\n        isVisible: () => PageConfig.getOption('allow_hidden_files') === 'true',\n        execute: () => {\n            const value = !browser.showHiddenFiles;\n            const key = 'showHiddenFiles';\n            if (settingRegistry) {\n                return settingRegistry\n                    .set('@jupyterlab/filebrowser-extension:browser', key, value)\n                    .catch((reason) => {\n                    console.error(`Failed to set showHiddenFiles setting`);\n                });\n            }\n        }\n    });\n    commands.addCommand(CommandIDs.search, {\n        label: trans.__('Search on File Names'),\n        execute: () => alert('search')\n    });\n    if (commandPalette) {\n        commandPalette.addItem({\n            command: CommandIDs.toggleNavigateToCurrentDirectory,\n            category: trans.__('File Operations')\n        });\n    }\n}\n/**\n * A namespace for private module data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Create a launcher for a given filebrowser widget.\n     */\n    function createLauncher(commands, browser, args) {\n        const { model } = browser;\n        return commands\n            .execute('launcher:create', Object.assign({ cwd: model.path }, args))\n            .then((launcher) => {\n            model.pathChanged.connect(() => {\n                if (launcher.content) {\n                    launcher.content.cwd = model.path;\n                }\n            }, launcher);\n            return launcher;\n        });\n    }\n    Private.createLauncher = createLauncher;\n    /**\n     * Get browser object given file path.\n     */\n    function getBrowserForPath(path, factory) {\n        const { defaultBrowser: browser, tracker } = factory;\n        const driveName = browser.model.manager.services.contents.driveName(path);\n        if (driveName) {\n            const browserForPath = tracker.find(_path => _path.model.driveName === driveName);\n            if (!browserForPath) {\n                // warn that no filebrowser could be found for this driveName\n                console.warn(`${CommandIDs.goToPath} failed to find filebrowser for path: ${path}`);\n                return;\n            }\n            return browserForPath;\n        }\n        // if driveName is empty, assume the main filebrowser\n        return browser;\n    }\n    Private.getBrowserForPath = getBrowserForPath;\n    /**\n     * Navigate to a path or the path containing a file.\n     */\n    async function navigateToPath(path, factory, translator) {\n        const trans = translator.load('jupyterlab');\n        const browserForPath = Private.getBrowserForPath(path, factory);\n        if (!browserForPath) {\n            throw new Error(trans.__('No browser for path'));\n        }\n        const { services } = browserForPath.model.manager;\n        const localPath = services.contents.localPath(path);\n        await services.ready;\n        const item = await services.contents.get(path, { content: false });\n        const { model } = browserForPath;\n        await model.restored;\n        if (item.type === 'directory') {\n            await model.cd(`/${localPath}`);\n        }\n        else {\n            await model.cd(`/${PathExt.dirname(localPath)}`);\n        }\n        return item;\n    }\n    Private.navigateToPath = navigateToPath;\n    /**\n     * Restores file browser state and overrides state if tree resolver resolves.\n     */\n    async function restoreBrowser(browser, commands, router, tree) {\n        const restoring = 'jp-mod-restoring';\n        browser.addClass(restoring);\n        if (!router) {\n            await browser.model.restore(browser.id);\n            await browser.model.refresh();\n            browser.removeClass(restoring);\n            return;\n        }\n        const listener = async () => {\n            router.routed.disconnect(listener);\n            const paths = await (tree === null || tree === void 0 ? void 0 : tree.paths);\n            if ((paths === null || paths === void 0 ? void 0 : paths.file) || (paths === null || paths === void 0 ? void 0 : paths.browser)) {\n                // Restore the model without populating it.\n                await browser.model.restore(browser.id, false);\n                if (paths.file) {\n                    await commands.execute(CommandIDs.openPath, {\n                        path: paths.file,\n                        dontShowBrowser: true\n                    });\n                }\n                if (paths.browser) {\n                    await commands.execute(CommandIDs.openPath, {\n                        path: paths.browser,\n                        dontShowBrowser: true\n                    });\n                }\n            }\n            else {\n                await browser.model.restore(browser.id);\n                await browser.model.refresh();\n            }\n            browser.removeClass(restoring);\n        };\n        router.routed.connect(listener);\n    }\n    Private.restoreBrowser = restoreBrowser;\n})(Private || (Private = {}));\n/**\n * Export the plugins as default.\n */\nconst plugins = [\n    factory,\n    browser,\n    shareFile,\n    fileUploadStatus,\n    downloadPlugin,\n    browserWidget,\n    openWithPlugin,\n    openBrowserTabPlugin,\n    openUrlPlugin\n];\nexport default plugins;\n(function (Private) {\n    let OpenWith;\n    (function (OpenWith) {\n        /**\n         * Get the factories for the selected item\n         *\n         * @param docRegistry Application document registry\n         * @param item Selected item model\n         * @returns Available factories for the model\n         */\n        function getFactories(docRegistry, item) {\n            var _a;\n            const factories = docRegistry\n                .preferredWidgetFactories(item.path)\n                .map(f => f.name);\n            const notebookFactory = (_a = docRegistry.getWidgetFactory('notebook')) === null || _a === void 0 ? void 0 : _a.name;\n            if (notebookFactory &&\n                item.type === 'notebook' &&\n                factories.indexOf(notebookFactory) === -1) {\n                factories.unshift(notebookFactory);\n            }\n            return factories;\n        }\n        OpenWith.getFactories = getFactories;\n        /**\n         * Return the intersection of multiple arrays.\n         *\n         * @param iter Iterator of arrays\n         * @returns Set of common elements to all arrays\n         */\n        function intersection(iter) {\n            // pop the first element of iter\n            const first = iter.next();\n            // first will be undefined if iter is empty\n            if (!first) {\n                return new Set();\n            }\n            // \"initialize\" the intersection from first\n            const isect = new Set(first);\n            // reduce over the remaining elements of iter\n            return reduce(iter, (isect, subarr) => {\n                // filter out all elements not present in both isect and subarr,\n                // accumulate result in new set\n                return new Set(subarr.filter(x => isect.has(x)));\n            }, isect);\n        }\n        OpenWith.intersection = intersection;\n    })(OpenWith = Private.OpenWith || (Private.OpenWith = {}));\n})(Private || (Private = {}));\n//# sourceMappingURL=index.js.map"],"names":["FILE_BROWSER_FACTORY","CommandIDs","copy","copyDownloadLink","createLauncher","cut","del","download","duplicate","hideBrowser","goToPath","goUp","openPath","openUrl","open","openBrowserTab","paste","createNewDirectory","createNewFile","createNewMarkdownFile","refresh","rename","copyShareableLink","copyPath","showBrowser","shutdown","toggleBrowser","toggleNavigateToCurrentDirectory","toggleLastModified","search","toggleHiddenFiles","namespace","browser","id","requires","IFileBrowserFactory","ITranslator","optional","ILayoutRestorer","ISettingRegistry","ITreePathUpdater","ICommandPalette","provides","IFileBrowserCommands","autoStart","activate","async","app","factory","translator","restorer","settingRegistry","treePathUpdater","commandPalette","trans","load","defaultBrowser","add","preferredPath","PageConfig","model","cd","docRegistry","registry","commands","tracker","addCommand","execute","widget","currentWidget","delete","icon","closeIcon","stylesheet","label","__","mnemonic","copyIcon","cutIcon","args","_a","path","dontShowBrowser","Private","navigateToPath","type","browserForPath","getBrowserForPath","clearSelectedItems","parts","split","name","length","selectItemByName","reason","console","warn","restored","rootPath","caption","InputDialog","placeholder","title","okLabel","value","undefined","trailingSlash","endsWith","slice","services","manager","item","contents","get","content","Error","response","status","message","showErrorMessage","addItem","command","category","Promise","all","toArray","map","selectedItems","localPath","ft","getFileType","bindprops","folderIcon","pasteIcon","newFolderIcon","ext","textEditorIcon","markdownIcon","refreshIcon","editIcon","next","Clipboard","isVisible","fileIcon","shutdownKernels","stopIcon","isHidden","toolbar","addIcon","hasCommand","isToggled","navigateToCurrentDirectory","set","catch","error","showLastModifiedColumn","showHiddenFiles","alert","addCommands","updateBrowserTitle","binding","find","keyBindings","b","ks","keys","CommandRegistry","join","keyBindingChanged","connect","then","pathChanged","sender","newValue","settings","fileBrowserConfig","useFuzzyFilter","fileBrowserModelConfig","filterDirectories","onSettingsChanged","key","composite","changed","IDocumentManager","IStateDB","IRouter","JupyterFrontEnd","docManager","state","router","tree","WidgetTracker","createFileBrowser","options","FilterFileBrowserModel","auto","driveName","refreshInterval","restore","FileBrowser","restoreBrowser","downloadPlugin","downloadIcon","getDownloadUrl","url","browserWidget","IToolbarWidgetRegistry","ILabShell","toolbarRegistry","labShell","node","setAttribute","registerFactory","Uploader","setToolbar","createToolbarFactory","rank","areas","area","it","widgets","contains","activateById","collapseLeft","layout","fresh","mode","maybeCreate","isEmpty","layoutModified","currentChanged","_","change","context","contextForWidget","shareFile","workspace","treePath","toShare","linkIcon","openWithPlugin","items","contextMenu","opened","_b","openWith","menu","submenu","forEach","dispose","clearItems","factories","OpenWith","intersection","i","getFactories","Set","openBrowserTabPlugin","window","opener","location","href","fileUploadStatus","IStatusBar","statusBar","FileUploadStatus","registerStatusItem","align","isActive","activeStateChanged","stateChanged","openUrlPlugin","palette","_c","blob","req","fetch","headers","PathExt","file","File","upload","_p","Object","assign","cwd","launcher","_path","ready","restoring","addClass","removeClass","listener","routed","disconnect","paths","preferredWidgetFactories","f","notebookFactory","getWidgetFactory","indexOf","unshift","iter","first","isect","reduce","subarr","filter","x","has"],"sourceRoot":""}
{"version":3,"file":"5709.f2c12cc.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/services-extension/lib/configsection.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/services-extension/lib/event.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/services-extension/lib/index.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { ServerConnection, } from '@jupyterlab/services';\n/**\n * A class to manager config sections in the browser.\n */\nexport class LiteConfigSectionManager {\n    /**\n     * Construct a new config section manager.\n     */\n    constructor(options) {\n        var _a;\n        this._serverSettings = (_a = options.serverSettings) !== null && _a !== void 0 ? _a : ServerConnection.makeSettings();\n    }\n    /**\n     * The server settings.\n     */\n    get serverSettings() {\n        return this._serverSettings;\n    }\n    /**\n     * Create a new config section.\n     */\n    async create(options) {\n        return {\n            data: {},\n            serverSettings: this._serverSettings,\n            update: async (newData) => {\n                return newData;\n            },\n        };\n    }\n}\n//# sourceMappingURL=configsection.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { ServerConnection } from '@jupyterlab/services';\nimport { Signal, Stream } from '@lumino/signaling';\n/**\n * A local event manager service.\n *\n * #### Notes\n * Schema IDs are not verified and all client-emitted events emit.\n */\nexport class LocalEventManager {\n    /**\n     * Construct a new event manager.\n     */\n    constructor(options) {\n        var _a;\n        this._isDisposed = false;\n        this._serverSettings = (_a = options.serverSettings) !== null && _a !== void 0 ? _a : ServerConnection.makeSettings();\n        this._stream = new Stream(this);\n    }\n    /**\n     * Dispose of the resources used by the manager.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        Signal.clearData(this);\n        this._stream.stop();\n    }\n    /**\n     * Whether the manager is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * The stream of events.\n     */\n    get stream() {\n        return this._stream;\n    }\n    /**\n     * The server settings.\n     */\n    get serverSettings() {\n        return this._serverSettings;\n    }\n    /**\n     * Emit an event for all listeners.\n     */\n    async emit({ data, schema_id }) {\n        this._stream.emit({ ...data, schema_id });\n    }\n}\n//# sourceMappingURL=event.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { PageConfig } from '@jupyterlab/coreutils';\nimport { ConfigSection, IConfigSectionManager, IDefaultDrive, IEventManager, IKernelManager, IKernelSpecManager, INbConvertManager, IServerSettings, ISessionManager, ISettingManager, IUserManager, KernelManager, KernelSpecManager, NbConvertManager, ServerConnection, SessionManager, UserManager, } from '@jupyterlab/services';\nimport { BrowserStorageDrive } from '@jupyterlite/contents';\nimport { IKernelClient, IKernelSpecClient, IKernelSpecs, KernelSpecs, LiteKernelClient, LiteKernelSpecClient, } from '@jupyterlite/kernel';\nimport { ILocalForage, ensureMemoryStorage } from '@jupyterlite/localforage';\nimport { LiteSessionClient } from '@jupyterlite/session';\nimport { Settings as JupyterLiteSettings } from '@jupyterlite/settings';\nimport localforage from 'localforage';\nimport { WebSocket } from 'mock-socket';\nimport { LiteConfigSectionManager } from './configsection';\nimport { LocalEventManager } from './event';\n/**\n * Config section manager plugin.\n */\nconst configSectionManager = {\n    id: '@jupyterlite/services-extension:config-section-manager',\n    autoStart: true,\n    provides: IConfigSectionManager,\n    optional: [IServerSettings],\n    description: 'Provides the config section manager.',\n    activate: (_, serverSettings) => {\n        const manager = new LiteConfigSectionManager({ serverSettings });\n        // Set the config section manager for the global ConfigSection.\n        ConfigSection._setConfigSectionManager(manager);\n        return manager;\n    },\n};\n/**\n * The default drive plugin.\n */\nconst defaultDrivePlugin = {\n    id: '@jupyterlite/services-extension:default-drive',\n    description: 'The default drive for the contents manager.',\n    autoStart: true,\n    provides: IDefaultDrive,\n    requires: [ILocalForage],\n    activate: async (_, forage) => {\n        const storageName = PageConfig.getOption('contentsStorageName');\n        const storageDrivers = JSON.parse(PageConfig.getOption('contentsStorageDrivers') || 'null');\n        const { localforage } = forage;\n        const drive = new BrowserStorageDrive({\n            storageName,\n            storageDrivers,\n            localforage,\n        });\n        return drive;\n    },\n};\n/**\n * The event manager plugin.\n */\nconst eventManagerPlugin = {\n    id: '@jupyterlite/services-extension:event-manager',\n    description: 'The event manager plugin.',\n    autoStart: true,\n    provides: IEventManager,\n    optional: [IServerSettings],\n    activate: (_, serverSettings) => {\n        return new LocalEventManager({ serverSettings });\n    },\n};\n/**\n * The kernel manager plugin.\n */\nconst kernelManagerPlugin = {\n    id: '@jupyterlite/services-extension:kernel-manager',\n    description: 'The kernel manager plugin.',\n    autoStart: true,\n    provides: IKernelManager,\n    requires: [IKernelClient, IKernelSpecClient],\n    optional: [IServerSettings],\n    activate: (_, kernelAPIClient, kernelSpecAPIClient, serverSettings) => {\n        return new KernelManager({\n            kernelAPIClient,\n            kernelSpecAPIClient,\n            serverSettings: {\n                ...ServerConnection.makeSettings(),\n                ...serverSettings,\n                WebSocket,\n            },\n        });\n    },\n};\n/**\n * The client for managing in-browser kernel specs\n */\nconst kernelSpecClientPlugin = {\n    id: '@jupyterlite/services-extension:kernel-spec-client',\n    description: 'The client for managing in-browser kernel specs',\n    autoStart: true,\n    requires: [IKernelSpecs],\n    optional: [IServerSettings],\n    provides: IKernelSpecClient,\n    activate: (_, kernelSpecs, serverSettings) => {\n        return new LiteKernelSpecClient({ kernelSpecs, serverSettings });\n    },\n};\n/**\n * The kernel spec manager plugin.\n */\nconst kernelSpecManagerPlugin = {\n    id: '@jupyterlite/services-extension:kernel-spec-manager',\n    description: 'The kernel spec manager plugin.',\n    autoStart: true,\n    provides: IKernelSpecManager,\n    requires: [IKernelSpecClient],\n    optional: [IKernelSpecs, IServerSettings],\n    activate: (_, kernelSpecAPIClient, kernelSpecs, serverSettings) => {\n        const kernelSpecManager = new KernelSpecManager({\n            kernelSpecAPIClient,\n            serverSettings,\n        });\n        if (kernelSpecs) {\n            // refresh the kernel spec manager when new lite specs are added\n            kernelSpecs.changed.connect(() => {\n                void kernelSpecManager.refreshSpecs();\n            });\n        }\n        return kernelSpecManager;\n    },\n};\n/**\n * The client for managing in-browser kernels\n */\nconst kernelClientPlugin = {\n    id: '@jupyterlite/services-extension:kernel-client',\n    description: 'The client for managing in-browser kernels',\n    autoStart: true,\n    requires: [IKernelSpecs],\n    optional: [IServerSettings],\n    provides: IKernelClient,\n    activate: (_, kernelSpecs, serverSettings) => {\n        return new LiteKernelClient({\n            kernelSpecs,\n            serverSettings,\n        });\n    },\n};\n/**\n * The in-browser kernel spec manager plugin.\n */\nconst liteKernelSpecManagerPlugin = {\n    id: '@jupyterlite/services-extension:kernel-specs',\n    description: 'The in-browser kernel spec manager plugin.',\n    autoStart: true,\n    provides: IKernelSpecs,\n    activate: (_) => {\n        return new KernelSpecs();\n    },\n};\n/**\n * The localforage plugin\n */\nconst localforagePlugin = {\n    id: '@jupyterlite/services-extension:localforage',\n    autoStart: true,\n    provides: ILocalForage,\n    activate: async (_) => {\n        if (JSON.parse(PageConfig.getOption('enableMemoryStorage') || 'false')) {\n            console.warn('Memory storage fallback enabled: contents and settings may not be saved');\n            await ensureMemoryStorage(localforage);\n        }\n        return { localforage };\n    },\n};\n/**\n * The nbconvert manager plugin.\n */\nconst nbConvertManagerPlugin = {\n    id: '@jupyterlite/services-extension:nbconvert-manager',\n    description: 'The nbconvert manager plugin.',\n    autoStart: true,\n    provides: INbConvertManager,\n    optional: [IServerSettings],\n    activate: (_, serverSettings) => {\n        const nbConvertManager = new (class extends NbConvertManager {\n            async getExportFormats(force) {\n                return {};\n            }\n        })({ serverSettings });\n        return nbConvertManager;\n    },\n};\n/**\n * The session manager plugin.\n */\nconst sessionManagerPlugin = {\n    id: '@jupyterlite/services-extension:session-manager',\n    description: 'The session manager plugin.',\n    autoStart: true,\n    provides: ISessionManager,\n    requires: [IKernelManager, IKernelClient],\n    optional: [IServerSettings],\n    activate: (_, kernelManager, kernelClient, serverSettings) => {\n        const sessionAPIClient = new LiteSessionClient({\n            kernelClient,\n            serverSettings,\n        });\n        return new SessionManager({\n            kernelManager,\n            serverSettings,\n            sessionAPIClient,\n        });\n    },\n};\n/**\n * The settings service plugin.\n */\nconst settingsPlugin = {\n    id: '@jupyterlite/services-extension:settings',\n    autoStart: true,\n    requires: [ILocalForage],\n    optional: [IServerSettings],\n    provides: ISettingManager,\n    activate: (_, forage, serverSettings) => {\n        const storageName = PageConfig.getOption('settingsStorageName');\n        const storageDrivers = JSON.parse(PageConfig.getOption('settingsStorageDrivers') || 'null');\n        const { localforage } = forage;\n        const settings = new JupyterLiteSettings({\n            storageName,\n            storageDrivers,\n            localforage,\n            serverSettings: serverSettings !== null && serverSettings !== void 0 ? serverSettings : undefined,\n        });\n        return settings;\n    },\n};\n/**\n * The user manager plugin.\n */\nconst userManagerPlugin = {\n    id: '@jupyterlite/services-extension:user-manager',\n    description: 'The user manager plugin.',\n    autoStart: true,\n    provides: IUserManager,\n    optional: [IServerSettings],\n    activate: (_, serverSettings) => {\n        return new (class extends UserManager {\n            async requestUser() {\n                // no-op\n            }\n        })({ serverSettings });\n    },\n};\nexport default [\n    configSectionManager,\n    defaultDrivePlugin,\n    eventManagerPlugin,\n    kernelManagerPlugin,\n    kernelClientPlugin,\n    kernelSpecClientPlugin,\n    kernelSpecManagerPlugin,\n    liteKernelSpecManagerPlugin,\n    localforagePlugin,\n    nbConvertManagerPlugin,\n    sessionManagerPlugin,\n    settingsPlugin,\n    userManagerPlugin,\n];\n//# sourceMappingURL=index.js.map"],"names":["LiteConfigSectionManager","constructor","options","_a","this","_serverSettings","serverSettings","ServerConnection","makeSettings","create","data","update","async","newData","LocalEventManager","_isDisposed","_stream","Stream","dispose","isDisposed","Signal","clearData","stop","stream","emit","schema_id","configSectionManager","id","autoStart","provides","IConfigSectionManager","optional","IServerSettings","description","activate","_","manager","ConfigSection","_setConfigSectionManager","defaultDrivePlugin","IDefaultDrive","requires","ILocalForage","forage","storageName","PageConfig","getOption","storageDrivers","JSON","parse","localforage","BrowserStorageDrive","eventManagerPlugin","IEventManager","kernelManagerPlugin","IKernelManager","IKernelClient","IKernelSpecClient","kernelAPIClient","kernelSpecAPIClient","KernelManager","WebSocket","kernelSpecClientPlugin","IKernelSpecs","kernelSpecs","LiteKernelSpecClient","kernelSpecManagerPlugin","IKernelSpecManager","kernelSpecManager","KernelSpecManager","changed","connect","refreshSpecs","kernelClientPlugin","LiteKernelClient","liteKernelSpecManagerPlugin","KernelSpecs","localforagePlugin","console","warn","ensureMemoryStorage","nbConvertManagerPlugin","INbConvertManager","NbConvertManager","getExportFormats","force","sessionManagerPlugin","ISessionManager","kernelManager","kernelClient","sessionAPIClient","LiteSessionClient","SessionManager","settingsPlugin","ISettingManager","undefined","IUserManager","UserManager","requestUser"],"sourceRoot":""}
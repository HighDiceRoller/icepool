{"version":3,"file":"5261.00cce9e.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/crelt/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@codemirror/search/dist/index.js"],"sourcesContent":["export default function crelt() {\n  var elt = arguments[0]\n  if (typeof elt == \"string\") elt = document.createElement(elt)\n  var i = 1, next = arguments[1]\n  if (next && typeof next == \"object\" && next.nodeType == null && !Array.isArray(next)) {\n    for (var name in next) if (Object.prototype.hasOwnProperty.call(next, name)) {\n      var value = next[name]\n      if (typeof value == \"string\") elt.setAttribute(name, value)\n      else if (value != null) elt[name] = value\n    }\n    i++\n  }\n  for (; i < arguments.length; i++) add(elt, arguments[i])\n  return elt\n}\n\nfunction add(elt, child) {\n  if (typeof child == \"string\") {\n    elt.appendChild(document.createTextNode(child))\n  } else if (child == null) {\n  } else if (child.nodeType != null) {\n    elt.appendChild(child)\n  } else if (Array.isArray(child)) {\n    for (var i = 0; i < child.length; i++) add(elt, child[i])\n  } else {\n    throw new RangeError(\"Unsupported child node: \" + child)\n  }\n}\n","import { showPanel, EditorView, getPanel, Decoration, ViewPlugin, runScopeHandlers } from '@codemirror/view';\nimport { codePointAt, fromCodePoint, codePointSize, StateEffect, StateField, EditorSelection, Facet, combineConfig, CharCategory, RangeSetBuilder, Prec, EditorState, findClusterBreak } from '@codemirror/state';\nimport elt from 'crelt';\n\nconst basicNormalize = typeof String.prototype.normalize == \"function\"\n    ? x => x.normalize(\"NFKD\") : x => x;\n/**\nA search cursor provides an iterator over text matches in a\ndocument.\n*/\nclass SearchCursor {\n    /**\n    Create a text cursor. The query is the search string, `from` to\n    `to` provides the region to search.\n    \n    When `normalize` is given, it will be called, on both the query\n    string and the content it is matched against, before comparing.\n    You can, for example, create a case-insensitive search by\n    passing `s => s.toLowerCase()`.\n    \n    Text is always normalized with\n    [`.normalize(\"NFKD\")`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize)\n    (when supported).\n    */\n    constructor(text, query, from = 0, to = text.length, normalize, test) {\n        this.test = test;\n        /**\n        The current match (only holds a meaningful value after\n        [`next`](https://codemirror.net/6/docs/ref/#search.SearchCursor.next) has been called and when\n        `done` is false).\n        */\n        this.value = { from: 0, to: 0 };\n        /**\n        Whether the end of the iterated region has been reached.\n        */\n        this.done = false;\n        this.matches = [];\n        this.buffer = \"\";\n        this.bufferPos = 0;\n        this.iter = text.iterRange(from, to);\n        this.bufferStart = from;\n        this.normalize = normalize ? x => normalize(basicNormalize(x)) : basicNormalize;\n        this.query = this.normalize(query);\n    }\n    peek() {\n        if (this.bufferPos == this.buffer.length) {\n            this.bufferStart += this.buffer.length;\n            this.iter.next();\n            if (this.iter.done)\n                return -1;\n            this.bufferPos = 0;\n            this.buffer = this.iter.value;\n        }\n        return codePointAt(this.buffer, this.bufferPos);\n    }\n    /**\n    Look for the next match. Updates the iterator's\n    [`value`](https://codemirror.net/6/docs/ref/#search.SearchCursor.value) and\n    [`done`](https://codemirror.net/6/docs/ref/#search.SearchCursor.done) properties. Should be called\n    at least once before using the cursor.\n    */\n    next() {\n        while (this.matches.length)\n            this.matches.pop();\n        return this.nextOverlapping();\n    }\n    /**\n    The `next` method will ignore matches that partially overlap a\n    previous match. This method behaves like `next`, but includes\n    such matches.\n    */\n    nextOverlapping() {\n        for (;;) {\n            let next = this.peek();\n            if (next < 0) {\n                this.done = true;\n                return this;\n            }\n            let str = fromCodePoint(next), start = this.bufferStart + this.bufferPos;\n            this.bufferPos += codePointSize(next);\n            let norm = this.normalize(str);\n            if (norm.length)\n                for (let i = 0, pos = start;; i++) {\n                    let code = norm.charCodeAt(i);\n                    let match = this.match(code, pos, this.bufferPos + this.bufferStart);\n                    if (i == norm.length - 1) {\n                        if (match) {\n                            this.value = match;\n                            return this;\n                        }\n                        break;\n                    }\n                    if (pos == start && i < str.length && str.charCodeAt(i) == code)\n                        pos++;\n                }\n        }\n    }\n    match(code, pos, end) {\n        let match = null;\n        for (let i = 0; i < this.matches.length; i += 2) {\n            let index = this.matches[i], keep = false;\n            if (this.query.charCodeAt(index) == code) {\n                if (index == this.query.length - 1) {\n                    match = { from: this.matches[i + 1], to: end };\n                }\n                else {\n                    this.matches[i]++;\n                    keep = true;\n                }\n            }\n            if (!keep) {\n                this.matches.splice(i, 2);\n                i -= 2;\n            }\n        }\n        if (this.query.charCodeAt(0) == code) {\n            if (this.query.length == 1)\n                match = { from: pos, to: end };\n            else\n                this.matches.push(1, pos);\n        }\n        if (match && this.test && !this.test(match.from, match.to, this.buffer, this.bufferStart))\n            match = null;\n        return match;\n    }\n}\nif (typeof Symbol != \"undefined\")\n    SearchCursor.prototype[Symbol.iterator] = function () { return this; };\n\nconst empty = { from: -1, to: -1, match: /*@__PURE__*//.*/.exec(\"\") };\nconst baseFlags = \"gm\" + (/x/.unicode == null ? \"\" : \"u\");\n/**\nThis class is similar to [`SearchCursor`](https://codemirror.net/6/docs/ref/#search.SearchCursor)\nbut searches for a regular expression pattern instead of a plain\nstring.\n*/\nclass RegExpCursor {\n    /**\n    Create a cursor that will search the given range in the given\n    document. `query` should be the raw pattern (as you'd pass it to\n    `new RegExp`).\n    */\n    constructor(text, query, options, from = 0, to = text.length) {\n        this.text = text;\n        this.to = to;\n        this.curLine = \"\";\n        /**\n        Set to `true` when the cursor has reached the end of the search\n        range.\n        */\n        this.done = false;\n        /**\n        Will contain an object with the extent of the match and the\n        match object when [`next`](https://codemirror.net/6/docs/ref/#search.RegExpCursor.next)\n        sucessfully finds a match.\n        */\n        this.value = empty;\n        if (/\\\\[sWDnr]|\\n|\\r|\\[\\^/.test(query))\n            return new MultilineRegExpCursor(text, query, options, from, to);\n        this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? \"i\" : \"\"));\n        this.test = options === null || options === void 0 ? void 0 : options.test;\n        this.iter = text.iter();\n        let startLine = text.lineAt(from);\n        this.curLineStart = startLine.from;\n        this.matchPos = toCharEnd(text, from);\n        this.getLine(this.curLineStart);\n    }\n    getLine(skip) {\n        this.iter.next(skip);\n        if (this.iter.lineBreak) {\n            this.curLine = \"\";\n        }\n        else {\n            this.curLine = this.iter.value;\n            if (this.curLineStart + this.curLine.length > this.to)\n                this.curLine = this.curLine.slice(0, this.to - this.curLineStart);\n            this.iter.next();\n        }\n    }\n    nextLine() {\n        this.curLineStart = this.curLineStart + this.curLine.length + 1;\n        if (this.curLineStart > this.to)\n            this.curLine = \"\";\n        else\n            this.getLine(0);\n    }\n    /**\n    Move to the next match, if there is one.\n    */\n    next() {\n        for (let off = this.matchPos - this.curLineStart;;) {\n            this.re.lastIndex = off;\n            let match = this.matchPos <= this.to && this.re.exec(this.curLine);\n            if (match) {\n                let from = this.curLineStart + match.index, to = from + match[0].length;\n                this.matchPos = toCharEnd(this.text, to + (from == to ? 1 : 0));\n                if (from == this.curLineStart + this.curLine.length)\n                    this.nextLine();\n                if ((from < to || from > this.value.to) && (!this.test || this.test(from, to, match))) {\n                    this.value = { from, to, match };\n                    return this;\n                }\n                off = this.matchPos - this.curLineStart;\n            }\n            else if (this.curLineStart + this.curLine.length < this.to) {\n                this.nextLine();\n                off = 0;\n            }\n            else {\n                this.done = true;\n                return this;\n            }\n        }\n    }\n}\nconst flattened = /*@__PURE__*/new WeakMap();\n// Reusable (partially) flattened document strings\nclass FlattenedDoc {\n    constructor(from, text) {\n        this.from = from;\n        this.text = text;\n    }\n    get to() { return this.from + this.text.length; }\n    static get(doc, from, to) {\n        let cached = flattened.get(doc);\n        if (!cached || cached.from >= to || cached.to <= from) {\n            let flat = new FlattenedDoc(from, doc.sliceString(from, to));\n            flattened.set(doc, flat);\n            return flat;\n        }\n        if (cached.from == from && cached.to == to)\n            return cached;\n        let { text, from: cachedFrom } = cached;\n        if (cachedFrom > from) {\n            text = doc.sliceString(from, cachedFrom) + text;\n            cachedFrom = from;\n        }\n        if (cached.to < to)\n            text += doc.sliceString(cached.to, to);\n        flattened.set(doc, new FlattenedDoc(cachedFrom, text));\n        return new FlattenedDoc(from, text.slice(from - cachedFrom, to - cachedFrom));\n    }\n}\nclass MultilineRegExpCursor {\n    constructor(text, query, options, from, to) {\n        this.text = text;\n        this.to = to;\n        this.done = false;\n        this.value = empty;\n        this.matchPos = toCharEnd(text, from);\n        this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? \"i\" : \"\"));\n        this.test = options === null || options === void 0 ? void 0 : options.test;\n        this.flat = FlattenedDoc.get(text, from, this.chunkEnd(from + 5000 /* Chunk.Base */));\n    }\n    chunkEnd(pos) {\n        return pos >= this.to ? this.to : this.text.lineAt(pos).to;\n    }\n    next() {\n        for (;;) {\n            let off = this.re.lastIndex = this.matchPos - this.flat.from;\n            let match = this.re.exec(this.flat.text);\n            // Skip empty matches directly after the last match\n            if (match && !match[0] && match.index == off) {\n                this.re.lastIndex = off + 1;\n                match = this.re.exec(this.flat.text);\n            }\n            if (match) {\n                let from = this.flat.from + match.index, to = from + match[0].length;\n                // If a match goes almost to the end of a noncomplete chunk, try\n                // again, since it'll likely be able to match more\n                if ((this.flat.to >= this.to || match.index + match[0].length <= this.flat.text.length - 10) &&\n                    (!this.test || this.test(from, to, match))) {\n                    this.value = { from, to, match };\n                    this.matchPos = toCharEnd(this.text, to + (from == to ? 1 : 0));\n                    return this;\n                }\n            }\n            if (this.flat.to == this.to) {\n                this.done = true;\n                return this;\n            }\n            // Grow the flattened doc\n            this.flat = FlattenedDoc.get(this.text, this.flat.from, this.chunkEnd(this.flat.from + this.flat.text.length * 2));\n        }\n    }\n}\nif (typeof Symbol != \"undefined\") {\n    RegExpCursor.prototype[Symbol.iterator] = MultilineRegExpCursor.prototype[Symbol.iterator] =\n        function () { return this; };\n}\nfunction validRegExp(source) {\n    try {\n        new RegExp(source, baseFlags);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nfunction toCharEnd(text, pos) {\n    if (pos >= text.length)\n        return pos;\n    let line = text.lineAt(pos), next;\n    while (pos < line.to && (next = line.text.charCodeAt(pos - line.from)) >= 0xDC00 && next < 0xE000)\n        pos++;\n    return pos;\n}\n\nfunction createLineDialog(view) {\n    let line = String(view.state.doc.lineAt(view.state.selection.main.head).number);\n    let input = elt(\"input\", { class: \"cm-textfield\", name: \"line\", value: line });\n    let dom = elt(\"form\", {\n        class: \"cm-gotoLine\",\n        onkeydown: (event) => {\n            if (event.keyCode == 27) { // Escape\n                event.preventDefault();\n                view.dispatch({ effects: dialogEffect.of(false) });\n                view.focus();\n            }\n            else if (event.keyCode == 13) { // Enter\n                event.preventDefault();\n                go();\n            }\n        },\n        onsubmit: (event) => {\n            event.preventDefault();\n            go();\n        }\n    }, elt(\"label\", view.state.phrase(\"Go to line\"), \": \", input), \" \", elt(\"button\", { class: \"cm-button\", type: \"submit\" }, view.state.phrase(\"go\")));\n    function go() {\n        let match = /^([+-])?(\\d+)?(:\\d+)?(%)?$/.exec(input.value);\n        if (!match)\n            return;\n        let { state } = view, startLine = state.doc.lineAt(state.selection.main.head);\n        let [, sign, ln, cl, percent] = match;\n        let col = cl ? +cl.slice(1) : 0;\n        let line = ln ? +ln : startLine.number;\n        if (ln && percent) {\n            let pc = line / 100;\n            if (sign)\n                pc = pc * (sign == \"-\" ? -1 : 1) + (startLine.number / state.doc.lines);\n            line = Math.round(state.doc.lines * pc);\n        }\n        else if (ln && sign) {\n            line = line * (sign == \"-\" ? -1 : 1) + startLine.number;\n        }\n        let docLine = state.doc.line(Math.max(1, Math.min(state.doc.lines, line)));\n        let selection = EditorSelection.cursor(docLine.from + Math.max(0, Math.min(col, docLine.length)));\n        view.dispatch({\n            effects: [dialogEffect.of(false), EditorView.scrollIntoView(selection.from, { y: 'center' })],\n            selection,\n        });\n        view.focus();\n    }\n    return { dom };\n}\nconst dialogEffect = /*@__PURE__*/StateEffect.define();\nconst dialogField = /*@__PURE__*/StateField.define({\n    create() { return true; },\n    update(value, tr) {\n        for (let e of tr.effects)\n            if (e.is(dialogEffect))\n                value = e.value;\n        return value;\n    },\n    provide: f => showPanel.from(f, val => val ? createLineDialog : null)\n});\n/**\nCommand that shows a dialog asking the user for a line number, and\nwhen a valid position is provided, moves the cursor to that line.\n\nSupports line numbers, relative line offsets prefixed with `+` or\n`-`, document percentages suffixed with `%`, and an optional\ncolumn position by adding `:` and a second number after the line\nnumber.\n*/\nconst gotoLine = view => {\n    let panel = getPanel(view, createLineDialog);\n    if (!panel) {\n        let effects = [dialogEffect.of(true)];\n        if (view.state.field(dialogField, false) == null)\n            effects.push(StateEffect.appendConfig.of([dialogField, baseTheme$1]));\n        view.dispatch({ effects });\n        panel = getPanel(view, createLineDialog);\n    }\n    if (panel)\n        panel.dom.querySelector(\"input\").select();\n    return true;\n};\nconst baseTheme$1 = /*@__PURE__*/EditorView.baseTheme({\n    \".cm-panel.cm-gotoLine\": {\n        padding: \"2px 6px 4px\",\n        \"& label\": { fontSize: \"80%\" }\n    }\n});\n\nconst defaultHighlightOptions = {\n    highlightWordAroundCursor: false,\n    minSelectionLength: 1,\n    maxMatches: 100,\n    wholeWords: false\n};\nconst highlightConfig = /*@__PURE__*/Facet.define({\n    combine(options) {\n        return combineConfig(options, defaultHighlightOptions, {\n            highlightWordAroundCursor: (a, b) => a || b,\n            minSelectionLength: Math.min,\n            maxMatches: Math.min\n        });\n    }\n});\n/**\nThis extension highlights text that matches the selection. It uses\nthe `\"cm-selectionMatch\"` class for the highlighting. When\n`highlightWordAroundCursor` is enabled, the word at the cursor\nitself will be highlighted with `\"cm-selectionMatch-main\"`.\n*/\nfunction highlightSelectionMatches(options) {\n    let ext = [defaultTheme, matchHighlighter];\n    if (options)\n        ext.push(highlightConfig.of(options));\n    return ext;\n}\nconst matchDeco = /*@__PURE__*/Decoration.mark({ class: \"cm-selectionMatch\" });\nconst mainMatchDeco = /*@__PURE__*/Decoration.mark({ class: \"cm-selectionMatch cm-selectionMatch-main\" });\n// Whether the characters directly outside the given positions are non-word characters\nfunction insideWordBoundaries(check, state, from, to) {\n    return (from == 0 || check(state.sliceDoc(from - 1, from)) != CharCategory.Word) &&\n        (to == state.doc.length || check(state.sliceDoc(to, to + 1)) != CharCategory.Word);\n}\n// Whether the characters directly at the given positions are word characters\nfunction insideWord(check, state, from, to) {\n    return check(state.sliceDoc(from, from + 1)) == CharCategory.Word\n        && check(state.sliceDoc(to - 1, to)) == CharCategory.Word;\n}\nconst matchHighlighter = /*@__PURE__*/ViewPlugin.fromClass(class {\n    constructor(view) {\n        this.decorations = this.getDeco(view);\n    }\n    update(update) {\n        if (update.selectionSet || update.docChanged || update.viewportChanged)\n            this.decorations = this.getDeco(update.view);\n    }\n    getDeco(view) {\n        let conf = view.state.facet(highlightConfig);\n        let { state } = view, sel = state.selection;\n        if (sel.ranges.length > 1)\n            return Decoration.none;\n        let range = sel.main, query, check = null;\n        if (range.empty) {\n            if (!conf.highlightWordAroundCursor)\n                return Decoration.none;\n            let word = state.wordAt(range.head);\n            if (!word)\n                return Decoration.none;\n            check = state.charCategorizer(range.head);\n            query = state.sliceDoc(word.from, word.to);\n        }\n        else {\n            let len = range.to - range.from;\n            if (len < conf.minSelectionLength || len > 200)\n                return Decoration.none;\n            if (conf.wholeWords) {\n                query = state.sliceDoc(range.from, range.to); // TODO: allow and include leading/trailing space?\n                check = state.charCategorizer(range.head);\n                if (!(insideWordBoundaries(check, state, range.from, range.to) &&\n                    insideWord(check, state, range.from, range.to)))\n                    return Decoration.none;\n            }\n            else {\n                query = state.sliceDoc(range.from, range.to);\n                if (!query)\n                    return Decoration.none;\n            }\n        }\n        let deco = [];\n        for (let part of view.visibleRanges) {\n            let cursor = new SearchCursor(state.doc, query, part.from, part.to);\n            while (!cursor.next().done) {\n                let { from, to } = cursor.value;\n                if (!check || insideWordBoundaries(check, state, from, to)) {\n                    if (range.empty && from <= range.from && to >= range.to)\n                        deco.push(mainMatchDeco.range(from, to));\n                    else if (from >= range.to || to <= range.from)\n                        deco.push(matchDeco.range(from, to));\n                    if (deco.length > conf.maxMatches)\n                        return Decoration.none;\n                }\n            }\n        }\n        return Decoration.set(deco);\n    }\n}, {\n    decorations: v => v.decorations\n});\nconst defaultTheme = /*@__PURE__*/EditorView.baseTheme({\n    \".cm-selectionMatch\": { backgroundColor: \"#99ff7780\" },\n    \".cm-searchMatch .cm-selectionMatch\": { backgroundColor: \"transparent\" }\n});\n// Select the words around the cursors.\nconst selectWord = ({ state, dispatch }) => {\n    let { selection } = state;\n    let newSel = EditorSelection.create(selection.ranges.map(range => state.wordAt(range.head) || EditorSelection.cursor(range.head)), selection.mainIndex);\n    if (newSel.eq(selection))\n        return false;\n    dispatch(state.update({ selection: newSel }));\n    return true;\n};\n// Find next occurrence of query relative to last cursor. Wrap around\n// the document if there are no more matches.\nfunction findNextOccurrence(state, query) {\n    let { main, ranges } = state.selection;\n    let word = state.wordAt(main.head), fullWord = word && word.from == main.from && word.to == main.to;\n    for (let cycled = false, cursor = new SearchCursor(state.doc, query, ranges[ranges.length - 1].to);;) {\n        cursor.next();\n        if (cursor.done) {\n            if (cycled)\n                return null;\n            cursor = new SearchCursor(state.doc, query, 0, Math.max(0, ranges[ranges.length - 1].from - 1));\n            cycled = true;\n        }\n        else {\n            if (cycled && ranges.some(r => r.from == cursor.value.from))\n                continue;\n            if (fullWord) {\n                let word = state.wordAt(cursor.value.from);\n                if (!word || word.from != cursor.value.from || word.to != cursor.value.to)\n                    continue;\n            }\n            return cursor.value;\n        }\n    }\n}\n/**\nSelect next occurrence of the current selection. Expand selection\nto the surrounding word when the selection is empty.\n*/\nconst selectNextOccurrence = ({ state, dispatch }) => {\n    let { ranges } = state.selection;\n    if (ranges.some(sel => sel.from === sel.to))\n        return selectWord({ state, dispatch });\n    let searchedText = state.sliceDoc(ranges[0].from, ranges[0].to);\n    if (state.selection.ranges.some(r => state.sliceDoc(r.from, r.to) != searchedText))\n        return false;\n    let range = findNextOccurrence(state, searchedText);\n    if (!range)\n        return false;\n    dispatch(state.update({\n        selection: state.selection.addRange(EditorSelection.range(range.from, range.to), false),\n        effects: EditorView.scrollIntoView(range.to)\n    }));\n    return true;\n};\n\nconst searchConfigFacet = /*@__PURE__*/Facet.define({\n    combine(configs) {\n        return combineConfig(configs, {\n            top: false,\n            caseSensitive: false,\n            literal: false,\n            regexp: false,\n            wholeWord: false,\n            createPanel: view => new SearchPanel(view),\n            scrollToMatch: range => EditorView.scrollIntoView(range)\n        });\n    }\n});\n/**\nAdd search state to the editor configuration, and optionally\nconfigure the search extension.\n([`openSearchPanel`](https://codemirror.net/6/docs/ref/#search.openSearchPanel) will automatically\nenable this if it isn't already on).\n*/\nfunction search(config) {\n    return config ? [searchConfigFacet.of(config), searchExtensions] : searchExtensions;\n}\n/**\nA search query. Part of the editor's search state.\n*/\nclass SearchQuery {\n    /**\n    Create a query object.\n    */\n    constructor(config) {\n        this.search = config.search;\n        this.caseSensitive = !!config.caseSensitive;\n        this.literal = !!config.literal;\n        this.regexp = !!config.regexp;\n        this.replace = config.replace || \"\";\n        this.valid = !!this.search && (!this.regexp || validRegExp(this.search));\n        this.unquoted = this.unquote(this.search);\n        this.wholeWord = !!config.wholeWord;\n    }\n    /**\n    @internal\n    */\n    unquote(text) {\n        return this.literal ? text :\n            text.replace(/\\\\([nrt\\\\])/g, (_, ch) => ch == \"n\" ? \"\\n\" : ch == \"r\" ? \"\\r\" : ch == \"t\" ? \"\\t\" : \"\\\\\");\n    }\n    /**\n    Compare this query to another query.\n    */\n    eq(other) {\n        return this.search == other.search && this.replace == other.replace &&\n            this.caseSensitive == other.caseSensitive && this.regexp == other.regexp &&\n            this.wholeWord == other.wholeWord;\n    }\n    /**\n    @internal\n    */\n    create() {\n        return this.regexp ? new RegExpQuery(this) : new StringQuery(this);\n    }\n    /**\n    Get a search cursor for this query, searching through the given\n    range in the given state.\n    */\n    getCursor(state, from = 0, to) {\n        let st = state.doc ? state : EditorState.create({ doc: state });\n        if (to == null)\n            to = st.doc.length;\n        return this.regexp ? regexpCursor(this, st, from, to) : stringCursor(this, st, from, to);\n    }\n}\nclass QueryType {\n    constructor(spec) {\n        this.spec = spec;\n    }\n}\nfunction stringCursor(spec, state, from, to) {\n    return new SearchCursor(state.doc, spec.unquoted, from, to, spec.caseSensitive ? undefined : x => x.toLowerCase(), spec.wholeWord ? stringWordTest(state.doc, state.charCategorizer(state.selection.main.head)) : undefined);\n}\nfunction stringWordTest(doc, categorizer) {\n    return (from, to, buf, bufPos) => {\n        if (bufPos > from || bufPos + buf.length < to) {\n            bufPos = Math.max(0, from - 2);\n            buf = doc.sliceString(bufPos, Math.min(doc.length, to + 2));\n        }\n        return (categorizer(charBefore(buf, from - bufPos)) != CharCategory.Word ||\n            categorizer(charAfter(buf, from - bufPos)) != CharCategory.Word) &&\n            (categorizer(charAfter(buf, to - bufPos)) != CharCategory.Word ||\n                categorizer(charBefore(buf, to - bufPos)) != CharCategory.Word);\n    };\n}\nclass StringQuery extends QueryType {\n    constructor(spec) {\n        super(spec);\n    }\n    nextMatch(state, curFrom, curTo) {\n        let cursor = stringCursor(this.spec, state, curTo, state.doc.length).nextOverlapping();\n        if (cursor.done) {\n            let end = Math.min(state.doc.length, curFrom + this.spec.unquoted.length);\n            cursor = stringCursor(this.spec, state, 0, end).nextOverlapping();\n        }\n        return cursor.done || cursor.value.from == curFrom && cursor.value.to == curTo ? null : cursor.value;\n    }\n    // Searching in reverse is, rather than implementing an inverted search\n    // cursor, done by scanning chunk after chunk forward.\n    prevMatchInRange(state, from, to) {\n        for (let pos = to;;) {\n            let start = Math.max(from, pos - 10000 /* FindPrev.ChunkSize */ - this.spec.unquoted.length);\n            let cursor = stringCursor(this.spec, state, start, pos), range = null;\n            while (!cursor.nextOverlapping().done)\n                range = cursor.value;\n            if (range)\n                return range;\n            if (start == from)\n                return null;\n            pos -= 10000 /* FindPrev.ChunkSize */;\n        }\n    }\n    prevMatch(state, curFrom, curTo) {\n        let found = this.prevMatchInRange(state, 0, curFrom);\n        if (!found)\n            found = this.prevMatchInRange(state, Math.max(0, curTo - this.spec.unquoted.length), state.doc.length);\n        return found && (found.from != curFrom || found.to != curTo) ? found : null;\n    }\n    getReplacement(_result) { return this.spec.unquote(this.spec.replace); }\n    matchAll(state, limit) {\n        let cursor = stringCursor(this.spec, state, 0, state.doc.length), ranges = [];\n        while (!cursor.next().done) {\n            if (ranges.length >= limit)\n                return null;\n            ranges.push(cursor.value);\n        }\n        return ranges;\n    }\n    highlight(state, from, to, add) {\n        let cursor = stringCursor(this.spec, state, Math.max(0, from - this.spec.unquoted.length), Math.min(to + this.spec.unquoted.length, state.doc.length));\n        while (!cursor.next().done)\n            add(cursor.value.from, cursor.value.to);\n    }\n}\nfunction regexpCursor(spec, state, from, to) {\n    return new RegExpCursor(state.doc, spec.search, {\n        ignoreCase: !spec.caseSensitive,\n        test: spec.wholeWord ? regexpWordTest(state.charCategorizer(state.selection.main.head)) : undefined\n    }, from, to);\n}\nfunction charBefore(str, index) {\n    return str.slice(findClusterBreak(str, index, false), index);\n}\nfunction charAfter(str, index) {\n    return str.slice(index, findClusterBreak(str, index));\n}\nfunction regexpWordTest(categorizer) {\n    return (_from, _to, match) => !match[0].length ||\n        (categorizer(charBefore(match.input, match.index)) != CharCategory.Word ||\n            categorizer(charAfter(match.input, match.index)) != CharCategory.Word) &&\n            (categorizer(charAfter(match.input, match.index + match[0].length)) != CharCategory.Word ||\n                categorizer(charBefore(match.input, match.index + match[0].length)) != CharCategory.Word);\n}\nclass RegExpQuery extends QueryType {\n    nextMatch(state, curFrom, curTo) {\n        let cursor = regexpCursor(this.spec, state, curTo, state.doc.length).next();\n        if (cursor.done)\n            cursor = regexpCursor(this.spec, state, 0, curFrom).next();\n        return cursor.done ? null : cursor.value;\n    }\n    prevMatchInRange(state, from, to) {\n        for (let size = 1;; size++) {\n            let start = Math.max(from, to - size * 10000 /* FindPrev.ChunkSize */);\n            let cursor = regexpCursor(this.spec, state, start, to), range = null;\n            while (!cursor.next().done)\n                range = cursor.value;\n            if (range && (start == from || range.from > start + 10))\n                return range;\n            if (start == from)\n                return null;\n        }\n    }\n    prevMatch(state, curFrom, curTo) {\n        return this.prevMatchInRange(state, 0, curFrom) ||\n            this.prevMatchInRange(state, curTo, state.doc.length);\n    }\n    getReplacement(result) {\n        return this.spec.unquote(this.spec.replace).replace(/\\$([$&\\d+])/g, (m, i) => i == \"$\" ? \"$\"\n            : i == \"&\" ? result.match[0]\n                : i != \"0\" && +i < result.match.length ? result.match[i]\n                    : m);\n    }\n    matchAll(state, limit) {\n        let cursor = regexpCursor(this.spec, state, 0, state.doc.length), ranges = [];\n        while (!cursor.next().done) {\n            if (ranges.length >= limit)\n                return null;\n            ranges.push(cursor.value);\n        }\n        return ranges;\n    }\n    highlight(state, from, to, add) {\n        let cursor = regexpCursor(this.spec, state, Math.max(0, from - 250 /* RegExp.HighlightMargin */), Math.min(to + 250 /* RegExp.HighlightMargin */, state.doc.length));\n        while (!cursor.next().done)\n            add(cursor.value.from, cursor.value.to);\n    }\n}\n/**\nA state effect that updates the current search query. Note that\nthis only has an effect if the search state has been initialized\n(by including [`search`](https://codemirror.net/6/docs/ref/#search.search) in your configuration or\nby running [`openSearchPanel`](https://codemirror.net/6/docs/ref/#search.openSearchPanel) at least\nonce).\n*/\nconst setSearchQuery = /*@__PURE__*/StateEffect.define();\nconst togglePanel = /*@__PURE__*/StateEffect.define();\nconst searchState = /*@__PURE__*/StateField.define({\n    create(state) {\n        return new SearchState(defaultQuery(state).create(), null);\n    },\n    update(value, tr) {\n        for (let effect of tr.effects) {\n            if (effect.is(setSearchQuery))\n                value = new SearchState(effect.value.create(), value.panel);\n            else if (effect.is(togglePanel))\n                value = new SearchState(value.query, effect.value ? createSearchPanel : null);\n        }\n        return value;\n    },\n    provide: f => showPanel.from(f, val => val.panel)\n});\n/**\nGet the current search query from an editor state.\n*/\nfunction getSearchQuery(state) {\n    let curState = state.field(searchState, false);\n    return curState ? curState.query.spec : defaultQuery(state);\n}\n/**\nQuery whether the search panel is open in the given editor state.\n*/\nfunction searchPanelOpen(state) {\n    var _a;\n    return ((_a = state.field(searchState, false)) === null || _a === void 0 ? void 0 : _a.panel) != null;\n}\nclass SearchState {\n    constructor(query, panel) {\n        this.query = query;\n        this.panel = panel;\n    }\n}\nconst matchMark = /*@__PURE__*/Decoration.mark({ class: \"cm-searchMatch\" }), selectedMatchMark = /*@__PURE__*/Decoration.mark({ class: \"cm-searchMatch cm-searchMatch-selected\" });\nconst searchHighlighter = /*@__PURE__*/ViewPlugin.fromClass(class {\n    constructor(view) {\n        this.view = view;\n        this.decorations = this.highlight(view.state.field(searchState));\n    }\n    update(update) {\n        let state = update.state.field(searchState);\n        if (state != update.startState.field(searchState) || update.docChanged || update.selectionSet || update.viewportChanged)\n            this.decorations = this.highlight(state);\n    }\n    highlight({ query, panel }) {\n        if (!panel || !query.spec.valid)\n            return Decoration.none;\n        let { view } = this;\n        let builder = new RangeSetBuilder();\n        for (let i = 0, ranges = view.visibleRanges, l = ranges.length; i < l; i++) {\n            let { from, to } = ranges[i];\n            while (i < l - 1 && to > ranges[i + 1].from - 2 * 250 /* RegExp.HighlightMargin */)\n                to = ranges[++i].to;\n            query.highlight(view.state, from, to, (from, to) => {\n                let selected = view.state.selection.ranges.some(r => r.from == from && r.to == to);\n                builder.add(from, to, selected ? selectedMatchMark : matchMark);\n            });\n        }\n        return builder.finish();\n    }\n}, {\n    decorations: v => v.decorations\n});\nfunction searchCommand(f) {\n    return view => {\n        let state = view.state.field(searchState, false);\n        return state && state.query.spec.valid ? f(view, state) : openSearchPanel(view);\n    };\n}\n/**\nOpen the search panel if it isn't already open, and move the\nselection to the first match after the current main selection.\nWill wrap around to the start of the document when it reaches the\nend.\n*/\nconst findNext = /*@__PURE__*/searchCommand((view, { query }) => {\n    let { to } = view.state.selection.main;\n    let next = query.nextMatch(view.state, to, to);\n    if (!next)\n        return false;\n    let selection = EditorSelection.single(next.from, next.to);\n    let config = view.state.facet(searchConfigFacet);\n    view.dispatch({\n        selection,\n        effects: [announceMatch(view, next), config.scrollToMatch(selection.main, view)],\n        userEvent: \"select.search\"\n    });\n    selectSearchInput(view);\n    return true;\n});\n/**\nMove the selection to the previous instance of the search query,\nbefore the current main selection. Will wrap past the start\nof the document to start searching at the end again.\n*/\nconst findPrevious = /*@__PURE__*/searchCommand((view, { query }) => {\n    let { state } = view, { from } = state.selection.main;\n    let prev = query.prevMatch(state, from, from);\n    if (!prev)\n        return false;\n    let selection = EditorSelection.single(prev.from, prev.to);\n    let config = view.state.facet(searchConfigFacet);\n    view.dispatch({\n        selection,\n        effects: [announceMatch(view, prev), config.scrollToMatch(selection.main, view)],\n        userEvent: \"select.search\"\n    });\n    selectSearchInput(view);\n    return true;\n});\n/**\nSelect all instances of the search query.\n*/\nconst selectMatches = /*@__PURE__*/searchCommand((view, { query }) => {\n    let ranges = query.matchAll(view.state, 1000);\n    if (!ranges || !ranges.length)\n        return false;\n    view.dispatch({\n        selection: EditorSelection.create(ranges.map(r => EditorSelection.range(r.from, r.to))),\n        userEvent: \"select.search.matches\"\n    });\n    return true;\n});\n/**\nSelect all instances of the currently selected text.\n*/\nconst selectSelectionMatches = ({ state, dispatch }) => {\n    let sel = state.selection;\n    if (sel.ranges.length > 1 || sel.main.empty)\n        return false;\n    let { from, to } = sel.main;\n    let ranges = [], main = 0;\n    for (let cur = new SearchCursor(state.doc, state.sliceDoc(from, to)); !cur.next().done;) {\n        if (ranges.length > 1000)\n            return false;\n        if (cur.value.from == from)\n            main = ranges.length;\n        ranges.push(EditorSelection.range(cur.value.from, cur.value.to));\n    }\n    dispatch(state.update({\n        selection: EditorSelection.create(ranges, main),\n        userEvent: \"select.search.matches\"\n    }));\n    return true;\n};\n/**\nReplace the current match of the search query.\n*/\nconst replaceNext = /*@__PURE__*/searchCommand((view, { query }) => {\n    let { state } = view, { from, to } = state.selection.main;\n    if (state.readOnly)\n        return false;\n    let match = query.nextMatch(state, from, from);\n    if (!match)\n        return false;\n    let next = match;\n    let changes = [], selection, replacement;\n    let effects = [];\n    if (next.from == from && next.to == to) {\n        replacement = state.toText(query.getReplacement(next));\n        changes.push({ from: next.from, to: next.to, insert: replacement });\n        next = query.nextMatch(state, next.from, next.to);\n        effects.push(EditorView.announce.of(state.phrase(\"replaced match on line $\", state.doc.lineAt(from).number) + \".\"));\n    }\n    if (next) {\n        let off = changes.length == 0 || changes[0].from >= match.to ? 0 : match.to - match.from - replacement.length;\n        selection = EditorSelection.single(next.from - off, next.to - off);\n        effects.push(announceMatch(view, next));\n        effects.push(state.facet(searchConfigFacet).scrollToMatch(selection.main, view));\n    }\n    view.dispatch({\n        changes, selection, effects,\n        userEvent: \"input.replace\"\n    });\n    return true;\n});\n/**\nReplace all instances of the search query with the given\nreplacement.\n*/\nconst replaceAll = /*@__PURE__*/searchCommand((view, { query }) => {\n    if (view.state.readOnly)\n        return false;\n    let changes = query.matchAll(view.state, 1e9).map(match => {\n        let { from, to } = match;\n        return { from, to, insert: query.getReplacement(match) };\n    });\n    if (!changes.length)\n        return false;\n    let announceText = view.state.phrase(\"replaced $ matches\", changes.length) + \".\";\n    view.dispatch({\n        changes,\n        effects: EditorView.announce.of(announceText),\n        userEvent: \"input.replace.all\"\n    });\n    return true;\n});\nfunction createSearchPanel(view) {\n    return view.state.facet(searchConfigFacet).createPanel(view);\n}\nfunction defaultQuery(state, fallback) {\n    var _a, _b, _c, _d, _e;\n    let sel = state.selection.main;\n    let selText = sel.empty || sel.to > sel.from + 100 ? \"\" : state.sliceDoc(sel.from, sel.to);\n    if (fallback && !selText)\n        return fallback;\n    let config = state.facet(searchConfigFacet);\n    return new SearchQuery({\n        search: ((_a = fallback === null || fallback === void 0 ? void 0 : fallback.literal) !== null && _a !== void 0 ? _a : config.literal) ? selText : selText.replace(/\\n/g, \"\\\\n\"),\n        caseSensitive: (_b = fallback === null || fallback === void 0 ? void 0 : fallback.caseSensitive) !== null && _b !== void 0 ? _b : config.caseSensitive,\n        literal: (_c = fallback === null || fallback === void 0 ? void 0 : fallback.literal) !== null && _c !== void 0 ? _c : config.literal,\n        regexp: (_d = fallback === null || fallback === void 0 ? void 0 : fallback.regexp) !== null && _d !== void 0 ? _d : config.regexp,\n        wholeWord: (_e = fallback === null || fallback === void 0 ? void 0 : fallback.wholeWord) !== null && _e !== void 0 ? _e : config.wholeWord\n    });\n}\nfunction getSearchInput(view) {\n    let panel = getPanel(view, createSearchPanel);\n    return panel && panel.dom.querySelector(\"[main-field]\");\n}\nfunction selectSearchInput(view) {\n    let input = getSearchInput(view);\n    if (input && input == view.root.activeElement)\n        input.select();\n}\n/**\nMake sure the search panel is open and focused.\n*/\nconst openSearchPanel = view => {\n    let state = view.state.field(searchState, false);\n    if (state && state.panel) {\n        let searchInput = getSearchInput(view);\n        if (searchInput && searchInput != view.root.activeElement) {\n            let query = defaultQuery(view.state, state.query.spec);\n            if (query.valid)\n                view.dispatch({ effects: setSearchQuery.of(query) });\n            searchInput.focus();\n            searchInput.select();\n        }\n    }\n    else {\n        view.dispatch({ effects: [\n                togglePanel.of(true),\n                state ? setSearchQuery.of(defaultQuery(view.state, state.query.spec)) : StateEffect.appendConfig.of(searchExtensions)\n            ] });\n    }\n    return true;\n};\n/**\nClose the search panel.\n*/\nconst closeSearchPanel = view => {\n    let state = view.state.field(searchState, false);\n    if (!state || !state.panel)\n        return false;\n    let panel = getPanel(view, createSearchPanel);\n    if (panel && panel.dom.contains(view.root.activeElement))\n        view.focus();\n    view.dispatch({ effects: togglePanel.of(false) });\n    return true;\n};\n/**\nDefault search-related key bindings.\n\n - Mod-f: [`openSearchPanel`](https://codemirror.net/6/docs/ref/#search.openSearchPanel)\n - F3, Mod-g: [`findNext`](https://codemirror.net/6/docs/ref/#search.findNext)\n - Shift-F3, Shift-Mod-g: [`findPrevious`](https://codemirror.net/6/docs/ref/#search.findPrevious)\n - Mod-Alt-g: [`gotoLine`](https://codemirror.net/6/docs/ref/#search.gotoLine)\n - Mod-d: [`selectNextOccurrence`](https://codemirror.net/6/docs/ref/#search.selectNextOccurrence)\n*/\nconst searchKeymap = [\n    { key: \"Mod-f\", run: openSearchPanel, scope: \"editor search-panel\" },\n    { key: \"F3\", run: findNext, shift: findPrevious, scope: \"editor search-panel\", preventDefault: true },\n    { key: \"Mod-g\", run: findNext, shift: findPrevious, scope: \"editor search-panel\", preventDefault: true },\n    { key: \"Escape\", run: closeSearchPanel, scope: \"editor search-panel\" },\n    { key: \"Mod-Shift-l\", run: selectSelectionMatches },\n    { key: \"Mod-Alt-g\", run: gotoLine },\n    { key: \"Mod-d\", run: selectNextOccurrence, preventDefault: true },\n];\nclass SearchPanel {\n    constructor(view) {\n        this.view = view;\n        let query = this.query = view.state.field(searchState).query.spec;\n        this.commit = this.commit.bind(this);\n        this.searchField = elt(\"input\", {\n            value: query.search,\n            placeholder: phrase(view, \"Find\"),\n            \"aria-label\": phrase(view, \"Find\"),\n            class: \"cm-textfield\",\n            name: \"search\",\n            form: \"\",\n            \"main-field\": \"true\",\n            onchange: this.commit,\n            onkeyup: this.commit\n        });\n        this.replaceField = elt(\"input\", {\n            value: query.replace,\n            placeholder: phrase(view, \"Replace\"),\n            \"aria-label\": phrase(view, \"Replace\"),\n            class: \"cm-textfield\",\n            name: \"replace\",\n            form: \"\",\n            onchange: this.commit,\n            onkeyup: this.commit\n        });\n        this.caseField = elt(\"input\", {\n            type: \"checkbox\",\n            name: \"case\",\n            form: \"\",\n            checked: query.caseSensitive,\n            onchange: this.commit\n        });\n        this.reField = elt(\"input\", {\n            type: \"checkbox\",\n            name: \"re\",\n            form: \"\",\n            checked: query.regexp,\n            onchange: this.commit\n        });\n        this.wordField = elt(\"input\", {\n            type: \"checkbox\",\n            name: \"word\",\n            form: \"\",\n            checked: query.wholeWord,\n            onchange: this.commit\n        });\n        function button(name, onclick, content) {\n            return elt(\"button\", { class: \"cm-button\", name, onclick, type: \"button\" }, content);\n        }\n        this.dom = elt(\"div\", { onkeydown: (e) => this.keydown(e), class: \"cm-search\" }, [\n            this.searchField,\n            button(\"next\", () => findNext(view), [phrase(view, \"next\")]),\n            button(\"prev\", () => findPrevious(view), [phrase(view, \"previous\")]),\n            button(\"select\", () => selectMatches(view), [phrase(view, \"all\")]),\n            elt(\"label\", null, [this.caseField, phrase(view, \"match case\")]),\n            elt(\"label\", null, [this.reField, phrase(view, \"regexp\")]),\n            elt(\"label\", null, [this.wordField, phrase(view, \"by word\")]),\n            ...view.state.readOnly ? [] : [\n                elt(\"br\"),\n                this.replaceField,\n                button(\"replace\", () => replaceNext(view), [phrase(view, \"replace\")]),\n                button(\"replaceAll\", () => replaceAll(view), [phrase(view, \"replace all\")])\n            ],\n            elt(\"button\", {\n                name: \"close\",\n                onclick: () => closeSearchPanel(view),\n                \"aria-label\": phrase(view, \"close\"),\n                type: \"button\"\n            }, [\"×\"])\n        ]);\n    }\n    commit() {\n        let query = new SearchQuery({\n            search: this.searchField.value,\n            caseSensitive: this.caseField.checked,\n            regexp: this.reField.checked,\n            wholeWord: this.wordField.checked,\n            replace: this.replaceField.value,\n        });\n        if (!query.eq(this.query)) {\n            this.query = query;\n            this.view.dispatch({ effects: setSearchQuery.of(query) });\n        }\n    }\n    keydown(e) {\n        if (runScopeHandlers(this.view, e, \"search-panel\")) {\n            e.preventDefault();\n        }\n        else if (e.keyCode == 13 && e.target == this.searchField) {\n            e.preventDefault();\n            (e.shiftKey ? findPrevious : findNext)(this.view);\n        }\n        else if (e.keyCode == 13 && e.target == this.replaceField) {\n            e.preventDefault();\n            replaceNext(this.view);\n        }\n    }\n    update(update) {\n        for (let tr of update.transactions)\n            for (let effect of tr.effects) {\n                if (effect.is(setSearchQuery) && !effect.value.eq(this.query))\n                    this.setQuery(effect.value);\n            }\n    }\n    setQuery(query) {\n        this.query = query;\n        this.searchField.value = query.search;\n        this.replaceField.value = query.replace;\n        this.caseField.checked = query.caseSensitive;\n        this.reField.checked = query.regexp;\n        this.wordField.checked = query.wholeWord;\n    }\n    mount() {\n        this.searchField.select();\n    }\n    get pos() { return 80; }\n    get top() { return this.view.state.facet(searchConfigFacet).top; }\n}\nfunction phrase(view, phrase) { return view.state.phrase(phrase); }\nconst AnnounceMargin = 30;\nconst Break = /[\\s\\.,:;?!]/;\nfunction announceMatch(view, { from, to }) {\n    let line = view.state.doc.lineAt(from), lineEnd = view.state.doc.lineAt(to).to;\n    let start = Math.max(line.from, from - AnnounceMargin), end = Math.min(lineEnd, to + AnnounceMargin);\n    let text = view.state.sliceDoc(start, end);\n    if (start != line.from) {\n        for (let i = 0; i < AnnounceMargin; i++)\n            if (!Break.test(text[i + 1]) && Break.test(text[i])) {\n                text = text.slice(i);\n                break;\n            }\n    }\n    if (end != lineEnd) {\n        for (let i = text.length - 1; i > text.length - AnnounceMargin; i--)\n            if (!Break.test(text[i - 1]) && Break.test(text[i])) {\n                text = text.slice(0, i);\n                break;\n            }\n    }\n    return EditorView.announce.of(`${view.state.phrase(\"current match\")}. ${text} ${view.state.phrase(\"on line\")} ${line.number}.`);\n}\nconst baseTheme = /*@__PURE__*/EditorView.baseTheme({\n    \".cm-panel.cm-search\": {\n        padding: \"2px 6px 4px\",\n        position: \"relative\",\n        \"& [name=close]\": {\n            position: \"absolute\",\n            top: \"0\",\n            right: \"4px\",\n            backgroundColor: \"inherit\",\n            border: \"none\",\n            font: \"inherit\",\n            padding: 0,\n            margin: 0\n        },\n        \"& input, & button, & label\": {\n            margin: \".2em .6em .2em 0\"\n        },\n        \"& input[type=checkbox]\": {\n            marginRight: \".2em\"\n        },\n        \"& label\": {\n            fontSize: \"80%\",\n            whiteSpace: \"pre\"\n        }\n    },\n    \"&light .cm-searchMatch\": { backgroundColor: \"#ffff0054\" },\n    \"&dark .cm-searchMatch\": { backgroundColor: \"#00ffff8a\" },\n    \"&light .cm-searchMatch-selected\": { backgroundColor: \"#ff6a0054\" },\n    \"&dark .cm-searchMatch-selected\": { backgroundColor: \"#ff00ff8a\" }\n});\nconst searchExtensions = [\n    searchState,\n    /*@__PURE__*/Prec.low(searchHighlighter),\n    baseTheme\n];\n\nexport { RegExpCursor, SearchCursor, SearchQuery, closeSearchPanel, findNext, findPrevious, getSearchQuery, gotoLine, highlightSelectionMatches, openSearchPanel, replaceAll, replaceNext, search, searchKeymap, searchPanelOpen, selectMatches, selectNextOccurrence, selectSelectionMatches, setSearchQuery };\n"],"names":["crelt","elt","arguments","document","createElement","i","next","nodeType","Array","isArray","name","Object","prototype","hasOwnProperty","call","value","setAttribute","length","add","child","appendChild","createTextNode","RangeError","basicNormalize","String","normalize","x","SearchCursor","constructor","text","query","from","to","test","this","done","matches","buffer","bufferPos","iter","iterRange","bufferStart","peek","codePointAt","pop","nextOverlapping","str","fromCodePoint","start","codePointSize","norm","pos","code","charCodeAt","match","end","index","keep","splice","push","Symbol","iterator","empty","exec","baseFlags","unicode","RegExpCursor","options","curLine","MultilineRegExpCursor","re","RegExp","ignoreCase","startLine","lineAt","curLineStart","matchPos","toCharEnd","getLine","skip","lineBreak","slice","nextLine","off","lastIndex","flattened","WeakMap","FlattenedDoc","get","doc","cached","flat","sliceString","set","cachedFrom","chunkEnd","line","createLineDialog","view","input","class","state","selection","main","head","number","go","sign","ln","cl","percent","col","pc","lines","Math","round","docLine","max","min","EditorSelection","cursor","dispatch","effects","dialogEffect","of","EditorView","scrollIntoView","y","focus","dom","onkeydown","event","keyCode","preventDefault","onsubmit","phrase","type","StateEffect","define","dialogField","StateField","create","update","tr","e","is","provide","f","showPanel","val","gotoLine","panel","getPanel","field","appendConfig","baseTheme$1","querySelector","select","baseTheme","padding","fontSize","defaultHighlightOptions","highlightWordAroundCursor","minSelectionLength","maxMatches","wholeWords","highlightConfig","Facet","combine","combineConfig","a","b","highlightSelectionMatches","ext","defaultTheme","matchHighlighter","matchDeco","Decoration","mark","mainMatchDeco","insideWordBoundaries","check","sliceDoc","CharCategory","Word","ViewPlugin","fromClass","decorations","getDeco","selectionSet","docChanged","viewportChanged","conf","facet","sel","ranges","none","range","word","wordAt","charCategorizer","len","insideWord","deco","part","visibleRanges","v","backgroundColor","selectNextOccurrence","some","newSel","map","mainIndex","eq","selectWord","searchedText","r","fullWord","cycled","findNextOccurrence","addRange","searchConfigFacet","configs","top","caseSensitive","literal","regexp","wholeWord","createPanel","SearchPanel","scrollToMatch","search","config","searchExtensions","SearchQuery","replace","valid","source","_a","validRegExp","unquoted","unquote","_","ch","other","RegExpQuery","StringQuery","getCursor","st","EditorState","regexpCursor","stringCursor","QueryType","spec","undefined","toLowerCase","categorizer","buf","bufPos","charBefore","charAfter","super","nextMatch","curFrom","curTo","prevMatchInRange","prevMatch","found","getReplacement","_result","matchAll","limit","highlight","_from","_to","findClusterBreak","size","result","m","setSearchQuery","togglePanel","searchState","SearchState","defaultQuery","effect","createSearchPanel","getSearchQuery","curState","searchPanelOpen","matchMark","selectedMatchMark","searchHighlighter","startState","builder","RangeSetBuilder","l","selected","finish","searchCommand","openSearchPanel","findNext","single","announceMatch","userEvent","selectSearchInput","findPrevious","prev","selectMatches","selectSelectionMatches","cur","replaceNext","readOnly","replacement","changes","toText","insert","announce","replaceAll","announceText","fallback","_b","_c","_d","_e","selText","getSearchInput","root","activeElement","searchInput","closeSearchPanel","contains","searchKeymap","key","run","scope","shift","button","onclick","content","commit","bind","searchField","placeholder","form","onchange","onkeyup","replaceField","caseField","checked","reField","wordField","keydown","runScopeHandlers","target","shiftKey","transactions","setQuery","mount","AnnounceMargin","Break","lineEnd","position","right","border","font","margin","marginRight","whiteSpace","Prec","low"],"sourceRoot":""}
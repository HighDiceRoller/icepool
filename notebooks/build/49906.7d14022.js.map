{"version":3,"file":"49906.7d14022.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@lezer/lr/dist/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/process/browser.js"],"sourcesContent":["import { Parser, NodeProp, NodeSet, NodeType, DefaultBufferLength, Tree, IterMode } from '@lezer/common';\n\n/// A parse stack. These are used internally by the parser to track\n/// parsing progress. They also provide some properties and methods\n/// that external code such as a tokenizer can use to get information\n/// about the parse state.\nclass Stack {\n    /// @internal\n    constructor(\n    /// The parse that this stack is part of @internal\n    p, \n    /// Holds state, input pos, buffer index triplets for all but the\n    /// top state @internal\n    stack, \n    /// The current parse state @internal\n    state, \n    // The position at which the next reduce should take place. This\n    // can be less than `this.pos` when skipped expressions have been\n    // added to the stack (which should be moved outside of the next\n    // reduction)\n    /// @internal\n    reducePos, \n    /// The input position up to which this stack has parsed.\n    pos, \n    /// The dynamic score of the stack, including dynamic precedence\n    /// and error-recovery penalties\n    /// @internal\n    score, \n    // The output buffer. Holds (type, start, end, size) quads\n    // representing nodes created by the parser, where `size` is\n    // amount of buffer array entries covered by this node.\n    /// @internal\n    buffer, \n    // The base offset of the buffer. When stacks are split, the split\n    // instance shared the buffer history with its parent up to\n    // `bufferBase`, which is the absolute offset (including the\n    // offset of previous splits) into the buffer at which this stack\n    // starts writing.\n    /// @internal\n    bufferBase, \n    /// @internal\n    curContext, \n    /// @internal\n    lookAhead = 0, \n    // A parent stack from which this was split off, if any. This is\n    // set up so that it always points to a stack that has some\n    // additional buffer content, never to a stack with an equal\n    // `bufferBase`.\n    /// @internal\n    parent) {\n        this.p = p;\n        this.stack = stack;\n        this.state = state;\n        this.reducePos = reducePos;\n        this.pos = pos;\n        this.score = score;\n        this.buffer = buffer;\n        this.bufferBase = bufferBase;\n        this.curContext = curContext;\n        this.lookAhead = lookAhead;\n        this.parent = parent;\n    }\n    /// @internal\n    toString() {\n        return `[${this.stack.filter((_, i) => i % 3 == 0).concat(this.state)}]@${this.pos}${this.score ? \"!\" + this.score : \"\"}`;\n    }\n    // Start an empty stack\n    /// @internal\n    static start(p, state, pos = 0) {\n        let cx = p.parser.context;\n        return new Stack(p, [], state, pos, pos, 0, [], 0, cx ? new StackContext(cx, cx.start) : null, 0, null);\n    }\n    /// The stack's current [context](#lr.ContextTracker) value, if\n    /// any. Its type will depend on the context tracker's type\n    /// parameter, or it will be `null` if there is no context\n    /// tracker.\n    get context() { return this.curContext ? this.curContext.context : null; }\n    // Push a state onto the stack, tracking its start position as well\n    // as the buffer base at that point.\n    /// @internal\n    pushState(state, start) {\n        this.stack.push(this.state, start, this.bufferBase + this.buffer.length);\n        this.state = state;\n    }\n    // Apply a reduce action\n    /// @internal\n    reduce(action) {\n        var _a;\n        let depth = action >> 19 /* Action.ReduceDepthShift */, type = action & 65535 /* Action.ValueMask */;\n        let { parser } = this.p;\n        let dPrec = parser.dynamicPrecedence(type);\n        if (dPrec)\n            this.score += dPrec;\n        if (depth == 0) {\n            this.pushState(parser.getGoto(this.state, type, true), this.reducePos);\n            // Zero-depth reductions are a special case—they add stuff to\n            // the stack without popping anything off.\n            if (type < parser.minRepeatTerm)\n                this.storeNode(type, this.reducePos, this.reducePos, 4, true);\n            this.reduceContext(type, this.reducePos);\n            return;\n        }\n        // Find the base index into `this.stack`, content after which will\n        // be dropped. Note that with `StayFlag` reductions we need to\n        // consume two extra frames (the dummy parent node for the skipped\n        // expression and the state that we'll be staying in, which should\n        // be moved to `this.state`).\n        let base = this.stack.length - ((depth - 1) * 3) - (action & 262144 /* Action.StayFlag */ ? 6 : 0);\n        let start = base ? this.stack[base - 2] : this.p.ranges[0].from, size = this.reducePos - start;\n        // This is a kludge to try and detect overly deep left-associative\n        // trees, which will not increase the parse stack depth and thus\n        // won't be caught by the regular stack-depth limit check.\n        if (size >= 2000 /* Recover.MinBigReduction */ && !((_a = this.p.parser.nodeSet.types[type]) === null || _a === void 0 ? void 0 : _a.isAnonymous)) {\n            if (start == this.p.lastBigReductionStart) {\n                this.p.bigReductionCount++;\n                this.p.lastBigReductionSize = size;\n            }\n            else if (this.p.lastBigReductionSize < size) {\n                this.p.bigReductionCount = 1;\n                this.p.lastBigReductionStart = start;\n                this.p.lastBigReductionSize = size;\n            }\n        }\n        let bufferBase = base ? this.stack[base - 1] : 0, count = this.bufferBase + this.buffer.length - bufferBase;\n        // Store normal terms or `R -> R R` repeat reductions\n        if (type < parser.minRepeatTerm || (action & 131072 /* Action.RepeatFlag */)) {\n            let pos = parser.stateFlag(this.state, 1 /* StateFlag.Skipped */) ? this.pos : this.reducePos;\n            this.storeNode(type, start, pos, count + 4, true);\n        }\n        if (action & 262144 /* Action.StayFlag */) {\n            this.state = this.stack[base];\n        }\n        else {\n            let baseStateID = this.stack[base - 3];\n            this.state = parser.getGoto(baseStateID, type, true);\n        }\n        while (this.stack.length > base)\n            this.stack.pop();\n        this.reduceContext(type, start);\n    }\n    // Shift a value into the buffer\n    /// @internal\n    storeNode(term, start, end, size = 4, isReduce = false) {\n        if (term == 0 /* Term.Err */ &&\n            (!this.stack.length || this.stack[this.stack.length - 1] < this.buffer.length + this.bufferBase)) {\n            // Try to omit/merge adjacent error nodes\n            let cur = this, top = this.buffer.length;\n            if (top == 0 && cur.parent) {\n                top = cur.bufferBase - cur.parent.bufferBase;\n                cur = cur.parent;\n            }\n            if (top > 0 && cur.buffer[top - 4] == 0 /* Term.Err */ && cur.buffer[top - 1] > -1) {\n                if (start == end)\n                    return;\n                if (cur.buffer[top - 2] >= start) {\n                    cur.buffer[top - 2] = end;\n                    return;\n                }\n            }\n        }\n        if (!isReduce || this.pos == end) { // Simple case, just append\n            this.buffer.push(term, start, end, size);\n        }\n        else { // There may be skipped nodes that have to be moved forward\n            let index = this.buffer.length;\n            if (index > 0 && this.buffer[index - 4] != 0 /* Term.Err */)\n                while (index > 0 && this.buffer[index - 2] > end) {\n                    // Move this record forward\n                    this.buffer[index] = this.buffer[index - 4];\n                    this.buffer[index + 1] = this.buffer[index - 3];\n                    this.buffer[index + 2] = this.buffer[index - 2];\n                    this.buffer[index + 3] = this.buffer[index - 1];\n                    index -= 4;\n                    if (size > 4)\n                        size -= 4;\n                }\n            this.buffer[index] = term;\n            this.buffer[index + 1] = start;\n            this.buffer[index + 2] = end;\n            this.buffer[index + 3] = size;\n        }\n    }\n    // Apply a shift action\n    /// @internal\n    shift(action, next, nextEnd) {\n        let start = this.pos;\n        if (action & 131072 /* Action.GotoFlag */) {\n            this.pushState(action & 65535 /* Action.ValueMask */, this.pos);\n        }\n        else if ((action & 262144 /* Action.StayFlag */) == 0) { // Regular shift\n            let nextState = action, { parser } = this.p;\n            if (nextEnd > this.pos || next <= parser.maxNode) {\n                this.pos = nextEnd;\n                if (!parser.stateFlag(nextState, 1 /* StateFlag.Skipped */))\n                    this.reducePos = nextEnd;\n            }\n            this.pushState(nextState, start);\n            this.shiftContext(next, start);\n            if (next <= parser.maxNode)\n                this.buffer.push(next, start, nextEnd, 4);\n        }\n        else { // Shift-and-stay, which means this is a skipped token\n            this.pos = nextEnd;\n            this.shiftContext(next, start);\n            if (next <= this.p.parser.maxNode)\n                this.buffer.push(next, start, nextEnd, 4);\n        }\n    }\n    // Apply an action\n    /// @internal\n    apply(action, next, nextEnd) {\n        if (action & 65536 /* Action.ReduceFlag */)\n            this.reduce(action);\n        else\n            this.shift(action, next, nextEnd);\n    }\n    // Add a prebuilt (reused) node into the buffer.\n    /// @internal\n    useNode(value, next) {\n        let index = this.p.reused.length - 1;\n        if (index < 0 || this.p.reused[index] != value) {\n            this.p.reused.push(value);\n            index++;\n        }\n        let start = this.pos;\n        this.reducePos = this.pos = start + value.length;\n        this.pushState(next, start);\n        this.buffer.push(index, start, this.reducePos, -1 /* size == -1 means this is a reused value */);\n        if (this.curContext)\n            this.updateContext(this.curContext.tracker.reuse(this.curContext.context, value, this, this.p.stream.reset(this.pos - value.length)));\n    }\n    // Split the stack. Due to the buffer sharing and the fact\n    // that `this.stack` tends to stay quite shallow, this isn't very\n    // expensive.\n    /// @internal\n    split() {\n        let parent = this;\n        let off = parent.buffer.length;\n        // Because the top of the buffer (after this.pos) may be mutated\n        // to reorder reductions and skipped tokens, and shared buffers\n        // should be immutable, this copies any outstanding skipped tokens\n        // to the new buffer, and puts the base pointer before them.\n        while (off > 0 && parent.buffer[off - 2] > parent.reducePos)\n            off -= 4;\n        let buffer = parent.buffer.slice(off), base = parent.bufferBase + off;\n        // Make sure parent points to an actual parent with content, if there is such a parent.\n        while (parent && base == parent.bufferBase)\n            parent = parent.parent;\n        return new Stack(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, buffer, base, this.curContext, this.lookAhead, parent);\n    }\n    // Try to recover from an error by 'deleting' (ignoring) one token.\n    /// @internal\n    recoverByDelete(next, nextEnd) {\n        let isNode = next <= this.p.parser.maxNode;\n        if (isNode)\n            this.storeNode(next, this.pos, nextEnd, 4);\n        this.storeNode(0 /* Term.Err */, this.pos, nextEnd, isNode ? 8 : 4);\n        this.pos = this.reducePos = nextEnd;\n        this.score -= 190 /* Recover.Delete */;\n    }\n    /// Check if the given term would be able to be shifted (optionally\n    /// after some reductions) on this stack. This can be useful for\n    /// external tokenizers that want to make sure they only provide a\n    /// given token when it applies.\n    canShift(term) {\n        for (let sim = new SimulatedStack(this);;) {\n            let action = this.p.parser.stateSlot(sim.state, 4 /* ParseState.DefaultReduce */) || this.p.parser.hasAction(sim.state, term);\n            if (action == 0)\n                return false;\n            if ((action & 65536 /* Action.ReduceFlag */) == 0)\n                return true;\n            sim.reduce(action);\n        }\n    }\n    // Apply up to Recover.MaxNext recovery actions that conceptually\n    // inserts some missing token or rule.\n    /// @internal\n    recoverByInsert(next) {\n        if (this.stack.length >= 300 /* Recover.MaxInsertStackDepth */)\n            return [];\n        let nextStates = this.p.parser.nextStates(this.state);\n        if (nextStates.length > 4 /* Recover.MaxNext */ << 1 || this.stack.length >= 120 /* Recover.DampenInsertStackDepth */) {\n            let best = [];\n            for (let i = 0, s; i < nextStates.length; i += 2) {\n                if ((s = nextStates[i + 1]) != this.state && this.p.parser.hasAction(s, next))\n                    best.push(nextStates[i], s);\n            }\n            if (this.stack.length < 120 /* Recover.DampenInsertStackDepth */)\n                for (let i = 0; best.length < 4 /* Recover.MaxNext */ << 1 && i < nextStates.length; i += 2) {\n                    let s = nextStates[i + 1];\n                    if (!best.some((v, i) => (i & 1) && v == s))\n                        best.push(nextStates[i], s);\n                }\n            nextStates = best;\n        }\n        let result = [];\n        for (let i = 0; i < nextStates.length && result.length < 4 /* Recover.MaxNext */; i += 2) {\n            let s = nextStates[i + 1];\n            if (s == this.state)\n                continue;\n            let stack = this.split();\n            stack.pushState(s, this.pos);\n            stack.storeNode(0 /* Term.Err */, stack.pos, stack.pos, 4, true);\n            stack.shiftContext(nextStates[i], this.pos);\n            stack.score -= 200 /* Recover.Insert */;\n            result.push(stack);\n        }\n        return result;\n    }\n    // Force a reduce, if possible. Return false if that can't\n    // be done.\n    /// @internal\n    forceReduce() {\n        let { parser } = this.p;\n        let reduce = parser.stateSlot(this.state, 5 /* ParseState.ForcedReduce */);\n        if ((reduce & 65536 /* Action.ReduceFlag */) == 0)\n            return false;\n        if (!parser.validAction(this.state, reduce)) {\n            let depth = reduce >> 19 /* Action.ReduceDepthShift */, term = reduce & 65535 /* Action.ValueMask */;\n            let target = this.stack.length - depth * 3;\n            if (target < 0 || parser.getGoto(this.stack[target], term, false) < 0) {\n                let backup = this.findForcedReduction();\n                if (backup == null)\n                    return false;\n                reduce = backup;\n            }\n            this.storeNode(0 /* Term.Err */, this.pos, this.pos, 4, true);\n            this.score -= 100 /* Recover.Reduce */;\n        }\n        this.reducePos = this.pos;\n        this.reduce(reduce);\n        return true;\n    }\n    /// Try to scan through the automaton to find some kind of reduction\n    /// that can be applied. Used when the regular ForcedReduce field\n    /// isn't a valid action. @internal\n    findForcedReduction() {\n        let { parser } = this.p, seen = [];\n        let explore = (state, depth) => {\n            if (seen.includes(state))\n                return;\n            seen.push(state);\n            return parser.allActions(state, (action) => {\n                if (action & (262144 /* Action.StayFlag */ | 131072 /* Action.GotoFlag */)) ;\n                else if (action & 65536 /* Action.ReduceFlag */) {\n                    let rDepth = (action >> 19 /* Action.ReduceDepthShift */) - depth;\n                    if (rDepth > 1) {\n                        let term = action & 65535 /* Action.ValueMask */, target = this.stack.length - rDepth * 3;\n                        if (target >= 0 && parser.getGoto(this.stack[target], term, false) >= 0)\n                            return (rDepth << 19 /* Action.ReduceDepthShift */) | 65536 /* Action.ReduceFlag */ | term;\n                    }\n                }\n                else {\n                    let found = explore(action, depth + 1);\n                    if (found != null)\n                        return found;\n                }\n            });\n        };\n        return explore(this.state, 0);\n    }\n    /// @internal\n    forceAll() {\n        while (!this.p.parser.stateFlag(this.state, 2 /* StateFlag.Accepting */)) {\n            if (!this.forceReduce()) {\n                this.storeNode(0 /* Term.Err */, this.pos, this.pos, 4, true);\n                break;\n            }\n        }\n        return this;\n    }\n    /// Check whether this state has no further actions (assumed to be a direct descendant of the\n    /// top state, since any other states must be able to continue\n    /// somehow). @internal\n    get deadEnd() {\n        if (this.stack.length != 3)\n            return false;\n        let { parser } = this.p;\n        return parser.data[parser.stateSlot(this.state, 1 /* ParseState.Actions */)] == 65535 /* Seq.End */ &&\n            !parser.stateSlot(this.state, 4 /* ParseState.DefaultReduce */);\n    }\n    /// Restart the stack (put it back in its start state). Only safe\n    /// when this.stack.length == 3 (state is directly below the top\n    /// state). @internal\n    restart() {\n        this.state = this.stack[0];\n        this.stack.length = 0;\n    }\n    /// @internal\n    sameState(other) {\n        if (this.state != other.state || this.stack.length != other.stack.length)\n            return false;\n        for (let i = 0; i < this.stack.length; i += 3)\n            if (this.stack[i] != other.stack[i])\n                return false;\n        return true;\n    }\n    /// Get the parser used by this stack.\n    get parser() { return this.p.parser; }\n    /// Test whether a given dialect (by numeric ID, as exported from\n    /// the terms file) is enabled.\n    dialectEnabled(dialectID) { return this.p.parser.dialect.flags[dialectID]; }\n    shiftContext(term, start) {\n        if (this.curContext)\n            this.updateContext(this.curContext.tracker.shift(this.curContext.context, term, this, this.p.stream.reset(start)));\n    }\n    reduceContext(term, start) {\n        if (this.curContext)\n            this.updateContext(this.curContext.tracker.reduce(this.curContext.context, term, this, this.p.stream.reset(start)));\n    }\n    /// @internal\n    emitContext() {\n        let last = this.buffer.length - 1;\n        if (last < 0 || this.buffer[last] != -3)\n            this.buffer.push(this.curContext.hash, this.pos, this.pos, -3);\n    }\n    /// @internal\n    emitLookAhead() {\n        let last = this.buffer.length - 1;\n        if (last < 0 || this.buffer[last] != -4)\n            this.buffer.push(this.lookAhead, this.pos, this.pos, -4);\n    }\n    updateContext(context) {\n        if (context != this.curContext.context) {\n            let newCx = new StackContext(this.curContext.tracker, context);\n            if (newCx.hash != this.curContext.hash)\n                this.emitContext();\n            this.curContext = newCx;\n        }\n    }\n    /// @internal\n    setLookAhead(lookAhead) {\n        if (lookAhead > this.lookAhead) {\n            this.emitLookAhead();\n            this.lookAhead = lookAhead;\n        }\n    }\n    /// @internal\n    close() {\n        if (this.curContext && this.curContext.tracker.strict)\n            this.emitContext();\n        if (this.lookAhead > 0)\n            this.emitLookAhead();\n    }\n}\nclass StackContext {\n    constructor(tracker, context) {\n        this.tracker = tracker;\n        this.context = context;\n        this.hash = tracker.strict ? tracker.hash(context) : 0;\n    }\n}\nvar Recover;\n(function (Recover) {\n    Recover[Recover[\"Insert\"] = 200] = \"Insert\";\n    Recover[Recover[\"Delete\"] = 190] = \"Delete\";\n    Recover[Recover[\"Reduce\"] = 100] = \"Reduce\";\n    Recover[Recover[\"MaxNext\"] = 4] = \"MaxNext\";\n    Recover[Recover[\"MaxInsertStackDepth\"] = 300] = \"MaxInsertStackDepth\";\n    Recover[Recover[\"DampenInsertStackDepth\"] = 120] = \"DampenInsertStackDepth\";\n    Recover[Recover[\"MinBigReduction\"] = 2000] = \"MinBigReduction\";\n})(Recover || (Recover = {}));\n// Used to cheaply run some reductions to scan ahead without mutating\n// an entire stack\nclass SimulatedStack {\n    constructor(start) {\n        this.start = start;\n        this.state = start.state;\n        this.stack = start.stack;\n        this.base = this.stack.length;\n    }\n    reduce(action) {\n        let term = action & 65535 /* Action.ValueMask */, depth = action >> 19 /* Action.ReduceDepthShift */;\n        if (depth == 0) {\n            if (this.stack == this.start.stack)\n                this.stack = this.stack.slice();\n            this.stack.push(this.state, 0, 0);\n            this.base += 3;\n        }\n        else {\n            this.base -= (depth - 1) * 3;\n        }\n        let goto = this.start.p.parser.getGoto(this.stack[this.base - 3], term, true);\n        this.state = goto;\n    }\n}\n// This is given to `Tree.build` to build a buffer, and encapsulates\n// the parent-stack-walking necessary to read the nodes.\nclass StackBufferCursor {\n    constructor(stack, pos, index) {\n        this.stack = stack;\n        this.pos = pos;\n        this.index = index;\n        this.buffer = stack.buffer;\n        if (this.index == 0)\n            this.maybeNext();\n    }\n    static create(stack, pos = stack.bufferBase + stack.buffer.length) {\n        return new StackBufferCursor(stack, pos, pos - stack.bufferBase);\n    }\n    maybeNext() {\n        let next = this.stack.parent;\n        if (next != null) {\n            this.index = this.stack.bufferBase - next.bufferBase;\n            this.stack = next;\n            this.buffer = next.buffer;\n        }\n    }\n    get id() { return this.buffer[this.index - 4]; }\n    get start() { return this.buffer[this.index - 3]; }\n    get end() { return this.buffer[this.index - 2]; }\n    get size() { return this.buffer[this.index - 1]; }\n    next() {\n        this.index -= 4;\n        this.pos -= 4;\n        if (this.index == 0)\n            this.maybeNext();\n    }\n    fork() {\n        return new StackBufferCursor(this.stack, this.pos, this.index);\n    }\n}\n\n// See lezer-generator/src/encode.ts for comments about the encoding\n// used here\nfunction decodeArray(input, Type = Uint16Array) {\n    if (typeof input != \"string\")\n        return input;\n    let array = null;\n    for (let pos = 0, out = 0; pos < input.length;) {\n        let value = 0;\n        for (;;) {\n            let next = input.charCodeAt(pos++), stop = false;\n            if (next == 126 /* Encode.BigValCode */) {\n                value = 65535 /* Encode.BigVal */;\n                break;\n            }\n            if (next >= 92 /* Encode.Gap2 */)\n                next--;\n            if (next >= 34 /* Encode.Gap1 */)\n                next--;\n            let digit = next - 32 /* Encode.Start */;\n            if (digit >= 46 /* Encode.Base */) {\n                digit -= 46 /* Encode.Base */;\n                stop = true;\n            }\n            value += digit;\n            if (stop)\n                break;\n            value *= 46 /* Encode.Base */;\n        }\n        if (array)\n            array[out++] = value;\n        else\n            array = new Type(value);\n    }\n    return array;\n}\n\nclass CachedToken {\n    constructor() {\n        this.start = -1;\n        this.value = -1;\n        this.end = -1;\n        this.extended = -1;\n        this.lookAhead = 0;\n        this.mask = 0;\n        this.context = 0;\n    }\n}\nconst nullToken = new CachedToken;\n/// [Tokenizers](#lr.ExternalTokenizer) interact with the input\n/// through this interface. It presents the input as a stream of\n/// characters, tracking lookahead and hiding the complexity of\n/// [ranges](#common.Parser.parse^ranges) from tokenizer code.\nclass InputStream {\n    /// @internal\n    constructor(\n    /// @internal\n    input, \n    /// @internal\n    ranges) {\n        this.input = input;\n        this.ranges = ranges;\n        /// @internal\n        this.chunk = \"\";\n        /// @internal\n        this.chunkOff = 0;\n        /// Backup chunk\n        this.chunk2 = \"\";\n        this.chunk2Pos = 0;\n        /// The character code of the next code unit in the input, or -1\n        /// when the stream is at the end of the input.\n        this.next = -1;\n        /// @internal\n        this.token = nullToken;\n        this.rangeIndex = 0;\n        this.pos = this.chunkPos = ranges[0].from;\n        this.range = ranges[0];\n        this.end = ranges[ranges.length - 1].to;\n        this.readNext();\n    }\n    /// @internal\n    resolveOffset(offset, assoc) {\n        let range = this.range, index = this.rangeIndex;\n        let pos = this.pos + offset;\n        while (pos < range.from) {\n            if (!index)\n                return null;\n            let next = this.ranges[--index];\n            pos -= range.from - next.to;\n            range = next;\n        }\n        while (assoc < 0 ? pos > range.to : pos >= range.to) {\n            if (index == this.ranges.length - 1)\n                return null;\n            let next = this.ranges[++index];\n            pos += next.from - range.to;\n            range = next;\n        }\n        return pos;\n    }\n    /// @internal\n    clipPos(pos) {\n        if (pos >= this.range.from && pos < this.range.to)\n            return pos;\n        for (let range of this.ranges)\n            if (range.to > pos)\n                return Math.max(pos, range.from);\n        return this.end;\n    }\n    /// Look at a code unit near the stream position. `.peek(0)` equals\n    /// `.next`, `.peek(-1)` gives you the previous character, and so\n    /// on.\n    ///\n    /// Note that looking around during tokenizing creates dependencies\n    /// on potentially far-away content, which may reduce the\n    /// effectiveness incremental parsing—when looking forward—or even\n    /// cause invalid reparses when looking backward more than 25 code\n    /// units, since the library does not track lookbehind.\n    peek(offset) {\n        let idx = this.chunkOff + offset, pos, result;\n        if (idx >= 0 && idx < this.chunk.length) {\n            pos = this.pos + offset;\n            result = this.chunk.charCodeAt(idx);\n        }\n        else {\n            let resolved = this.resolveOffset(offset, 1);\n            if (resolved == null)\n                return -1;\n            pos = resolved;\n            if (pos >= this.chunk2Pos && pos < this.chunk2Pos + this.chunk2.length) {\n                result = this.chunk2.charCodeAt(pos - this.chunk2Pos);\n            }\n            else {\n                let i = this.rangeIndex, range = this.range;\n                while (range.to <= pos)\n                    range = this.ranges[++i];\n                this.chunk2 = this.input.chunk(this.chunk2Pos = pos);\n                if (pos + this.chunk2.length > range.to)\n                    this.chunk2 = this.chunk2.slice(0, range.to - pos);\n                result = this.chunk2.charCodeAt(0);\n            }\n        }\n        if (pos >= this.token.lookAhead)\n            this.token.lookAhead = pos + 1;\n        return result;\n    }\n    /// Accept a token. By default, the end of the token is set to the\n    /// current stream position, but you can pass an offset (relative to\n    /// the stream position) to change that.\n    acceptToken(token, endOffset = 0) {\n        let end = endOffset ? this.resolveOffset(endOffset, -1) : this.pos;\n        if (end == null || end < this.token.start)\n            throw new RangeError(\"Token end out of bounds\");\n        this.token.value = token;\n        this.token.end = end;\n    }\n    getChunk() {\n        if (this.pos >= this.chunk2Pos && this.pos < this.chunk2Pos + this.chunk2.length) {\n            let { chunk, chunkPos } = this;\n            this.chunk = this.chunk2;\n            this.chunkPos = this.chunk2Pos;\n            this.chunk2 = chunk;\n            this.chunk2Pos = chunkPos;\n            this.chunkOff = this.pos - this.chunkPos;\n        }\n        else {\n            this.chunk2 = this.chunk;\n            this.chunk2Pos = this.chunkPos;\n            let nextChunk = this.input.chunk(this.pos);\n            let end = this.pos + nextChunk.length;\n            this.chunk = end > this.range.to ? nextChunk.slice(0, this.range.to - this.pos) : nextChunk;\n            this.chunkPos = this.pos;\n            this.chunkOff = 0;\n        }\n    }\n    readNext() {\n        if (this.chunkOff >= this.chunk.length) {\n            this.getChunk();\n            if (this.chunkOff == this.chunk.length)\n                return this.next = -1;\n        }\n        return this.next = this.chunk.charCodeAt(this.chunkOff);\n    }\n    /// Move the stream forward N (defaults to 1) code units. Returns\n    /// the new value of [`next`](#lr.InputStream.next).\n    advance(n = 1) {\n        this.chunkOff += n;\n        while (this.pos + n >= this.range.to) {\n            if (this.rangeIndex == this.ranges.length - 1)\n                return this.setDone();\n            n -= this.range.to - this.pos;\n            this.range = this.ranges[++this.rangeIndex];\n            this.pos = this.range.from;\n        }\n        this.pos += n;\n        if (this.pos >= this.token.lookAhead)\n            this.token.lookAhead = this.pos + 1;\n        return this.readNext();\n    }\n    setDone() {\n        this.pos = this.chunkPos = this.end;\n        this.range = this.ranges[this.rangeIndex = this.ranges.length - 1];\n        this.chunk = \"\";\n        return this.next = -1;\n    }\n    /// @internal\n    reset(pos, token) {\n        if (token) {\n            this.token = token;\n            token.start = pos;\n            token.lookAhead = pos + 1;\n            token.value = token.extended = -1;\n        }\n        else {\n            this.token = nullToken;\n        }\n        if (this.pos != pos) {\n            this.pos = pos;\n            if (pos == this.end) {\n                this.setDone();\n                return this;\n            }\n            while (pos < this.range.from)\n                this.range = this.ranges[--this.rangeIndex];\n            while (pos >= this.range.to)\n                this.range = this.ranges[++this.rangeIndex];\n            if (pos >= this.chunkPos && pos < this.chunkPos + this.chunk.length) {\n                this.chunkOff = pos - this.chunkPos;\n            }\n            else {\n                this.chunk = \"\";\n                this.chunkOff = 0;\n            }\n            this.readNext();\n        }\n        return this;\n    }\n    /// @internal\n    read(from, to) {\n        if (from >= this.chunkPos && to <= this.chunkPos + this.chunk.length)\n            return this.chunk.slice(from - this.chunkPos, to - this.chunkPos);\n        if (from >= this.chunk2Pos && to <= this.chunk2Pos + this.chunk2.length)\n            return this.chunk2.slice(from - this.chunk2Pos, to - this.chunk2Pos);\n        if (from >= this.range.from && to <= this.range.to)\n            return this.input.read(from, to);\n        let result = \"\";\n        for (let r of this.ranges) {\n            if (r.from >= to)\n                break;\n            if (r.to > from)\n                result += this.input.read(Math.max(r.from, from), Math.min(r.to, to));\n        }\n        return result;\n    }\n}\n/// @internal\nclass TokenGroup {\n    constructor(data, id) {\n        this.data = data;\n        this.id = id;\n    }\n    token(input, stack) {\n        let { parser } = stack.p;\n        readToken(this.data, input, stack, this.id, parser.data, parser.tokenPrecTable);\n    }\n}\nTokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;\n/// @hide\nclass LocalTokenGroup {\n    constructor(data, precTable, elseToken) {\n        this.precTable = precTable;\n        this.elseToken = elseToken;\n        this.data = typeof data == \"string\" ? decodeArray(data) : data;\n    }\n    token(input, stack) {\n        let start = input.pos, skipped = 0;\n        for (;;) {\n            let atEof = input.next < 0, nextPos = input.resolveOffset(1, 1);\n            readToken(this.data, input, stack, 0, this.data, this.precTable);\n            if (input.token.value > -1)\n                break;\n            if (this.elseToken == null)\n                return;\n            if (!atEof)\n                skipped++;\n            if (nextPos == null)\n                break;\n            input.reset(nextPos, input.token);\n        }\n        if (skipped) {\n            input.reset(start, input.token);\n            input.acceptToken(this.elseToken, skipped);\n        }\n    }\n}\nLocalTokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;\n/// `@external tokens` declarations in the grammar should resolve to\n/// an instance of this class.\nclass ExternalTokenizer {\n    /// Create a tokenizer. The first argument is the function that,\n    /// given an input stream, scans for the types of tokens it\n    /// recognizes at the stream's position, and calls\n    /// [`acceptToken`](#lr.InputStream.acceptToken) when it finds\n    /// one.\n    constructor(\n    /// @internal\n    token, options = {}) {\n        this.token = token;\n        this.contextual = !!options.contextual;\n        this.fallback = !!options.fallback;\n        this.extend = !!options.extend;\n    }\n}\n// Tokenizer data is stored a big uint16 array containing, for each\n// state:\n//\n//  - A group bitmask, indicating what token groups are reachable from\n//    this state, so that paths that can only lead to tokens not in\n//    any of the current groups can be cut off early.\n//\n//  - The position of the end of the state's sequence of accepting\n//    tokens\n//\n//  - The number of outgoing edges for the state\n//\n//  - The accepting tokens, as (token id, group mask) pairs\n//\n//  - The outgoing edges, as (start character, end character, state\n//    index) triples, with end character being exclusive\n//\n// This function interprets that data, running through a stream as\n// long as new states with the a matching group mask can be reached,\n// and updating `input.token` when it matches a token.\nfunction readToken(data, input, stack, group, precTable, precOffset) {\n    let state = 0, groupMask = 1 << group, { dialect } = stack.p.parser;\n    scan: for (;;) {\n        if ((groupMask & data[state]) == 0)\n            break;\n        let accEnd = data[state + 1];\n        // Check whether this state can lead to a token in the current group\n        // Accept tokens in this state, possibly overwriting\n        // lower-precedence / shorter tokens\n        for (let i = state + 3; i < accEnd; i += 2)\n            if ((data[i + 1] & groupMask) > 0) {\n                let term = data[i];\n                if (dialect.allows(term) &&\n                    (input.token.value == -1 || input.token.value == term ||\n                        overrides(term, input.token.value, precTable, precOffset))) {\n                    input.acceptToken(term);\n                    break;\n                }\n            }\n        let next = input.next, low = 0, high = data[state + 2];\n        // Special case for EOF\n        if (input.next < 0 && high > low && data[accEnd + high * 3 - 3] == 65535 /* Seq.End */ && data[accEnd + high * 3 - 3] == 65535 /* Seq.End */) {\n            state = data[accEnd + high * 3 - 1];\n            continue scan;\n        }\n        // Do a binary search on the state's edges\n        for (; low < high;) {\n            let mid = (low + high) >> 1;\n            let index = accEnd + mid + (mid << 1);\n            let from = data[index], to = data[index + 1] || 0x10000;\n            if (next < from)\n                high = mid;\n            else if (next >= to)\n                low = mid + 1;\n            else {\n                state = data[index + 2];\n                input.advance();\n                continue scan;\n            }\n        }\n        break;\n    }\n}\nfunction findOffset(data, start, term) {\n    for (let i = start, next; (next = data[i]) != 65535 /* Seq.End */; i++)\n        if (next == term)\n            return i - start;\n    return -1;\n}\nfunction overrides(token, prev, tableData, tableOffset) {\n    let iPrev = findOffset(tableData, tableOffset, prev);\n    return iPrev < 0 || findOffset(tableData, tableOffset, token) < iPrev;\n}\n\n// Environment variable used to control console output\nconst verbose = typeof process != \"undefined\" && process.env && /\\bparse\\b/.test(process.env.LOG);\nlet stackIDs = null;\nvar Safety;\n(function (Safety) {\n    Safety[Safety[\"Margin\"] = 25] = \"Margin\";\n})(Safety || (Safety = {}));\nfunction cutAt(tree, pos, side) {\n    let cursor = tree.cursor(IterMode.IncludeAnonymous);\n    cursor.moveTo(pos);\n    for (;;) {\n        if (!(side < 0 ? cursor.childBefore(pos) : cursor.childAfter(pos)))\n            for (;;) {\n                if ((side < 0 ? cursor.to < pos : cursor.from > pos) && !cursor.type.isError)\n                    return side < 0 ? Math.max(0, Math.min(cursor.to - 1, pos - 25 /* Safety.Margin */))\n                        : Math.min(tree.length, Math.max(cursor.from + 1, pos + 25 /* Safety.Margin */));\n                if (side < 0 ? cursor.prevSibling() : cursor.nextSibling())\n                    break;\n                if (!cursor.parent())\n                    return side < 0 ? 0 : tree.length;\n            }\n    }\n}\nclass FragmentCursor {\n    constructor(fragments, nodeSet) {\n        this.fragments = fragments;\n        this.nodeSet = nodeSet;\n        this.i = 0;\n        this.fragment = null;\n        this.safeFrom = -1;\n        this.safeTo = -1;\n        this.trees = [];\n        this.start = [];\n        this.index = [];\n        this.nextFragment();\n    }\n    nextFragment() {\n        let fr = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];\n        if (fr) {\n            this.safeFrom = fr.openStart ? cutAt(fr.tree, fr.from + fr.offset, 1) - fr.offset : fr.from;\n            this.safeTo = fr.openEnd ? cutAt(fr.tree, fr.to + fr.offset, -1) - fr.offset : fr.to;\n            while (this.trees.length) {\n                this.trees.pop();\n                this.start.pop();\n                this.index.pop();\n            }\n            this.trees.push(fr.tree);\n            this.start.push(-fr.offset);\n            this.index.push(0);\n            this.nextStart = this.safeFrom;\n        }\n        else {\n            this.nextStart = 1e9;\n        }\n    }\n    // `pos` must be >= any previously given `pos` for this cursor\n    nodeAt(pos) {\n        if (pos < this.nextStart)\n            return null;\n        while (this.fragment && this.safeTo <= pos)\n            this.nextFragment();\n        if (!this.fragment)\n            return null;\n        for (;;) {\n            let last = this.trees.length - 1;\n            if (last < 0) { // End of tree\n                this.nextFragment();\n                return null;\n            }\n            let top = this.trees[last], index = this.index[last];\n            if (index == top.children.length) {\n                this.trees.pop();\n                this.start.pop();\n                this.index.pop();\n                continue;\n            }\n            let next = top.children[index];\n            let start = this.start[last] + top.positions[index];\n            if (start > pos) {\n                this.nextStart = start;\n                return null;\n            }\n            if (next instanceof Tree) {\n                if (start == pos) {\n                    if (start < this.safeFrom)\n                        return null;\n                    let end = start + next.length;\n                    if (end <= this.safeTo) {\n                        let lookAhead = next.prop(NodeProp.lookAhead);\n                        if (!lookAhead || end + lookAhead < this.fragment.to)\n                            return next;\n                    }\n                }\n                this.index[last]++;\n                if (start + next.length >= Math.max(this.safeFrom, pos)) { // Enter this node\n                    this.trees.push(next);\n                    this.start.push(start);\n                    this.index.push(0);\n                }\n            }\n            else {\n                this.index[last]++;\n                this.nextStart = start + next.length;\n            }\n        }\n    }\n}\nclass TokenCache {\n    constructor(parser, stream) {\n        this.stream = stream;\n        this.tokens = [];\n        this.mainToken = null;\n        this.actions = [];\n        this.tokens = parser.tokenizers.map(_ => new CachedToken);\n    }\n    getActions(stack) {\n        let actionIndex = 0;\n        let main = null;\n        let { parser } = stack.p, { tokenizers } = parser;\n        let mask = parser.stateSlot(stack.state, 3 /* ParseState.TokenizerMask */);\n        let context = stack.curContext ? stack.curContext.hash : 0;\n        let lookAhead = 0;\n        for (let i = 0; i < tokenizers.length; i++) {\n            if (((1 << i) & mask) == 0)\n                continue;\n            let tokenizer = tokenizers[i], token = this.tokens[i];\n            if (main && !tokenizer.fallback)\n                continue;\n            if (tokenizer.contextual || token.start != stack.pos || token.mask != mask || token.context != context) {\n                this.updateCachedToken(token, tokenizer, stack);\n                token.mask = mask;\n                token.context = context;\n            }\n            if (token.lookAhead > token.end + 25 /* Safety.Margin */)\n                lookAhead = Math.max(token.lookAhead, lookAhead);\n            if (token.value != 0 /* Term.Err */) {\n                let startIndex = actionIndex;\n                if (token.extended > -1)\n                    actionIndex = this.addActions(stack, token.extended, token.end, actionIndex);\n                actionIndex = this.addActions(stack, token.value, token.end, actionIndex);\n                if (!tokenizer.extend) {\n                    main = token;\n                    if (actionIndex > startIndex)\n                        break;\n                }\n            }\n        }\n        while (this.actions.length > actionIndex)\n            this.actions.pop();\n        if (lookAhead)\n            stack.setLookAhead(lookAhead);\n        if (!main && stack.pos == this.stream.end) {\n            main = new CachedToken;\n            main.value = stack.p.parser.eofTerm;\n            main.start = main.end = stack.pos;\n            actionIndex = this.addActions(stack, main.value, main.end, actionIndex);\n        }\n        this.mainToken = main;\n        return this.actions;\n    }\n    getMainToken(stack) {\n        if (this.mainToken)\n            return this.mainToken;\n        let main = new CachedToken, { pos, p } = stack;\n        main.start = pos;\n        main.end = Math.min(pos + 1, p.stream.end);\n        main.value = pos == p.stream.end ? p.parser.eofTerm : 0 /* Term.Err */;\n        return main;\n    }\n    updateCachedToken(token, tokenizer, stack) {\n        let start = this.stream.clipPos(stack.pos);\n        tokenizer.token(this.stream.reset(start, token), stack);\n        if (token.value > -1) {\n            let { parser } = stack.p;\n            for (let i = 0; i < parser.specialized.length; i++)\n                if (parser.specialized[i] == token.value) {\n                    let result = parser.specializers[i](this.stream.read(token.start, token.end), stack);\n                    if (result >= 0 && stack.p.parser.dialect.allows(result >> 1)) {\n                        if ((result & 1) == 0 /* Specialize.Specialize */)\n                            token.value = result >> 1;\n                        else\n                            token.extended = result >> 1;\n                        break;\n                    }\n                }\n        }\n        else {\n            token.value = 0 /* Term.Err */;\n            token.end = this.stream.clipPos(start + 1);\n        }\n    }\n    putAction(action, token, end, index) {\n        // Don't add duplicate actions\n        for (let i = 0; i < index; i += 3)\n            if (this.actions[i] == action)\n                return index;\n        this.actions[index++] = action;\n        this.actions[index++] = token;\n        this.actions[index++] = end;\n        return index;\n    }\n    addActions(stack, token, end, index) {\n        let { state } = stack, { parser } = stack.p, { data } = parser;\n        for (let set = 0; set < 2; set++) {\n            for (let i = parser.stateSlot(state, set ? 2 /* ParseState.Skip */ : 1 /* ParseState.Actions */);; i += 3) {\n                if (data[i] == 65535 /* Seq.End */) {\n                    if (data[i + 1] == 1 /* Seq.Next */) {\n                        i = pair(data, i + 2);\n                    }\n                    else {\n                        if (index == 0 && data[i + 1] == 2 /* Seq.Other */)\n                            index = this.putAction(pair(data, i + 2), token, end, index);\n                        break;\n                    }\n                }\n                if (data[i] == token)\n                    index = this.putAction(pair(data, i + 1), token, end, index);\n            }\n        }\n        return index;\n    }\n}\nvar Rec;\n(function (Rec) {\n    Rec[Rec[\"Distance\"] = 5] = \"Distance\";\n    Rec[Rec[\"MaxRemainingPerStep\"] = 3] = \"MaxRemainingPerStep\";\n    // When two stacks have been running independently long enough to\n    // add this many elements to their buffers, prune one.\n    Rec[Rec[\"MinBufferLengthPrune\"] = 500] = \"MinBufferLengthPrune\";\n    Rec[Rec[\"ForceReduceLimit\"] = 10] = \"ForceReduceLimit\";\n    // Once a stack reaches this depth (in .stack.length) force-reduce\n    // it back to CutTo to avoid creating trees that overflow the stack\n    // on recursive traversal.\n    Rec[Rec[\"CutDepth\"] = 15000] = \"CutDepth\";\n    Rec[Rec[\"CutTo\"] = 9000] = \"CutTo\";\n    Rec[Rec[\"MaxLeftAssociativeReductionCount\"] = 300] = \"MaxLeftAssociativeReductionCount\";\n    // The maximum number of non-recovering stacks to explore (to avoid\n    // getting bogged down with exponentially multiplying stacks in\n    // ambiguous content)\n    Rec[Rec[\"MaxStackCount\"] = 12] = \"MaxStackCount\";\n})(Rec || (Rec = {}));\nclass Parse {\n    constructor(parser, input, fragments, ranges) {\n        this.parser = parser;\n        this.input = input;\n        this.ranges = ranges;\n        this.recovering = 0;\n        this.nextStackID = 0x2654; // ♔, ♕, ♖, ♗, ♘, ♙, ♠, ♡, ♢, ♣, ♤, ♥, ♦, ♧\n        this.minStackPos = 0;\n        this.reused = [];\n        this.stoppedAt = null;\n        this.lastBigReductionStart = -1;\n        this.lastBigReductionSize = 0;\n        this.bigReductionCount = 0;\n        this.stream = new InputStream(input, ranges);\n        this.tokens = new TokenCache(parser, this.stream);\n        this.topTerm = parser.top[1];\n        let { from } = ranges[0];\n        this.stacks = [Stack.start(this, parser.top[0], from)];\n        this.fragments = fragments.length && this.stream.end - from > parser.bufferLength * 4\n            ? new FragmentCursor(fragments, parser.nodeSet) : null;\n    }\n    get parsedPos() {\n        return this.minStackPos;\n    }\n    // Move the parser forward. This will process all parse stacks at\n    // `this.pos` and try to advance them to a further position. If no\n    // stack for such a position is found, it'll start error-recovery.\n    //\n    // When the parse is finished, this will return a syntax tree. When\n    // not, it returns `null`.\n    advance() {\n        let stacks = this.stacks, pos = this.minStackPos;\n        // This will hold stacks beyond `pos`.\n        let newStacks = this.stacks = [];\n        let stopped, stoppedTokens;\n        // If a large amount of reductions happened with the same start\n        // position, force the stack out of that production in order to\n        // avoid creating a tree too deep to recurse through.\n        // (This is an ugly kludge, because unfortunately there is no\n        // straightforward, cheap way to check for this happening, due to\n        // the history of reductions only being available in an\n        // expensive-to-access format in the stack buffers.)\n        if (this.bigReductionCount > 300 /* Rec.MaxLeftAssociativeReductionCount */ && stacks.length == 1) {\n            let [s] = stacks;\n            while (s.forceReduce() && s.stack.length && s.stack[s.stack.length - 2] >= this.lastBigReductionStart) { }\n            this.bigReductionCount = this.lastBigReductionSize = 0;\n        }\n        // Keep advancing any stacks at `pos` until they either move\n        // forward or can't be advanced. Gather stacks that can't be\n        // advanced further in `stopped`.\n        for (let i = 0; i < stacks.length; i++) {\n            let stack = stacks[i];\n            for (;;) {\n                this.tokens.mainToken = null;\n                if (stack.pos > pos) {\n                    newStacks.push(stack);\n                }\n                else if (this.advanceStack(stack, newStacks, stacks)) {\n                    continue;\n                }\n                else {\n                    if (!stopped) {\n                        stopped = [];\n                        stoppedTokens = [];\n                    }\n                    stopped.push(stack);\n                    let tok = this.tokens.getMainToken(stack);\n                    stoppedTokens.push(tok.value, tok.end);\n                }\n                break;\n            }\n        }\n        if (!newStacks.length) {\n            let finished = stopped && findFinished(stopped);\n            if (finished)\n                return this.stackToTree(finished);\n            if (this.parser.strict) {\n                if (verbose && stopped)\n                    console.log(\"Stuck with token \" + (this.tokens.mainToken ? this.parser.getName(this.tokens.mainToken.value) : \"none\"));\n                throw new SyntaxError(\"No parse at \" + pos);\n            }\n            if (!this.recovering)\n                this.recovering = 5 /* Rec.Distance */;\n        }\n        if (this.recovering && stopped) {\n            let finished = this.stoppedAt != null && stopped[0].pos > this.stoppedAt ? stopped[0]\n                : this.runRecovery(stopped, stoppedTokens, newStacks);\n            if (finished)\n                return this.stackToTree(finished.forceAll());\n        }\n        if (this.recovering) {\n            let maxRemaining = this.recovering == 1 ? 1 : this.recovering * 3 /* Rec.MaxRemainingPerStep */;\n            if (newStacks.length > maxRemaining) {\n                newStacks.sort((a, b) => b.score - a.score);\n                while (newStacks.length > maxRemaining)\n                    newStacks.pop();\n            }\n            if (newStacks.some(s => s.reducePos > pos))\n                this.recovering--;\n        }\n        else if (newStacks.length > 1) {\n            // Prune stacks that are in the same state, or that have been\n            // running without splitting for a while, to avoid getting stuck\n            // with multiple successful stacks running endlessly on.\n            outer: for (let i = 0; i < newStacks.length - 1; i++) {\n                let stack = newStacks[i];\n                for (let j = i + 1; j < newStacks.length; j++) {\n                    let other = newStacks[j];\n                    if (stack.sameState(other) ||\n                        stack.buffer.length > 500 /* Rec.MinBufferLengthPrune */ && other.buffer.length > 500 /* Rec.MinBufferLengthPrune */) {\n                        if (((stack.score - other.score) || (stack.buffer.length - other.buffer.length)) > 0) {\n                            newStacks.splice(j--, 1);\n                        }\n                        else {\n                            newStacks.splice(i--, 1);\n                            continue outer;\n                        }\n                    }\n                }\n            }\n            if (newStacks.length > 12 /* Rec.MaxStackCount */)\n                newStacks.splice(12 /* Rec.MaxStackCount */, newStacks.length - 12 /* Rec.MaxStackCount */);\n        }\n        this.minStackPos = newStacks[0].pos;\n        for (let i = 1; i < newStacks.length; i++)\n            if (newStacks[i].pos < this.minStackPos)\n                this.minStackPos = newStacks[i].pos;\n        return null;\n    }\n    stopAt(pos) {\n        if (this.stoppedAt != null && this.stoppedAt < pos)\n            throw new RangeError(\"Can't move stoppedAt forward\");\n        this.stoppedAt = pos;\n    }\n    // Returns an updated version of the given stack, or null if the\n    // stack can't advance normally. When `split` and `stacks` are\n    // given, stacks split off by ambiguous operations will be pushed to\n    // `split`, or added to `stacks` if they move `pos` forward.\n    advanceStack(stack, stacks, split) {\n        let start = stack.pos, { parser } = this;\n        let base = verbose ? this.stackID(stack) + \" -> \" : \"\";\n        if (this.stoppedAt != null && start > this.stoppedAt)\n            return stack.forceReduce() ? stack : null;\n        if (this.fragments) {\n            let strictCx = stack.curContext && stack.curContext.tracker.strict, cxHash = strictCx ? stack.curContext.hash : 0;\n            for (let cached = this.fragments.nodeAt(start); cached;) {\n                let match = this.parser.nodeSet.types[cached.type.id] == cached.type ? parser.getGoto(stack.state, cached.type.id) : -1;\n                if (match > -1 && cached.length && (!strictCx || (cached.prop(NodeProp.contextHash) || 0) == cxHash)) {\n                    stack.useNode(cached, match);\n                    if (verbose)\n                        console.log(base + this.stackID(stack) + ` (via reuse of ${parser.getName(cached.type.id)})`);\n                    return true;\n                }\n                if (!(cached instanceof Tree) || cached.children.length == 0 || cached.positions[0] > 0)\n                    break;\n                let inner = cached.children[0];\n                if (inner instanceof Tree && cached.positions[0] == 0)\n                    cached = inner;\n                else\n                    break;\n            }\n        }\n        let defaultReduce = parser.stateSlot(stack.state, 4 /* ParseState.DefaultReduce */);\n        if (defaultReduce > 0) {\n            stack.reduce(defaultReduce);\n            if (verbose)\n                console.log(base + this.stackID(stack) + ` (via always-reduce ${parser.getName(defaultReduce & 65535 /* Action.ValueMask */)})`);\n            return true;\n        }\n        if (stack.stack.length >= 15000 /* Rec.CutDepth */) {\n            while (stack.stack.length > 9000 /* Rec.CutTo */ && stack.forceReduce()) { }\n        }\n        let actions = this.tokens.getActions(stack);\n        for (let i = 0; i < actions.length;) {\n            let action = actions[i++], term = actions[i++], end = actions[i++];\n            let last = i == actions.length || !split;\n            let localStack = last ? stack : stack.split();\n            localStack.apply(action, term, end);\n            if (verbose)\n                console.log(base + this.stackID(localStack) + ` (via ${(action & 65536 /* Action.ReduceFlag */) == 0 ? \"shift\"\n                    : `reduce of ${parser.getName(action & 65535 /* Action.ValueMask */)}`} for ${parser.getName(term)} @ ${start}${localStack == stack ? \"\" : \", split\"})`);\n            if (last)\n                return true;\n            else if (localStack.pos > start)\n                stacks.push(localStack);\n            else\n                split.push(localStack);\n        }\n        return false;\n    }\n    // Advance a given stack forward as far as it will go. Returns the\n    // (possibly updated) stack if it got stuck, or null if it moved\n    // forward and was given to `pushStackDedup`.\n    advanceFully(stack, newStacks) {\n        let pos = stack.pos;\n        for (;;) {\n            if (!this.advanceStack(stack, null, null))\n                return false;\n            if (stack.pos > pos) {\n                pushStackDedup(stack, newStacks);\n                return true;\n            }\n        }\n    }\n    runRecovery(stacks, tokens, newStacks) {\n        let finished = null, restarted = false;\n        for (let i = 0; i < stacks.length; i++) {\n            let stack = stacks[i], token = tokens[i << 1], tokenEnd = tokens[(i << 1) + 1];\n            let base = verbose ? this.stackID(stack) + \" -> \" : \"\";\n            if (stack.deadEnd) {\n                if (restarted)\n                    continue;\n                restarted = true;\n                stack.restart();\n                if (verbose)\n                    console.log(base + this.stackID(stack) + \" (restarted)\");\n                let done = this.advanceFully(stack, newStacks);\n                if (done)\n                    continue;\n            }\n            let force = stack.split(), forceBase = base;\n            for (let j = 0; force.forceReduce() && j < 10 /* Rec.ForceReduceLimit */; j++) {\n                if (verbose)\n                    console.log(forceBase + this.stackID(force) + \" (via force-reduce)\");\n                let done = this.advanceFully(force, newStacks);\n                if (done)\n                    break;\n                if (verbose)\n                    forceBase = this.stackID(force) + \" -> \";\n            }\n            for (let insert of stack.recoverByInsert(token)) {\n                if (verbose)\n                    console.log(base + this.stackID(insert) + \" (via recover-insert)\");\n                this.advanceFully(insert, newStacks);\n            }\n            if (this.stream.end > stack.pos) {\n                if (tokenEnd == stack.pos) {\n                    tokenEnd++;\n                    token = 0 /* Term.Err */;\n                }\n                stack.recoverByDelete(token, tokenEnd);\n                if (verbose)\n                    console.log(base + this.stackID(stack) + ` (via recover-delete ${this.parser.getName(token)})`);\n                pushStackDedup(stack, newStacks);\n            }\n            else if (!finished || finished.score < stack.score) {\n                finished = stack;\n            }\n        }\n        return finished;\n    }\n    // Convert the stack's buffer to a syntax tree.\n    stackToTree(stack) {\n        stack.close();\n        return Tree.build({ buffer: StackBufferCursor.create(stack),\n            nodeSet: this.parser.nodeSet,\n            topID: this.topTerm,\n            maxBufferLength: this.parser.bufferLength,\n            reused: this.reused,\n            start: this.ranges[0].from,\n            length: stack.pos - this.ranges[0].from,\n            minRepeatType: this.parser.minRepeatTerm });\n    }\n    stackID(stack) {\n        let id = (stackIDs || (stackIDs = new WeakMap)).get(stack);\n        if (!id)\n            stackIDs.set(stack, id = String.fromCodePoint(this.nextStackID++));\n        return id + stack;\n    }\n}\nfunction pushStackDedup(stack, newStacks) {\n    for (let i = 0; i < newStacks.length; i++) {\n        let other = newStacks[i];\n        if (other.pos == stack.pos && other.sameState(stack)) {\n            if (newStacks[i].score < stack.score)\n                newStacks[i] = stack;\n            return;\n        }\n    }\n    newStacks.push(stack);\n}\nclass Dialect {\n    constructor(source, flags, disabled) {\n        this.source = source;\n        this.flags = flags;\n        this.disabled = disabled;\n    }\n    allows(term) { return !this.disabled || this.disabled[term] == 0; }\n}\nconst id = x => x;\n/// Context trackers are used to track stateful context (such as\n/// indentation in the Python grammar, or parent elements in the XML\n/// grammar) needed by external tokenizers. You declare them in a\n/// grammar file as `@context exportName from \"module\"`.\n///\n/// Context values should be immutable, and can be updated (replaced)\n/// on shift or reduce actions.\n///\n/// The export used in a `@context` declaration should be of this\n/// type.\nclass ContextTracker {\n    /// Define a context tracker.\n    constructor(spec) {\n        this.start = spec.start;\n        this.shift = spec.shift || id;\n        this.reduce = spec.reduce || id;\n        this.reuse = spec.reuse || id;\n        this.hash = spec.hash || (() => 0);\n        this.strict = spec.strict !== false;\n    }\n}\n/// Holds the parse tables for a given grammar, as generated by\n/// `lezer-generator`, and provides [methods](#common.Parser) to parse\n/// content with.\nclass LRParser extends Parser {\n    /// @internal\n    constructor(spec) {\n        super();\n        /// @internal\n        this.wrappers = [];\n        if (spec.version != 14 /* File.Version */)\n            throw new RangeError(`Parser version (${spec.version}) doesn't match runtime version (${14 /* File.Version */})`);\n        let nodeNames = spec.nodeNames.split(\" \");\n        this.minRepeatTerm = nodeNames.length;\n        for (let i = 0; i < spec.repeatNodeCount; i++)\n            nodeNames.push(\"\");\n        let topTerms = Object.keys(spec.topRules).map(r => spec.topRules[r][1]);\n        let nodeProps = [];\n        for (let i = 0; i < nodeNames.length; i++)\n            nodeProps.push([]);\n        function setProp(nodeID, prop, value) {\n            nodeProps[nodeID].push([prop, prop.deserialize(String(value))]);\n        }\n        if (spec.nodeProps)\n            for (let propSpec of spec.nodeProps) {\n                let prop = propSpec[0];\n                if (typeof prop == \"string\")\n                    prop = NodeProp[prop];\n                for (let i = 1; i < propSpec.length;) {\n                    let next = propSpec[i++];\n                    if (next >= 0) {\n                        setProp(next, prop, propSpec[i++]);\n                    }\n                    else {\n                        let value = propSpec[i + -next];\n                        for (let j = -next; j > 0; j--)\n                            setProp(propSpec[i++], prop, value);\n                        i++;\n                    }\n                }\n            }\n        this.nodeSet = new NodeSet(nodeNames.map((name, i) => NodeType.define({\n            name: i >= this.minRepeatTerm ? undefined : name,\n            id: i,\n            props: nodeProps[i],\n            top: topTerms.indexOf(i) > -1,\n            error: i == 0,\n            skipped: spec.skippedNodes && spec.skippedNodes.indexOf(i) > -1\n        })));\n        if (spec.propSources)\n            this.nodeSet = this.nodeSet.extend(...spec.propSources);\n        this.strict = false;\n        this.bufferLength = DefaultBufferLength;\n        let tokenArray = decodeArray(spec.tokenData);\n        this.context = spec.context;\n        this.specializerSpecs = spec.specialized || [];\n        this.specialized = new Uint16Array(this.specializerSpecs.length);\n        for (let i = 0; i < this.specializerSpecs.length; i++)\n            this.specialized[i] = this.specializerSpecs[i].term;\n        this.specializers = this.specializerSpecs.map(getSpecializer);\n        this.states = decodeArray(spec.states, Uint32Array);\n        this.data = decodeArray(spec.stateData);\n        this.goto = decodeArray(spec.goto);\n        this.maxTerm = spec.maxTerm;\n        this.tokenizers = spec.tokenizers.map(value => typeof value == \"number\" ? new TokenGroup(tokenArray, value) : value);\n        this.topRules = spec.topRules;\n        this.dialects = spec.dialects || {};\n        this.dynamicPrecedences = spec.dynamicPrecedences || null;\n        this.tokenPrecTable = spec.tokenPrec;\n        this.termNames = spec.termNames || null;\n        this.maxNode = this.nodeSet.types.length - 1;\n        this.dialect = this.parseDialect();\n        this.top = this.topRules[Object.keys(this.topRules)[0]];\n    }\n    createParse(input, fragments, ranges) {\n        let parse = new Parse(this, input, fragments, ranges);\n        for (let w of this.wrappers)\n            parse = w(parse, input, fragments, ranges);\n        return parse;\n    }\n    /// Get a goto table entry @internal\n    getGoto(state, term, loose = false) {\n        let table = this.goto;\n        if (term >= table[0])\n            return -1;\n        for (let pos = table[term + 1];;) {\n            let groupTag = table[pos++], last = groupTag & 1;\n            let target = table[pos++];\n            if (last && loose)\n                return target;\n            for (let end = pos + (groupTag >> 1); pos < end; pos++)\n                if (table[pos] == state)\n                    return target;\n            if (last)\n                return -1;\n        }\n    }\n    /// Check if this state has an action for a given terminal @internal\n    hasAction(state, terminal) {\n        let data = this.data;\n        for (let set = 0; set < 2; set++) {\n            for (let i = this.stateSlot(state, set ? 2 /* ParseState.Skip */ : 1 /* ParseState.Actions */), next;; i += 3) {\n                if ((next = data[i]) == 65535 /* Seq.End */) {\n                    if (data[i + 1] == 1 /* Seq.Next */)\n                        next = data[i = pair(data, i + 2)];\n                    else if (data[i + 1] == 2 /* Seq.Other */)\n                        return pair(data, i + 2);\n                    else\n                        break;\n                }\n                if (next == terminal || next == 0 /* Term.Err */)\n                    return pair(data, i + 1);\n            }\n        }\n        return 0;\n    }\n    /// @internal\n    stateSlot(state, slot) {\n        return this.states[(state * 6 /* ParseState.Size */) + slot];\n    }\n    /// @internal\n    stateFlag(state, flag) {\n        return (this.stateSlot(state, 0 /* ParseState.Flags */) & flag) > 0;\n    }\n    /// @internal\n    validAction(state, action) {\n        return !!this.allActions(state, a => a == action ? true : null);\n    }\n    /// @internal\n    allActions(state, action) {\n        let deflt = this.stateSlot(state, 4 /* ParseState.DefaultReduce */);\n        let result = deflt ? action(deflt) : undefined;\n        for (let i = this.stateSlot(state, 1 /* ParseState.Actions */); result == null; i += 3) {\n            if (this.data[i] == 65535 /* Seq.End */) {\n                if (this.data[i + 1] == 1 /* Seq.Next */)\n                    i = pair(this.data, i + 2);\n                else\n                    break;\n            }\n            result = action(pair(this.data, i + 1));\n        }\n        return result;\n    }\n    /// Get the states that can follow this one through shift actions or\n    /// goto jumps. @internal\n    nextStates(state) {\n        let result = [];\n        for (let i = this.stateSlot(state, 1 /* ParseState.Actions */);; i += 3) {\n            if (this.data[i] == 65535 /* Seq.End */) {\n                if (this.data[i + 1] == 1 /* Seq.Next */)\n                    i = pair(this.data, i + 2);\n                else\n                    break;\n            }\n            if ((this.data[i + 2] & (65536 /* Action.ReduceFlag */ >> 16)) == 0) {\n                let value = this.data[i + 1];\n                if (!result.some((v, i) => (i & 1) && v == value))\n                    result.push(this.data[i], value);\n            }\n        }\n        return result;\n    }\n    /// Configure the parser. Returns a new parser instance that has the\n    /// given settings modified. Settings not provided in `config` are\n    /// kept from the original parser.\n    configure(config) {\n        // Hideous reflection-based kludge to make it easy to create a\n        // slightly modified copy of a parser.\n        let copy = Object.assign(Object.create(LRParser.prototype), this);\n        if (config.props)\n            copy.nodeSet = this.nodeSet.extend(...config.props);\n        if (config.top) {\n            let info = this.topRules[config.top];\n            if (!info)\n                throw new RangeError(`Invalid top rule name ${config.top}`);\n            copy.top = info;\n        }\n        if (config.tokenizers)\n            copy.tokenizers = this.tokenizers.map(t => {\n                let found = config.tokenizers.find(r => r.from == t);\n                return found ? found.to : t;\n            });\n        if (config.specializers) {\n            copy.specializers = this.specializers.slice();\n            copy.specializerSpecs = this.specializerSpecs.map((s, i) => {\n                let found = config.specializers.find(r => r.from == s.external);\n                if (!found)\n                    return s;\n                let spec = Object.assign(Object.assign({}, s), { external: found.to });\n                copy.specializers[i] = getSpecializer(spec);\n                return spec;\n            });\n        }\n        if (config.contextTracker)\n            copy.context = config.contextTracker;\n        if (config.dialect)\n            copy.dialect = this.parseDialect(config.dialect);\n        if (config.strict != null)\n            copy.strict = config.strict;\n        if (config.wrap)\n            copy.wrappers = copy.wrappers.concat(config.wrap);\n        if (config.bufferLength != null)\n            copy.bufferLength = config.bufferLength;\n        return copy;\n    }\n    /// Tells you whether any [parse wrappers](#lr.ParserConfig.wrap)\n    /// are registered for this parser.\n    hasWrappers() {\n        return this.wrappers.length > 0;\n    }\n    /// Returns the name associated with a given term. This will only\n    /// work for all terms when the parser was generated with the\n    /// `--names` option. By default, only the names of tagged terms are\n    /// stored.\n    getName(term) {\n        return this.termNames ? this.termNames[term] : String(term <= this.maxNode && this.nodeSet.types[term].name || term);\n    }\n    /// The eof term id is always allocated directly after the node\n    /// types. @internal\n    get eofTerm() { return this.maxNode + 1; }\n    /// The type of top node produced by the parser.\n    get topNode() { return this.nodeSet.types[this.top[1]]; }\n    /// @internal\n    dynamicPrecedence(term) {\n        let prec = this.dynamicPrecedences;\n        return prec == null ? 0 : prec[term] || 0;\n    }\n    /// @internal\n    parseDialect(dialect) {\n        let values = Object.keys(this.dialects), flags = values.map(() => false);\n        if (dialect)\n            for (let part of dialect.split(\" \")) {\n                let id = values.indexOf(part);\n                if (id >= 0)\n                    flags[id] = true;\n            }\n        let disabled = null;\n        for (let i = 0; i < values.length; i++)\n            if (!flags[i]) {\n                for (let j = this.dialects[values[i]], id; (id = this.data[j++]) != 65535 /* Seq.End */;)\n                    (disabled || (disabled = new Uint8Array(this.maxTerm + 1)))[id] = 1;\n            }\n        return new Dialect(dialect, flags, disabled);\n    }\n    /// Used by the output of the parser generator. Not available to\n    /// user code. @hide\n    static deserialize(spec) {\n        return new LRParser(spec);\n    }\n}\nfunction pair(data, off) { return data[off] | (data[off + 1] << 16); }\nfunction findFinished(stacks) {\n    let best = null;\n    for (let stack of stacks) {\n        let stopped = stack.p.stoppedAt;\n        if ((stack.pos == stack.p.stream.end || stopped != null && stack.pos > stopped) &&\n            stack.p.parser.stateFlag(stack.state, 2 /* StateFlag.Accepting */) &&\n            (!best || best.score < stack.score))\n            best = stack;\n    }\n    return best;\n}\nfunction getSpecializer(spec) {\n    if (spec.external) {\n        let mask = spec.extend ? 1 /* Specialize.Extend */ : 0 /* Specialize.Specialize */;\n        return (value, stack) => (spec.external(value, stack) << 1) | mask;\n    }\n    return spec.get;\n}\n\nexport { ContextTracker, ExternalTokenizer, InputStream, LRParser, LocalTokenGroup, Stack };\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n"],"names":["Recover","Stack","constructor","p","stack","state","reducePos","pos","score","buffer","bufferBase","curContext","lookAhead","parent","this","toString","filter","_","i","concat","start","cx","parser","context","StackContext","pushState","push","length","reduce","action","_a","depth","type","dPrec","dynamicPrecedence","getGoto","minRepeatTerm","storeNode","reduceContext","base","ranges","from","size","nodeSet","types","isAnonymous","lastBigReductionStart","bigReductionCount","lastBigReductionSize","count","stateFlag","baseStateID","pop","term","end","isReduce","cur","top","index","shift","next","nextEnd","nextState","maxNode","shiftContext","apply","useNode","value","reused","updateContext","tracker","reuse","stream","reset","split","off","slice","recoverByDelete","isNode","canShift","sim","SimulatedStack","stateSlot","hasAction","recoverByInsert","nextStates","best","s","some","v","result","forceReduce","validAction","target","backup","findForcedReduction","seen","explore","includes","allActions","rDepth","found","forceAll","deadEnd","data","restart","sameState","other","dialectEnabled","dialectID","dialect","flags","emitContext","last","hash","emitLookAhead","newCx","setLookAhead","close","strict","goto","StackBufferCursor","maybeNext","create","id","fork","decodeArray","input","Type","Uint16Array","array","out","charCodeAt","stop","digit","CachedToken","extended","mask","nullToken","InputStream","chunk","chunkOff","chunk2","chunk2Pos","token","rangeIndex","chunkPos","range","to","readNext","resolveOffset","offset","assoc","clipPos","Math","max","peek","idx","resolved","acceptToken","endOffset","RangeError","getChunk","nextChunk","advance","n","setDone","read","r","min","TokenGroup","readToken","tokenPrecTable","prototype","contextual","fallback","extend","LocalTokenGroup","precTable","elseToken","skipped","atEof","nextPos","ExternalTokenizer","options","group","precOffset","groupMask","scan","accEnd","allows","overrides","low","high","mid","findOffset","prev","tableData","tableOffset","iPrev","verbose","process","env","test","LOG","stackIDs","Safety","Rec","cutAt","tree","side","cursor","IterMode","IncludeAnonymous","moveTo","childBefore","childAfter","isError","prevSibling","nextSibling","FragmentCursor","fragments","fragment","safeFrom","safeTo","trees","nextFragment","fr","openStart","openEnd","nextStart","nodeAt","children","positions","Tree","prop","NodeProp","TokenCache","tokens","mainToken","actions","tokenizers","map","getActions","actionIndex","main","tokenizer","updateCachedToken","startIndex","addActions","eofTerm","getMainToken","specialized","specializers","putAction","set","pair","Parse","recovering","nextStackID","minStackPos","stoppedAt","topTerm","stacks","bufferLength","parsedPos","stopped","stoppedTokens","newStacks","advanceStack","tok","finished","findFinished","stackToTree","console","log","getName","SyntaxError","runRecovery","maxRemaining","sort","a","b","outer","j","splice","stopAt","stackID","strictCx","cxHash","cached","match","contextHash","inner","defaultReduce","localStack","advanceFully","pushStackDedup","restarted","tokenEnd","force","forceBase","insert","build","topID","maxBufferLength","minRepeatType","WeakMap","get","String","fromCodePoint","Dialect","source","disabled","x","ContextTracker","spec","LRParser","Parser","super","wrappers","version","nodeNames","repeatNodeCount","topTerms","Object","keys","topRules","nodeProps","setProp","nodeID","deserialize","propSpec","NodeSet","name","NodeType","define","undefined","props","indexOf","error","skippedNodes","propSources","DefaultBufferLength","tokenArray","tokenData","specializerSpecs","getSpecializer","states","Uint32Array","stateData","maxTerm","dialects","dynamicPrecedences","tokenPrec","termNames","parseDialect","createParse","parse","w","loose","table","groupTag","terminal","slot","flag","deflt","configure","config","copy","assign","info","t","find","external","contextTracker","wrap","hasWrappers","topNode","prec","values","part","Uint8Array","cachedSetTimeout","cachedClearTimeout","module","exports","defaultSetTimout","Error","defaultClearTimeout","runTimeout","fun","setTimeout","e","call","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","timeout","len","run","marker","runClearTimeout","Item","noop","nextTick","args","Array","arguments","title","browser","argv","versions","on","addListener","once","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask"],"sourceRoot":""}
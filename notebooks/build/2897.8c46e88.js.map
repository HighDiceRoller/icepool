{"version":3,"file":"2897.8c46e88.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/settingeditor-extension/lib/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/settingeditor/lib/tokens.js"],"sourcesContent":["/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\n/**\n * @packageDocumentation\n * @module settingeditor-extension\n */\nimport { ILabStatus, ILayoutRestorer } from '@jupyterlab/application';\nimport { CommandToolbarButton, ICommandPalette, MainAreaWidget, Toolbar, WidgetTracker } from '@jupyterlab/apputils';\nimport { IEditorServices } from '@jupyterlab/codeeditor';\nimport { IFormComponentRegistry, launchIcon } from '@jupyterlab/ui-components';\nimport { IRenderMimeRegistry } from '@jupyterlab/rendermime';\nimport { IJSONSettingEditorTracker, ISettingEditorTracker } from '@jupyterlab/settingeditor/lib/tokens';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { IStateDB } from '@jupyterlab/statedb';\nimport { ITranslator } from '@jupyterlab/translation';\nimport { saveIcon, settingsIcon, undoIcon } from '@jupyterlab/ui-components';\n/**\n * The command IDs used by the setting editor.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.open = 'settingeditor:open';\n    CommandIDs.openJSON = 'settingeditor:open-json';\n    CommandIDs.revert = 'settingeditor:revert';\n    CommandIDs.save = 'settingeditor:save';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * The default setting editor extension.\n */\nconst plugin = {\n    id: '@jupyterlab/settingeditor-extension:form-ui',\n    requires: [\n        ISettingRegistry,\n        IStateDB,\n        ITranslator,\n        IFormComponentRegistry,\n        ILabStatus\n    ],\n    optional: [ILayoutRestorer, ICommandPalette, IJSONSettingEditorTracker],\n    autoStart: true,\n    provides: ISettingEditorTracker,\n    activate\n};\n/**\n * Activate the setting editor extension.\n */\nfunction activate(app, registry, state, translator, editorRegistry, status, restorer, palette, jsonEditor) {\n    const trans = translator.load('jupyterlab');\n    const { commands, shell } = app;\n    const namespace = 'setting-editor';\n    const tracker = new WidgetTracker({\n        namespace\n    });\n    // Handle state restoration.\n    if (restorer) {\n        void restorer.restore(tracker, {\n            command: CommandIDs.open,\n            args: widget => ({}),\n            name: widget => namespace\n        });\n    }\n    if (palette) {\n        palette.addItem({\n            category: trans.__('Settings'),\n            command: CommandIDs.open\n        });\n    }\n    commands.addCommand(CommandIDs.open, {\n        execute: async (args) => {\n            if (tracker.currentWidget && !tracker.currentWidget.isDisposed) {\n                if (!tracker.currentWidget.isAttached) {\n                    shell.add(tracker.currentWidget);\n                }\n                shell.activateById(tracker.currentWidget.id);\n                return;\n            }\n            const key = plugin.id;\n            const { SettingsEditor } = await import('@jupyterlab/settingeditor');\n            const editor = new MainAreaWidget({\n                content: new SettingsEditor({\n                    editorRegistry,\n                    key,\n                    registry,\n                    state,\n                    commands,\n                    toSkip: [\n                        '@jupyterlab/application-extension:context-menu',\n                        '@jupyterlab/mainmenu-extension:plugin'\n                    ],\n                    translator,\n                    status,\n                    query: args.query\n                })\n            });\n            if (jsonEditor) {\n                editor.toolbar.addItem('spacer', Toolbar.createSpacerItem());\n                editor.toolbar.addItem('open-json-editor', new CommandToolbarButton({\n                    commands,\n                    id: CommandIDs.openJSON,\n                    icon: launchIcon,\n                    label: trans.__('JSON Settings Editor')\n                }));\n            }\n            editor.id = namespace;\n            editor.title.icon = settingsIcon;\n            editor.title.label = trans.__('Settings');\n            editor.title.closable = true;\n            void tracker.add(editor);\n            shell.add(editor);\n        },\n        label: args => {\n            if (args.label) {\n                return args.label;\n            }\n            return trans.__('Advanced Settings Editor');\n        }\n    });\n    return tracker;\n}\n/**\n * The default setting editor extension.\n */\nconst jsonPlugin = {\n    id: '@jupyterlab/settingeditor-extension:plugin',\n    requires: [\n        ISettingRegistry,\n        IEditorServices,\n        IStateDB,\n        IRenderMimeRegistry,\n        ILabStatus,\n        ITranslator\n    ],\n    optional: [ILayoutRestorer, ICommandPalette],\n    autoStart: true,\n    provides: IJSONSettingEditorTracker,\n    activate: activateJSON\n};\n/**\n * Activate the setting editor extension.\n */\nfunction activateJSON(app, registry, editorServices, state, rendermime, status, translator, restorer, palette) {\n    const trans = translator.load('jupyterlab');\n    const { commands, shell } = app;\n    const namespace = 'json-setting-editor';\n    const factoryService = editorServices.factoryService;\n    const editorFactory = factoryService.newInlineEditor;\n    const tracker = new WidgetTracker({\n        namespace\n    });\n    // Handle state restoration.\n    if (restorer) {\n        void restorer.restore(tracker, {\n            command: CommandIDs.openJSON,\n            args: widget => ({}),\n            name: widget => namespace\n        });\n    }\n    commands.addCommand(CommandIDs.openJSON, {\n        execute: async () => {\n            if (tracker.currentWidget && !tracker.currentWidget.isDisposed) {\n                if (!tracker.currentWidget.isAttached) {\n                    shell.add(tracker.currentWidget);\n                }\n                shell.activateById(tracker.currentWidget.id);\n                return;\n            }\n            const key = plugin.id;\n            const when = app.restored;\n            const { JsonSettingEditor } = await import('@jupyterlab/settingeditor');\n            const editor = new JsonSettingEditor({\n                commands: {\n                    registry: commands,\n                    revert: CommandIDs.revert,\n                    save: CommandIDs.save\n                },\n                editorFactory,\n                key,\n                registry,\n                rendermime,\n                state,\n                translator,\n                when\n            });\n            let disposable = null;\n            // Notify the command registry when the visibility status of the setting\n            // editor's commands change. The setting editor toolbar listens for this\n            // signal from the command registry.\n            editor.commandsChanged.connect((sender, args) => {\n                args.forEach(id => {\n                    commands.notifyCommandChanged(id);\n                });\n                if (editor.canSaveRaw) {\n                    if (!disposable) {\n                        disposable = status.setDirty();\n                    }\n                }\n                else if (disposable) {\n                    disposable.dispose();\n                    disposable = null;\n                }\n                editor.disposed.connect(() => {\n                    if (disposable) {\n                        disposable.dispose();\n                    }\n                });\n            });\n            const container = new MainAreaWidget({\n                content: editor\n            });\n            container.id = namespace;\n            container.title.icon = settingsIcon;\n            container.title.label = trans.__('Advanced Settings Editor');\n            container.title.closable = true;\n            void tracker.add(container);\n            shell.add(container);\n        },\n        label: trans.__('Advanced JSON Settings Editor')\n    });\n    if (palette) {\n        palette.addItem({\n            category: trans.__('Settings'),\n            command: CommandIDs.openJSON\n        });\n    }\n    commands.addCommand(CommandIDs.revert, {\n        execute: () => {\n            var _a;\n            (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content.revert();\n        },\n        icon: undoIcon,\n        label: trans.__('Revert User Settings'),\n        isEnabled: () => { var _a, _b; return (_b = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content.canRevertRaw) !== null && _b !== void 0 ? _b : false; }\n    });\n    commands.addCommand(CommandIDs.save, {\n        execute: () => { var _a; return (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content.save(); },\n        icon: saveIcon,\n        label: trans.__('Save User Settings'),\n        isEnabled: () => { var _a, _b; return (_b = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content.canSaveRaw) !== null && _b !== void 0 ? _b : false; }\n    });\n    return tracker;\n}\nexport default [plugin, jsonPlugin];\n//# sourceMappingURL=index.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Token } from '@lumino/coreutils';\n/* tslint:disable */\n/**\n * The setting editor tracker token.\n */\nexport const ISettingEditorTracker = new Token('@jupyterlab/settingeditor:ISettingEditorTracker');\n/* tslint:enable */\n/**\n * The setting editor tracker token.\n */\nexport const IJSONSettingEditorTracker = new Token('@jupyterlab/settingeditor:IJSONSettingEditorTracker');\n//# sourceMappingURL=tokens.js.map"],"names":["CommandIDs","open","openJSON","revert","save","plugin","id","requires","ISettingRegistry","IStateDB","ITranslator","IFormComponentRegistry","ILabStatus","optional","ILayoutRestorer","ICommandPalette","autoStart","provides","activate","app","registry","state","translator","editorRegistry","status","restorer","palette","jsonEditor","trans","load","commands","shell","namespace","tracker","WidgetTracker","restore","command","args","widget","name","addItem","category","__","addCommand","execute","async","currentWidget","isDisposed","isAttached","add","activateById","key","SettingsEditor","editor","MainAreaWidget","content","toSkip","query","toolbar","Toolbar","CommandToolbarButton","icon","launchIcon","label","title","settingsIcon","closable","jsonPlugin","IEditorServices","IRenderMimeRegistry","editorServices","rendermime","editorFactory","factoryService","newInlineEditor","when","restored","JsonSettingEditor","disposable","commandsChanged","connect","sender","forEach","notifyCommandChanged","canSaveRaw","setDirty","dispose","disposed","container","_a","undoIcon","isEnabled","_b","canRevertRaw","saveIcon","ISettingEditorTracker","Token","IJSONSettingEditorTracker"],"sourceRoot":""}
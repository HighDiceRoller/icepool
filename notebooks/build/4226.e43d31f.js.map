{"version":3,"file":"4226.e43d31f.js","mappings":"yMASO,MAAMA,UAAyB,EAAAC,WAMpCC,YAAYC,GACVC,MAAMD,GAkRA,KAAAE,UAAY,IAAIC,SAAS,SAAU,OAAQ,6BAC3C,KAAAC,OAAS,IAAI,EAAAC,gBAhRnBC,KAAKC,QAAUC,SAASC,cAAc,UACtCH,KAAKC,QAAQG,MAAMC,WAAa,SAChCL,KAAKC,QAAQG,MAAME,SAAW,WAE9BN,KAAKC,QAAQG,MAAMG,IAAM,YACzBP,KAAKC,QAAQO,OAASC,gBACdT,KAAKU,cACXV,KAAKF,OAAOa,UACZC,OAAOC,iBAAiB,WAAYC,IAClC,MAAMC,EAAMD,EAAEE,KACd,GAAkB,WAAdD,EAAIE,MAAoB,CAC1B,MAAMC,EAAUH,EAChBf,KAAKmB,OAAOD,E,IAEd,EAEJhB,SAASkB,KAAKC,YAAYrB,KAAKC,QACjC,CAKAqB,UACMtB,KAAKuB,aAGTvB,KAAKC,QAAQuB,SACb7B,MAAM2B,UACR,CAKIG,YACF,OAAOzB,KAAKF,OAAO4B,OACrB,CAKAjB,0BAyBE,MAxB0C,CACxCkB,eAAgB,aAChBC,uBAAwB,QACxBC,cAAe,CACbC,gBAAiB,CACfC,KAAM,cAERC,eAAgB,MAChBC,SAAU,kBACVF,KAAM,aACNG,mBAAoB,aACpBC,eAAgB,aAChBC,QAAS,UAEXC,iBAAkB,MAClBC,OAAQ,KACRC,OAAQ,6CACRC,WAAY,CACV,CACEC,KAAM,oBACNC,IAAK,+CAKb,CAOAjC,qBACES,GAEA,MAAM,KAAEyB,GAASzB,EACjB,IACE,MAAM0B,EAAS5C,KAAK6C,MAAMF,GAU1B,OARA3C,KAAK8C,qBAAqB,CACxBC,gBAAiB/C,KAAKgD,eACtBhC,KAAM,CACJ,aAAc4B,GAEhBK,SAAU,CAAC,IAGN,CACLX,OAAQ,KACRS,gBAAiB/C,KAAKgD,eACtBE,iBAAkB,CAAC,E,CAErB,MAAOpC,GACP,MAAM,KAAEiB,EAAI,MAAEoB,EAAK,QAAEC,GAAYtC,EAQjC,OANAd,KAAKqD,oBAAoB,CACvBC,MAAOvB,EACPwB,OAAQH,EACRI,UAAW,CAAC,GAAGL,OAGV,CACLb,OAAQ,QACRS,gBAAiB/C,KAAKgD,eACtBM,MAAOvB,EACPwB,OAAQH,EACRI,UAAW,CAAC,GAAGL,K,CAGrB,CAOA1C,sBACES,G,QAIA,MAAMuC,EAAOzD,KAAKJ,UAChBI,KAAKC,QAAQyD,cACb,wBAEI,KAAEf,EAAI,WAAEgB,GAAezC,EAEvB0C,EAAe,QAAR,GAD0C,QAAzC,EAAAjB,EAAKkB,MAAM,EAAGF,GAAYG,MAAM,iBAAS,QAAI,IACxC,UAAE,QAAI,GAGzB,MAAO,CACLC,QAHcN,EAAKO,QAAQC,GAAMA,EAAEC,WAAWN,KAI9CO,aAAcR,EAAaC,EAAKQ,OAChCC,WAAYV,EACZV,SAAU,CAAC,EACXX,OAAQ,KAEZ,CASA7B,qBACES,GAEA,MAAM,IAAIoD,MAAM,kBAClB,CASA7D,wBACES,GAEA,MAAM,IAAIoD,MAAM,kBAClB,CASA7D,sBACES,GAEA,MAAM,IAAIoD,MAAM,kBAClB,CAOAC,WAAWrD,GACT,MAAM,IAAIoD,MAAM,kBAClB,CAOA7D,eAAeM,GACb,MAAM,IAAIuD,MAAM,kBAClB,CAOA7D,cAAcM,GACZ,MAAM,IAAIuD,MAAM,kBAClB,CAOA7D,gBAAgBM,GACd,MAAM,IAAIuD,MAAM,kBAClB,CAOUzB,MAAMF,GACd,OAAO3C,KAAKJ,UAAUI,KAAKC,QAAQyD,cAAef,EACpD,CAOUlC,oBACHT,KAAKC,QAAQyD,eAGlB1D,KAAKJ,UACHI,KAAKC,QAAQyD,cACb,i6BAiCJ,E","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/javascript-kernel/src/kernel.ts"],"sourcesContent":["import { KernelMessage } from '@jupyterlab/services';\n\nimport { BaseKernel, IKernel } from '@jupyterlite/kernel';\n\nimport { PromiseDelegate } from '@lumino/coreutils';\n\n/**\n * A kernel that executes code in an IFrame.\n */\nexport class JavaScriptKernel extends BaseKernel implements IKernel {\n  /**\n   * Instantiate a new JavaScriptKernel\n   *\n   * @param options The instantiation options for a new JavaScriptKernel\n   */\n  constructor(options: IKernel.IOptions) {\n    super(options);\n\n    // create the main IFrame\n    this._iframe = document.createElement('iframe');\n    this._iframe.style.visibility = 'hidden';\n    this._iframe.style.position = 'absolute';\n    // position outside of the page\n    this._iframe.style.top = '-100000px';\n    this._iframe.onload = async () => {\n      await this._initIFrame();\n      this._ready.resolve();\n      window.addEventListener('message', (e: MessageEvent) => {\n        const msg = e.data;\n        if (msg.event === 'stream') {\n          const content = msg as KernelMessage.IStreamMsg['content'];\n          this.stream(content);\n        }\n      });\n    };\n    document.body.appendChild(this._iframe);\n  }\n\n  /**\n   * Dispose the kernel.\n   */\n  dispose(): void {\n    if (this.isDisposed) {\n      return;\n    }\n    this._iframe.remove();\n    super.dispose();\n  }\n\n  /**\n   * A promise that is fulfilled when the kernel is ready.\n   */\n  get ready(): Promise<void> {\n    return this._ready.promise;\n  }\n\n  /**\n   * Handle a kernel_info_request message\n   */\n  async kernelInfoRequest(): Promise<KernelMessage.IInfoReplyMsg['content']> {\n    const content: KernelMessage.IInfoReply = {\n      implementation: 'JavaScript',\n      implementation_version: '0.1.0',\n      language_info: {\n        codemirror_mode: {\n          name: 'javascript',\n        },\n        file_extension: '.js',\n        mimetype: 'text/javascript',\n        name: 'javascript',\n        nbconvert_exporter: 'javascript',\n        pygments_lexer: 'javascript',\n        version: 'es2017',\n      },\n      protocol_version: '5.3',\n      status: 'ok',\n      banner: 'A JavaScript kernel running in the browser',\n      help_links: [\n        {\n          text: 'JavaScript Kernel',\n          url: 'https://github.com/jupyterlite/jupyterlite',\n        },\n      ],\n    };\n    return content;\n  }\n\n  /**\n   * Handle an `execute_request` message\n   *\n   * @param msg The parent message.\n   */\n  async executeRequest(\n    content: KernelMessage.IExecuteRequestMsg['content']\n  ): Promise<KernelMessage.IExecuteReplyMsg['content']> {\n    const { code } = content;\n    try {\n      const result = this._eval(code);\n\n      this.publishExecuteResult({\n        execution_count: this.executionCount,\n        data: {\n          'text/plain': result,\n        },\n        metadata: {},\n      });\n\n      return {\n        status: 'ok',\n        execution_count: this.executionCount,\n        user_expressions: {},\n      };\n    } catch (e) {\n      const { name, stack, message } = e as any as Error;\n\n      this.publishExecuteError({\n        ename: name,\n        evalue: message,\n        traceback: [`${stack}`],\n      });\n\n      return {\n        status: 'error',\n        execution_count: this.executionCount,\n        ename: name,\n        evalue: message,\n        traceback: [`${stack}`],\n      };\n    }\n  }\n\n  /**\n   * Handle an complete_request message\n   *\n   * @param msg The parent message.\n   */\n  async completeRequest(\n    content: KernelMessage.ICompleteRequestMsg['content']\n  ): Promise<KernelMessage.ICompleteReplyMsg['content']> {\n    // naive completion on window names only\n    // TODO: improve and move logic to the iframe\n    const vars = this._evalFunc(\n      this._iframe.contentWindow,\n      'Object.keys(window)'\n    ) as string[];\n    const { code, cursor_pos } = content;\n    const words = code.slice(0, cursor_pos).match(/(\\w+)$/) ?? [];\n    const word = words[0] ?? '';\n    const matches = vars.filter((v) => v.startsWith(word));\n\n    return {\n      matches,\n      cursor_start: cursor_pos - word.length,\n      cursor_end: cursor_pos,\n      metadata: {},\n      status: 'ok',\n    };\n  }\n\n  /**\n   * Handle an `inspect_request` message.\n   *\n   * @param content - The content of the request.\n   *\n   * @returns A promise that resolves with the response message.\n   */\n  async inspectRequest(\n    content: KernelMessage.IInspectRequestMsg['content']\n  ): Promise<KernelMessage.IInspectReplyMsg['content']> {\n    throw new Error('Not implemented');\n  }\n\n  /**\n   * Handle an `is_complete_request` message.\n   *\n   * @param content - The content of the request.\n   *\n   * @returns A promise that resolves with the response message.\n   */\n  async isCompleteRequest(\n    content: KernelMessage.IIsCompleteRequestMsg['content']\n  ): Promise<KernelMessage.IIsCompleteReplyMsg['content']> {\n    throw new Error('Not implemented');\n  }\n\n  /**\n   * Handle a `comm_info_request` message.\n   *\n   * @param content - The content of the request.\n   *\n   * @returns A promise that resolves with the response message.\n   */\n  async commInfoRequest(\n    content: KernelMessage.ICommInfoRequestMsg['content']\n  ): Promise<KernelMessage.ICommInfoReplyMsg['content']> {\n    throw new Error('Not implemented');\n  }\n\n  /**\n   * Send an `input_reply` message.\n   *\n   * @param content - The content of the reply.\n   */\n  inputReply(content: KernelMessage.IInputReplyMsg['content']): void {\n    throw new Error('Not implemented');\n  }\n\n  /**\n   * Send an `comm_open` message.\n   *\n   * @param msg - The comm_open message.\n   */\n  async commOpen(msg: KernelMessage.ICommOpenMsg): Promise<void> {\n    throw new Error('Not implemented');\n  }\n\n  /**\n   * Send an `comm_msg` message.\n   *\n   * @param msg - The comm_msg message.\n   */\n  async commMsg(msg: KernelMessage.ICommMsgMsg): Promise<void> {\n    throw new Error('Not implemented');\n  }\n\n  /**\n   * Send an `comm_close` message.\n   *\n   * @param close - The comm_close message.\n   */\n  async commClose(msg: KernelMessage.ICommCloseMsg): Promise<void> {\n    throw new Error('Not implemented');\n  }\n\n  /**\n   * Execute code in the kernel IFrame.\n   *\n   * @param code The code to execute.\n   */\n  protected _eval(code: string): string {\n    return this._evalFunc(this._iframe.contentWindow, code);\n  }\n\n  /**\n   * Create a new IFrame\n   *\n   * @param iframe The IFrame to initialize.\n   */\n  protected async _initIFrame(): Promise<void> {\n    if (!this._iframe.contentWindow) {\n      return;\n    }\n    this._evalFunc(\n      this._iframe.contentWindow,\n      `\n        console._log = console.log;\n        console._error = console.error;\n\n        window._bubbleUp = function(msg) {\n          window.parent.postMessage(msg);\n        }\n\n        console.log = function() {\n          const args = Array.prototype.slice.call(arguments);\n          window._bubbleUp({\n            \"event\": \"stream\",\n            \"name\": \"stdout\",\n            \"text\": args.join(' ') + '\\\\n'\n          });\n        };\n        console.info = console.log;\n\n        console.error = function() {\n          const args = Array.prototype.slice.call(arguments);\n          window._bubbleUp({\n            \"event\": \"stream\",\n            \"name\": \"stderr\",\n            \"text\": args.join(' ') + '\\\\n'\n          });\n        };\n        console.warn = console.error;\n\n        window.onerror = function(message, source, lineno, colno, error) {\n          console.error(message);\n        }\n      `\n    );\n  }\n\n  private _iframe: HTMLIFrameElement;\n  private _evalFunc = new Function('window', 'code', 'return window.eval(code);');\n  private _ready = new PromiseDelegate<void>();\n}\n"],"names":["JavaScriptKernel","BaseKernel","constructor","options","super","_evalFunc","Function","_ready","PromiseDelegate","this","_iframe","document","createElement","style","visibility","position","top","onload","async","_initIFrame","resolve","window","addEventListener","e","msg","data","event","content","stream","body","appendChild","dispose","isDisposed","remove","ready","promise","implementation","implementation_version","language_info","codemirror_mode","name","file_extension","mimetype","nbconvert_exporter","pygments_lexer","version","protocol_version","status","banner","help_links","text","url","code","result","_eval","publishExecuteResult","execution_count","executionCount","metadata","user_expressions","stack","message","publishExecuteError","ename","evalue","traceback","vars","contentWindow","cursor_pos","word","slice","match","matches","filter","v","startsWith","cursor_start","length","cursor_end","Error","inputReply"],"sourceRoot":""}
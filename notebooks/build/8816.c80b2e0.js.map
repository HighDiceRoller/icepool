{"version":3,"file":"8816.c80b2e0.js","mappings":"sNAiBA,MAKMA,EAAY,+CA6DlB,EAFgD,CAtDF,CAC5CC,GAAID,EACJE,WAAW,EACXC,SAAU,CAAC,EAAAC,cACXC,SAAU,CAAC,EAAAC,sBAAuB,EAAAC,0BAClCC,SAAU,CACRC,EACAC,EACAC,EACAC,KAEA,MAAMC,EAAU,EAAAC,WAAA,aACVC,EACJC,KAAKC,MAAM,EAAAH,WAAA,UAAqB,uBAAyB,MAAMd,IAAc,CAAC,EAC1EkB,EAAMH,EAAOI,YAxBC,2DAyBdA,EAAa,EAAAC,OAAA,MAAaF,GAAKG,KAE/BC,GADaP,EAAOO,aAAe,IACVC,KAAKC,GAAmB,EAAAJ,OAAA,MAAaI,GAAQH,OACtEI,IAAwBV,EAAOU,oBAErCf,EAAYgB,SAAS,CACnBC,KAAM,CACJC,KAAM,SACNC,aAAc,mBACdC,SAAU,SACVC,KAAM,GACNC,UAAW,CACT,aAAc,OACd,aAAc,EAAAZ,OAAA,KAAYP,EAAS,6BAGvCoB,OAAQC,MAAOC,IACb,MAAM,cAAEC,SAAwB,yDAE1BC,MAAgB1B,aAAa,EAAbA,EAAe2B,YAAW1B,aAAgB,EAAhBA,EAAkB0B,UAQlE,OANID,EACFE,QAAQC,KAAK,yDAEbD,QAAQE,KAAK,6DAGR,IAAIL,EAAc,IACpBD,EACHhB,aACAG,cACAG,sBACAY,cACA,GAEJ,G","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/pyolite-kernel-extension/src/index.ts"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { PageConfig, URLExt } from '@jupyterlab/coreutils';\n\nimport {\n  IServiceWorkerManager,\n  JupyterLiteServer,\n  JupyterLiteServerPlugin,\n} from '@jupyterlite/server';\n\nimport { IKernel, IKernelSpecs } from '@jupyterlite/kernel';\nimport { IBroadcastChannelWrapper } from '@jupyterlite/contents';\n\n/**\n * The default CDN fallback for Pyodide\n */\nconst PYODIDE_CDN_URL = 'https://cdn.jsdelivr.net/pyodide/v0.22.0/full/pyodide.js';\n\n/**\n * The id for the extension, and key in the litePlugins.\n */\nconst PLUGIN_ID = '@jupyterlite/pyolite-kernel-extension:kernel';\n\n/**\n * A plugin to register the Pyodide kernel.\n */\nconst kernel: JupyterLiteServerPlugin<void> = {\n  id: PLUGIN_ID,\n  autoStart: true,\n  requires: [IKernelSpecs],\n  optional: [IServiceWorkerManager, IBroadcastChannelWrapper],\n  activate: (\n    app: JupyterLiteServer,\n    kernelspecs: IKernelSpecs,\n    serviceWorker?: IServiceWorkerManager,\n    broadcastChannel?: IBroadcastChannelWrapper\n  ) => {\n    const baseUrl = PageConfig.getBaseUrl();\n    const config =\n      JSON.parse(PageConfig.getOption('litePluginSettings') || '{}')[PLUGIN_ID] || {};\n    const url = config.pyodideUrl || PYODIDE_CDN_URL;\n    const pyodideUrl = URLExt.parse(url).href;\n    const rawPipUrls = config.pipliteUrls || [];\n    const pipliteUrls = rawPipUrls.map((pipUrl: string) => URLExt.parse(pipUrl).href);\n    const disablePyPIFallback = !!config.disablePyPIFallback;\n\n    kernelspecs.register({\n      spec: {\n        name: 'python',\n        display_name: 'Python (Pyodide)',\n        language: 'python',\n        argv: [],\n        resources: {\n          'logo-32x32': 'TODO',\n          'logo-64x64': URLExt.join(baseUrl, '/kernelspecs/python.svg'),\n        },\n      },\n      create: async (options: IKernel.IOptions): Promise<IKernel> => {\n        const { PyoliteKernel } = await import('@jupyterlite/pyolite-kernel');\n\n        const mountDrive = !!(serviceWorker?.enabled && broadcastChannel?.enabled);\n\n        if (mountDrive) {\n          console.info('Pyolite contents will be synced with Jupyter Contents');\n        } else {\n          console.warn('Pyolite contents will NOT be synced with Jupyter Contents');\n        }\n\n        return new PyoliteKernel({\n          ...options,\n          pyodideUrl,\n          pipliteUrls,\n          disablePyPIFallback,\n          mountDrive,\n        });\n      },\n    });\n  },\n};\n\nconst plugins: JupyterLiteServerPlugin<any>[] = [kernel];\n\nexport default plugins;\n"],"names":["PLUGIN_ID","id","autoStart","requires","IKernelSpecs","optional","IServiceWorkerManager","IBroadcastChannelWrapper","activate","app","kernelspecs","serviceWorker","broadcastChannel","baseUrl","PageConfig","config","JSON","parse","url","pyodideUrl","URLExt","href","pipliteUrls","map","pipUrl","disablePyPIFallback","register","spec","name","display_name","language","argv","resources","create","async","options","PyoliteKernel","mountDrive","enabled","console","info","warn"],"sourceRoot":""}
{"version":3,"file":"7144.f297130.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/cells/lib/celldragutils.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/cells/lib/collapser.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/cells/lib/headerfooter.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/cells/lib/inputarea.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/attachments/lib/model.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/cells/lib/model.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/cells/lib/placeholder.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/cells/lib/resizeHandle.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/cells/lib/widget.js"],"sourcesContent":["/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\n/**\n * This module contains some utility functions to operate on cells. This\n * could be shared by widgets that contain cells, like the CodeConsole or\n * Notebook widgets.\n */\nimport { each } from '@lumino/algorithm';\nimport { h, VirtualDOM } from '@lumino/virtualdom';\n/**\n * Constants for drag\n */\n/**\n * The threshold in pixels to start a drag event.\n */\nconst DRAG_THRESHOLD = 5;\n/**\n * The class name added to drag images.\n */\nconst DRAG_IMAGE_CLASS = 'jp-dragImage';\n/**\n * The class name added to singular drag images\n */\nconst SINGLE_DRAG_IMAGE_CLASS = 'jp-dragImage-singlePrompt';\n/**\n * The class name added to the drag image cell content.\n */\nconst CELL_DRAG_CONTENT_CLASS = 'jp-dragImage-content';\n/**\n * The class name added to the drag image cell content.\n */\nconst CELL_DRAG_PROMPT_CLASS = 'jp-dragImage-prompt';\n/**\n * The class name added to the drag image cell content.\n */\nconst CELL_DRAG_MULTIPLE_BACK = 'jp-dragImage-multipleBack';\nexport var CellDragUtils;\n(function (CellDragUtils) {\n    /**\n     * Find the cell index containing the target html element.\n     * This function traces up the DOM hierarchy to find the root cell\n     * node. Then find the corresponding child and select it.\n     *\n     * @param node - the cell node or a child of the cell node.\n     * @param cells - an iterable of Cells\n     * @param isCellNode - a function that takes in a node and checks if\n     * it is a cell node.\n     *\n     * @returns index of the cell we're looking for. Returns -1 if\n     * the cell is not founds\n     */\n    function findCell(node, cells, isCellNode) {\n        let cellIndex = -1;\n        while (node && node.parentElement) {\n            if (isCellNode(node)) {\n                each(cells, (cell, index) => {\n                    if (cell.node === node) {\n                        cellIndex = index;\n                        return false;\n                    }\n                });\n                break;\n            }\n            node = node.parentElement;\n        }\n        return cellIndex;\n    }\n    CellDragUtils.findCell = findCell;\n    /**\n     * Detect which part of the cell triggered the MouseEvent\n     *\n     * @param cell - The cell which contains the MouseEvent's target\n     * @param target - The DOM node which triggered the MouseEvent\n     */\n    function detectTargetArea(cell, target) {\n        let targetArea;\n        if (cell) {\n            if (cell.editorWidget.node.contains(target)) {\n                targetArea = 'input';\n            }\n            else if (cell.promptNode.contains(target)) {\n                targetArea = 'prompt';\n            }\n            else {\n                targetArea = 'cell';\n            }\n        }\n        else {\n            targetArea = 'unknown';\n        }\n        return targetArea;\n    }\n    CellDragUtils.detectTargetArea = detectTargetArea;\n    /**\n     * Detect if a drag event should be started. This is down if the\n     * mouse is moved beyond a certain distance (DRAG_THRESHOLD).\n     *\n     * @param prevX - X Coordinate of the mouse pointer during the mousedown event\n     * @param prevY - Y Coordinate of the mouse pointer during the mousedown event\n     * @param nextX - Current X Coordinate of the mouse pointer\n     * @param nextY - Current Y Coordinate of the mouse pointer\n     */\n    function shouldStartDrag(prevX, prevY, nextX, nextY) {\n        const dx = Math.abs(nextX - prevX);\n        const dy = Math.abs(nextY - prevY);\n        return dx >= DRAG_THRESHOLD || dy >= DRAG_THRESHOLD;\n    }\n    CellDragUtils.shouldStartDrag = shouldStartDrag;\n    /**\n     * Create an image for the cell(s) to be dragged\n     *\n     * @param activeCell - The cell from where the drag event is triggered\n     * @param selectedCells - The cells to be dragged\n     */\n    function createCellDragImage(activeCell, selectedCells) {\n        const count = selectedCells.length;\n        let promptNumber;\n        if (activeCell.model.type === 'code') {\n            const executionCount = activeCell.model\n                .executionCount;\n            promptNumber = ' ';\n            if (executionCount) {\n                promptNumber = executionCount.toString();\n            }\n        }\n        else {\n            promptNumber = '';\n        }\n        const cellContent = activeCell.model.value.text.split('\\n')[0].slice(0, 26);\n        if (count > 1) {\n            if (promptNumber !== '') {\n                return VirtualDOM.realize(h.div(h.div({ className: DRAG_IMAGE_CLASS }, h.span({ className: CELL_DRAG_PROMPT_CLASS }, '[' + promptNumber + ']:'), h.span({ className: CELL_DRAG_CONTENT_CLASS }, cellContent)), h.div({ className: CELL_DRAG_MULTIPLE_BACK }, '')));\n            }\n            else {\n                return VirtualDOM.realize(h.div(h.div({ className: DRAG_IMAGE_CLASS }, h.span({ className: CELL_DRAG_PROMPT_CLASS }), h.span({ className: CELL_DRAG_CONTENT_CLASS }, cellContent)), h.div({ className: CELL_DRAG_MULTIPLE_BACK }, '')));\n            }\n        }\n        else {\n            if (promptNumber !== '') {\n                return VirtualDOM.realize(h.div(h.div({ className: `${DRAG_IMAGE_CLASS} ${SINGLE_DRAG_IMAGE_CLASS}` }, h.span({ className: CELL_DRAG_PROMPT_CLASS }, '[' + promptNumber + ']:'), h.span({ className: CELL_DRAG_CONTENT_CLASS }, cellContent))));\n            }\n            else {\n                return VirtualDOM.realize(h.div(h.div({ className: `${DRAG_IMAGE_CLASS} ${SINGLE_DRAG_IMAGE_CLASS}` }, h.span({ className: CELL_DRAG_PROMPT_CLASS }), h.span({ className: CELL_DRAG_CONTENT_CLASS }, cellContent))));\n            }\n        }\n    }\n    CellDragUtils.createCellDragImage = createCellDragImage;\n})(CellDragUtils || (CellDragUtils = {}));\n//# sourceMappingURL=celldragutils.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { ReactWidget } from '@jupyterlab/apputils';\nimport { ElementExt } from '@lumino/domutils';\nimport * as React from 'react';\n/**\n * The CSS class added to all collapsers.\n */\nconst COLLAPSER_CLASS = 'jp-Collapser';\n/**\n * The CSS class added to the collapser child.\n */\nconst COLLAPSER_CHILD_CLASS = 'jp-Collapser-child';\n/**\n * The CSS class added to input collapsers.\n */\nconst INPUT_COLLAPSER = 'jp-InputCollapser';\n/**\n * The CSS class added to output collapsers.\n */\nconst OUTPUT_COLLAPSER = 'jp-OutputCollapser';\n/**\n * Abstract collapser base class.\n *\n * ### Notes\n * A collapser is a visible div to the left of a cell's\n * input/output that a user can click on to collapse the\n * input/output.\n */\nexport class Collapser extends ReactWidget {\n    /**\n     * Construct a new collapser.\n     */\n    constructor() {\n        super();\n        this.addClass(COLLAPSER_CLASS);\n    }\n    /**\n     * Is the input/output of the parent collapsed.\n     */\n    get collapsed() {\n        return false;\n    }\n    /**\n     * Render the collapser with the virtual DOM.\n     */\n    render() {\n        const childClass = COLLAPSER_CHILD_CLASS;\n        return React.createElement(\"div\", { className: childClass, onClick: e => this.handleClick(e) });\n    }\n}\n/**\n * A collapser subclass to collapse a cell's input area.\n */\nexport class InputCollapser extends Collapser {\n    /**\n     * Construct a new input collapser.\n     */\n    constructor() {\n        super();\n        this.addClass(INPUT_COLLAPSER);\n    }\n    /**\n     * Is the cell's input collapsed?\n     */\n    get collapsed() {\n        var _a;\n        const cell = (_a = this.parent) === null || _a === void 0 ? void 0 : _a.parent;\n        if (cell) {\n            return cell.inputHidden;\n        }\n        else {\n            return false;\n        }\n    }\n    /**\n     * Handle a click event for the user to collapse the cell's input.\n     */\n    handleClick(e) {\n        var _a;\n        const cell = (_a = this.parent) === null || _a === void 0 ? void 0 : _a.parent;\n        if (cell) {\n            cell.inputHidden = !cell.inputHidden;\n        }\n        /* We need this until we watch the cell state */\n        this.update();\n    }\n}\n/**\n * A collapser subclass to collapse a cell's output area.\n */\nexport class OutputCollapser extends Collapser {\n    /**\n     * Construct a new output collapser.\n     */\n    constructor() {\n        super();\n        this.addClass(OUTPUT_COLLAPSER);\n    }\n    /**\n     * Is the cell's output collapsed?\n     */\n    get collapsed() {\n        var _a;\n        const cell = (_a = this.parent) === null || _a === void 0 ? void 0 : _a.parent;\n        if (cell) {\n            return cell.outputHidden;\n        }\n        else {\n            return false;\n        }\n    }\n    /**\n     * Handle a click event for the user to collapse the cell's output.\n     */\n    handleClick(e) {\n        var _a, _b;\n        const cell = (_a = this.parent) === null || _a === void 0 ? void 0 : _a.parent;\n        if (cell) {\n            cell.outputHidden = !cell.outputHidden;\n            /* Scroll cell into view after output collapse */\n            if (cell.outputHidden) {\n                let area = (_b = cell.parent) === null || _b === void 0 ? void 0 : _b.node;\n                if (area) {\n                    ElementExt.scrollIntoViewIfNeeded(area, cell.node);\n                }\n            }\n        }\n        /* We need this until we watch the cell state */\n        this.update();\n    }\n}\n//# sourceMappingURL=collapser.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { Widget } from '@lumino/widgets';\n/**\n * The CSS class added to the cell header.\n */\nconst CELL_HEADER_CLASS = 'jp-CellHeader';\n/**\n * The CSS class added to the cell footer.\n */\nconst CELL_FOOTER_CLASS = 'jp-CellFooter';\n/**\n * Default implementation of a cell header.\n */\nexport class CellHeader extends Widget {\n    /**\n     * Construct a new cell header.\n     */\n    constructor() {\n        super();\n        this.addClass(CELL_HEADER_CLASS);\n    }\n}\n/**\n * Default implementation of a cell footer.\n */\nexport class CellFooter extends Widget {\n    /**\n     * Construct a new cell footer.\n     */\n    constructor() {\n        super();\n        this.addClass(CELL_FOOTER_CLASS);\n    }\n}\n//# sourceMappingURL=headerfooter.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { PanelLayout } from '@lumino/widgets';\nimport { Widget } from '@lumino/widgets';\nimport { CodeEditorWrapper } from '@jupyterlab/codeeditor';\nimport { CodeMirrorEditorFactory } from '@jupyterlab/codemirror';\n/**\n * The class name added to input area widgets.\n */\nconst INPUT_AREA_CLASS = 'jp-InputArea';\n/**\n * The class name added to the prompt area of cell.\n */\nconst INPUT_AREA_PROMPT_CLASS = 'jp-InputArea-prompt';\n/**\n * The class name added to OutputPrompt.\n */\nconst INPUT_PROMPT_CLASS = 'jp-InputPrompt';\n/**\n * The class name added to the editor area of the cell.\n */\nconst INPUT_AREA_EDITOR_CLASS = 'jp-InputArea-editor';\n/** ****************************************************************************\n * InputArea\n ******************************************************************************/\n/**\n * An input area widget, which hosts a prompt and an editor widget.\n */\nexport class InputArea extends Widget {\n    /**\n     * Construct an input area widget.\n     */\n    constructor(options) {\n        super();\n        this.addClass(INPUT_AREA_CLASS);\n        const model = (this.model = options.model);\n        const contentFactory = (this.contentFactory =\n            options.contentFactory || InputArea.defaultContentFactory);\n        // Prompt\n        const prompt = (this._prompt = contentFactory.createInputPrompt());\n        prompt.addClass(INPUT_AREA_PROMPT_CLASS);\n        // Editor\n        const editorOptions = {\n            model,\n            factory: contentFactory.editorFactory,\n            updateOnShow: options.updateOnShow\n        };\n        const editor = (this._editor = new CodeEditorWrapper(editorOptions));\n        editor.addClass(INPUT_AREA_EDITOR_CLASS);\n        const layout = (this.layout = new PanelLayout());\n        layout.addWidget(prompt);\n        if (!options.placeholder) {\n            layout.addWidget(editor);\n        }\n    }\n    /**\n     * Get the CodeEditorWrapper used by the cell.\n     */\n    get editorWidget() {\n        return this._editor;\n    }\n    /**\n     * Get the CodeEditor used by the cell.\n     */\n    get editor() {\n        return this._editor.editor;\n    }\n    /**\n     * Get the prompt node used by the cell.\n     */\n    get promptNode() {\n        return this._prompt.node;\n    }\n    /**\n     * Get the rendered input area widget, if any.\n     */\n    get renderedInput() {\n        return this._rendered;\n    }\n    /**\n     * Render an input instead of the text editor.\n     */\n    renderInput(widget) {\n        const layout = this.layout;\n        if (this._rendered) {\n            this._rendered.parent = null;\n        }\n        this._editor.hide();\n        this._rendered = widget;\n        layout.addWidget(widget);\n    }\n    /**\n     * Show the text editor.\n     */\n    showEditor() {\n        if (this._rendered) {\n            this._rendered.parent = null;\n        }\n        this._editor.show();\n    }\n    /**\n     * Set the prompt of the input area.\n     */\n    setPrompt(value) {\n        this._prompt.executionCount = value;\n    }\n    /**\n     * Dispose of the resources held by the widget.\n     */\n    dispose() {\n        // Do nothing if already disposed.\n        if (this.isDisposed) {\n            return;\n        }\n        this._prompt = null;\n        this._editor = null;\n        this._rendered = null;\n        super.dispose();\n    }\n}\n/**\n * A namespace for `InputArea` statics.\n */\n(function (InputArea) {\n    /**\n     * Default implementation of `IContentFactory`.\n     *\n     * This defaults to using an `editorFactory` based on CodeMirror.\n     */\n    class ContentFactory {\n        /**\n         * Construct a `ContentFactory`.\n         */\n        constructor(options = {}) {\n            this._editor = options.editorFactory || InputArea.defaultEditorFactory;\n        }\n        /**\n         * Return the `CodeEditor.Factory` being used.\n         */\n        get editorFactory() {\n            return this._editor;\n        }\n        /**\n         * Create an input prompt.\n         */\n        createInputPrompt() {\n            return new InputPrompt();\n        }\n    }\n    InputArea.ContentFactory = ContentFactory;\n    /**\n     * A function to create the default CodeMirror editor factory.\n     */\n    function _createDefaultEditorFactory() {\n        const editorServices = new CodeMirrorEditorFactory();\n        return editorServices.newInlineEditor;\n    }\n    /**\n     * The default editor factory singleton based on CodeMirror.\n     */\n    InputArea.defaultEditorFactory = _createDefaultEditorFactory();\n    /**\n     * The default `ContentFactory` instance.\n     */\n    InputArea.defaultContentFactory = new ContentFactory({});\n})(InputArea || (InputArea = {}));\n/**\n * The default input prompt implementation.\n */\nexport class InputPrompt extends Widget {\n    /*\n     * Create an output prompt widget.\n     */\n    constructor() {\n        super();\n        this._executionCount = null;\n        this.addClass(INPUT_PROMPT_CLASS);\n    }\n    /**\n     * The execution count for the prompt.\n     */\n    get executionCount() {\n        return this._executionCount;\n    }\n    set executionCount(value) {\n        this._executionCount = value;\n        if (value === null) {\n            this.node.textContent = ' ';\n        }\n        else {\n            this.node.textContent = `[${value || ' '}]:`;\n        }\n    }\n}\n//# sourceMappingURL=inputarea.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { ObservableMap } from '@jupyterlab/observables';\nimport { AttachmentModel, imageRendererFactory } from '@jupyterlab/rendermime';\nimport { Signal } from '@lumino/signaling';\n/**\n * The default implementation of the IAttachmentsModel.\n */\nexport class AttachmentsModel {\n    /**\n     * Construct a new observable outputs instance.\n     */\n    constructor(options = {}) {\n        this._map = new ObservableMap();\n        this._isDisposed = false;\n        this._stateChanged = new Signal(this);\n        this._changed = new Signal(this);\n        this._modelDB = null;\n        this._serialized = null;\n        this._changeGuard = false;\n        this.contentFactory =\n            options.contentFactory || AttachmentsModel.defaultContentFactory;\n        if (options.values) {\n            for (const key of Object.keys(options.values)) {\n                if (options.values[key] !== undefined) {\n                    this.set(key, options.values[key]);\n                }\n            }\n        }\n        this._map.changed.connect(this._onMapChanged, this);\n        // If we are given a IModelDB, keep an up-to-date\n        // serialized copy of the AttachmentsModel in it.\n        if (options.modelDB) {\n            this._modelDB = options.modelDB;\n            this._serialized = this._modelDB.createValue('attachments');\n            if (this._serialized.get()) {\n                this.fromJSON(this._serialized.get());\n            }\n            else {\n                this._serialized.set(this.toJSON());\n            }\n            this._serialized.changed.connect(this._onSerializedChanged, this);\n        }\n    }\n    /**\n     * A signal emitted when the model state changes.\n     */\n    get stateChanged() {\n        return this._stateChanged;\n    }\n    /**\n     * A signal emitted when the model changes.\n     */\n    get changed() {\n        return this._changed;\n    }\n    /**\n     * The keys of the attachments in the model.\n     */\n    get keys() {\n        return this._map.keys();\n    }\n    /**\n     * Get the length of the items in the model.\n     */\n    get length() {\n        return this._map.keys().length;\n    }\n    /**\n     * Test whether the model is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose of the resources used by the model.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        this._map.dispose();\n        Signal.clearData(this);\n    }\n    /**\n     * Whether the specified key is set.\n     */\n    has(key) {\n        return this._map.has(key);\n    }\n    /**\n     * Get an item at the specified key.\n     */\n    get(key) {\n        return this._map.get(key);\n    }\n    /**\n     * Set the value at the specified key.\n     */\n    set(key, value) {\n        // Normalize stream data.\n        const item = this._createItem({ value });\n        this._map.set(key, item);\n    }\n    /**\n     * Remove the attachment whose name is the specified key\n     */\n    remove(key) {\n        this._map.delete(key);\n    }\n    /**\n     * Clear all of the attachments.\n     */\n    clear() {\n        this._map.values().forEach((item) => {\n            item.dispose();\n        });\n        this._map.clear();\n    }\n    /**\n     * Deserialize the model from JSON.\n     *\n     * #### Notes\n     * This will clear any existing data.\n     */\n    fromJSON(values) {\n        this.clear();\n        Object.keys(values).forEach(key => {\n            if (values[key] !== undefined) {\n                this.set(key, values[key]);\n            }\n        });\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        const ret = {};\n        for (const key of this._map.keys()) {\n            ret[key] = this._map.get(key).toJSON();\n        }\n        return ret;\n    }\n    /**\n     * Create an attachment item and hook up its signals.\n     */\n    _createItem(options) {\n        const factory = this.contentFactory;\n        const item = factory.createAttachmentModel(options);\n        item.changed.connect(this._onGenericChange, this);\n        return item;\n    }\n    /**\n     * Handle a change to the list.\n     */\n    _onMapChanged(sender, args) {\n        if (this._serialized && !this._changeGuard) {\n            this._changeGuard = true;\n            this._serialized.set(this.toJSON());\n            this._changeGuard = false;\n        }\n        this._changed.emit(args);\n        this._stateChanged.emit(void 0);\n    }\n    /**\n     * If the serialized version of the outputs have changed due to a remote\n     * action, then update the model accordingly.\n     */\n    _onSerializedChanged(sender, args) {\n        if (!this._changeGuard) {\n            this._changeGuard = true;\n            this.fromJSON(args.newValue);\n            this._changeGuard = false;\n        }\n    }\n    /**\n     * Handle a change to an item.\n     */\n    _onGenericChange() {\n        this._stateChanged.emit(void 0);\n    }\n}\n/**\n * The namespace for AttachmentsModel class statics.\n */\n(function (AttachmentsModel) {\n    /**\n     * The default implementation of a `IAttachmentsModel.IContentFactory`.\n     */\n    class ContentFactory {\n        /**\n         * Create an attachment model.\n         */\n        createAttachmentModel(options) {\n            return new AttachmentModel(options);\n        }\n    }\n    AttachmentsModel.ContentFactory = ContentFactory;\n    /**\n     * The default attachment model factory.\n     */\n    AttachmentsModel.defaultContentFactory = new ContentFactory();\n})(AttachmentsModel || (AttachmentsModel = {}));\n/**\n * A resolver for cell attachments 'attachment:filename'.\n *\n * Will resolve to a data: url.\n */\nexport class AttachmentsResolver {\n    /**\n     * Create an attachments resolver object.\n     */\n    constructor(options) {\n        this._parent = options.parent || null;\n        this._model = options.model;\n    }\n    /**\n     * Resolve a relative url to a correct server path.\n     */\n    async resolveUrl(url) {\n        if (this._parent && !url.startsWith('attachment:')) {\n            return this._parent.resolveUrl(url);\n        }\n        return url;\n    }\n    /**\n     * Get the download url of a given absolute server path.\n     *\n     * #### Notes\n     * The returned URL may include a query parameter.\n     */\n    async getDownloadUrl(path) {\n        if (this._parent && !path.startsWith('attachment:')) {\n            return this._parent.getDownloadUrl(path);\n        }\n        // Return a data URL with the data of the url\n        const key = path.slice('attachment:'.length);\n        const attachment = this._model.get(key);\n        if (attachment === undefined) {\n            // Resolve with unprocessed path, to show as broken image\n            return path;\n        }\n        const { data } = attachment;\n        const mimeType = Object.keys(data)[0];\n        // Only support known safe types:\n        if (mimeType === undefined ||\n            imageRendererFactory.mimeTypes.indexOf(mimeType) === -1) {\n            throw new Error(`Cannot render unknown image mime type \"${mimeType}\".`);\n        }\n        const dataUrl = `data:${mimeType};base64,${data[mimeType]}`;\n        return dataUrl;\n    }\n    /**\n     * Whether the URL should be handled by the resolver\n     * or not.\n     */\n    isLocal(url) {\n        var _a, _b, _c;\n        if (this._parent && !url.startsWith('attachment:')) {\n            return (_c = (_b = (_a = this._parent).isLocal) === null || _b === void 0 ? void 0 : _b.call(_a, url)) !== null && _c !== void 0 ? _c : true;\n        }\n        return true;\n    }\n}\n//# sourceMappingURL=model.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { JSONExt } from '@lumino/coreutils';\nimport { Signal } from '@lumino/signaling';\nimport { AttachmentsModel } from '@jupyterlab/attachments';\nimport { CodeEditor } from '@jupyterlab/codeeditor';\nimport * as models from '@jupyterlab/shared-models';\nimport { UUID } from '@lumino/coreutils';\nimport { OutputAreaModel } from '@jupyterlab/outputarea';\nconst globalModelDBMutex = models.createMutex();\nexport function isCodeCellModel(model) {\n    return model.type === 'code';\n}\nexport function isMarkdownCellModel(model) {\n    return model.type === 'markdown';\n}\nexport function isRawCellModel(model) {\n    return model.type === 'raw';\n}\n/**\n * An implementation of the cell model.\n */\nexport class CellModel extends CodeEditor.Model {\n    /**\n     * Construct a cell model from optional cell content.\n     */\n    constructor(options) {\n        var _a;\n        super({\n            modelDB: options.modelDB,\n            id: options.id || ((_a = options.cell) === null || _a === void 0 ? void 0 : _a.id) || UUID.uuid4()\n        });\n        /**\n         * A signal emitted when the state of the model changes.\n         */\n        this.contentChanged = new Signal(this);\n        /**\n         * A signal emitted when a model state changes.\n         */\n        this.stateChanged = new Signal(this);\n        this.value.changed.connect(this.onGenericChange, this);\n        const cellType = this.modelDB.createValue('type');\n        cellType.set(this.type);\n        const observableMetadata = this.modelDB.createMap('metadata');\n        observableMetadata.changed.connect(this.onModelDBMetadataChange, this);\n        observableMetadata.changed.connect(this.onGenericChange, this);\n        const cell = options.cell;\n        const trusted = this.modelDB.createValue('trusted');\n        trusted.changed.connect(this.onTrustedChanged, this);\n        if (!cell) {\n            trusted.set(false);\n            return;\n        }\n        trusted.set(!!cell.metadata['trusted']);\n        delete cell.metadata['trusted'];\n        // Set the text value, normalizing line endings to \\n\n        if (Array.isArray(cell.source)) {\n            this.value.text = cell.source\n                .map(s => s.replace(/\\r\\n/g, '\\n').replace(/\\r/g, '\\n'))\n                .join('');\n        }\n        else {\n            this.value.text = cell.source.replace(/\\r\\n/g, '\\n').replace(/\\r/g, '\\n');\n        }\n        const metadata = JSONExt.deepCopy(cell.metadata);\n        if (this.type !== 'raw') {\n            delete metadata['format'];\n        }\n        if (this.type !== 'code') {\n            delete metadata['collapsed'];\n            delete metadata['scrolled'];\n        }\n        for (const key in metadata) {\n            observableMetadata.set(key, metadata[key]);\n        }\n    }\n    /**\n     * The type of cell.\n     */\n    get type() {\n        // This getter really should be abstract, but our current constructor\n        // depends on .type working\n        return 'raw';\n    }\n    /**\n     * The id for the cell.\n     */\n    get id() {\n        return this.sharedModel.getId();\n    }\n    /**\n     * The metadata associated with the cell.\n     */\n    get metadata() {\n        return this.modelDB.get('metadata');\n    }\n    /**\n     * Get the trusted state of the model.\n     */\n    get trusted() {\n        return this.modelDB.getValue('trusted');\n    }\n    /**\n     * Set the trusted state of the model.\n     */\n    set trusted(newValue) {\n        const oldValue = this.trusted;\n        if (oldValue === newValue) {\n            return;\n        }\n        this.modelDB.setValue('trusted', newValue);\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        const metadata = Object.create(null);\n        for (const key of this.metadata.keys()) {\n            const value = JSON.parse(JSON.stringify(this.metadata.get(key)));\n            metadata[key] = value;\n        }\n        if (this.trusted) {\n            metadata['trusted'] = true;\n        }\n        return {\n            cell_type: this.type,\n            source: this.value.text,\n            metadata\n        };\n    }\n    /**\n     * Handle a change to the trusted state.\n     *\n     * The default implementation is a no-op.\n     */\n    onTrustedChanged(trusted, args) {\n        /* no-op */\n    }\n    /**\n     * When we initialize a cell model, we create a standalone model that cannot be shared in a YNotebook.\n     * Call this function to re-initialize the local representation based on a fresh shared model (e.g. models.YFile or models.YCodeCell).\n     *\n     * @param sharedModel\n     * @param reinitialize Whether to reinitialize the shared model.\n     */\n    switchSharedModel(sharedModel, reinitialize) {\n        if (reinitialize) {\n            const newValue = sharedModel.getMetadata();\n            if (newValue) {\n                this._updateModelDBMetadata(newValue);\n            }\n        }\n        super.switchSharedModel(sharedModel, reinitialize);\n    }\n    /**\n     * Handle a change to the cell metadata modelDB and reflect it in the shared model.\n     */\n    onModelDBMetadataChange(sender, event) {\n        const metadata = this.sharedModel.getMetadata();\n        globalModelDBMutex(() => {\n            switch (event.type) {\n                case 'add':\n                    this._changeCellMetadata(metadata, event);\n                    break;\n                case 'change':\n                    this._changeCellMetadata(metadata, event);\n                    break;\n                case 'remove':\n                    delete metadata[event.key];\n                    break;\n                default:\n                    throw new Error(`Invalid event type: ${event.type}`);\n            }\n            this.sharedModel.setMetadata(metadata);\n        });\n    }\n    /**\n     * Change the cell metadata for a given event.\n     *\n     * @param metadata The cell metadata.\n     * @param event The event to handle.\n     */\n    _changeCellMetadata(metadata, event) {\n        switch (event.key) {\n            case 'jupyter':\n                metadata.jupyter = event.newValue;\n                break;\n            case 'collapsed':\n                metadata.collapsed = event.newValue;\n                break;\n            case 'name':\n                metadata.name = event.newValue;\n                break;\n            case 'scrolled':\n                metadata.scrolled = event.newValue;\n                break;\n            case 'tags':\n                metadata.tags = event.newValue;\n                break;\n            case 'trusted':\n                metadata.trusted = event.newValue;\n                break;\n            default:\n                // The default is applied for custom metadata that are not\n                // defined in the official nbformat but which are defined\n                // by the user.\n                metadata[event.key] = event.newValue;\n        }\n    }\n    /**\n     * Handle a change to the cell shared model and reflect it in modelDB.\n     * We update the modeldb metadata when the shared model changes.\n     *\n     * This method overrides the CodeEditor protected _onSharedModelChanged\n     * so we first call super._onSharedModelChanged\n     *\n     * @override CodeEditor._onSharedModelChanged\n     */\n    _onSharedModelChanged(sender, change) {\n        super._onSharedModelChanged(sender, change);\n        globalModelDBMutex(() => {\n            var _a;\n            if (change.metadataChange) {\n                const newValue = (_a = change.metadataChange) === null || _a === void 0 ? void 0 : _a.newValue;\n                if (newValue) {\n                    this._updateModelDBMetadata(newValue);\n                }\n            }\n        });\n    }\n    _updateModelDBMetadata(metadata) {\n        Object.keys(metadata).map(key => {\n            switch (key) {\n                case 'collapsed':\n                    this.metadata.set('collapsed', metadata.jupyter);\n                    break;\n                case 'jupyter':\n                    this.metadata.set('jupyter', metadata.jupyter);\n                    break;\n                case 'name':\n                    this.metadata.set('name', metadata.name);\n                    break;\n                case 'scrolled':\n                    this.metadata.set('scrolled', metadata.scrolled);\n                    break;\n                case 'tags':\n                    this.metadata.set('tags', metadata.tags);\n                    break;\n                case 'trusted':\n                    this.metadata.set('trusted', metadata.trusted);\n                    break;\n                default:\n                    // The default is applied for custom metadata that are not\n                    // defined in the official nbformat but which are defined\n                    // by the user.\n                    this.metadata.set(key, metadata[key]);\n            }\n        });\n    }\n    /**\n     * Handle a change to the observable value.\n     */\n    onGenericChange() {\n        this.contentChanged.emit(void 0);\n    }\n}\n/**\n * A base implementation for cell models with attachments.\n */\nexport class AttachmentsCellModel extends CellModel {\n    /**\n     * Construct a new cell with optional attachments.\n     */\n    constructor(options) {\n        super(options);\n        const factory = options.contentFactory || AttachmentsCellModel.defaultContentFactory;\n        let attachments;\n        const cell = options.cell;\n        if (cell && (cell.cell_type === 'raw' || cell.cell_type === 'markdown')) {\n            attachments = cell\n                .attachments;\n        }\n        this._attachments = factory.createAttachmentsModel({\n            values: attachments,\n            modelDB: this.modelDB\n        });\n        this._attachments.stateChanged.connect(this.onGenericChange, this);\n    }\n    /**\n     * Get the attachments of the model.\n     */\n    get attachments() {\n        return this._attachments;\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        const cell = super.toJSON();\n        if (this.attachments.length) {\n            cell.attachments = this.attachments.toJSON();\n        }\n        return cell;\n    }\n}\n/**\n * The namespace for `AttachmentsCellModel` statics.\n */\n(function (AttachmentsCellModel) {\n    /**\n     * The default implementation of an `IContentFactory`.\n     */\n    class ContentFactory {\n        /**\n         * Create an attachments model.\n         */\n        createAttachmentsModel(options) {\n            return new AttachmentsModel(options);\n        }\n    }\n    AttachmentsCellModel.ContentFactory = ContentFactory;\n    /**\n     * The shared `ContentFactory` instance.\n     */\n    AttachmentsCellModel.defaultContentFactory = new ContentFactory();\n})(AttachmentsCellModel || (AttachmentsCellModel = {}));\n/**\n * An implementation of a raw cell model.\n */\nexport class RawCellModel extends AttachmentsCellModel {\n    /**\n     * The type of the cell.\n     */\n    get type() {\n        return 'raw';\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        const cell = super.toJSON();\n        cell.id = this.id;\n        return cell;\n    }\n}\n/**\n * An implementation of a markdown cell model.\n */\nexport class MarkdownCellModel extends AttachmentsCellModel {\n    /**\n     * Construct a markdown cell model from optional cell content.\n     */\n    constructor(options) {\n        super(options);\n        // Use the Github-flavored markdown mode.\n        this.mimeType = 'text/x-ipythongfm';\n    }\n    /**\n     * The type of the cell.\n     */\n    get type() {\n        return 'markdown';\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        const cell = super.toJSON();\n        cell.id = this.id;\n        return cell;\n    }\n}\n/**\n * An implementation of a code cell Model.\n */\nexport class CodeCellModel extends CellModel {\n    /**\n     * Construct a new code cell with optional original cell content.\n     */\n    constructor(options) {\n        var _a;\n        super(options);\n        this._executedCode = '';\n        this._isDirty = false;\n        const factory = options.contentFactory || CodeCellModel.defaultContentFactory;\n        const trusted = this.trusted;\n        const cell = options.cell;\n        let outputs = [];\n        const executionCount = this.modelDB.createValue('executionCount');\n        if (!executionCount.get()) {\n            if (cell && cell.cell_type === 'code') {\n                executionCount.set(cell.execution_count || null);\n                outputs = (_a = cell.outputs) !== null && _a !== void 0 ? _a : [];\n                // If execution count is not null presume the input code was the latest executed\n                // TODO load from the notebook file when the dirty state is stored in it\n                if (cell.execution_count != null) {\n                    // True if execution_count is null or undefined\n                    this._executedCode = this.value.text.trim();\n                }\n            }\n            else {\n                executionCount.set(null);\n            }\n        }\n        this.value.changed.connect(this._onValueChanged, this);\n        executionCount.changed.connect(this._onExecutionCountChanged, this);\n        globalModelDBMutex(() => {\n            const sharedCell = this.sharedModel;\n            sharedCell.setOutputs(outputs);\n        });\n        this._outputs = factory.createOutputArea({ trusted, values: outputs });\n        this._outputs.changed.connect(this.onGenericChange, this);\n        this._outputs.changed.connect(this.onModelDBOutputsChange, this);\n        // We keep `collapsed` and `jupyter.outputs_hidden` metadata in sync, since\n        // they are redundant in nbformat 4.4. See\n        // https://github.com/jupyter/nbformat/issues/137\n        this.metadata.changed.connect(Private.collapseChanged, this);\n        // Sync `collapsed` and `jupyter.outputs_hidden` for the first time, giving\n        // preference to `collapsed`.\n        if (this.metadata.has('collapsed')) {\n            const collapsed = this.metadata.get('collapsed');\n            Private.collapseChanged(this.metadata, {\n                type: 'change',\n                key: 'collapsed',\n                oldValue: collapsed,\n                newValue: collapsed\n            });\n        }\n        else if (this.metadata.has('jupyter')) {\n            const jupyter = this.metadata.get('jupyter');\n            if (jupyter.hasOwnProperty('outputs_hidden')) {\n                Private.collapseChanged(this.metadata, {\n                    type: 'change',\n                    key: 'jupyter',\n                    oldValue: jupyter,\n                    newValue: jupyter\n                });\n            }\n        }\n    }\n    switchSharedModel(sharedModel, reinitialize) {\n        if (reinitialize) {\n            this.clearExecution();\n            sharedModel.getOutputs().forEach(output => this._outputs.add(output));\n        }\n        super.switchSharedModel(sharedModel, reinitialize);\n    }\n    /**\n     * The type of the cell.\n     */\n    get type() {\n        return 'code';\n    }\n    /**\n     * The execution count of the cell.\n     */\n    get executionCount() {\n        return this.modelDB.has('executionCount')\n            ? this.modelDB.getValue('executionCount')\n            : null;\n    }\n    set executionCount(newValue) {\n        const oldValue = this.executionCount;\n        if (newValue === oldValue) {\n            return;\n        }\n        this.modelDB.setValue('executionCount', newValue || null);\n    }\n    /**\n     * Whether the cell is dirty or not.\n     *\n     * A cell is dirty if it is output is not empty and does not\n     * result of the input code execution.\n     */\n    get isDirty() {\n        // Test could be done dynamically with this._executedCode\n        // but for performance reason, the diff status is stored in a boolean.\n        return this._isDirty;\n    }\n    /**\n     * Set whether the cell is dirty or not.\n     */\n    _setDirty(v) {\n        if (v !== this._isDirty) {\n            if (!v) {\n                this._executedCode = this.value.text.trim();\n            }\n            this._isDirty = v;\n            this.stateChanged.emit({\n                name: 'isDirty',\n                oldValue: !v,\n                newValue: v\n            });\n        }\n    }\n    clearExecution() {\n        this.outputs.clear();\n        this.executionCount = null;\n        this._setDirty(false);\n        this.metadata.delete('execution');\n    }\n    /**\n     * The cell outputs.\n     */\n    get outputs() {\n        return this._outputs;\n    }\n    /**\n     * Dispose of the resources held by the model.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._outputs.dispose();\n        this._outputs = null;\n        super.dispose();\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        const cell = super.toJSON();\n        cell.execution_count = this.executionCount || null;\n        cell.outputs = this.outputs.toJSON();\n        cell.id = this.id;\n        return cell;\n    }\n    /**\n     * Handle a change to the trusted state.\n     */\n    onTrustedChanged(trusted, args) {\n        if (this._outputs) {\n            this._outputs.trusted = args.newValue;\n        }\n        this.stateChanged.emit({\n            name: 'trusted',\n            oldValue: args.oldValue,\n            newValue: args.newValue\n        });\n    }\n    /**\n     * Handle a change to the cell outputs modelDB and reflect it in the shared model.\n     */\n    onModelDBOutputsChange(sender, event) {\n        const codeCell = this.sharedModel;\n        globalModelDBMutex(() => {\n            switch (event.type) {\n                case 'add': {\n                    const outputs = event.newValues.map(output => output.toJSON());\n                    codeCell.updateOutputs(event.newIndex, event.newIndex + outputs.length, outputs);\n                    break;\n                }\n                case 'set': {\n                    const newValues = event.newValues.map(output => output.toJSON());\n                    codeCell.updateOutputs(event.oldIndex, event.oldIndex + newValues.length, newValues);\n                    break;\n                }\n                case 'remove':\n                    codeCell.updateOutputs(event.oldIndex, event.oldValues.length);\n                    break;\n                default:\n                    throw new Error(`Invalid event type: ${event.type}`);\n            }\n        });\n    }\n    /**\n     * Handle a change to the code cell value.\n     */\n    _onValueChanged() {\n        if (this.executionCount !== null) {\n            this._setDirty(this._executedCode !== this.value.text.trim());\n        }\n    }\n    /**\n     * Handle a change to the output shared model and reflect it in modelDB.\n     * We update the modeldb metadata when the nbcell changes.\n     *\n     * This method overrides the CellModel protected _onSharedModelChanged\n     * so we first call super._onSharedModelChanged\n     *\n     * @override CellModel._onSharedModelChanged\n     */\n    _onSharedModelChanged(sender, change) {\n        super._onSharedModelChanged(sender, change);\n        globalModelDBMutex(() => {\n            if (change.outputsChange) {\n                this.clearExecution();\n                sender.getOutputs().forEach(output => this._outputs.add(output));\n            }\n            if (change.executionCountChange) {\n                this.executionCount = change.executionCountChange.newValue\n                    ? change.executionCountChange.newValue\n                    : null;\n            }\n        });\n    }\n    /**\n     * Handle a change to the execution count.\n     */\n    _onExecutionCountChanged(count, args) {\n        const codeCell = this.sharedModel;\n        globalModelDBMutex(() => {\n            codeCell.execution_count = args.newValue\n                ? args.newValue\n                : null;\n        });\n        this.contentChanged.emit(void 0);\n        this.stateChanged.emit({\n            name: 'executionCount',\n            oldValue: args.oldValue,\n            newValue: args.newValue\n        });\n        if (args.newValue && this.isDirty) {\n            this._setDirty(false);\n        }\n    }\n}\n/**\n * The namespace for `CodeCellModel` statics.\n */\n(function (CodeCellModel) {\n    /**\n     * The default implementation of an `IContentFactory`.\n     */\n    class ContentFactory {\n        /**\n         * Create an output area.\n         */\n        createOutputArea(options) {\n            return new OutputAreaModel(options);\n        }\n    }\n    CodeCellModel.ContentFactory = ContentFactory;\n    /**\n     * The shared `ContentFactory` instance.\n     */\n    CodeCellModel.defaultContentFactory = new ContentFactory();\n})(CodeCellModel || (CodeCellModel = {}));\nvar Private;\n(function (Private) {\n    function collapseChanged(metadata, args) {\n        if (args.key === 'collapsed') {\n            const jupyter = (metadata.get('jupyter') || {});\n            const { outputs_hidden } = jupyter, newJupyter = __rest(jupyter, [\"outputs_hidden\"]);\n            if (outputs_hidden !== args.newValue) {\n                if (args.newValue !== undefined) {\n                    newJupyter['outputs_hidden'] = args.newValue;\n                }\n                if (Object.keys(newJupyter).length === 0) {\n                    metadata.delete('jupyter');\n                }\n                else {\n                    metadata.set('jupyter', newJupyter);\n                }\n            }\n        }\n        else if (args.key === 'jupyter') {\n            const jupyter = (args.newValue || {});\n            if (jupyter.hasOwnProperty('outputs_hidden')) {\n                metadata.set('collapsed', jupyter.outputs_hidden);\n            }\n            else {\n                metadata.delete('collapsed');\n            }\n        }\n    }\n    Private.collapseChanged = collapseChanged;\n})(Private || (Private = {}));\n//# sourceMappingURL=model.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport * as React from 'react';\nimport { ReactWidget } from '@jupyterlab/apputils';\nimport { ellipsesIcon } from '@jupyterlab/ui-components';\n/**\n * The CSS class added to placeholders.\n */\nconst PLACEHOLDER_CLASS = 'jp-Placeholder';\n/**\n * The CSS classes added to input placeholder prompts.\n */\nconst INPUT_PROMPT_CLASS = 'jp-Placeholder-prompt jp-InputPrompt';\n/**\n * The CSS classes added to output placeholder prompts.\n */\nconst OUTPUT_PROMPT_CLASS = 'jp-Placeholder-prompt jp-OutputPrompt';\n/**\n * The CSS class added to placeholder content.\n */\nconst CONTENT_CLASS = 'jp-Placeholder-content';\n/**\n * The CSS class added to input placeholders.\n */\nconst INPUT_PLACEHOLDER_CLASS = 'jp-InputPlaceholder';\n/**\n * The CSS class added to output placeholders.\n */\nconst OUTPUT_PLACEHOLDER_CLASS = 'jp-OutputPlaceholder';\n/**\n * An abstract base class for placeholders\n *\n * ### Notes\n * A placeholder is the element that is shown when input/output\n * is hidden.\n */\nexport class Placeholder extends ReactWidget {\n    /**\n     * Construct a new placeholder.\n     */\n    constructor(callback) {\n        super();\n        this.addClass(PLACEHOLDER_CLASS);\n        this._callback = callback;\n    }\n    /**\n     * Handle the click event.\n     */\n    handleClick(e) {\n        const callback = this._callback;\n        callback(e);\n    }\n}\n/**\n * The input placeholder class.\n */\nexport class InputPlaceholder extends Placeholder {\n    /**\n     * Construct a new input placeholder.\n     */\n    constructor(callback) {\n        super(callback);\n        this.addClass(INPUT_PLACEHOLDER_CLASS);\n    }\n    /**\n     * Render the input placeholder using the virtual DOM.\n     */\n    render() {\n        return [\n            React.createElement(\"div\", { className: INPUT_PROMPT_CLASS, key: \"input\" }),\n            React.createElement(\"div\", { className: CONTENT_CLASS, onClick: e => this.handleClick(e), key: \"content\" },\n                React.createElement(ellipsesIcon.react, { className: \"jp-MoreHorizIcon\", elementPosition: \"center\", height: \"auto\", width: \"32px\" }))\n        ];\n    }\n}\n/**\n * The output placeholder class.\n */\nexport class OutputPlaceholder extends Placeholder {\n    /**\n     * Construct a new output placeholder.\n     */\n    constructor(callback) {\n        super(callback);\n        this.addClass(OUTPUT_PLACEHOLDER_CLASS);\n    }\n    /**\n     * Render the output placeholder using the virtual DOM.\n     */\n    render() {\n        return [\n            React.createElement(\"div\", { className: OUTPUT_PROMPT_CLASS, key: \"output\" }),\n            React.createElement(\"div\", { className: CONTENT_CLASS, onClick: e => this.handleClick(e), key: \"content\" },\n                React.createElement(ellipsesIcon.react, { className: \"jp-MoreHorizIcon\", elementPosition: \"center\", height: \"auto\", width: \"32px\" }))\n        ];\n    }\n}\n//# sourceMappingURL=placeholder.js.map","import { Widget } from '@lumino/widgets';\nconst RESIZE_HANDLE_CLASS = 'jp-CellResizeHandle';\nconst CELL_RESIZED_CLASS = 'jp-mod-resizedCell';\n/**\n * A handle that allows to change input/output proportions in side-by-side mode.\n */\nexport class ResizeHandle extends Widget {\n    constructor(targetNode) {\n        super();\n        this.targetNode = targetNode;\n        this._isActive = false;\n        this._isDragging = false;\n        this._protectedWidth = 10;\n        this.addClass(RESIZE_HANDLE_CLASS);\n    }\n    onAfterAttach(msg) {\n        super.onAfterAttach(msg);\n        this.node.addEventListener('dblclick', this);\n        this.node.addEventListener('mousedown', this);\n    }\n    onAfterDetach(msg) {\n        super.onAfterAttach(msg);\n        this.node.removeEventListener('dblclick', this);\n        this.node.removeEventListener('mousedown', this);\n    }\n    /**\n     * Handle the DOM events for the widget.\n     *\n     * @param event - The DOM event sent to the widget.\n     *\n     */\n    handleEvent(event) {\n        var _a, _b;\n        switch (event.type) {\n            case 'dblclick':\n                (_a = this.targetNode.parentNode) === null || _a === void 0 ? void 0 : _a.childNodes.forEach(node => {\n                    node.classList.remove(CELL_RESIZED_CLASS);\n                });\n                document.documentElement.style.setProperty('--jp-side-by-side-resized-cell', '');\n                this._isActive = false;\n                break;\n            case 'mousedown':\n                this._mouseOffset =\n                    event.clientX - this.node.getBoundingClientRect().x;\n                this._isDragging = true;\n                if (!this._isActive) {\n                    (_b = this.targetNode.parentNode) === null || _b === void 0 ? void 0 : _b.childNodes.forEach(node => {\n                        node.classList.add(CELL_RESIZED_CLASS);\n                    });\n                    this._isActive = true;\n                }\n                window.addEventListener('mousemove', this);\n                window.addEventListener('mouseup', this);\n                break;\n            case 'mousemove': {\n                if (!this._isActive || !this._isDragging) {\n                    return;\n                }\n                const targetRect = this.targetNode.getBoundingClientRect();\n                const inputWidth = event.clientX - targetRect.x - this._mouseOffset;\n                const resized_ratio = 1 -\n                    Math.min(Math.max(inputWidth, this._protectedWidth), targetRect.width - this._protectedWidth) /\n                        (targetRect.width - this._protectedWidth);\n                // Added friction to the dragging interaction\n                if (Math.round(resized_ratio * 100) % 10 == 0) {\n                    document.documentElement.style.setProperty('--jp-side-by-side-resized-cell', resized_ratio + 'fr');\n                }\n                break;\n            }\n            case 'mouseup':\n                this._isDragging = false;\n                window.removeEventListener('mousemove', this);\n                window.removeEventListener('mouseup', this);\n                break;\n            default:\n                break;\n        }\n    }\n}\n//# sourceMappingURL=resizeHandle.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport marked from 'marked';\nimport { AttachmentsResolver } from '@jupyterlab/attachments';\nimport { ActivityMonitor, URLExt } from '@jupyterlab/coreutils';\nimport { OutputArea, OutputPrompt, SimplifiedOutputArea, Stdin } from '@jupyterlab/outputarea';\nimport { imageRendererFactory, MimeModel } from '@jupyterlab/rendermime';\nimport { addIcon } from '@jupyterlab/ui-components';\nimport { PromiseDelegate, UUID } from '@lumino/coreutils';\nimport { filter, some, toArray } from '@lumino/algorithm';\nimport { Debouncer } from '@lumino/polling';\nimport { Signal } from '@lumino/signaling';\nimport { Panel, PanelLayout, Widget } from '@lumino/widgets';\nimport { InputCollapser, OutputCollapser } from './collapser';\nimport { CellFooter, CellHeader } from './headerfooter';\nimport { InputArea, InputPrompt } from './inputarea';\nimport { InputPlaceholder, OutputPlaceholder } from './placeholder';\nimport { ResizeHandle } from './resizeHandle';\n/**\n * The CSS class added to cell widgets.\n */\nconst CELL_CLASS = 'jp-Cell';\n/**\n * The CSS class added to the cell header.\n */\nconst CELL_HEADER_CLASS = 'jp-Cell-header';\n/**\n * The CSS class added to the cell footer.\n */\nconst CELL_FOOTER_CLASS = 'jp-Cell-footer';\n/**\n * The CSS class added to the cell input wrapper.\n */\nconst CELL_INPUT_WRAPPER_CLASS = 'jp-Cell-inputWrapper';\n/**\n * The CSS class added to the cell output wrapper.\n */\nconst CELL_OUTPUT_WRAPPER_CLASS = 'jp-Cell-outputWrapper';\n/**\n * The CSS class added to the cell input area.\n */\nconst CELL_INPUT_AREA_CLASS = 'jp-Cell-inputArea';\n/**\n * The CSS class added to the cell output area.\n */\nconst CELL_OUTPUT_AREA_CLASS = 'jp-Cell-outputArea';\n/**\n * The CSS class added to the cell input collapser.\n */\nconst CELL_INPUT_COLLAPSER_CLASS = 'jp-Cell-inputCollapser';\n/**\n * The CSS class added to the cell output collapser.\n */\nconst CELL_OUTPUT_COLLAPSER_CLASS = 'jp-Cell-outputCollapser';\n/**\n * The class name added to the cell when readonly.\n */\nconst READONLY_CLASS = 'jp-mod-readOnly';\n/**\n * The class name added to the cell when dirty.\n */\nconst DIRTY_CLASS = 'jp-mod-dirty';\n/**\n * The class name added to code cells.\n */\nconst CODE_CELL_CLASS = 'jp-CodeCell';\n/**\n * The class name added to markdown cells.\n */\nconst MARKDOWN_CELL_CLASS = 'jp-MarkdownCell';\n/**\n * The class name added to rendered markdown output widgets.\n */\nconst MARKDOWN_OUTPUT_CLASS = 'jp-MarkdownOutput';\nexport const MARKDOWN_HEADING_COLLAPSED = 'jp-MarkdownHeadingCollapsed';\nconst HEADING_COLLAPSER_CLASS = 'jp-collapseHeadingButton';\nconst SHOW_HIDDEN_CELLS_CLASS = 'jp-showHiddenCellsButton';\n/**\n * The class name added to raw cells.\n */\nconst RAW_CELL_CLASS = 'jp-RawCell';\n/**\n * The class name added to a rendered input area.\n */\nconst RENDERED_CLASS = 'jp-mod-rendered';\nconst NO_OUTPUTS_CLASS = 'jp-mod-noOutputs';\n/**\n * The text applied to an empty markdown cell.\n */\nconst DEFAULT_MARKDOWN_TEXT = 'Type Markdown and LaTeX: $ α^2 $';\n/**\n * The timeout to wait for change activity to have ceased before rendering.\n */\nconst RENDER_TIMEOUT = 1000;\n/**\n * The mime type for a rich contents drag object.\n */\nconst CONTENTS_MIME_RICH = 'application/x-jupyter-icontentsrich';\n/** ****************************************************************************\n * Cell\n ******************************************************************************/\n/**\n * A base cell widget.\n */\nexport class Cell extends Widget {\n    /**\n     * Construct a new base cell widget.\n     */\n    constructor(options) {\n        super();\n        this._displayChanged = new Signal(this);\n        this._readOnly = false;\n        this._inputHidden = false;\n        this._syncCollapse = false;\n        this._syncEditable = false;\n        this._resizeDebouncer = new Debouncer(() => {\n            this._displayChanged.emit();\n        }, 0);\n        this.addClass(CELL_CLASS);\n        const model = (this._model = options.model);\n        const contentFactory = (this.contentFactory =\n            options.contentFactory || Cell.defaultContentFactory);\n        this.layout = new PanelLayout();\n        // Header\n        const header = contentFactory.createCellHeader();\n        header.addClass(CELL_HEADER_CLASS);\n        this.layout.addWidget(header);\n        // Input\n        const inputWrapper = (this._inputWrapper = new Panel());\n        inputWrapper.addClass(CELL_INPUT_WRAPPER_CLASS);\n        const inputCollapser = new InputCollapser();\n        inputCollapser.addClass(CELL_INPUT_COLLAPSER_CLASS);\n        const input = (this._input = new InputArea({\n            model,\n            contentFactory,\n            updateOnShow: options.updateEditorOnShow,\n            placeholder: options.placeholder\n        }));\n        input.addClass(CELL_INPUT_AREA_CLASS);\n        inputWrapper.addWidget(inputCollapser);\n        inputWrapper.addWidget(input);\n        this.layout.addWidget(inputWrapper);\n        this._inputPlaceholder = new InputPlaceholder(() => {\n            this.inputHidden = !this.inputHidden;\n        });\n        // Footer\n        const footer = this.contentFactory.createCellFooter();\n        footer.addClass(CELL_FOOTER_CLASS);\n        this.layout.addWidget(footer);\n        // Editor settings\n        if (options.editorConfig) {\n            this.editor.setOptions(Object.assign({}, options.editorConfig));\n        }\n        model.metadata.changed.connect(this.onMetadataChanged, this);\n    }\n    /**\n     * Initialize view state from model.\n     *\n     * #### Notes\n     * Should be called after construction. For convenience, returns this, so it\n     * can be chained in the construction, like `new Foo().initializeState();`\n     */\n    initializeState() {\n        this.loadCollapseState();\n        this.loadEditableState();\n        return this;\n    }\n    /**\n     * Signal to indicate that widget has changed visibly (in size, in type, etc)\n     */\n    get displayChanged() {\n        return this._displayChanged;\n    }\n    /**\n     * Get the prompt node used by the cell.\n     */\n    get promptNode() {\n        if (!this._inputHidden) {\n            return this._input.promptNode;\n        }\n        else {\n            return this._inputPlaceholder.node\n                .firstElementChild;\n        }\n    }\n    /**\n     * Get the CodeEditorWrapper used by the cell.\n     */\n    get editorWidget() {\n        return this._input.editorWidget;\n    }\n    /**\n     * Get the CodeEditor used by the cell.\n     */\n    get editor() {\n        return this._input.editor;\n    }\n    /**\n     * Get the model used by the cell.\n     */\n    get model() {\n        return this._model;\n    }\n    /**\n     * Get the input area for the cell.\n     */\n    get inputArea() {\n        return this._input;\n    }\n    /**\n     * The read only state of the cell.\n     */\n    get readOnly() {\n        return this._readOnly;\n    }\n    set readOnly(value) {\n        if (value === this._readOnly) {\n            return;\n        }\n        this._readOnly = value;\n        if (this.syncEditable) {\n            this.saveEditableState();\n        }\n        this.update();\n    }\n    /**\n     * Save view editable state to model\n     */\n    saveEditableState() {\n        const { metadata } = this.model;\n        const current = metadata.get('editable');\n        if ((this.readOnly && current === false) ||\n            (!this.readOnly && current === undefined)) {\n            return;\n        }\n        if (this.readOnly) {\n            this.model.metadata.set('editable', false);\n        }\n        else {\n            this.model.metadata.delete('editable');\n        }\n    }\n    /**\n     * Load view editable state from model.\n     */\n    loadEditableState() {\n        this.readOnly = this.model.metadata.get('editable') === false;\n    }\n    /**\n     * A promise that resolves when the widget renders for the first time.\n     */\n    get ready() {\n        return Promise.resolve(undefined);\n    }\n    /**\n     * Set the prompt for the widget.\n     */\n    setPrompt(value) {\n        this._input.setPrompt(value);\n    }\n    /**\n     * The view state of input being hidden.\n     */\n    get inputHidden() {\n        return this._inputHidden;\n    }\n    set inputHidden(value) {\n        if (this._inputHidden === value) {\n            return;\n        }\n        const layout = this._inputWrapper.layout;\n        if (value) {\n            this._input.parent = null;\n            layout.addWidget(this._inputPlaceholder);\n        }\n        else {\n            this._inputPlaceholder.parent = null;\n            layout.addWidget(this._input);\n        }\n        this._inputHidden = value;\n        if (this.syncCollapse) {\n            this.saveCollapseState();\n        }\n        this.handleInputHidden(value);\n    }\n    /**\n     * Save view collapse state to model\n     */\n    saveCollapseState() {\n        const jupyter = Object.assign({}, this.model.metadata.get('jupyter'));\n        if ((this.inputHidden && jupyter.source_hidden === true) ||\n            (!this.inputHidden && jupyter.source_hidden === undefined)) {\n            return;\n        }\n        if (this.inputHidden) {\n            jupyter.source_hidden = true;\n        }\n        else {\n            delete jupyter.source_hidden;\n        }\n        if (Object.keys(jupyter).length === 0) {\n            this.model.metadata.delete('jupyter');\n        }\n        else {\n            this.model.metadata.set('jupyter', jupyter);\n        }\n    }\n    /**\n     * Revert view collapse state from model.\n     */\n    loadCollapseState() {\n        const jupyter = this.model.metadata.get('jupyter') || {};\n        this.inputHidden = !!jupyter.source_hidden;\n    }\n    /**\n     * Handle the input being hidden.\n     *\n     * #### Notes\n     * This is called by the `inputHidden` setter so that subclasses\n     * can perform actions upon the input being hidden without accessing\n     * private state.\n     */\n    handleInputHidden(value) {\n        return;\n    }\n    /**\n     * Whether to sync the collapse state to the cell model.\n     */\n    get syncCollapse() {\n        return this._syncCollapse;\n    }\n    set syncCollapse(value) {\n        if (this._syncCollapse === value) {\n            return;\n        }\n        this._syncCollapse = value;\n        if (value) {\n            this.loadCollapseState();\n        }\n    }\n    /**\n     * Whether to sync the editable state to the cell model.\n     */\n    get syncEditable() {\n        return this._syncEditable;\n    }\n    set syncEditable(value) {\n        if (this._syncEditable === value) {\n            return;\n        }\n        this._syncEditable = value;\n        if (value) {\n            this.loadEditableState();\n        }\n    }\n    /**\n     * Clone the cell, using the same model.\n     */\n    clone() {\n        const constructor = this.constructor;\n        return new constructor({\n            model: this.model,\n            contentFactory: this.contentFactory,\n            placeholder: false\n        });\n    }\n    /**\n     * Dispose of the resources held by the widget.\n     */\n    dispose() {\n        // Do nothing if already disposed.\n        if (this.isDisposed) {\n            return;\n        }\n        this._input = null;\n        this._model = null;\n        this._inputWrapper = null;\n        this._inputPlaceholder = null;\n        super.dispose();\n    }\n    /**\n     * Handle `after-attach` messages.\n     */\n    onAfterAttach(msg) {\n        this.update();\n    }\n    /**\n     * Handle `'activate-request'` messages.\n     */\n    onActivateRequest(msg) {\n        this.editor.focus();\n    }\n    /**\n     * Handle `fit-request` messages.\n     */\n    onFitRequest(msg) {\n        // need this for for when a theme changes font size\n        this.editor.refresh();\n    }\n    /**\n     * Handle `resize` messages.\n     */\n    onResize(msg) {\n        void this._resizeDebouncer.invoke();\n    }\n    /**\n     * Handle `update-request` messages.\n     */\n    onUpdateRequest(msg) {\n        if (!this._model) {\n            return;\n        }\n        // Handle read only state.\n        if (this.editor.getOption('readOnly') !== this._readOnly) {\n            this.editor.setOption('readOnly', this._readOnly);\n            this.toggleClass(READONLY_CLASS, this._readOnly);\n        }\n    }\n    /**\n     * Handle changes in the metadata.\n     */\n    onMetadataChanged(model, args) {\n        switch (args.key) {\n            case 'jupyter':\n                if (this.syncCollapse) {\n                    this.loadCollapseState();\n                }\n                break;\n            case 'editable':\n                if (this.syncEditable) {\n                    this.loadEditableState();\n                }\n                break;\n            default:\n                break;\n        }\n    }\n}\n/**\n * The namespace for the `Cell` class statics.\n */\n(function (Cell) {\n    /**\n     * The default implementation of an `IContentFactory`.\n     *\n     * This includes a CodeMirror editor factory to make it easy to use out of the box.\n     */\n    class ContentFactory {\n        /**\n         * Create a content factory for a cell.\n         */\n        constructor(options = {}) {\n            this._editorFactory =\n                options.editorFactory || InputArea.defaultEditorFactory;\n        }\n        /**\n         * The readonly editor factory that create code editors\n         */\n        get editorFactory() {\n            return this._editorFactory;\n        }\n        /**\n         * Create a new cell header for the parent widget.\n         */\n        createCellHeader() {\n            return new CellHeader();\n        }\n        /**\n         * Create a new cell header for the parent widget.\n         */\n        createCellFooter() {\n            return new CellFooter();\n        }\n        /**\n         * Create an input prompt.\n         */\n        createInputPrompt() {\n            return new InputPrompt();\n        }\n        /**\n         * Create the output prompt for the widget.\n         */\n        createOutputPrompt() {\n            return new OutputPrompt();\n        }\n        /**\n         * Create an stdin widget.\n         */\n        createStdin(options) {\n            return new Stdin(options);\n        }\n    }\n    Cell.ContentFactory = ContentFactory;\n    /**\n     * The default content factory for cells.\n     */\n    Cell.defaultContentFactory = new ContentFactory();\n})(Cell || (Cell = {}));\n/** ****************************************************************************\n * CodeCell\n ******************************************************************************/\n/**\n * A widget for a code cell.\n */\nexport class CodeCell extends Cell {\n    /**\n     * Construct a code cell widget.\n     */\n    constructor(options) {\n        super(options);\n        this._outputHidden = false;\n        this._syncScrolled = false;\n        this._savingMetadata = false;\n        this.addClass(CODE_CELL_CLASS);\n        // Only save options not handled by parent constructor.\n        const rendermime = (this._rendermime = options.rendermime);\n        const contentFactory = this.contentFactory;\n        const model = this.model;\n        if (!options.placeholder) {\n            // Insert the output before the cell footer.\n            const outputWrapper = (this._outputWrapper = new Panel());\n            outputWrapper.addClass(CELL_OUTPUT_WRAPPER_CLASS);\n            const outputCollapser = new OutputCollapser();\n            outputCollapser.addClass(CELL_OUTPUT_COLLAPSER_CLASS);\n            const output = (this._output = new OutputArea({\n                model: model.outputs,\n                rendermime,\n                contentFactory: contentFactory,\n                maxNumberOutputs: options.maxNumberOutputs\n            }));\n            output.addClass(CELL_OUTPUT_AREA_CLASS);\n            // Set a CSS if there are no outputs, and connect a signal for future\n            // changes to the number of outputs. This is for conditional styling\n            // if there are no outputs.\n            if (model.outputs.length === 0) {\n                this.addClass(NO_OUTPUTS_CLASS);\n            }\n            output.outputLengthChanged.connect(this._outputLengthHandler, this);\n            outputWrapper.addWidget(outputCollapser);\n            outputWrapper.addWidget(output);\n            this.layout.insertWidget(2, new ResizeHandle(this.node));\n            this.layout.insertWidget(3, outputWrapper);\n            if (model.isDirty) {\n                this.addClass(DIRTY_CLASS);\n            }\n            this._outputPlaceholder = new OutputPlaceholder(() => {\n                this.outputHidden = !this.outputHidden;\n            });\n        }\n        model.stateChanged.connect(this.onStateChanged, this);\n    }\n    /**\n     * Initialize view state from model.\n     *\n     * #### Notes\n     * Should be called after construction. For convenience, returns this, so it\n     * can be chained in the construction, like `new Foo().initializeState();`\n     */\n    initializeState() {\n        super.initializeState();\n        this.loadScrolledState();\n        this.setPrompt(`${this.model.executionCount || ''}`);\n        return this;\n    }\n    /**\n     * Get the output area for the cell.\n     */\n    get outputArea() {\n        return this._output;\n    }\n    /**\n     * The view state of output being collapsed.\n     */\n    get outputHidden() {\n        return this._outputHidden;\n    }\n    set outputHidden(value) {\n        if (this._outputHidden === value) {\n            return;\n        }\n        const layout = this._outputWrapper.layout;\n        if (value) {\n            layout.removeWidget(this._output);\n            layout.addWidget(this._outputPlaceholder);\n            if (this.inputHidden && !this._outputWrapper.isHidden) {\n                this._outputWrapper.hide();\n            }\n        }\n        else {\n            if (this._outputWrapper.isHidden) {\n                this._outputWrapper.show();\n            }\n            layout.removeWidget(this._outputPlaceholder);\n            layout.addWidget(this._output);\n        }\n        this._outputHidden = value;\n        if (this.syncCollapse) {\n            this.saveCollapseState();\n        }\n    }\n    /**\n     * Save view collapse state to model\n     */\n    saveCollapseState() {\n        // Because collapse state for a code cell involves two different pieces of\n        // metadata (the `collapsed` and `jupyter` metadata keys), we block reacting\n        // to changes in metadata until we have fully committed our changes.\n        // Otherwise setting one key can trigger a write to the other key to\n        // maintain the synced consistency.\n        this._savingMetadata = true;\n        try {\n            super.saveCollapseState();\n            const metadata = this.model.metadata;\n            const collapsed = this.model.metadata.get('collapsed');\n            if ((this.outputHidden && collapsed === true) ||\n                (!this.outputHidden && collapsed === undefined)) {\n                return;\n            }\n            // Do not set jupyter.outputs_hidden since it is redundant. See\n            // and https://github.com/jupyter/nbformat/issues/137\n            if (this.outputHidden) {\n                metadata.set('collapsed', true);\n            }\n            else {\n                metadata.delete('collapsed');\n            }\n        }\n        finally {\n            this._savingMetadata = false;\n        }\n    }\n    /**\n     * Revert view collapse state from model.\n     *\n     * We consider the `collapsed` metadata key as the source of truth for outputs\n     * being hidden.\n     */\n    loadCollapseState() {\n        super.loadCollapseState();\n        this.outputHidden = !!this.model.metadata.get('collapsed');\n    }\n    /**\n     * Whether the output is in a scrolled state?\n     */\n    get outputsScrolled() {\n        return this._outputsScrolled;\n    }\n    set outputsScrolled(value) {\n        this.toggleClass('jp-mod-outputsScrolled', value);\n        this._outputsScrolled = value;\n        if (this.syncScrolled) {\n            this.saveScrolledState();\n        }\n    }\n    /**\n     * Save view collapse state to model\n     */\n    saveScrolledState() {\n        const { metadata } = this.model;\n        const current = metadata.get('scrolled');\n        if ((this.outputsScrolled && current === true) ||\n            (!this.outputsScrolled && current === undefined)) {\n            return;\n        }\n        if (this.outputsScrolled) {\n            metadata.set('scrolled', true);\n        }\n        else {\n            metadata.delete('scrolled');\n        }\n    }\n    /**\n     * Revert view collapse state from model.\n     */\n    loadScrolledState() {\n        const metadata = this.model.metadata;\n        // We don't have the notion of 'auto' scrolled, so we make it false.\n        if (metadata.get('scrolled') === 'auto') {\n            this.outputsScrolled = false;\n        }\n        else {\n            this.outputsScrolled = !!metadata.get('scrolled');\n        }\n    }\n    /**\n     * Whether to sync the scrolled state to the cell model.\n     */\n    get syncScrolled() {\n        return this._syncScrolled;\n    }\n    set syncScrolled(value) {\n        if (this._syncScrolled === value) {\n            return;\n        }\n        this._syncScrolled = value;\n        if (value) {\n            this.loadScrolledState();\n        }\n    }\n    /**\n     * Handle the input being hidden.\n     *\n     * #### Notes\n     * This method is called by the case cell implementation and is\n     * subclasses here so the code cell can watch to see when input\n     * is hidden without accessing private state.\n     */\n    handleInputHidden(value) {\n        if (!value && this._outputWrapper.isHidden) {\n            this._outputWrapper.show();\n        }\n        else if (value && !this._outputWrapper.isHidden && this._outputHidden) {\n            this._outputWrapper.hide();\n        }\n    }\n    /**\n     * Clone the cell, using the same model.\n     */\n    clone() {\n        const constructor = this.constructor;\n        return new constructor({\n            model: this.model,\n            contentFactory: this.contentFactory,\n            rendermime: this._rendermime,\n            placeholder: false\n        });\n    }\n    /**\n     * Clone the OutputArea alone, returning a simplified output area, using the same model.\n     */\n    cloneOutputArea() {\n        return new SimplifiedOutputArea({\n            model: this.model.outputs,\n            contentFactory: this.contentFactory,\n            rendermime: this._rendermime\n        });\n    }\n    /**\n     * Dispose of the resources used by the widget.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._output.outputLengthChanged.disconnect(this._outputLengthHandler, this);\n        this._rendermime = null;\n        this._output = null;\n        this._outputWrapper = null;\n        this._outputPlaceholder = null;\n        super.dispose();\n    }\n    /**\n     * Handle changes in the model.\n     */\n    onStateChanged(model, args) {\n        switch (args.name) {\n            case 'executionCount':\n                this.setPrompt(`${model.executionCount || ''}`);\n                break;\n            case 'isDirty':\n                if (model.isDirty) {\n                    this.addClass(DIRTY_CLASS);\n                }\n                else {\n                    this.removeClass(DIRTY_CLASS);\n                }\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * Handle changes in the metadata.\n     */\n    onMetadataChanged(model, args) {\n        if (this._savingMetadata) {\n            // We are in middle of a metadata transaction, so don't react to it.\n            return;\n        }\n        switch (args.key) {\n            case 'scrolled':\n                if (this.syncScrolled) {\n                    this.loadScrolledState();\n                }\n                break;\n            case 'collapsed':\n                if (this.syncCollapse) {\n                    this.loadCollapseState();\n                }\n                break;\n            default:\n                break;\n        }\n        super.onMetadataChanged(model, args);\n    }\n    /**\n     * Handle changes in the number of outputs in the output area.\n     */\n    _outputLengthHandler(sender, args) {\n        const force = args === 0 ? true : false;\n        this.toggleClass(NO_OUTPUTS_CLASS, force);\n    }\n}\n/**\n * The namespace for the `CodeCell` class statics.\n */\n(function (CodeCell) {\n    /**\n     * Execute a cell given a client session.\n     */\n    async function execute(cell, sessionContext, metadata) {\n        var _a;\n        const model = cell.model;\n        const code = model.value.text;\n        if (!code.trim() || !((_a = sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel)) {\n            model.clearExecution();\n            return;\n        }\n        const cellId = { cellId: model.id };\n        metadata = Object.assign(Object.assign(Object.assign({}, model.metadata.toJSON()), metadata), cellId);\n        const { recordTiming } = metadata;\n        model.clearExecution();\n        cell.outputHidden = false;\n        cell.setPrompt('*');\n        model.trusted = true;\n        let future;\n        try {\n            const msgPromise = OutputArea.execute(code, cell.outputArea, sessionContext, metadata);\n            // cell.outputArea.future assigned synchronously in `execute`\n            if (recordTiming) {\n                const recordTimingHook = (msg) => {\n                    let label;\n                    switch (msg.header.msg_type) {\n                        case 'status':\n                            label = `status.${msg.content.execution_state}`;\n                            break;\n                        case 'execute_input':\n                            label = 'execute_input';\n                            break;\n                        default:\n                            return true;\n                    }\n                    // If the data is missing, estimate it to now\n                    // Date was added in 5.1: https://jupyter-client.readthedocs.io/en/stable/messaging.html#message-header\n                    const value = msg.header.date || new Date().toISOString();\n                    const timingInfo = Object.assign({}, model.metadata.get('execution'));\n                    timingInfo[`iopub.${label}`] = value;\n                    model.metadata.set('execution', timingInfo);\n                    return true;\n                };\n                cell.outputArea.future.registerMessageHook(recordTimingHook);\n            }\n            else {\n                model.metadata.delete('execution');\n            }\n            // Save this execution's future so we can compare in the catch below.\n            future = cell.outputArea.future;\n            const msg = (await msgPromise);\n            model.executionCount = msg.content.execution_count;\n            if (recordTiming) {\n                const timingInfo = Object.assign({}, model.metadata.get('execution'));\n                const started = msg.metadata.started;\n                // Started is not in the API, but metadata IPyKernel sends\n                if (started) {\n                    timingInfo['shell.execute_reply.started'] = started;\n                }\n                // Per above, the 5.0 spec does not assume date, so we estimate is required\n                const finished = msg.header.date;\n                timingInfo['shell.execute_reply'] =\n                    finished || new Date().toISOString();\n                model.metadata.set('execution', timingInfo);\n            }\n            return msg;\n        }\n        catch (e) {\n            // If we started executing, and the cell is still indicating this\n            // execution, clear the prompt.\n            if (future && !cell.isDisposed && cell.outputArea.future === future) {\n                cell.setPrompt('');\n            }\n            throw e;\n        }\n    }\n    CodeCell.execute = execute;\n})(CodeCell || (CodeCell = {}));\n/**\n * `AttachmentsCell` - A base class for a cell widget that allows\n *  attachments to be drag/drop'd or pasted onto it\n */\nexport class AttachmentsCell extends Cell {\n    /**\n     * Handle the DOM events for the widget.\n     *\n     * @param event - The DOM event sent to the widget.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the notebook panel's node. It should\n     * not be called directly by user code.\n     */\n    handleEvent(event) {\n        switch (event.type) {\n            case 'paste':\n                this._evtPaste(event);\n                break;\n            case 'dragenter':\n                event.preventDefault();\n                break;\n            case 'dragover':\n                event.preventDefault();\n                break;\n            case 'drop':\n                this._evtNativeDrop(event);\n                break;\n            case 'lm-dragover':\n                this._evtDragOver(event);\n                break;\n            case 'lm-drop':\n                this._evtDrop(event);\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * Handle `after-attach` messages for the widget.\n     */\n    onAfterAttach(msg) {\n        super.onAfterAttach(msg);\n        const node = this.node;\n        node.addEventListener('lm-dragover', this);\n        node.addEventListener('lm-drop', this);\n        node.addEventListener('dragenter', this);\n        node.addEventListener('dragover', this);\n        node.addEventListener('drop', this);\n        node.addEventListener('paste', this);\n    }\n    /**\n     * A message handler invoked on a `'before-detach'`\n     * message\n     */\n    onBeforeDetach(msg) {\n        const node = this.node;\n        node.removeEventListener('drop', this);\n        node.removeEventListener('dragover', this);\n        node.removeEventListener('dragenter', this);\n        node.removeEventListener('paste', this);\n        node.removeEventListener('lm-dragover', this);\n        node.removeEventListener('lm-drop', this);\n    }\n    _evtDragOver(event) {\n        const supportedMimeType = some(imageRendererFactory.mimeTypes, mimeType => {\n            if (!event.mimeData.hasData(CONTENTS_MIME_RICH)) {\n                return false;\n            }\n            const data = event.mimeData.getData(CONTENTS_MIME_RICH);\n            return data.model.mimetype === mimeType;\n        });\n        if (!supportedMimeType) {\n            return;\n        }\n        event.preventDefault();\n        event.stopPropagation();\n        event.dropAction = event.proposedAction;\n    }\n    /**\n     * Handle the `paste` event for the widget\n     */\n    _evtPaste(event) {\n        if (event.clipboardData) {\n            const items = event.clipboardData.items;\n            for (let i = 0; i < items.length; i++) {\n                if (items[i].type === 'text/plain') {\n                    // Skip if this text is the path to a file\n                    if (i < items.length - 1 && items[i + 1].kind === 'file') {\n                        continue;\n                    }\n                    items[i].getAsString(text => {\n                        var _a, _b;\n                        (_b = (_a = this.editor).replaceSelection) === null || _b === void 0 ? void 0 : _b.call(_a, text);\n                    });\n                }\n                this._attachFiles(event.clipboardData.items);\n            }\n        }\n        event.preventDefault();\n    }\n    /**\n     * Handle the `drop` event for the widget\n     */\n    _evtNativeDrop(event) {\n        if (event.dataTransfer) {\n            this._attachFiles(event.dataTransfer.items);\n        }\n        event.preventDefault();\n    }\n    /**\n     * Handle the `'lm-drop'` event for the widget.\n     */\n    _evtDrop(event) {\n        const supportedMimeTypes = toArray(filter(event.mimeData.types(), mimeType => {\n            if (mimeType === CONTENTS_MIME_RICH) {\n                const data = event.mimeData.getData(CONTENTS_MIME_RICH);\n                return (imageRendererFactory.mimeTypes.indexOf(data.model.mimetype) !== -1);\n            }\n            return imageRendererFactory.mimeTypes.indexOf(mimeType) !== -1;\n        }));\n        if (supportedMimeTypes.length === 0) {\n            return;\n        }\n        event.preventDefault();\n        event.stopPropagation();\n        if (event.proposedAction === 'none') {\n            event.dropAction = 'none';\n            return;\n        }\n        event.dropAction = 'copy';\n        for (const mimeType of supportedMimeTypes) {\n            if (mimeType === CONTENTS_MIME_RICH) {\n                const { model, withContent } = event.mimeData.getData(CONTENTS_MIME_RICH);\n                if (model.type === 'file') {\n                    const URI = this._generateURI(model.name);\n                    this.updateCellSourceWithAttachment(model.name, URI);\n                    void withContent().then(fullModel => {\n                        this.model.attachments.set(URI, {\n                            [fullModel.mimetype]: fullModel.content\n                        });\n                    });\n                }\n            }\n            else {\n                // Pure mimetype, no useful name to infer\n                const URI = this._generateURI();\n                this.model.attachments.set(URI, {\n                    [mimeType]: event.mimeData.getData(mimeType)\n                });\n                this.updateCellSourceWithAttachment(URI, URI);\n            }\n        }\n    }\n    /**\n     * Attaches all DataTransferItems (obtained from\n     * clipboard or native drop events) to the cell\n     */\n    _attachFiles(items) {\n        for (let i = 0; i < items.length; i++) {\n            const item = items[i];\n            if (item.kind === 'file') {\n                const blob = item.getAsFile();\n                if (blob) {\n                    this._attachFile(blob);\n                }\n            }\n        }\n    }\n    /**\n     * Takes in a file object and adds it to\n     * the cell attachments\n     */\n    _attachFile(blob) {\n        const reader = new FileReader();\n        reader.onload = evt => {\n            const { href, protocol } = URLExt.parse(reader.result);\n            if (protocol !== 'data:') {\n                return;\n            }\n            const dataURIRegex = /([\\w+\\/\\+]+)?(?:;(charset=[\\w\\d-]*|base64))?,(.*)/;\n            const matches = dataURIRegex.exec(href);\n            if (!matches || matches.length !== 4) {\n                return;\n            }\n            const mimeType = matches[1];\n            const encodedData = matches[3];\n            const bundle = { [mimeType]: encodedData };\n            const URI = this._generateURI(blob.name);\n            if (mimeType.startsWith('image/')) {\n                this.model.attachments.set(URI, bundle);\n                this.updateCellSourceWithAttachment(blob.name, URI);\n            }\n        };\n        reader.onerror = evt => {\n            console.error(`Failed to attach ${blob.name}` + evt);\n        };\n        reader.readAsDataURL(blob);\n    }\n    /**\n     * Generates a unique URI for a file\n     * while preserving the file extension.\n     */\n    _generateURI(name = '') {\n        const lastIndex = name.lastIndexOf('.');\n        return lastIndex !== -1\n            ? UUID.uuid4().concat(name.substring(lastIndex))\n            : UUID.uuid4();\n    }\n}\n/** ****************************************************************************\n * MarkdownCell\n ******************************************************************************/\n/**\n * A widget for a Markdown cell.\n *\n * #### Notes\n * Things get complicated if we want the rendered text to update\n * any time the text changes, the text editor model changes,\n * or the input area model changes.  We don't support automatically\n * updating the rendered text in all of these cases.\n */\nexport class MarkdownCell extends AttachmentsCell {\n    /**\n     * Construct a Markdown cell widget.\n     */\n    constructor(options) {\n        var _a, _b, _c;\n        super(options);\n        this._toggleCollapsedSignal = new Signal(this);\n        this._renderer = null;\n        this._rendered = true;\n        this._prevText = '';\n        this._ready = new PromiseDelegate();\n        this._showEditorForReadOnlyMarkdown = true;\n        this.addClass(MARKDOWN_CELL_CLASS);\n        // Ensure we can resolve attachments:\n        this._rendermime = options.rendermime.clone({\n            resolver: new AttachmentsResolver({\n                parent: (_a = options.rendermime.resolver) !== null && _a !== void 0 ? _a : undefined,\n                model: this.model.attachments\n            })\n        });\n        // Stop codemirror handling paste\n        this.editor.setOption('handlePaste', false);\n        // Check if heading cell is set to be collapsed\n        this._headingCollapsed = ((_b = this.model.metadata.get(MARKDOWN_HEADING_COLLAPSED)) !== null && _b !== void 0 ? _b : false);\n        // Throttle the rendering rate of the widget.\n        this._monitor = new ActivityMonitor({\n            signal: this.model.contentChanged,\n            timeout: RENDER_TIMEOUT\n        });\n        this._monitor.activityStopped.connect(() => {\n            if (this._rendered) {\n                this.update();\n            }\n        }, this);\n        void this._updateRenderedInput().then(() => {\n            this._ready.resolve(void 0);\n        });\n        this.renderCollapseButtons(this._renderer);\n        this.renderInput(this._renderer);\n        this._showEditorForReadOnlyMarkdown = (_c = options.showEditorForReadOnlyMarkdown) !== null && _c !== void 0 ? _c : MarkdownCell.defaultShowEditorForReadOnlyMarkdown;\n    }\n    /**\n     * A promise that resolves when the widget renders for the first time.\n     */\n    get ready() {\n        return this._ready.promise;\n    }\n    /**\n     * Text that represents the heading if cell is a heading.\n     * Returns empty string if not a heading.\n     */\n    get headingInfo() {\n        let text = this.model.value.text;\n        const lines = marked.lexer(text);\n        let line;\n        for (line of lines) {\n            if (line.type === 'heading') {\n                return { text: line.text, level: line.depth };\n            }\n            else if (line.type === 'html') {\n                let match = line.raw.match(/<h([1-6])(.*?)>(.*?)<\\/h\\1>/);\n                if (match === null || match === void 0 ? void 0 : match[3]) {\n                    return { text: match[3], level: parseInt(match[1]) };\n                }\n                return { text: '', level: -1 };\n            }\n        }\n        return { text: '', level: -1 };\n    }\n    get headingCollapsed() {\n        return this._headingCollapsed;\n    }\n    set headingCollapsed(value) {\n        this._headingCollapsed = value;\n        if (value) {\n            this.model.metadata.set(MARKDOWN_HEADING_COLLAPSED, value);\n        }\n        else if (this.model.metadata.has(MARKDOWN_HEADING_COLLAPSED)) {\n            this.model.metadata.delete(MARKDOWN_HEADING_COLLAPSED);\n        }\n        const collapseButton = this.inputArea.promptNode.getElementsByClassName(HEADING_COLLAPSER_CLASS)[0];\n        if (collapseButton) {\n            if (value) {\n                collapseButton.classList.add('jp-mod-collapsed');\n            }\n            else {\n                collapseButton.classList.remove('jp-mod-collapsed');\n            }\n        }\n        this.renderCollapseButtons(this._renderer);\n    }\n    get numberChildNodes() {\n        return this._numberChildNodes;\n    }\n    set numberChildNodes(value) {\n        this._numberChildNodes = value;\n        this.renderCollapseButtons(this._renderer);\n    }\n    get toggleCollapsedSignal() {\n        return this._toggleCollapsedSignal;\n    }\n    /**\n     * Whether the cell is rendered.\n     */\n    get rendered() {\n        return this._rendered;\n    }\n    set rendered(value) {\n        // Show cell as rendered when cell is not editable\n        if (this.readOnly && this._showEditorForReadOnlyMarkdown === false) {\n            value = true;\n        }\n        if (value === this._rendered) {\n            return;\n        }\n        this._rendered = value;\n        this._handleRendered();\n        // Refreshing an editor can be really expensive, so we don't call it from\n        // _handleRendered, since _handledRendered is also called on every update\n        // request.\n        if (!this._rendered) {\n            this.editor.refresh();\n        }\n        // If the rendered state changed, raise an event.\n        this._displayChanged.emit();\n    }\n    /*\n     * Whether the Markdown editor is visible in read-only mode.\n     */\n    get showEditorForReadOnly() {\n        return this._showEditorForReadOnlyMarkdown;\n    }\n    set showEditorForReadOnly(value) {\n        this._showEditorForReadOnlyMarkdown = value;\n        if (value === false) {\n            this.rendered = true;\n        }\n    }\n    maybeCreateCollapseButton() {\n        if (this.headingInfo.level > 0 &&\n            this.inputArea.promptNode.getElementsByClassName(HEADING_COLLAPSER_CLASS)\n                .length == 0) {\n            let collapseButton = this.inputArea.promptNode.appendChild(document.createElement('button'));\n            collapseButton.className = `jp-Button ${HEADING_COLLAPSER_CLASS}`;\n            collapseButton.setAttribute('data-heading-level', this.headingInfo.level.toString());\n            if (this._headingCollapsed) {\n                collapseButton.classList.add('jp-mod-collapsed');\n            }\n            else {\n                collapseButton.classList.remove('jp-mod-collapsed');\n            }\n            collapseButton.onclick = (event) => {\n                this.headingCollapsed = !this.headingCollapsed;\n                this._toggleCollapsedSignal.emit(this._headingCollapsed);\n            };\n        }\n    }\n    maybeCreateOrUpdateExpandButton() {\n        var _a, _b;\n        const expandButton = this.node.getElementsByClassName(SHOW_HIDDEN_CELLS_CLASS);\n        // Create the \"show hidden\" button if not already created\n        if (this.headingCollapsed &&\n            expandButton.length === 0 &&\n            this._numberChildNodes > 0) {\n            const numberChildNodes = document.createElement('button');\n            numberChildNodes.className = `bp3-button bp3-minimal jp-Button ${SHOW_HIDDEN_CELLS_CLASS}`;\n            addIcon.render(numberChildNodes);\n            const numberChildNodesText = document.createElement('div');\n            numberChildNodesText.nodeValue = `${this._numberChildNodes} cell${this._numberChildNodes > 1 ? 's' : ''} hidden`;\n            numberChildNodes.appendChild(numberChildNodesText);\n            numberChildNodes.onclick = () => {\n                this.headingCollapsed = false;\n                this._toggleCollapsedSignal.emit(this._headingCollapsed);\n            };\n            this.node.appendChild(numberChildNodes);\n        }\n        else if (((_b = (_a = expandButton === null || expandButton === void 0 ? void 0 : expandButton[0]) === null || _a === void 0 ? void 0 : _a.childNodes) === null || _b === void 0 ? void 0 : _b.length) > 1) {\n            // If the heading is collapsed, update text\n            if (this._headingCollapsed) {\n                expandButton[0].childNodes[1].textContent = `${this._numberChildNodes} cell${this._numberChildNodes > 1 ? 's' : ''} hidden`;\n                // If the heading isn't collapsed, remove the button\n            }\n            else {\n                for (const el of expandButton) {\n                    this.node.removeChild(el);\n                }\n            }\n        }\n    }\n    /**\n     * Render the collapse button for heading cells,\n     * and for collapsed heading cells render the \"expand hidden cells\"\n     * button.\n     */\n    renderCollapseButtons(widget) {\n        this.node.classList.toggle(MARKDOWN_HEADING_COLLAPSED, this._headingCollapsed);\n        this.maybeCreateCollapseButton();\n        this.maybeCreateOrUpdateExpandButton();\n    }\n    /**\n     * Render an input instead of the text editor.\n     */\n    renderInput(widget) {\n        this.addClass(RENDERED_CLASS);\n        this.renderCollapseButtons(widget);\n        this.inputArea.renderInput(widget);\n    }\n    /**\n     * Show the text editor instead of rendered input.\n     */\n    showEditor() {\n        this.removeClass(RENDERED_CLASS);\n        this.inputArea.showEditor();\n    }\n    /*\n     * Handle `update-request` messages.\n     */\n    onUpdateRequest(msg) {\n        // Make sure we are properly rendered.\n        this._handleRendered();\n        super.onUpdateRequest(msg);\n    }\n    /**\n     * Modify the cell source to include a reference to the attachment.\n     */\n    updateCellSourceWithAttachment(attachmentName, URI) {\n        var _a, _b;\n        const textToBeAppended = `![${attachmentName}](attachment:${URI !== null && URI !== void 0 ? URI : attachmentName})`;\n        (_b = (_a = this.editor).replaceSelection) === null || _b === void 0 ? void 0 : _b.call(_a, textToBeAppended);\n    }\n    /**\n     * Handle the rendered state.\n     */\n    _handleRendered() {\n        if (!this._rendered) {\n            this.showEditor();\n        }\n        else {\n            // TODO: It would be nice for the cell to provide a way for\n            // its consumers to hook into when the rendering is done.\n            void this._updateRenderedInput();\n            this.renderInput(this._renderer);\n        }\n    }\n    /**\n     * Update the rendered input.\n     */\n    _updateRenderedInput() {\n        const model = this.model;\n        const text = (model && model.value.text) || DEFAULT_MARKDOWN_TEXT;\n        // Do not re-render if the text has not changed.\n        if (text !== this._prevText) {\n            const mimeModel = new MimeModel({ data: { 'text/markdown': text } });\n            if (!this._renderer) {\n                this._renderer = this._rendermime.createRenderer('text/markdown');\n                this._renderer.addClass(MARKDOWN_OUTPUT_CLASS);\n            }\n            this._prevText = text;\n            return this._renderer.renderModel(mimeModel);\n        }\n        return Promise.resolve(void 0);\n    }\n    /**\n     * Clone the cell, using the same model.\n     */\n    clone() {\n        const constructor = this.constructor;\n        return new constructor({\n            model: this.model,\n            contentFactory: this.contentFactory,\n            rendermime: this._rendermime,\n            placeholder: false\n        });\n    }\n}\n/**\n * The namespace for the `CodeCell` class statics.\n */\n(function (MarkdownCell) {\n    /**\n     * Default value for showEditorForReadOnlyMarkdown.\n     */\n    MarkdownCell.defaultShowEditorForReadOnlyMarkdown = true;\n})(MarkdownCell || (MarkdownCell = {}));\n/** ****************************************************************************\n * RawCell\n ******************************************************************************/\n/**\n * A widget for a raw cell.\n */\nexport class RawCell extends Cell {\n    /**\n     * Construct a raw cell widget.\n     */\n    constructor(options) {\n        super(options);\n        this.addClass(RAW_CELL_CLASS);\n    }\n    /**\n     * Clone the cell, using the same model.\n     */\n    clone() {\n        const constructor = this.constructor;\n        return new constructor({\n            model: this.model,\n            contentFactory: this.contentFactory,\n            placeholder: false\n        });\n    }\n}\n//# sourceMappingURL=widget.js.map"],"names":["DRAG_IMAGE_CLASS","CELL_DRAG_CONTENT_CLASS","CELL_DRAG_PROMPT_CLASS","CELL_DRAG_MULTIPLE_BACK","CellDragUtils","findCell","node","cells","isCellNode","cellIndex","parentElement","each","cell","index","detectTargetArea","target","targetArea","editorWidget","contains","promptNode","shouldStartDrag","prevX","prevY","nextX","nextY","dx","Math","abs","dy","createCellDragImage","activeCell","selectedCells","count","length","promptNumber","model","type","executionCount","toString","cellContent","value","text","split","slice","VirtualDOM","h","className","Collapser","ReactWidget","constructor","super","this","addClass","collapsed","render","onClick","e","handleClick","InputCollapser","_a","parent","inputHidden","update","OutputCollapser","outputHidden","_b","area","ElementExt","CellHeader","Widget","CellFooter","InputArea","options","contentFactory","defaultContentFactory","prompt","_prompt","createInputPrompt","editorOptions","factory","editorFactory","updateOnShow","editor","_editor","CodeEditorWrapper","layout","PanelLayout","addWidget","placeholder","renderedInput","_rendered","renderInput","widget","hide","showEditor","show","setPrompt","dispose","isDisposed","ContentFactory","defaultEditorFactory","InputPrompt","CodeMirrorEditorFactory","newInlineEditor","_executionCount","textContent","AttachmentsModel","_map","ObservableMap","_isDisposed","_stateChanged","Signal","_changed","_modelDB","_serialized","_changeGuard","values","key","Object","keys","undefined","set","changed","connect","_onMapChanged","modelDB","createValue","get","fromJSON","toJSON","_onSerializedChanged","stateChanged","has","item","_createItem","remove","delete","clear","forEach","ret","createAttachmentModel","_onGenericChange","sender","args","emit","newValue","AttachmentModel","AttachmentsResolver","_parent","_model","async","url","startsWith","resolveUrl","path","getDownloadUrl","attachment","data","mimeType","imageRendererFactory","Error","isLocal","_c","call","globalModelDBMutex","isCodeCellModel","isMarkdownCellModel","isRawCellModel","CellModel","CodeEditor","id","UUID","contentChanged","onGenericChange","observableMetadata","createMap","onModelDBMetadataChange","trusted","onTrustedChanged","metadata","Array","isArray","source","map","s","replace","join","JSONExt","sharedModel","getId","getValue","setValue","create","JSON","parse","stringify","cell_type","switchSharedModel","reinitialize","getMetadata","_updateModelDBMetadata","event","_changeCellMetadata","setMetadata","jupyter","name","scrolled","tags","_onSharedModelChanged","change","metadataChange","AttachmentsCellModel","attachments","_attachments","createAttachmentsModel","RawCellModel","MarkdownCellModel","CodeCellModel","_executedCode","_isDirty","outputs","execution_count","trim","_onValueChanged","_onExecutionCountChanged","setOutputs","_outputs","createOutputArea","onModelDBOutputsChange","Private","collapseChanged","oldValue","hasOwnProperty","clearExecution","getOutputs","output","add","isDirty","_setDirty","v","codeCell","newValues","updateOutputs","newIndex","oldIndex","oldValues","outputsChange","executionCountChange","OutputAreaModel","outputs_hidden","newJupyter","t","p","prototype","indexOf","getOwnPropertySymbols","i","propertyIsEnumerable","__rest","CONTENT_CLASS","Placeholder","callback","_callback","InputPlaceholder","ellipsesIcon","elementPosition","height","width","OutputPlaceholder","CELL_RESIZED_CLASS","ResizeHandle","targetNode","_isActive","_isDragging","_protectedWidth","onAfterAttach","msg","addEventListener","onAfterDetach","removeEventListener","handleEvent","parentNode","childNodes","classList","document","documentElement","style","setProperty","_mouseOffset","clientX","getBoundingClientRect","x","window","targetRect","inputWidth","resized_ratio","min","max","round","DIRTY_CLASS","MARKDOWN_HEADING_COLLAPSED","HEADING_COLLAPSER_CLASS","RENDERED_CLASS","NO_OUTPUTS_CLASS","CONTENTS_MIME_RICH","Cell","_displayChanged","_readOnly","_inputHidden","_syncCollapse","_syncEditable","_resizeDebouncer","Debouncer","header","createCellHeader","inputWrapper","_inputWrapper","Panel","inputCollapser","input","_input","updateEditorOnShow","_inputPlaceholder","footer","createCellFooter","editorConfig","setOptions","assign","onMetadataChanged","initializeState","loadCollapseState","loadEditableState","displayChanged","firstElementChild","inputArea","readOnly","syncEditable","saveEditableState","current","ready","Promise","resolve","syncCollapse","saveCollapseState","handleInputHidden","source_hidden","clone","onActivateRequest","focus","onFitRequest","refresh","onResize","invoke","onUpdateRequest","getOption","setOption","toggleClass","_editorFactory","createOutputPrompt","OutputPrompt","createStdin","Stdin","CodeCell","_outputHidden","_syncScrolled","_savingMetadata","rendermime","_rendermime","outputWrapper","_outputWrapper","outputCollapser","_output","OutputArea","maxNumberOutputs","outputLengthChanged","_outputLengthHandler","insertWidget","_outputPlaceholder","onStateChanged","loadScrolledState","outputArea","removeWidget","isHidden","outputsScrolled","_outputsScrolled","syncScrolled","saveScrolledState","cloneOutputArea","SimplifiedOutputArea","disconnect","removeClass","force","execute","sessionContext","code","session","kernel","cellId","recordTiming","future","msgPromise","recordTimingHook","label","msg_type","content","execution_state","date","Date","toISOString","timingInfo","registerMessageHook","started","finished","AttachmentsCell","_evtPaste","preventDefault","_evtNativeDrop","_evtDragOver","_evtDrop","onBeforeDetach","some","mimeData","hasData","getData","mimetype","stopPropagation","dropAction","proposedAction","clipboardData","items","kind","getAsString","replaceSelection","_attachFiles","dataTransfer","supportedMimeTypes","toArray","filter","types","withContent","URI","_generateURI","updateCellSourceWithAttachment","then","fullModel","blob","getAsFile","_attachFile","reader","FileReader","onload","evt","href","protocol","URLExt","result","matches","exec","bundle","onerror","console","error","readAsDataURL","lastIndex","lastIndexOf","concat","substring","MarkdownCell","_toggleCollapsedSignal","_renderer","_prevText","_ready","PromiseDelegate","_showEditorForReadOnlyMarkdown","resolver","_headingCollapsed","_monitor","ActivityMonitor","signal","timeout","activityStopped","_updateRenderedInput","renderCollapseButtons","showEditorForReadOnlyMarkdown","defaultShowEditorForReadOnlyMarkdown","promise","headingInfo","lines","line","level","depth","match","raw","parseInt","headingCollapsed","collapseButton","getElementsByClassName","numberChildNodes","_numberChildNodes","toggleCollapsedSignal","rendered","_handleRendered","showEditorForReadOnly","maybeCreateCollapseButton","appendChild","createElement","setAttribute","onclick","maybeCreateOrUpdateExpandButton","expandButton","addIcon","numberChildNodesText","nodeValue","el","removeChild","toggle","attachmentName","textToBeAppended","mimeModel","MimeModel","createRenderer","renderModel","RawCell"],"sourceRoot":""}
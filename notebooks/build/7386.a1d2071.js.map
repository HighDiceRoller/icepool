{"version":3,"file":"7386.a1d2071.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/cell-toolbar/lib/celltoolbartracker.js"],"sourcesContent":["/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { createDefaultFactory, Toolbar } from '@jupyterlab/apputils';\nimport { ObservableList } from '@jupyterlab/observables';\nimport { each, toArray } from '@lumino/algorithm';\nimport { Signal } from '@lumino/signaling';\n/**\n * Widget cell toolbar classes\n */\nconst CELL_TOOLBAR_CLASS = 'jp-cell-toolbar';\nconst CELL_MENU_CLASS = 'jp-cell-menu';\n/**\n * Class for a cell whose contents overlap with the cell toolbar\n */\nconst TOOLBAR_OVERLAP_CLASS = 'jp-toolbar-overlap';\n/**\n * Watch a notebook so that a cell toolbar appears on the active cell\n */\nexport class CellToolbarTracker {\n    constructor(panel, toolbar) {\n        this._isDisposed = false;\n        this._panel = panel;\n        this._previousActiveCell = this._panel.content.activeCell;\n        this._toolbar = toolbar;\n        this._onToolbarChanged();\n        this._toolbar.changed.connect(this._onToolbarChanged, this);\n        // Only add the toolbar to the notebook's active cell (if any) once it has fully rendered and been revealed.\n        void panel.revealed.then(() => this._onActiveCellChanged(panel.content));\n        // Handle subsequent changes of active cell.\n        panel.content.activeCellChanged.connect(this._onActiveCellChanged, this);\n    }\n    _onActiveCellChanged(notebook) {\n        if (this._previousActiveCell) {\n            this._removeToolbar(this._previousActiveCell.model);\n        }\n        const activeCell = notebook.activeCell;\n        if (!activeCell) {\n            return;\n        }\n        this._addToolbar(activeCell.model);\n        this._previousActiveCell = activeCell;\n        this._updateCellForToolbarOverlap(activeCell);\n    }\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    dispose() {\n        var _a;\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        this._toolbar.changed.disconnect(this._onToolbarChanged, this);\n        const cells = (_a = this._panel) === null || _a === void 0 ? void 0 : _a.context.model.cells;\n        if (cells) {\n            each(cells.iter(), model => this._removeToolbar(model));\n        }\n        this._panel = null;\n        Signal.clearData(this);\n    }\n    _addToolbar(model) {\n        const cell = this._getCell(model);\n        if (cell) {\n            const toolbarWidget = new Toolbar();\n            toolbarWidget.addClass(CELL_MENU_CLASS);\n            toArray(this._toolbar).forEach(({ name, widget }) => {\n                toolbarWidget.addItem(name, widget);\n            });\n            toolbarWidget.addClass(CELL_TOOLBAR_CLASS);\n            cell.layout.insertWidget(0, toolbarWidget);\n            // For rendered markdown, watch for resize events.\n            cell.displayChanged.connect(this._resizeEventCallback, this);\n            // Watch for changes in the cell's contents.\n            cell.model.contentChanged.connect(this._changedEventCallback, this);\n        }\n    }\n    _getCell(model) {\n        var _a;\n        return (_a = this._panel) === null || _a === void 0 ? void 0 : _a.content.widgets.find(widget => widget.model === model);\n    }\n    _findToolbarWidgets(cell) {\n        const widgets = cell.layout.widgets;\n        // Search for header using the CSS class or use the first one if not found.\n        return widgets.filter(widget => widget.hasClass(CELL_TOOLBAR_CLASS)) || [];\n    }\n    _removeToolbar(model) {\n        const cell = this._getCell(model);\n        if (cell) {\n            this._findToolbarWidgets(cell).forEach(widget => widget.dispose());\n            // Attempt to remove the resize and changed event handlers.\n            cell.displayChanged.disconnect(this._resizeEventCallback, this);\n            cell.model.contentChanged.disconnect(this._changedEventCallback, this);\n        }\n    }\n    /**\n     * Call back on settings changes\n     */\n    _onToolbarChanged() {\n        var _a;\n        // Reset toolbar when settings changes\n        const activeCell = (_a = this._panel) === null || _a === void 0 ? void 0 : _a.content.activeCell;\n        if (activeCell) {\n            this._removeToolbar(activeCell.model);\n            this._addToolbar(activeCell.model);\n        }\n    }\n    _changedEventCallback() {\n        var _a;\n        const activeCell = (_a = this._panel) === null || _a === void 0 ? void 0 : _a.content.activeCell;\n        if (activeCell === null || activeCell === undefined) {\n            return;\n        }\n        this._updateCellForToolbarOverlap(activeCell);\n    }\n    _resizeEventCallback() {\n        var _a;\n        const activeCell = (_a = this._panel) === null || _a === void 0 ? void 0 : _a.content.activeCell;\n        if (activeCell === null || activeCell === undefined) {\n            return;\n        }\n        this._updateCellForToolbarOverlap(activeCell);\n    }\n    _updateCellForToolbarOverlap(activeCell) {\n        // Remove the \"toolbar overlap\" class from the cell, rendering the cell's toolbar\n        const activeCellElement = activeCell.node;\n        activeCellElement.classList.remove(TOOLBAR_OVERLAP_CLASS);\n        if (this._cellToolbarOverlapsContents(activeCell)) {\n            // Add the \"toolbar overlap\" class to the cell, completely concealing the toolbar,\n            // if the first line of the content overlaps with it at all\n            activeCellElement.classList.add(TOOLBAR_OVERLAP_CLASS);\n        }\n    }\n    _cellToolbarOverlapsContents(activeCell) {\n        const cellType = activeCell.model.type;\n        // If the toolbar is too large for the current cell, hide it.\n        const cellLeft = this._cellEditorWidgetLeft(activeCell);\n        const cellRight = this._cellEditorWidgetRight(activeCell);\n        const toolbarLeft = this._cellToolbarLeft(activeCell);\n        if (toolbarLeft === null) {\n            return false;\n        }\n        // The toolbar should not take up more than 50% of the cell.\n        if ((cellLeft + cellRight) / 2 > toolbarLeft) {\n            return true;\n        }\n        if (cellType === 'markdown' && activeCell.rendered) {\n            // Check for overlap in rendered markdown content\n            return this._markdownOverlapsToolbar(activeCell);\n        }\n        // Check for overlap in code content\n        return this._codeOverlapsToolbar(activeCell);\n    }\n    /**\n     * Check for overlap between rendered Markdown and the cell toolbar\n     *\n     * @param activeCell A rendered MarkdownCell\n     * @returns `true` if the first line of the output overlaps with the cell toolbar, `false` otherwise\n     */\n    _markdownOverlapsToolbar(activeCell) {\n        const markdownOutput = activeCell.inputArea; // Rendered markdown appears in the input area\n        // Get the rendered markdown as a widget.\n        const markdownOutputWidget = markdownOutput.renderedInput;\n        const markdownOutputElement = markdownOutputWidget.node;\n        const firstOutputElementChild = markdownOutputElement.firstElementChild;\n        if (firstOutputElementChild === null) {\n            return false;\n        }\n        // Temporarily set the element's max width so that the bounding client rectangle only encompasses the content.\n        const oldMaxWidth = firstOutputElementChild.style.maxWidth;\n        firstOutputElementChild.style.maxWidth = 'max-content';\n        const lineRight = firstOutputElementChild.getBoundingClientRect().right;\n        // Reinstate the old max width.\n        firstOutputElementChild.style.maxWidth = oldMaxWidth;\n        const toolbarLeft = this._cellToolbarLeft(activeCell);\n        return toolbarLeft === null ? false : lineRight > toolbarLeft;\n    }\n    _codeOverlapsToolbar(activeCell) {\n        const editorWidget = activeCell.editorWidget;\n        const editor = activeCell.editor;\n        if (editor.lineCount < 1) {\n            return false; // Nothing in the editor\n        }\n        const codeMirrorLines = editorWidget.node.getElementsByClassName('CodeMirror-line');\n        if (codeMirrorLines.length < 1) {\n            return false; // No lines present\n        }\n        const lineRight = codeMirrorLines[0].children[0] // First span under first pre\n            .getBoundingClientRect().right;\n        const toolbarLeft = this._cellToolbarLeft(activeCell);\n        return toolbarLeft === null ? false : lineRight > toolbarLeft;\n    }\n    _cellEditorWidgetLeft(activeCell) {\n        return activeCell.editorWidget.node.getBoundingClientRect().left;\n    }\n    _cellEditorWidgetRight(activeCell) {\n        return activeCell.editorWidget.node.getBoundingClientRect().right;\n    }\n    _cellToolbarLeft(activeCell) {\n        const toolbarWidgets = this._findToolbarWidgets(activeCell);\n        if (toolbarWidgets.length < 1) {\n            return null;\n        }\n        const activeCellToolbar = toolbarWidgets[0].node;\n        return activeCellToolbar.getBoundingClientRect().left;\n    }\n}\nconst defaultToolbarItems = [\n    {\n        command: 'notebook:duplicate-below',\n        name: 'duplicate-cell'\n    },\n    {\n        command: 'notebook:move-cell-up',\n        name: 'move-cell-up'\n    },\n    {\n        command: 'notebook:move-cell-down',\n        name: 'move-cell-down'\n    },\n    {\n        command: 'notebook:insert-cell-above',\n        name: 'insert-cell-above'\n    },\n    {\n        command: 'notebook:insert-cell-below',\n        name: 'insert-cell-below'\n    },\n    {\n        command: 'notebook:delete-cell',\n        name: 'delete-cell'\n    }\n];\n/**\n * Widget extension that creates a CellToolbarTracker each time a notebook is\n * created.\n */\nexport class CellBarExtension {\n    constructor(commands, toolbarFactory) {\n        this._commands = commands;\n        this._toolbarFactory = toolbarFactory !== null && toolbarFactory !== void 0 ? toolbarFactory : this.defaultToolbarFactory;\n    }\n    get defaultToolbarFactory() {\n        const itemFactory = createDefaultFactory(this._commands);\n        return (widget) => new ObservableList({\n            values: defaultToolbarItems.map(item => {\n                return {\n                    name: item.name,\n                    widget: itemFactory(CellBarExtension.FACTORY_NAME, widget, item)\n                };\n            })\n        });\n    }\n    createNew(panel) {\n        return new CellToolbarTracker(panel, this._toolbarFactory(panel));\n    }\n}\nCellBarExtension.FACTORY_NAME = 'Cell';\n//# sourceMappingURL=celltoolbartracker.js.map"],"names":["CELL_TOOLBAR_CLASS","TOOLBAR_OVERLAP_CLASS","CellToolbarTracker","constructor","panel","toolbar","this","_isDisposed","_panel","_previousActiveCell","content","activeCell","_toolbar","_onToolbarChanged","changed","connect","revealed","then","_onActiveCellChanged","activeCellChanged","notebook","_removeToolbar","model","_addToolbar","_updateCellForToolbarOverlap","isDisposed","dispose","_a","disconnect","cells","context","each","iter","Signal","cell","_getCell","toolbarWidget","Toolbar","addClass","toArray","forEach","name","widget","addItem","layout","insertWidget","displayChanged","_resizeEventCallback","contentChanged","_changedEventCallback","widgets","find","_findToolbarWidgets","filter","hasClass","activeCellElement","node","classList","remove","_cellToolbarOverlapsContents","add","cellType","type","cellLeft","_cellEditorWidgetLeft","cellRight","_cellEditorWidgetRight","toolbarLeft","_cellToolbarLeft","rendered","_markdownOverlapsToolbar","_codeOverlapsToolbar","firstOutputElementChild","inputArea","renderedInput","firstElementChild","oldMaxWidth","style","maxWidth","lineRight","getBoundingClientRect","right","editorWidget","editor","lineCount","codeMirrorLines","getElementsByClassName","length","children","left","toolbarWidgets","defaultToolbarItems","command","CellBarExtension","commands","toolbarFactory","_commands","_toolbarFactory","defaultToolbarFactory","itemFactory","createDefaultFactory","ObservableList","values","map","item","FACTORY_NAME","createNew"],"sourceRoot":""}
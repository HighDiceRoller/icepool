{"version":3,"file":"7226.b1adc8d.js","mappings":"wPAuQIA,E,kEA5PG,MAAMC,EAITC,YAAYC,EAAU,IAKlBC,KAAKC,WAAY,EACjBD,KAAKE,UAAW,EAChBF,KAAKG,aAAc,EACnBH,KAAKI,cAAgB,IAAI,EAAAC,OAAOL,MAChCA,KAAKM,SAAW,IAAI,EAAAD,OAAOL,MAC3BA,KAAKE,WAAaH,EAAQQ,QAC1BP,KAAKQ,eACDT,EAAQS,gBAAkBX,EAAgBY,sBAC9CT,KAAKU,KAAO,IAAI,EAAAC,eACZZ,EAAQa,SACR,IAAAC,MAAKd,EAAQa,QAAQE,IACjBd,KAAKe,KAAKD,MAGlBd,KAAKU,KAAKM,QAAQC,QAAQjB,KAAKkB,eAAgBlB,MAK/CmB,mBACA,OAAOnB,KAAKI,cAKZY,cACA,OAAOhB,KAAKM,SAKZc,aACA,OAAOpB,KAAKU,KAAOV,KAAKU,KAAKU,OAAS,EAKtCb,cACA,OAAOP,KAAKE,SAQZK,YAAQO,GACR,GAAIA,IAAUd,KAAKE,SACf,OAEJ,MAAMK,EAAWP,KAAKE,SAAWY,EACjC,IAAK,IAAIO,EAAI,EAAGA,EAAIrB,KAAKU,KAAKU,OAAQC,IAAK,CACvC,IAAIC,EAAOtB,KAAKU,KAAKa,IAAIF,GACzB,MAAMP,EAAQQ,EAAKE,SACnBF,EAAKG,UACLH,EAAOtB,KAAK0B,YAAY,CAAEZ,MAAAA,EAAOP,QAAAA,IACjCP,KAAKU,KAAKiB,IAAIN,EAAGC,IAMrBM,iBACA,OAAO5B,KAAKG,YAKhBsB,UACQzB,KAAK4B,aAGT5B,KAAKG,aAAc,EACnBH,KAAKU,KAAKe,UACV,EAAApB,OAAA,UAAiBL,OAKrBuB,IAAIM,GACA,OAAO7B,KAAKU,KAAKa,IAAIM,GAKzBF,IAAIE,EAAOf,GACPA,EAAQ,EAAAgB,QAAA,SAAiBhB,GAEzBlB,EAAQmC,UAAUjB,GAClB,MAAMQ,EAAOtB,KAAK0B,YAAY,CAAEZ,MAAAA,EAAOP,QAASP,KAAKE,WACrDF,KAAKU,KAAKiB,IAAIE,EAAOP,GAWzBU,IAAIC,GAMA,OAJIjC,KAAKC,YACLD,KAAKkC,QACLlC,KAAKC,WAAY,GAEdD,KAAKe,KAAKkB,GAOrBC,MAAMC,GAAO,GACTnC,KAAKoC,YAAc,GACfD,EACAnC,KAAKC,WAAY,IAGrB,IAAAY,MAAKb,KAAKU,MAAOY,IACbA,EAAKG,aAETzB,KAAKU,KAAKwB,SAQdG,SAASzB,GACLZ,KAAKkC,SACL,IAAArB,MAAKD,GAAQE,IACTd,KAAKe,KAAKD,MAMlBU,SACI,OAAO,IAAAc,UAAQ,IAAAC,KAAIvC,KAAKU,MAAOuB,GAAWA,EAAOT,YAKrDT,KAAKD,GACD,MAAMP,EAAUP,KAAKE,SAKrB,GAJAY,EAAQ,EAAAgB,QAAA,SAAiBhB,GAEzBlB,EAAQmC,UAAUjB,GAEd,WAAkBA,IAClBd,KAAKoC,aACLtB,EAAM0B,OAASxC,KAAKyC,WACpBzC,KAAK0C,cAAc,CACf5B,MAAAA,EACA6B,UAAW3C,KAAKU,KAAKa,IAAIvB,KAAKoB,OAAS,KACvC,CAIJpB,KAAKoC,aAAetB,EAAM8B,KAC1B5C,KAAKoC,YAAcxC,EAAQiD,uBAAuB7C,KAAKoC,aACvDtB,EAAM8B,KAAO5C,KAAKoC,YAClB,MAAMd,EAAOtB,KAAK0B,YAAY,CAAEZ,MAAAA,EAAOP,QAAAA,IACjCsB,EAAQ7B,KAAKoB,OAAS,EAI5B,OAHapB,KAAKU,KAAKa,IAAIM,GACtBJ,UACLzB,KAAKU,KAAKiB,IAAIE,EAAOP,GACdO,EAEP,WAAkBf,KAClBA,EAAM8B,KAAOhD,EAAQiD,uBAAuB/B,EAAM8B,OAGtD,MAAMtB,EAAOtB,KAAK0B,YAAY,CAAEZ,MAAAA,EAAOP,QAAAA,IAUvC,OARI,WAAkBO,IAClBd,KAAKoC,YAActB,EAAM8B,KACzB5C,KAAKyC,UAAY3B,EAAM0B,MAGvBxC,KAAKoC,YAAc,GAGhBpC,KAAKU,KAAKoC,KAAKxB,GAQ1BoB,cAAc3C,GACV,OAAO,EAKX2B,YAAY3B,GACR,MACMuB,EADUtB,KAAKQ,eACAuC,kBAAkBhD,GAEvC,OADAuB,EAAKN,QAAQC,QAAQjB,KAAKgD,iBAAkBhD,MACrCsB,EAKXJ,eAAe+B,EAAQC,GACnBlD,KAAKM,SAAS6C,KAAKD,GAKvBF,mBACIhD,KAAKI,cAAc+C,UAAK,KAMhC,SAAWtD,GAIP,MAAMuD,EAIFL,kBAAkBhD,GACd,OAAO,IAAI,EAAAsD,YAAYtD,IAG/BF,EAAgBuD,eAAiBA,EAIjCvD,EAAgBY,sBAAwB,IAAI2C,EAhBhD,CAiBGvD,IAAoBA,EAAkB,KAKzC,SAAWD,GAWPA,EAAQmC,UAPR,SAAmBjB,GACX,WAAkBA,IACdwC,MAAMC,QAAQzC,EAAM8B,QACpB9B,EAAM8B,KAAO9B,EAAM8B,KAAKY,KAAK,QAqCzC5D,EAAQiD,uBAHR,SAAgCD,GAC5B,OAdJ,SAA2Ba,GAEvB,IADAA,EAAMA,EAAIC,QAAQ,UAAW,MACtBD,EAAIE,OAAO,YAAc,GAAG,CAC/B,MAAMC,EAAOH,EAAII,MAAM,aAAa,GACpC,IAAIC,EAASL,EAAII,MAAM,aAAa,GACpCC,GAAkBF,EAAKG,MAAMD,EAAO1C,OAAQwC,EAAKxC,QACjDqC,EAAMA,EAAIC,QAAQ,UAAW,MAAMA,QAAQ,SAAUI,GAEzD,OAAOL,EAMAO,CA3BX,SAAsBP,GAClB,IAAIQ,EAAMR,EACV,GAGIQ,GAFAR,EAAMQ,GAEIP,QAAQ,cAAe,UAC5BO,EAAI7C,OAASqC,EAAIrC,QAC1B,OAAOqC,EAoBkBS,CAAatB,KA1C9C,CA6CGhD,IAAYA,EAAU,K,0DCzSzB,MAIMuE,EAAyB,sBAIzBC,EAA2B,uBAI3BC,EAA2B,uBAqC1B,MAAMC,UAAmB,EAAAC,OAI5BzE,YAAYC,GACR,IAAIyE,EACJC,QAQAzE,KAAK0E,oBAAsB,IAAI,EAAArE,OAAOL,MAItCA,KAAK2E,SAAYC,IACb,MAAMC,EAAQ7E,KAAK6E,MACbC,EAAUF,EAAIG,OAAOC,SAC3B,IAAI/C,EACJ,MACMgD,GADaL,EAAIM,QAAQC,WAAa,IACJ,WACxC,IAAIC,EACJ,OAAQN,GACJ,IAAK,iBACL,IAAK,eACL,IAAK,SACL,IAAK,QACD7C,EAASoD,OAAOC,OAAOD,OAAOC,OAAO,GAAIV,EAAIM,SAAU,CAAEK,YAAaT,IACtED,EAAM7C,IAAIC,GACV,MACJ,IAAK,eAAgB,CACjB,MAAME,EAAOyC,EAAIM,QAAQ/C,KACzB0C,EAAM3C,MAAMC,GACZ,MAEJ,IAAK,sBAGD,GAFAF,EAASoD,OAAOC,OAAOD,OAAOC,OAAO,GAAIV,EAAIM,SAAU,CAAEK,YAAa,iBACtEH,EAAUpF,KAAKwF,cAAcjE,IAAI0D,GAC7BG,EACA,IAAK,MAAMvD,KAASuD,EAChBP,EAAMlD,IAAIE,EAAOI,GAO7BgD,GAAyB,iBAAZH,IACbM,EAAUpF,KAAKwF,cAAcjE,IAAI0D,IAAc,GAC/CG,EAAQtC,KAAK+B,EAAMzD,OAAS,GAC5BpB,KAAKwF,cAAc7D,IAAIsD,EAAWG,KAM1CpF,KAAKyF,gBAAmBb,IAIpB,MAAMC,EAAQ7E,KAAK6E,MACbK,EAAUN,EAAIM,QACpB,GAAuB,OAAnBA,EAAQQ,OACR,OAEJ,MAAMC,EAAUT,GAAWA,EAAQS,QACnC,IAAKA,IAAYA,EAAQvE,OACrB,OAEJ,MAAMwE,EAAQD,EAAQE,QAAQxE,GAAmB,SAAbA,EAAEyE,SACtC,IAAKF,EAAMxE,OACP,OAEJ,MACMa,EAAS,CACXsD,YAAa,eACbQ,KAHSC,KAAKC,MAAMD,KAAKE,UAAUN,EAAM,KAG9BG,KACXI,SAAU,IAEdtB,EAAM7C,IAAIC,IAEdjC,KAAKoG,kBAAoB,KACzBpG,KAAKwF,cAAgB,IAAIa,IACzBrG,KAAKsG,eAAiB,IAAI,EAAAC,cAAc,CACpCC,UAAW,EAAAC,KAAA,UAEfzG,KAAK0G,SA1Ia,iBA2IlB1G,KAAKQ,eACDT,EAAQS,gBAAkB8D,EAAW7D,sBACzCT,KAAK2G,OAAS,IAAI,EAAAC,YAClB5G,KAAK6G,WAAa9G,EAAQ8G,WAC1B7G,KAAK8G,kBAAwD,QAAnCtC,EAAKzE,EAAQgH,wBAAqC,IAAPvC,EAAgBA,EAAKwC,EAAAA,EAC1F,MAAMnC,EAAS7E,KAAK6E,MAAQ9E,EAAQ8E,MACpC,IAAK,IAAIxD,EAAI,EAAGA,EAAI4F,KAAKC,IAAIrC,EAAMzD,OAAQpB,KAAK8G,kBAAoB,GAAIzF,IAAK,CACzE,MAAMY,EAAS4C,EAAMtD,IAAIF,GACzBrB,KAAKmH,cAAc9F,EAAGY,GAE1B4C,EAAM7D,QAAQC,QAAQjB,KAAKoH,eAAgBpH,MAC3C6E,EAAM1D,aAAaF,QAAQjB,KAAKqH,eAAgBrH,MAKhDsH,cACA,OAAOtH,KAAK2G,OAAOW,QAKnBC,aACA,OAAOvH,KAAKwH,QAEZD,WAAOzG,GAEP,GAAId,KAAK6E,MAAMjD,WACX,MAAM6F,MAAM,qBAEZzH,KAAKwH,UAAY1G,IAGjBd,KAAKwH,SACLxH,KAAKwH,QAAQ/F,UAEjBzB,KAAKwH,QAAU1G,EACfd,KAAK6E,MAAM3C,QAEPlC,KAAKsH,QAAQlG,SACbpB,KAAK0H,SACL1H,KAAK0E,oBAAoBvB,KAAKnD,KAAK6E,MAAMzD,SAG7CN,EAAM6G,QAAU3H,KAAK2E,SAErB7D,EAAM8G,QAAU5H,KAAKyF,gBAErB3E,EAAM+G,QAAUjD,IACR,EAAAkD,cAAA,kBAAgClD,IAChC5E,KAAK+H,eAAenD,EAAK9D,KAUjCiG,uBACA,OAAO/G,KAAK8G,kBAEZC,qBAAiBiB,GACjB,GAAIA,GAAS,EAET,YADAC,QAAQC,KAAK,0DAGjB,MAAMC,EAAYnI,KAAK8G,kBACvB9G,KAAK8G,kBAAoBkB,EACrBG,EAAYH,GACZhI,KAAKoI,oBAAoBD,GAMjC1G,UACQzB,KAAKwH,UACLxH,KAAKwH,QAAQ/F,UACbzB,KAAKwH,QAAU,MAEnBxH,KAAKwF,cAActD,QACnBlC,KAAKsG,eAAe7E,UACpBgD,MAAMhD,UAKV2F,eAAenE,EAAQC,GACnB,OAAQA,EAAKmF,MACT,IAAK,MACDrI,KAAKmH,cAAcjE,EAAKoF,SAAUpF,EAAKqF,UAAU,IACjD,MACJ,IAAK,SACD,GAAIvI,KAAKsH,QAAQlG,OAEb,GAA0B,IAAtBpB,KAAK6E,MAAMzD,OACXpB,KAAK0H,aAEJ,CAGD,MAAMc,EAAatF,EAAKuF,SACxB,IAAK,IAAIpH,EAAI,EAAGA,EAAI6B,EAAKwF,UAAUtH,QAAUoH,EAAaxI,KAAKsH,QAAQlG,SAAUC,EAAG,CAChF,MAAMsH,EAAS3I,KAAKsH,QAAQkB,GAC5BG,EAAOC,OAAS,KAChBD,EAAOlH,UAGXzB,KAAK6I,sBAAsBL,EAAYtF,EAAKwF,UAAUtH,QAEtDpB,KAAK8I,6BAGb,MACJ,IAAK,MACD9I,KAAK+I,WAAW7F,EAAKoF,SAAUpF,EAAKqF,UAAU,IAKtDvI,KAAK0E,oBAAoBvB,KAAK8D,KAAKC,IAAIlH,KAAK6E,MAAMzD,OAAQpB,KAAK8G,oBAUnE+B,sBAAsBL,EAAYQ,GAC9BhJ,KAAKwF,cAAcyD,SAASC,IACxB,MAAMC,EAAWX,EAAaQ,EAG9B,IAAK,IAAI3H,EAFU6H,EAAQ9H,OAED,EAAGC,GAAK,IAAKA,EAAG,CACtC,MAAMQ,EAAQqH,EAAQ7H,GAElBQ,GAAS2G,GAAc3G,EAAQsH,EAC/BD,EAAQE,OAAO/H,EAAG,GAEbQ,GAASsH,IAEdD,EAAQ7H,IAAM2H,OAQ9B3B,eAAepE,GACX,MAAMoG,EAAepC,KAAKC,IAAIlH,KAAK6E,MAAMzD,OAAQpB,KAAK8G,mBACtD,IAAK,IAAIzF,EAAI,EAAGA,EAAIgI,EAAchI,IAC9BrB,KAAK+I,WAAW1H,EAAGrB,KAAK6E,MAAMtD,IAAIF,IAEtCrB,KAAK0E,oBAAoBvB,KAAKkG,GAKlC3B,SAEI,IAAK1H,KAAKsH,QAAQlG,OACd,OAGJ,MAAMA,EAASpB,KAAKsH,QAAQlG,OAC5B,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAQC,IAAK,CAC7B,MAAMsH,EAAS3I,KAAKsH,QAAQ,GAC5BqB,EAAOC,OAAS,KAChBD,EAAOlH,UAGXzB,KAAKwF,cAActD,QAEnBlC,KAAK8I,6BAETA,6BAMI,MAAMQ,EAAOtJ,KAAKuJ,KAAKC,wBACvBxJ,KAAKuJ,KAAKE,MAAMC,UAAY,GAAGJ,EAAKK,WAChC3J,KAAKoG,mBACLwD,OAAOC,aAAa7J,KAAKoG,mBAE7BpG,KAAKoG,kBAAoBwD,OAAOE,YAAW,KACnC9J,KAAK4B,aAGT5B,KAAKuJ,KAAKE,MAAMC,UAAY,MAC7B,IAKP3B,eAAenD,EAAK2C,GAEhB,MAAMwC,EAAU/J,KAAKQ,eACfwJ,EAAcpF,EAAIM,QAAQ+E,OAC1BC,EAAWtF,EAAIM,QAAQgF,SACvBC,EAAQ,IAAI,EAAAC,MAClBD,EAAMzD,SAASvC,GACfgG,EAAMzD,SAnUuB,4BAoU7B,MAAMuD,EAASF,EAAQM,qBACvBJ,EAAOvD,SAASrC,GAChB8F,EAAMG,UAAUL,GAChB,MAAMM,EAAQR,EAAQS,YAAY,CAC9BC,cAAe7F,EAAIG,OACnBkF,OAAQD,EACRE,SAAAA,EACA3C,OAAAA,IAEJgD,EAAM7D,SAAStC,GACf+F,EAAMG,UAAUC,GAEZvK,KAAK6E,MAAMzD,QAAUpB,KAAK+G,mBAC1B/G,KAAK+G,iBAAmB/G,KAAK6E,MAAMzD,QAEvCpB,KAAK2G,OAAO2D,UAAUH,GAKjBI,EAAMzJ,MAAM4J,MAAK5J,IAEdd,KAAK6E,MAAMzD,QAAUpB,KAAK+G,mBAC1B/G,KAAK+G,iBAAmB/G,KAAK6E,MAAMzD,OAAS,GAGhDpB,KAAK6E,MAAM7C,IAAI,CACXuD,YAAa,SACb/C,KAAM,QACNI,KAAM9B,EAAQ,OAElBqJ,EAAM1I,aAMdsH,WAAWlH,EAAOgD,GACd,GAAIhD,GAAS7B,KAAK8G,kBACd,OAEJ,MAAMqD,EAAQnK,KAAK2G,OAAOW,QAAQzF,GAC5B8I,EAAYR,EAAM7C,QAClB6C,EAAM7C,QAAQ,GACd6C,EAIAS,EAAW5K,KAAK6G,WAAWgE,kBAAkBhG,EAAMkB,KAAMlB,EAAMtE,QAAU,MAAQ,UACnFoK,EAASG,aACT,EAAQC,yBAAyBxJ,IAAIoJ,KAAcC,GACnDtG,EAAW0G,WAAWJ,EAAU/F,EAAMsB,YAClCwE,aAAoB,EAAQM,iBAC3BN,EAASG,YAAYjG,IAG1B7E,KAAK2G,OAAOW,QAAQzF,GAAOJ,UAC3BzB,KAAKmH,cAActF,EAAOgD,IASlCsC,cAActF,EAAOgD,GACjB,GAAIhD,EAAQ7B,KAAK8G,kBACb,OAEJ,MAAMH,EAAS3G,KAAK2G,OACpB,GAAI9E,IAAU7B,KAAK8G,kBAAmB,CAClC,MAAMoE,EAAU,IAAI,EAAQC,eAAenL,KAAK8G,mBAAmB,KAC/D,MAAMqB,EAAYnI,KAAK8G,kBACvB9G,KAAK8G,kBAAoBE,EAAAA,EACzBhH,KAAKoI,oBAAoBD,MAE7BxB,EAAOyE,aAAavJ,EAAO7B,KAAKqL,eAAeH,QAE9C,CACD,IAAIjJ,EAASjC,KAAKsL,iBAAiBzG,GAC/B5C,EACAA,EAAOsJ,YA1ZD,8BA0ZqD,OAAzB1G,EAAM2G,gBAGxCvJ,EAAS,IAAI,EAAAsC,OAEZvE,KAAKsG,eAAemF,IAAIxJ,IACpBjC,KAAKsG,eAAetE,IAAIC,GAEjC0E,EAAOyE,aAAavJ,EAAOI,IAM/ByJ,oBACA,OAAO1L,KAAKsG,eAQhB8B,oBAAoBD,GAEhBnI,KAAKsH,QAAQa,GAAW1G,UACxB,IAAK,IAAIkK,EAAMxD,EAAWwD,EAAM3L,KAAK6E,MAAMzD,OAAQuK,IAC/C3L,KAAKmH,cAAcwE,EAAK3L,KAAK6E,MAAMtD,IAAIoK,IAE3C3L,KAAK0E,oBAAoBvB,KAAK8D,KAAKC,IAAIlH,KAAK6E,MAAMzD,OAAQpB,KAAK8G,oBAQnEwE,iBAAiBzG,GACb,MAAM5C,EAASjC,KAAK4L,uBAAuB/G,GAC3C,OAAK5C,EAGEjC,KAAKqL,eAAepJ,EAAQ4C,EAAM2G,gBAF9B,KAOfI,uBAAuB/G,GACnB,MAAM+F,EAAW5K,KAAK6G,WAAWgE,kBAAkBhG,EAAMkB,KAAMlB,EAAMtE,QAAU,MAAQ,UACvF,IAAKqK,EACD,OAAO,KAEX,IAAI3I,EAASjC,KAAK6G,WAAWgF,eAAejB,GAe5C,OAbiB,IADAtG,EAAW0G,WAAWJ,EAAU/F,EAAMsB,YAEnDlE,EAAS,IAAI,EAAQgJ,iBAAiBhJ,IAE1C,EAAQ8I,yBAAyBpJ,IAAIM,EAAQ2I,GAC7C3I,EAAO6I,YAAYjG,GAAOiH,OAAMC,IAE5B,MAAMC,EAAMC,SAASC,cAAc,OACnCF,EAAIG,YAAc,qBAAqBJ,EAAMK,UAC7CnK,EAAOsH,KAAK8C,YAAYL,GAExB/J,EAAOsH,KAAK+C,UAAY,4BACxBrK,EAAOsH,KAAKgD,aAAa,iBAAkB,qCAExCtK,EASXoJ,eAAepJ,EAAQuJ,EAAiB,MACpC,MAAMrB,EAAQ,IAAI,EAAQqC,YAC1BrC,EAAMzD,SAASvC,GACf,MAAM8F,EAASjK,KAAKQ,eAAe6J,qBAMnC,OALAJ,EAAOuB,eAAiBA,EACxBvB,EAAOvD,SAASrC,GAChB8F,EAAMG,UAAUL,GAChBhI,EAAOyE,SAAStC,GAChB+F,EAAMG,UAAUrI,GACTkI,GAGR,MAAMsC,UAA6BnI,EAItCyD,eAAenD,EAAK2C,IAMpB+D,iBAAiBzG,GACb,MAAM5C,EAASjC,KAAK4L,uBAAuB/G,GAI3C,OAHI5C,GACAA,EAAOyE,SAAStC,GAEbnC,IAMf,SAAWqC,GAyBPA,EAAWoI,QArBXC,eAAuBC,EAAM3K,EAAQ4K,EAAgB1G,GACjD,IAAI3B,EAEJ,IAAIsI,GAAc,EACd3G,GACA7C,MAAMC,QAAQ4C,EAAS4G,QACwB,IAA/C5G,EAAS4G,KAAKC,QAAQ,sBACtBF,GAAc,GAElB,MAAM5H,EAAU,CACZ0H,KAAAA,EACAK,cAAeH,GAEbI,EAA2C,QAAjC1I,EAAKqI,EAAeM,eAA4B,IAAP3I,OAAgB,EAASA,EAAG0I,OACrF,IAAKA,EACD,MAAM,IAAIzF,MAAM,0BAEpB,MAAMF,EAAS2F,EAAOE,eAAelI,GAAS,EAAOiB,GAErD,OADAlE,EAAOsF,OAASA,EACTA,EAAO8F,MAclB/I,EAAW0G,WAXX,SAAoBJ,EAAUzE,GAC1B,MAAMmH,EAASnH,EAASyE,GAExB,OAAI0C,QAAiCC,IAAvBD,EAAiB,WAClBA,EAAiB,WAIjBnH,EAAmB,UAOpC,MAAM/C,EAIFiH,qBACI,OAAO,IAAImD,EAKfhD,YAAYzK,GACR,OAAO,IAAI0N,EAAM1N,IAGzBuE,EAAWlB,eAAiBA,EAI5BkB,EAAW7D,sBAAwB,IAAI2C,EA3D3C,CA4DGkB,IAAeA,EAAa,KAIxB,MAAMkJ,UAAqB,EAAAjJ,OAI9BzE,cACI2E,QACAzE,KAAK0N,gBAAkB,KACvB1N,KAAK0G,SAllBe,mBAulBpB8E,qBACA,OAAOxL,KAAK0N,gBAEZlC,mBAAe1K,GACfd,KAAK0N,gBAAkB5M,EAEnBd,KAAKuJ,KAAK4C,YADA,OAAVrL,EACwB,GAGA,IAAIA,OAOjC,MAAM2M,UAAc,EAAAlJ,OAIvBzE,YAAYC,GACR0E,MAAM,CACF8E,KAAM,EAAQoE,sBAAsB5N,EAAQkK,OAAQlK,EAAQmK,YAEhElK,KAAK4N,SAAW,IAAI,EAAAC,gBACpB7N,KAAK0G,SApmBO,YAqmBZ1G,KAAK8N,OAAS9N,KAAKuJ,KAAKwE,qBAAqB,SAAS,GACtD/N,KAAK8N,OAAOE,QACZhO,KAAKwH,QAAUzH,EAAQwH,OACvBvH,KAAKiO,cAAgBlO,EAAQ0K,cAC7BzK,KAAKkO,OAASnO,EAAQkK,OAAS,IAK/BnJ,YACA,OAAOd,KAAK4N,SAASO,QAAQzD,MAAK,IAAM1K,KAAKkO,SAYjDE,YAAYC,GACR,MAAM9D,EAAQvK,KAAK8N,OACA,YAAfO,EAAMhG,MACgB,KAAlBgG,EAAMC,UAENtO,KAAKwH,QAAQ+G,eAAe,CACxB7I,OAAQ,KACR5E,MAAOyJ,EAAMzJ,OACdd,KAAKiO,eACW,aAAf1D,EAAMlC,KACNrI,KAAKkO,QAAU5K,MAAMiH,EAAMzJ,MAAMM,OAAS,GAAGoC,KAAK,KAGlDxD,KAAKkO,QAAU3D,EAAMzJ,MAEzBd,KAAK4N,SAASY,aAAQ,IAOlCC,cAAc7J,GACV5E,KAAK8N,OAAOY,iBAAiB,UAAW1O,MACxCA,KAAK2O,SAKTC,gBAAgBhK,GACZ5E,KAAK8N,OAAOE,QAKhBa,eAAejK,GACX5E,KAAK8N,OAAOgB,oBAAoB,UAAW9O,OASnD,IAAI,GACJ,SAAWJ,GAkBPA,EAAQ+N,sBAdR,SAA+B1D,EAAQC,GACnC,MAAMX,EAAO0C,SAASC,cAAc,OAC9B6C,EAAa9C,SAASC,cAAc,OAC1C6C,EAAWzC,UA5qBQ,kBA6qBnByC,EAAW5C,YAAclC,EACzB,MAAMM,EAAQ0B,SAASC,cAAc,SAOrC,OANA3B,EAAM+B,UA3qBY,iBA4qBdpC,IACAK,EAAMlC,KAAO,YAEjBkB,EAAK8C,YAAY0C,GACjBA,EAAW1C,YAAY9B,GAChBhB,GAMX,MAAM0B,UAAyB,EAAA1G,OAI3BzE,YAAYkP,GACRvK,MAAM,CAAE8E,KAAM0C,SAASC,cAAc,YACrClM,KAAK0G,SAAS,mBACd1G,KAAKiP,SAAWD,EAEhB,MAAME,EAASlP,KAAKuJ,KACpB2F,EAAOC,YAAc,IACrBD,EAAOE,UAAY,OACnBF,EAAOR,iBAAiB,QAAQ,KAI5BQ,EAAOG,gBAAgBC,OAIvBJ,EAAOG,gBAAgBE,MAAMvP,KAAKiP,SAAS1F,KAAKiG,WAChDN,EAAOG,gBAAgBI,QACvB,MAAMC,EAAOR,EAAOG,gBAAgBK,KAEpCR,EAAOzF,MAAME,OAAS,GAAG+F,EAAKC,iBAC9BT,EAAOU,qBAAuB,IAAI,KAAe,KAC7CV,EAAOzF,MAAME,OAAS,GAAG+F,EAAKC,oBAElCT,EAAOU,qBAAqBC,QAAQH,MAc5C5E,YAAYjG,GACR,OAAO7E,KAAKiP,SAASnE,YAAYjG,IAGzCjF,EAAQqL,iBAAmBA,EAC3BrL,EAAQmL,yBAA2B,IAAI,EAAA+E,iBAAiB,CACpDtN,KAAM,oBACNuN,OAAQC,GAAS,KAKrB,MAAMxD,UAAoB,EAAApC,MAItBtK,YAAYC,GACR0E,MAAM1E,GAKVkQ,WAAWC,GACPlQ,KAAKuJ,KAAKyE,QAKdS,cAAc7J,GACVH,MAAMgK,cAAc7J,GACpB5E,KAAKuJ,KAAKmF,iBAAiB,cAAe1O,KAAKiQ,WAAWE,KAAKnQ,OAKnE6O,eAAejK,GACXH,MAAM2L,cAAcxL,GACpB5E,KAAKuJ,KAAKuF,oBAAoB,cAAe9O,KAAKiQ,WAAWE,KAAKnQ,QAG1EJ,EAAQ4M,YAAcA,EAItB,MAAMrB,UAAuB,EAAA5G,OAUzBzE,YAAYiH,EAAkBsJ,GAC1B,MAAM9G,EAAO0C,SAASC,cAAc,OACpC3C,EAAK+G,mBAAmB,aAAc,+HAEZvJ,8GAG1BtC,MAAM,CACF8E,KAAAA,IAEJvJ,KAAKuQ,SAAWF,EAChBrQ,KAAK0G,SAAS,qBACd1G,KAAK0G,SAAS,yBAYlB0H,YAAYC,GACW,UAAfA,EAAMhG,MACNrI,KAAKuQ,SAASlC,GAMtBI,cAAc7J,GACVH,MAAMgK,cAAc7J,GACpB5E,KAAKuJ,KAAKmF,iBAAiB,QAAS1O,MAMxC6O,eAAejK,GACXH,MAAMoK,eAAejK,GACrB5E,KAAKuJ,KAAKuF,oBAAoB,QAAS9O,OAG/CJ,EAAQuL,eAAiBA,EAnK7B,CAoKG,IAAY,EAAU","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/outputarea/lib/model.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/outputarea/lib/widget.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport * as nbformat from '@jupyterlab/nbformat';\nimport { ObservableList } from '@jupyterlab/observables';\nimport { OutputModel } from '@jupyterlab/rendermime';\nimport { each, map, toArray } from '@lumino/algorithm';\nimport { JSONExt } from '@lumino/coreutils';\nimport { Signal } from '@lumino/signaling';\n/**\n * The default implementation of the IOutputAreaModel.\n */\nexport class OutputAreaModel {\n    /**\n     * Construct a new observable outputs instance.\n     */\n    constructor(options = {}) {\n        /**\n         * A flag that is set when we want to clear the output area\n         * *after* the next addition to it.\n         */\n        this.clearNext = false;\n        this._trusted = false;\n        this._isDisposed = false;\n        this._stateChanged = new Signal(this);\n        this._changed = new Signal(this);\n        this._trusted = !!options.trusted;\n        this.contentFactory =\n            options.contentFactory || OutputAreaModel.defaultContentFactory;\n        this.list = new ObservableList();\n        if (options.values) {\n            each(options.values, value => {\n                this._add(value);\n            });\n        }\n        this.list.changed.connect(this._onListChanged, this);\n    }\n    /**\n     * A signal emitted when the model state changes.\n     */\n    get stateChanged() {\n        return this._stateChanged;\n    }\n    /**\n     * A signal emitted when the model changes.\n     */\n    get changed() {\n        return this._changed;\n    }\n    /**\n     * Get the length of the items in the model.\n     */\n    get length() {\n        return this.list ? this.list.length : 0;\n    }\n    /**\n     * Get whether the model is trusted.\n     */\n    get trusted() {\n        return this._trusted;\n    }\n    /**\n     * Set whether the model is trusted.\n     *\n     * #### Notes\n     * Changing the value will cause all of the models to re-set.\n     */\n    set trusted(value) {\n        if (value === this._trusted) {\n            return;\n        }\n        const trusted = (this._trusted = value);\n        for (let i = 0; i < this.list.length; i++) {\n            let item = this.list.get(i);\n            const value = item.toJSON();\n            item.dispose();\n            item = this._createItem({ value, trusted });\n            this.list.set(i, item);\n        }\n    }\n    /**\n     * Test whether the model is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose of the resources used by the model.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        this.list.dispose();\n        Signal.clearData(this);\n    }\n    /**\n     * Get an item at the specified index.\n     */\n    get(index) {\n        return this.list.get(index);\n    }\n    /**\n     * Set the value at the specified index.\n     */\n    set(index, value) {\n        value = JSONExt.deepCopy(value);\n        // Normalize stream data.\n        Private.normalize(value);\n        const item = this._createItem({ value, trusted: this._trusted });\n        this.list.set(index, item);\n    }\n    /**\n     * Add an output, which may be combined with previous output.\n     *\n     * @returns The total number of outputs.\n     *\n     * #### Notes\n     * The output bundle is copied.\n     * Contiguous stream outputs of the same `name` are combined.\n     */\n    add(output) {\n        // If we received a delayed clear message, then clear now.\n        if (this.clearNext) {\n            this.clear();\n            this.clearNext = false;\n        }\n        return this._add(output);\n    }\n    /**\n     * Clear all of the output.\n     *\n     * @param wait Delay clearing the output until the next message is added.\n     */\n    clear(wait = false) {\n        this._lastStream = '';\n        if (wait) {\n            this.clearNext = true;\n            return;\n        }\n        each(this.list, (item) => {\n            item.dispose();\n        });\n        this.list.clear();\n    }\n    /**\n     * Deserialize the model from JSON.\n     *\n     * #### Notes\n     * This will clear any existing data.\n     */\n    fromJSON(values) {\n        this.clear();\n        each(values, value => {\n            this._add(value);\n        });\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        return toArray(map(this.list, (output) => output.toJSON()));\n    }\n    /**\n     * Add a copy of the item to the list.\n     */\n    _add(value) {\n        const trusted = this._trusted;\n        value = JSONExt.deepCopy(value);\n        // Normalize the value.\n        Private.normalize(value);\n        // Consolidate outputs if they are stream outputs of the same kind.\n        if (nbformat.isStream(value) &&\n            this._lastStream &&\n            value.name === this._lastName &&\n            this.shouldCombine({\n                value,\n                lastModel: this.list.get(this.length - 1)\n            })) {\n            // In order to get a list change event, we add the previous\n            // text to the current item and replace the previous item.\n            // This also replaces the metadata of the last item.\n            this._lastStream += value.text;\n            this._lastStream = Private.removeOverwrittenChars(this._lastStream);\n            value.text = this._lastStream;\n            const item = this._createItem({ value, trusted });\n            const index = this.length - 1;\n            const prev = this.list.get(index);\n            prev.dispose();\n            this.list.set(index, item);\n            return index;\n        }\n        if (nbformat.isStream(value)) {\n            value.text = Private.removeOverwrittenChars(value.text);\n        }\n        // Create the new item.\n        const item = this._createItem({ value, trusted });\n        // Update the stream information.\n        if (nbformat.isStream(value)) {\n            this._lastStream = value.text;\n            this._lastName = value.name;\n        }\n        else {\n            this._lastStream = '';\n        }\n        // Add the item to our list and return the new length.\n        return this.list.push(item);\n    }\n    /**\n     * Whether a new value should be consolidated with the previous output.\n     *\n     * This will only be called if the minimal criteria of both being stream\n     * messages of the same type.\n     */\n    shouldCombine(options) {\n        return true;\n    }\n    /**\n     * Create an output item and hook up its signals.\n     */\n    _createItem(options) {\n        const factory = this.contentFactory;\n        const item = factory.createOutputModel(options);\n        item.changed.connect(this._onGenericChange, this);\n        return item;\n    }\n    /**\n     * Handle a change to the list.\n     */\n    _onListChanged(sender, args) {\n        this._changed.emit(args);\n    }\n    /**\n     * Handle a change to an item.\n     */\n    _onGenericChange() {\n        this._stateChanged.emit(void 0);\n    }\n}\n/**\n * The namespace for OutputAreaModel class statics.\n */\n(function (OutputAreaModel) {\n    /**\n     * The default implementation of a `IModelOutputFactory`.\n     */\n    class ContentFactory {\n        /**\n         * Create an output model.\n         */\n        createOutputModel(options) {\n            return new OutputModel(options);\n        }\n    }\n    OutputAreaModel.ContentFactory = ContentFactory;\n    /**\n     * The default output model factory.\n     */\n    OutputAreaModel.defaultContentFactory = new ContentFactory();\n})(OutputAreaModel || (OutputAreaModel = {}));\n/**\n * A namespace for module-private functionality.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Normalize an output.\n     */\n    function normalize(value) {\n        if (nbformat.isStream(value)) {\n            if (Array.isArray(value.text)) {\n                value.text = value.text.join('\\n');\n            }\n        }\n    }\n    Private.normalize = normalize;\n    /**\n     * Remove characters that are overridden by backspace characters.\n     */\n    function fixBackspace(txt) {\n        let tmp = txt;\n        do {\n            txt = tmp;\n            // Cancel out anything-but-newline followed by backspace\n            tmp = txt.replace(/[^\\n]\\x08/gm, ''); // eslint-disable-line no-control-regex\n        } while (tmp.length < txt.length);\n        return txt;\n    }\n    /**\n     * Remove chunks that should be overridden by the effect of\n     * carriage return characters.\n     */\n    function fixCarriageReturn(txt) {\n        txt = txt.replace(/\\r+\\n/gm, '\\n'); // \\r followed by \\n --> newline\n        while (txt.search(/\\r[^$]/g) > -1) {\n            const base = txt.match(/^(.*)\\r+/m)[1];\n            let insert = txt.match(/\\r+(.*)$/m)[1];\n            insert = insert + base.slice(insert.length, base.length);\n            txt = txt.replace(/\\r+.*$/m, '\\r').replace(/^.*\\r/m, insert);\n        }\n        return txt;\n    }\n    /*\n     * Remove characters overridden by backspaces and carriage returns\n     */\n    function removeOverwrittenChars(text) {\n        return fixCarriageReturn(fixBackspace(text));\n    }\n    Private.removeOverwrittenChars = removeOverwrittenChars;\n})(Private || (Private = {}));\n//# sourceMappingURL=model.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { WidgetTracker } from '@jupyterlab/apputils';\nimport { KernelMessage } from '@jupyterlab/services';\nimport { PromiseDelegate, UUID } from '@lumino/coreutils';\nimport { AttachedProperty } from '@lumino/properties';\nimport { Signal } from '@lumino/signaling';\nimport { Panel, PanelLayout, Widget } from '@lumino/widgets';\nimport ResizeObserver from 'resize-observer-polyfill';\n/**\n * The class name added to an output area widget.\n */\nconst OUTPUT_AREA_CLASS = 'jp-OutputArea';\n/**\n * The class name added to the direction children of OutputArea\n */\nconst OUTPUT_AREA_ITEM_CLASS = 'jp-OutputArea-child';\n/**\n * The class name added to actual outputs\n */\nconst OUTPUT_AREA_OUTPUT_CLASS = 'jp-OutputArea-output';\n/**\n * The class name added to prompt children of OutputArea.\n */\nconst OUTPUT_AREA_PROMPT_CLASS = 'jp-OutputArea-prompt';\n/**\n * The class name added to OutputPrompt.\n */\nconst OUTPUT_PROMPT_CLASS = 'jp-OutputPrompt';\n/**\n * The class name added to an execution result.\n */\nconst EXECUTE_CLASS = 'jp-OutputArea-executeResult';\n/**\n * The class name added stdin items of OutputArea\n */\nconst OUTPUT_AREA_STDIN_ITEM_CLASS = 'jp-OutputArea-stdin-item';\n/**\n * The class name added to stdin widgets.\n */\nconst STDIN_CLASS = 'jp-Stdin';\n/**\n * The class name added to stdin data prompt nodes.\n */\nconst STDIN_PROMPT_CLASS = 'jp-Stdin-prompt';\n/**\n * The class name added to stdin data input nodes.\n */\nconst STDIN_INPUT_CLASS = 'jp-Stdin-input';\n/** ****************************************************************************\n * OutputArea\n ******************************************************************************/\n/**\n * An output area widget.\n *\n * #### Notes\n * The widget model must be set separately and can be changed\n * at any time.  Consumers of the widget must account for a\n * `null` model, and may want to listen to the `modelChanged`\n * signal.\n */\nexport class OutputArea extends Widget {\n    /**\n     * Construct an output area widget.\n     */\n    constructor(options) {\n        var _a;\n        super();\n        /**\n         * A public signal used to indicate the number of outputs has changed.\n         *\n         * #### Notes\n         * This is useful for parents who want to apply styling based on the number\n         * of outputs. Emits the current number of outputs.\n         */\n        this.outputLengthChanged = new Signal(this);\n        /**\n         * Handle an iopub message.\n         */\n        this._onIOPub = (msg) => {\n            const model = this.model;\n            const msgType = msg.header.msg_type;\n            let output;\n            const transient = (msg.content.transient || {});\n            const displayId = transient['display_id'];\n            let targets;\n            switch (msgType) {\n                case 'execute_result':\n                case 'display_data':\n                case 'stream':\n                case 'error':\n                    output = Object.assign(Object.assign({}, msg.content), { output_type: msgType });\n                    model.add(output);\n                    break;\n                case 'clear_output': {\n                    const wait = msg.content.wait;\n                    model.clear(wait);\n                    break;\n                }\n                case 'update_display_data':\n                    output = Object.assign(Object.assign({}, msg.content), { output_type: 'display_data' });\n                    targets = this._displayIdMap.get(displayId);\n                    if (targets) {\n                        for (const index of targets) {\n                            model.set(index, output);\n                        }\n                    }\n                    break;\n                default:\n                    break;\n            }\n            if (displayId && msgType === 'display_data') {\n                targets = this._displayIdMap.get(displayId) || [];\n                targets.push(model.length - 1);\n                this._displayIdMap.set(displayId, targets);\n            }\n        };\n        /**\n         * Handle an execute reply message.\n         */\n        this._onExecuteReply = (msg) => {\n            // API responses that contain a pager are special cased and their type\n            // is overridden from 'execute_reply' to 'display_data' in order to\n            // render output.\n            const model = this.model;\n            const content = msg.content;\n            if (content.status !== 'ok') {\n                return;\n            }\n            const payload = content && content.payload;\n            if (!payload || !payload.length) {\n                return;\n            }\n            const pages = payload.filter((i) => i.source === 'page');\n            if (!pages.length) {\n                return;\n            }\n            const page = JSON.parse(JSON.stringify(pages[0]));\n            const output = {\n                output_type: 'display_data',\n                data: page.data,\n                metadata: {}\n            };\n            model.add(output);\n        };\n        this._minHeightTimeout = null;\n        this._displayIdMap = new Map();\n        this._outputTracker = new WidgetTracker({\n            namespace: UUID.uuid4()\n        });\n        this.addClass(OUTPUT_AREA_CLASS);\n        this.contentFactory =\n            options.contentFactory || OutputArea.defaultContentFactory;\n        this.layout = new PanelLayout();\n        this.rendermime = options.rendermime;\n        this._maxNumberOutputs = (_a = options.maxNumberOutputs) !== null && _a !== void 0 ? _a : Infinity;\n        const model = (this.model = options.model);\n        for (let i = 0; i < Math.min(model.length, this._maxNumberOutputs + 1); i++) {\n            const output = model.get(i);\n            this._insertOutput(i, output);\n        }\n        model.changed.connect(this.onModelChanged, this);\n        model.stateChanged.connect(this.onStateChanged, this);\n    }\n    /**\n     * A read-only sequence of the children widgets in the output area.\n     */\n    get widgets() {\n        return this.layout.widgets;\n    }\n    /**\n     * The kernel future associated with the output area.\n     */\n    get future() {\n        return this._future;\n    }\n    set future(value) {\n        // Bail if the model is disposed.\n        if (this.model.isDisposed) {\n            throw Error('Model is disposed');\n        }\n        if (this._future === value) {\n            return;\n        }\n        if (this._future) {\n            this._future.dispose();\n        }\n        this._future = value;\n        this.model.clear();\n        // Make sure there were no input widgets.\n        if (this.widgets.length) {\n            this._clear();\n            this.outputLengthChanged.emit(this.model.length);\n        }\n        // Handle published messages.\n        value.onIOPub = this._onIOPub;\n        // Handle the execute reply.\n        value.onReply = this._onExecuteReply;\n        // Handle stdin.\n        value.onStdin = msg => {\n            if (KernelMessage.isInputRequestMsg(msg)) {\n                this.onInputRequest(msg, value);\n            }\n        };\n    }\n    /**\n     * The maximum number of output items to display on top and bottom of cell output.\n     *\n     * ### Notes\n     * It is set to Infinity if no trim is applied.\n     */\n    get maxNumberOutputs() {\n        return this._maxNumberOutputs;\n    }\n    set maxNumberOutputs(limit) {\n        if (limit <= 0) {\n            console.warn(`OutputArea.maxNumberOutputs must be strictly positive.`);\n            return;\n        }\n        const lastShown = this._maxNumberOutputs;\n        this._maxNumberOutputs = limit;\n        if (lastShown < limit) {\n            this._showTrimmedOutputs(lastShown);\n        }\n    }\n    /**\n     * Dispose of the resources used by the output area.\n     */\n    dispose() {\n        if (this._future) {\n            this._future.dispose();\n            this._future = null;\n        }\n        this._displayIdMap.clear();\n        this._outputTracker.dispose();\n        super.dispose();\n    }\n    /**\n     * Follow changes on the model state.\n     */\n    onModelChanged(sender, args) {\n        switch (args.type) {\n            case 'add':\n                this._insertOutput(args.newIndex, args.newValues[0]);\n                break;\n            case 'remove':\n                if (this.widgets.length) {\n                    // all items removed from model\n                    if (this.model.length === 0) {\n                        this._clear();\n                    }\n                    else {\n                        // range of items removed from model\n                        // remove widgets corresponding to removed model items\n                        const startIndex = args.oldIndex;\n                        for (let i = 0; i < args.oldValues.length && startIndex < this.widgets.length; ++i) {\n                            const widget = this.widgets[startIndex];\n                            widget.parent = null;\n                            widget.dispose();\n                        }\n                        // apply item offset to target model item indices in _displayIdMap\n                        this._moveDisplayIdIndices(startIndex, args.oldValues.length);\n                        // prevent jitter caused by immediate height change\n                        this._preventHeightChangeJitter();\n                    }\n                }\n                break;\n            case 'set':\n                this._setOutput(args.newIndex, args.newValues[0]);\n                break;\n            default:\n                break;\n        }\n        this.outputLengthChanged.emit(Math.min(this.model.length, this._maxNumberOutputs));\n    }\n    /**\n     * Update indices in _displayIdMap in response to element remove from model items\n     * *\n     * @param startIndex - The index of first element removed\n     *\n     * @param count - The number of elements removed from model items\n     *\n     */\n    _moveDisplayIdIndices(startIndex, count) {\n        this._displayIdMap.forEach((indices) => {\n            const rangeEnd = startIndex + count;\n            const numIndices = indices.length;\n            // reverse loop in order to prevent removing element affecting the index\n            for (let i = numIndices - 1; i >= 0; --i) {\n                const index = indices[i];\n                // remove model item indices in removed range\n                if (index >= startIndex && index < rangeEnd) {\n                    indices.splice(i, 1);\n                }\n                else if (index >= rangeEnd) {\n                    // move model item indices that were larger than range end\n                    indices[i] -= count;\n                }\n            }\n        });\n    }\n    /**\n     * Follow changes on the output model state.\n     */\n    onStateChanged(sender) {\n        const outputLength = Math.min(this.model.length, this._maxNumberOutputs);\n        for (let i = 0; i < outputLength; i++) {\n            this._setOutput(i, this.model.get(i));\n        }\n        this.outputLengthChanged.emit(outputLength);\n    }\n    /**\n     * Clear the widget inputs and outputs.\n     */\n    _clear() {\n        // Bail if there is no work to do.\n        if (!this.widgets.length) {\n            return;\n        }\n        // Remove all of our widgets.\n        const length = this.widgets.length;\n        for (let i = 0; i < length; i++) {\n            const widget = this.widgets[0];\n            widget.parent = null;\n            widget.dispose();\n        }\n        // Clear the display id map.\n        this._displayIdMap.clear();\n        // prevent jitter caused by immediate height change\n        this._preventHeightChangeJitter();\n    }\n    _preventHeightChangeJitter() {\n        // When an output area is cleared and then quickly replaced with new\n        // content (as happens with @interact in widgets, for example), the\n        // quickly changing height can make the page jitter.\n        // We introduce a small delay in the minimum height\n        // to prevent this jitter.\n        const rect = this.node.getBoundingClientRect();\n        this.node.style.minHeight = `${rect.height}px`;\n        if (this._minHeightTimeout) {\n            window.clearTimeout(this._minHeightTimeout);\n        }\n        this._minHeightTimeout = window.setTimeout(() => {\n            if (this.isDisposed) {\n                return;\n            }\n            this.node.style.minHeight = '';\n        }, 50);\n    }\n    /**\n     * Handle an input request from a kernel.\n     */\n    onInputRequest(msg, future) {\n        // Add an output widget to the end.\n        const factory = this.contentFactory;\n        const stdinPrompt = msg.content.prompt;\n        const password = msg.content.password;\n        const panel = new Panel();\n        panel.addClass(OUTPUT_AREA_ITEM_CLASS);\n        panel.addClass(OUTPUT_AREA_STDIN_ITEM_CLASS);\n        const prompt = factory.createOutputPrompt();\n        prompt.addClass(OUTPUT_AREA_PROMPT_CLASS);\n        panel.addWidget(prompt);\n        const input = factory.createStdin({\n            parent_header: msg.header,\n            prompt: stdinPrompt,\n            password,\n            future\n        });\n        input.addClass(OUTPUT_AREA_OUTPUT_CLASS);\n        panel.addWidget(input);\n        // Increase number of outputs to display the result up to the input request.\n        if (this.model.length >= this.maxNumberOutputs) {\n            this.maxNumberOutputs = this.model.length;\n        }\n        this.layout.addWidget(panel);\n        /**\n         * Wait for the stdin to complete, add it to the model (so it persists)\n         * and remove the stdin widget.\n         */\n        void input.value.then(value => {\n            // Increase number of outputs to display the result of stdin if needed.\n            if (this.model.length >= this.maxNumberOutputs) {\n                this.maxNumberOutputs = this.model.length + 1;\n            }\n            // Use stdin as the stream so it does not get combined with stdout.\n            this.model.add({\n                output_type: 'stream',\n                name: 'stdin',\n                text: value + '\\n'\n            });\n            panel.dispose();\n        });\n    }\n    /**\n     * Update an output in the layout in place.\n     */\n    _setOutput(index, model) {\n        if (index >= this._maxNumberOutputs) {\n            return;\n        }\n        const panel = this.layout.widgets[index];\n        const renderer = (panel.widgets\n            ? panel.widgets[1]\n            : panel);\n        // Check whether it is safe to reuse renderer:\n        // - Preferred mime type has not changed\n        // - Isolation has not changed\n        const mimeType = this.rendermime.preferredMimeType(model.data, model.trusted ? 'any' : 'ensure');\n        if (renderer.renderModel &&\n            Private.currentPreferredMimetype.get(renderer) === mimeType &&\n            OutputArea.isIsolated(mimeType, model.metadata) ===\n                renderer instanceof Private.IsolatedRenderer) {\n            void renderer.renderModel(model);\n        }\n        else {\n            this.layout.widgets[index].dispose();\n            this._insertOutput(index, model);\n        }\n    }\n    /**\n     * Render and insert a single output into the layout.\n     *\n     * @param index - The index of the output to be inserted.\n     * @param model - The model of the output to be inserted.\n     */\n    _insertOutput(index, model) {\n        if (index > this._maxNumberOutputs) {\n            return;\n        }\n        const layout = this.layout;\n        if (index === this._maxNumberOutputs) {\n            const warning = new Private.TrimmedOutputs(this._maxNumberOutputs, () => {\n                const lastShown = this._maxNumberOutputs;\n                this._maxNumberOutputs = Infinity;\n                this._showTrimmedOutputs(lastShown);\n            });\n            layout.insertWidget(index, this._wrappedOutput(warning));\n        }\n        else {\n            let output = this.createOutputItem(model);\n            if (output) {\n                output.toggleClass(EXECUTE_CLASS, model.executionCount !== null);\n            }\n            else {\n                output = new Widget();\n            }\n            if (!this._outputTracker.has(output)) {\n                void this._outputTracker.add(output);\n            }\n            layout.insertWidget(index, output);\n        }\n    }\n    /**\n     * A widget tracker for individual output widgets in the output area.\n     */\n    get outputTracker() {\n        return this._outputTracker;\n    }\n    /**\n     * Dispose information message and show output models from the given\n     * index to maxNumberOutputs\n     *\n     * @param lastShown Starting model index to insert.\n     */\n    _showTrimmedOutputs(lastShown) {\n        // Dispose information widget\n        this.widgets[lastShown].dispose();\n        for (let idx = lastShown; idx < this.model.length; idx++) {\n            this._insertOutput(idx, this.model.get(idx));\n        }\n        this.outputLengthChanged.emit(Math.min(this.model.length, this._maxNumberOutputs));\n    }\n    /**\n     * Create an output item with a prompt and actual output\n     *\n     * @returns a rendered widget, or null if we cannot render\n     * #### Notes\n     */\n    createOutputItem(model) {\n        const output = this.createRenderedMimetype(model);\n        if (!output) {\n            return null;\n        }\n        return this._wrappedOutput(output, model.executionCount);\n    }\n    /**\n     * Render a mimetype\n     */\n    createRenderedMimetype(model) {\n        const mimeType = this.rendermime.preferredMimeType(model.data, model.trusted ? 'any' : 'ensure');\n        if (!mimeType) {\n            return null;\n        }\n        let output = this.rendermime.createRenderer(mimeType);\n        const isolated = OutputArea.isIsolated(mimeType, model.metadata);\n        if (isolated === true) {\n            output = new Private.IsolatedRenderer(output);\n        }\n        Private.currentPreferredMimetype.set(output, mimeType);\n        output.renderModel(model).catch(error => {\n            // Manually append error message to output\n            const pre = document.createElement('pre');\n            pre.textContent = `Javascript Error: ${error.message}`;\n            output.node.appendChild(pre);\n            // Remove mime-type-specific CSS classes\n            output.node.className = 'lm-Widget jp-RenderedText';\n            output.node.setAttribute('data-mime-type', 'application/vnd.jupyter.stderr');\n        });\n        return output;\n    }\n    /**\n     * Wrap a output widget within a output panel\n     *\n     * @param output Output widget to wrap\n     * @param executionCount Execution count\n     * @returns The output panel\n     */\n    _wrappedOutput(output, executionCount = null) {\n        const panel = new Private.OutputPanel();\n        panel.addClass(OUTPUT_AREA_ITEM_CLASS);\n        const prompt = this.contentFactory.createOutputPrompt();\n        prompt.executionCount = executionCount;\n        prompt.addClass(OUTPUT_AREA_PROMPT_CLASS);\n        panel.addWidget(prompt);\n        output.addClass(OUTPUT_AREA_OUTPUT_CLASS);\n        panel.addWidget(output);\n        return panel;\n    }\n}\nexport class SimplifiedOutputArea extends OutputArea {\n    /**\n     * Handle an input request from a kernel by doing nothing.\n     */\n    onInputRequest(msg, future) {\n        return;\n    }\n    /**\n     * Create an output item without a prompt, just the output widgets\n     */\n    createOutputItem(model) {\n        const output = this.createRenderedMimetype(model);\n        if (output) {\n            output.addClass(OUTPUT_AREA_OUTPUT_CLASS);\n        }\n        return output;\n    }\n}\n/**\n * A namespace for OutputArea statics.\n */\n(function (OutputArea) {\n    /**\n     * Execute code on an output area.\n     */\n    async function execute(code, output, sessionContext, metadata) {\n        var _a;\n        // Override the default for `stop_on_error`.\n        let stopOnError = true;\n        if (metadata &&\n            Array.isArray(metadata.tags) &&\n            metadata.tags.indexOf('raises-exception') !== -1) {\n            stopOnError = false;\n        }\n        const content = {\n            code,\n            stop_on_error: stopOnError\n        };\n        const kernel = (_a = sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel;\n        if (!kernel) {\n            throw new Error('Session has no kernel.');\n        }\n        const future = kernel.requestExecute(content, false, metadata);\n        output.future = future;\n        return future.done;\n    }\n    OutputArea.execute = execute;\n    function isIsolated(mimeType, metadata) {\n        const mimeMd = metadata[mimeType];\n        // mime-specific higher priority\n        if (mimeMd && mimeMd['isolated'] !== undefined) {\n            return !!mimeMd['isolated'];\n        }\n        else {\n            // fallback on global\n            return !!metadata['isolated'];\n        }\n    }\n    OutputArea.isIsolated = isIsolated;\n    /**\n     * The default implementation of `IContentFactory`.\n     */\n    class ContentFactory {\n        /**\n         * Create the output prompt for the widget.\n         */\n        createOutputPrompt() {\n            return new OutputPrompt();\n        }\n        /**\n         * Create an stdin widget.\n         */\n        createStdin(options) {\n            return new Stdin(options);\n        }\n    }\n    OutputArea.ContentFactory = ContentFactory;\n    /**\n     * The default `ContentFactory` instance.\n     */\n    OutputArea.defaultContentFactory = new ContentFactory();\n})(OutputArea || (OutputArea = {}));\n/**\n * The default output prompt implementation\n */\nexport class OutputPrompt extends Widget {\n    /*\n     * Create an output prompt widget.\n     */\n    constructor() {\n        super();\n        this._executionCount = null;\n        this.addClass(OUTPUT_PROMPT_CLASS);\n    }\n    /**\n     * The execution count for the prompt.\n     */\n    get executionCount() {\n        return this._executionCount;\n    }\n    set executionCount(value) {\n        this._executionCount = value;\n        if (value === null) {\n            this.node.textContent = '';\n        }\n        else {\n            this.node.textContent = `[${value}]:`;\n        }\n    }\n}\n/**\n * The default stdin widget.\n */\nexport class Stdin extends Widget {\n    /**\n     * Construct a new input widget.\n     */\n    constructor(options) {\n        super({\n            node: Private.createInputWidgetNode(options.prompt, options.password)\n        });\n        this._promise = new PromiseDelegate();\n        this.addClass(STDIN_CLASS);\n        this._input = this.node.getElementsByTagName('input')[0];\n        this._input.focus();\n        this._future = options.future;\n        this._parentHeader = options.parent_header;\n        this._value = options.prompt + ' ';\n    }\n    /**\n     * The value of the widget.\n     */\n    get value() {\n        return this._promise.promise.then(() => this._value);\n    }\n    /**\n     * Handle the DOM events for the widget.\n     *\n     * @param event - The DOM event sent to the widget.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the dock panel's node. It should\n     * not be called directly by user code.\n     */\n    handleEvent(event) {\n        const input = this._input;\n        if (event.type === 'keydown') {\n            if (event.keyCode === 13) {\n                // Enter\n                this._future.sendInputReply({\n                    status: 'ok',\n                    value: input.value\n                }, this._parentHeader);\n                if (input.type === 'password') {\n                    this._value += Array(input.value.length + 1).join('·');\n                }\n                else {\n                    this._value += input.value;\n                }\n                this._promise.resolve(void 0);\n            }\n        }\n    }\n    /**\n     * Handle `after-attach` messages sent to the widget.\n     */\n    onAfterAttach(msg) {\n        this._input.addEventListener('keydown', this);\n        this.update();\n    }\n    /**\n     * Handle `update-request` messages sent to the widget.\n     */\n    onUpdateRequest(msg) {\n        this._input.focus();\n    }\n    /**\n     * Handle `before-detach` messages sent to the widget.\n     */\n    onBeforeDetach(msg) {\n        this._input.removeEventListener('keydown', this);\n    }\n}\n/** ****************************************************************************\n * Private namespace\n ******************************************************************************/\n/**\n * A namespace for private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Create the node for an InputWidget.\n     */\n    function createInputWidgetNode(prompt, password) {\n        const node = document.createElement('div');\n        const promptNode = document.createElement('pre');\n        promptNode.className = STDIN_PROMPT_CLASS;\n        promptNode.textContent = prompt;\n        const input = document.createElement('input');\n        input.className = STDIN_INPUT_CLASS;\n        if (password) {\n            input.type = 'password';\n        }\n        node.appendChild(promptNode);\n        promptNode.appendChild(input);\n        return node;\n    }\n    Private.createInputWidgetNode = createInputWidgetNode;\n    /**\n     * A renderer for IFrame data.\n     */\n    class IsolatedRenderer extends Widget {\n        /**\n         * Create an isolated renderer.\n         */\n        constructor(wrapped) {\n            super({ node: document.createElement('iframe') });\n            this.addClass('jp-mod-isolated');\n            this._wrapped = wrapped;\n            // Once the iframe is loaded, the subarea is dynamically inserted\n            const iframe = this.node;\n            iframe.frameBorder = '0';\n            iframe.scrolling = 'auto';\n            iframe.addEventListener('load', () => {\n                // Workaround needed by Firefox, to properly render svg inside\n                // iframes, see https://stackoverflow.com/questions/10177190/\n                // svg-dynamically-added-to-iframe-does-not-render-correctly\n                iframe.contentDocument.open();\n                // Insert the subarea into the iframe\n                // We must directly write the html. At this point, subarea doesn't\n                // contain any user content.\n                iframe.contentDocument.write(this._wrapped.node.innerHTML);\n                iframe.contentDocument.close();\n                const body = iframe.contentDocument.body;\n                // Adjust the iframe height automatically\n                iframe.style.height = `${body.scrollHeight}px`;\n                iframe.heightChangeObserver = new ResizeObserver(() => {\n                    iframe.style.height = `${body.scrollHeight}px`;\n                });\n                iframe.heightChangeObserver.observe(body);\n            });\n        }\n        /**\n         * Render a mime model.\n         *\n         * @param model - The mime model to render.\n         *\n         * @returns A promise which resolves when rendering is complete.\n         *\n         * #### Notes\n         * This method may be called multiple times during the lifetime\n         * of the widget to update it if and when new data is available.\n         */\n        renderModel(model) {\n            return this._wrapped.renderModel(model);\n        }\n    }\n    Private.IsolatedRenderer = IsolatedRenderer;\n    Private.currentPreferredMimetype = new AttachedProperty({\n        name: 'preferredMimetype',\n        create: owner => ''\n    });\n    /**\n     * A `Panel` that's focused by a `contextmenu` event.\n     */\n    class OutputPanel extends Panel {\n        /**\n         * Construct a new `OutputPanel` widget.\n         */\n        constructor(options) {\n            super(options);\n        }\n        /**\n         * A callback that focuses on the widget.\n         */\n        _onContext(_) {\n            this.node.focus();\n        }\n        /**\n         * Handle `after-attach` messages sent to the widget.\n         */\n        onAfterAttach(msg) {\n            super.onAfterAttach(msg);\n            this.node.addEventListener('contextmenu', this._onContext.bind(this));\n        }\n        /**\n         * Handle `before-detach` messages sent to the widget.\n         */\n        onBeforeDetach(msg) {\n            super.onAfterDetach(msg);\n            this.node.removeEventListener('contextmenu', this._onContext.bind(this));\n        }\n    }\n    Private.OutputPanel = OutputPanel;\n    /**\n     * Trimmed outputs information widget.\n     */\n    class TrimmedOutputs extends Widget {\n        /**\n         * Widget constructor\n         *\n         * ### Notes\n         * The widget will be disposed on click after calling the callback.\n         *\n         * @param maxNumberOutputs Maximal number of outputs to display\n         * @param onClick Callback on click event on the widget\n         */\n        constructor(maxNumberOutputs, onClick) {\n            const node = document.createElement('div');\n            node.insertAdjacentHTML('afterbegin', `<a>\n          <pre>Output of this cell has been trimmed on the initial display.</pre>\n          <pre>Displaying the first ${maxNumberOutputs} top outputs.</pre>\n          <pre>Click on this message to get the complete output.</pre>\n        </a>`);\n            super({\n                node\n            });\n            this._onClick = onClick;\n            this.addClass('jp-TrimmedOutputs');\n            this.addClass('jp-RenderedHTMLCommon');\n        }\n        /**\n         * Handle the DOM events for widget.\n         *\n         * @param event - The DOM event sent to the widget.\n         *\n         * #### Notes\n         * This method implements the DOM `EventListener` interface and is\n         * called in response to events on the widget's DOM node. It should\n         * not be called directly by user code.\n         */\n        handleEvent(event) {\n            if (event.type === 'click') {\n                this._onClick(event);\n            }\n        }\n        /**\n         * Handle `after-attach` messages for the widget.\n         */\n        onAfterAttach(msg) {\n            super.onAfterAttach(msg);\n            this.node.addEventListener('click', this);\n        }\n        /**\n         * A message handler invoked on a `'before-detach'`\n         * message\n         */\n        onBeforeDetach(msg) {\n            super.onBeforeDetach(msg);\n            this.node.removeEventListener('click', this);\n        }\n    }\n    Private.TrimmedOutputs = TrimmedOutputs;\n})(Private || (Private = {}));\n//# sourceMappingURL=widget.js.map"],"names":["Private","OutputAreaModel","constructor","options","this","clearNext","_trusted","_isDisposed","_stateChanged","Signal","_changed","trusted","contentFactory","defaultContentFactory","list","ObservableList","values","each","value","_add","changed","connect","_onListChanged","stateChanged","length","i","item","get","toJSON","dispose","_createItem","set","isDisposed","index","JSONExt","normalize","add","output","clear","wait","_lastStream","fromJSON","toArray","map","name","_lastName","shouldCombine","lastModel","text","removeOverwrittenChars","push","createOutputModel","_onGenericChange","sender","args","emit","ContentFactory","OutputModel","Array","isArray","join","txt","replace","search","base","match","insert","slice","fixCarriageReturn","tmp","fixBackspace","OUTPUT_AREA_ITEM_CLASS","OUTPUT_AREA_OUTPUT_CLASS","OUTPUT_AREA_PROMPT_CLASS","OutputArea","Widget","_a","super","outputLengthChanged","_onIOPub","msg","model","msgType","header","msg_type","displayId","content","transient","targets","Object","assign","output_type","_displayIdMap","_onExecuteReply","status","payload","pages","filter","source","data","JSON","parse","stringify","metadata","_minHeightTimeout","Map","_outputTracker","WidgetTracker","namespace","UUID","addClass","layout","PanelLayout","rendermime","_maxNumberOutputs","maxNumberOutputs","Infinity","Math","min","_insertOutput","onModelChanged","onStateChanged","widgets","future","_future","Error","_clear","onIOPub","onReply","onStdin","KernelMessage","onInputRequest","limit","console","warn","lastShown","_showTrimmedOutputs","type","newIndex","newValues","startIndex","oldIndex","oldValues","widget","parent","_moveDisplayIdIndices","_preventHeightChangeJitter","_setOutput","count","forEach","indices","rangeEnd","splice","outputLength","rect","node","getBoundingClientRect","style","minHeight","height","window","clearTimeout","setTimeout","factory","stdinPrompt","prompt","password","panel","Panel","createOutputPrompt","addWidget","input","createStdin","parent_header","then","renderer","mimeType","preferredMimeType","renderModel","currentPreferredMimetype","isIsolated","IsolatedRenderer","warning","TrimmedOutputs","insertWidget","_wrappedOutput","createOutputItem","toggleClass","executionCount","has","outputTracker","idx","createRenderedMimetype","createRenderer","catch","error","pre","document","createElement","textContent","message","appendChild","className","setAttribute","OutputPanel","SimplifiedOutputArea","execute","async","code","sessionContext","stopOnError","tags","indexOf","stop_on_error","kernel","session","requestExecute","done","mimeMd","undefined","OutputPrompt","Stdin","_executionCount","createInputWidgetNode","_promise","PromiseDelegate","_input","getElementsByTagName","focus","_parentHeader","_value","promise","handleEvent","event","keyCode","sendInputReply","resolve","onAfterAttach","addEventListener","update","onUpdateRequest","onBeforeDetach","removeEventListener","promptNode","wrapped","_wrapped","iframe","frameBorder","scrolling","contentDocument","open","write","innerHTML","close","body","scrollHeight","heightChangeObserver","observe","AttachedProperty","create","owner","_onContext","_","bind","onAfterDetach","onClick","insertAdjacentHTML","_onClick"],"sourceRoot":""}
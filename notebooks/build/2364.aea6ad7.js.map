{"version":3,"file":"2364.aea6ad7.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/notebook-extension/lib/nboutput.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/notebook-extension/lib/index.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { ILoggerRegistry } from '@jupyterlab/logconsole';\nimport { INotebookTracker } from '@jupyterlab/notebook';\nimport { KernelMessage } from '@jupyterlab/services';\n/**\n * The Log Console extension.\n */\nexport const logNotebookOutput = {\n    activate: activateNBOutput,\n    id: '@jupyterlab/notebook-extension:log-output',\n    requires: [INotebookTracker],\n    optional: [ILoggerRegistry],\n    autoStart: true\n};\nfunction activateNBOutput(app, nbtracker, loggerRegistry) {\n    if (!loggerRegistry) {\n        // Automatically disable if logconsole is missing\n        return;\n    }\n    function registerNB(nb) {\n        function logOutput(msg, levelNormal, levelError) {\n            if (KernelMessage.isDisplayDataMsg(msg) ||\n                KernelMessage.isStreamMsg(msg) ||\n                KernelMessage.isErrorMsg(msg) ||\n                KernelMessage.isExecuteResultMsg(msg)) {\n                const logger = loggerRegistry.getLogger(nb.context.path);\n                logger.rendermime = nb.content.rendermime;\n                const data = Object.assign(Object.assign({}, msg.content), { output_type: msg.header.msg_type });\n                let level = levelNormal;\n                if (KernelMessage.isErrorMsg(msg) ||\n                    (KernelMessage.isStreamMsg(msg) && msg.content.name === 'stderr')) {\n                    level = levelError;\n                }\n                logger.log({ type: 'output', data, level });\n            }\n        }\n        // There is overlap here since unhandled messages are also emitted in the\n        // iopubMessage signal. However, unhandled messages warrant a higher log\n        // severity, so we'll accept that they are logged twice.\n        nb.context.sessionContext.iopubMessage.connect((_, msg) => logOutput(msg, 'info', 'info'));\n        nb.context.sessionContext.unhandledMessage.connect((_, msg) => logOutput(msg, 'warning', 'error'));\n    }\n    nbtracker.forEach(nb => registerNB(nb));\n    nbtracker.widgetAdded.connect((_, nb) => registerNB(nb));\n}\n//# sourceMappingURL=nboutput.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * @packageDocumentation\n * @module notebook-extension\n */\nimport { ILabShell, ILayoutRestorer } from '@jupyterlab/application';\nimport { createToolbarFactory, Dialog, ICommandPalette, InputDialog, ISessionContextDialogs, IToolbarWidgetRegistry, MainAreaWidget, sessionContextDialogs, showDialog, Toolbar, WidgetTracker } from '@jupyterlab/apputils';\nimport { MarkdownCell } from '@jupyterlab/cells';\nimport { IEditorServices } from '@jupyterlab/codeeditor';\nimport { PageConfig } from '@jupyterlab/coreutils';\nimport { IDocumentManager } from '@jupyterlab/docmanager';\nimport { ToolbarItems as DocToolbarItems } from '@jupyterlab/docmanager-extension';\nimport { IFileBrowserFactory } from '@jupyterlab/filebrowser';\nimport { ILauncher } from '@jupyterlab/launcher';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport { CommandEditStatus, ExecutionIndicator, INotebookTools, INotebookTracker, INotebookWidgetFactory, NotebookActions, NotebookModelFactory, NotebookPanel, NotebookTools, NotebookTracker, NotebookTrustStatus, NotebookWidgetFactory, StaticNotebook, ToolbarItems } from '@jupyterlab/notebook';\nimport { IPropertyInspectorProvider } from '@jupyterlab/property-inspector';\nimport { IRenderMimeRegistry } from '@jupyterlab/rendermime';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { IStateDB } from '@jupyterlab/statedb';\nimport { IStatusBar } from '@jupyterlab/statusbar';\nimport { ITranslator, nullTranslator } from '@jupyterlab/translation';\nimport { addAboveIcon, addBelowIcon, buildIcon, copyIcon, cutIcon, duplicateIcon, moveDownIcon, moveUpIcon, notebookIcon, pasteIcon } from '@jupyterlab/ui-components';\nimport { ArrayExt } from '@lumino/algorithm';\nimport { JSONExt, UUID } from '@lumino/coreutils';\nimport { DisposableSet } from '@lumino/disposable';\nimport { MessageLoop } from '@lumino/messaging';\nimport { Panel } from '@lumino/widgets';\nimport { logNotebookOutput } from './nboutput';\n/**\n * The command IDs used by the notebook plugin.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.createNew = 'notebook:create-new';\n    CommandIDs.interrupt = 'notebook:interrupt-kernel';\n    CommandIDs.restart = 'notebook:restart-kernel';\n    CommandIDs.restartClear = 'notebook:restart-clear-output';\n    CommandIDs.restartAndRunToSelected = 'notebook:restart-and-run-to-selected';\n    CommandIDs.restartRunAll = 'notebook:restart-run-all';\n    CommandIDs.reconnectToKernel = 'notebook:reconnect-to-kernel';\n    CommandIDs.changeKernel = 'notebook:change-kernel';\n    CommandIDs.createConsole = 'notebook:create-console';\n    CommandIDs.createOutputView = 'notebook:create-output-view';\n    CommandIDs.clearAllOutputs = 'notebook:clear-all-cell-outputs';\n    CommandIDs.closeAndShutdown = 'notebook:close-and-shutdown';\n    CommandIDs.trust = 'notebook:trust';\n    CommandIDs.exportToFormat = 'notebook:export-to-format';\n    CommandIDs.run = 'notebook:run-cell';\n    CommandIDs.runAndAdvance = 'notebook:run-cell-and-select-next';\n    CommandIDs.runAndInsert = 'notebook:run-cell-and-insert-below';\n    CommandIDs.runInConsole = 'notebook:run-in-console';\n    CommandIDs.runAll = 'notebook:run-all-cells';\n    CommandIDs.runAllAbove = 'notebook:run-all-above';\n    CommandIDs.runAllBelow = 'notebook:run-all-below';\n    CommandIDs.renderAllMarkdown = 'notebook:render-all-markdown';\n    CommandIDs.toCode = 'notebook:change-cell-to-code';\n    CommandIDs.toMarkdown = 'notebook:change-cell-to-markdown';\n    CommandIDs.toRaw = 'notebook:change-cell-to-raw';\n    CommandIDs.cut = 'notebook:cut-cell';\n    CommandIDs.copy = 'notebook:copy-cell';\n    CommandIDs.pasteAbove = 'notebook:paste-cell-above';\n    CommandIDs.pasteBelow = 'notebook:paste-cell-below';\n    CommandIDs.duplicateBelow = 'notebook:duplicate-below';\n    CommandIDs.pasteAndReplace = 'notebook:paste-and-replace-cell';\n    CommandIDs.moveUp = 'notebook:move-cell-up';\n    CommandIDs.moveDown = 'notebook:move-cell-down';\n    CommandIDs.clearOutputs = 'notebook:clear-cell-output';\n    CommandIDs.deleteCell = 'notebook:delete-cell';\n    CommandIDs.insertAbove = 'notebook:insert-cell-above';\n    CommandIDs.insertBelow = 'notebook:insert-cell-below';\n    CommandIDs.selectAbove = 'notebook:move-cursor-up';\n    CommandIDs.selectBelow = 'notebook:move-cursor-down';\n    CommandIDs.extendAbove = 'notebook:extend-marked-cells-above';\n    CommandIDs.extendTop = 'notebook:extend-marked-cells-top';\n    CommandIDs.extendBelow = 'notebook:extend-marked-cells-below';\n    CommandIDs.extendBottom = 'notebook:extend-marked-cells-bottom';\n    CommandIDs.selectAll = 'notebook:select-all';\n    CommandIDs.deselectAll = 'notebook:deselect-all';\n    CommandIDs.editMode = 'notebook:enter-edit-mode';\n    CommandIDs.merge = 'notebook:merge-cells';\n    CommandIDs.mergeAbove = 'notebook:merge-cell-above';\n    CommandIDs.mergeBelow = 'notebook:merge-cell-below';\n    CommandIDs.split = 'notebook:split-cell-at-cursor';\n    CommandIDs.commandMode = 'notebook:enter-command-mode';\n    CommandIDs.toggleAllLines = 'notebook:toggle-all-cell-line-numbers';\n    CommandIDs.undoCellAction = 'notebook:undo-cell-action';\n    CommandIDs.redoCellAction = 'notebook:redo-cell-action';\n    CommandIDs.markdown1 = 'notebook:change-cell-to-heading-1';\n    CommandIDs.markdown2 = 'notebook:change-cell-to-heading-2';\n    CommandIDs.markdown3 = 'notebook:change-cell-to-heading-3';\n    CommandIDs.markdown4 = 'notebook:change-cell-to-heading-4';\n    CommandIDs.markdown5 = 'notebook:change-cell-to-heading-5';\n    CommandIDs.markdown6 = 'notebook:change-cell-to-heading-6';\n    CommandIDs.hideCode = 'notebook:hide-cell-code';\n    CommandIDs.showCode = 'notebook:show-cell-code';\n    CommandIDs.hideAllCode = 'notebook:hide-all-cell-code';\n    CommandIDs.showAllCode = 'notebook:show-all-cell-code';\n    CommandIDs.hideOutput = 'notebook:hide-cell-outputs';\n    CommandIDs.showOutput = 'notebook:show-cell-outputs';\n    CommandIDs.hideAllOutputs = 'notebook:hide-all-cell-outputs';\n    CommandIDs.showAllOutputs = 'notebook:show-all-cell-outputs';\n    CommandIDs.toggleRenderSideBySideCurrentNotebook = 'notebook:toggle-render-side-by-side-current';\n    CommandIDs.setSideBySideRatio = 'notebook:set-side-by-side-ratio';\n    CommandIDs.enableOutputScrolling = 'notebook:enable-output-scrolling';\n    CommandIDs.disableOutputScrolling = 'notebook:disable-output-scrolling';\n    CommandIDs.selectLastRunCell = 'notebook:select-last-run-cell';\n    CommandIDs.replaceSelection = 'notebook:replace-selection';\n    CommandIDs.autoClosingBrackets = 'notebook:toggle-autoclosing-brackets';\n    CommandIDs.toggleCollapseCmd = 'Collapsible_Headings:Toggle_Collapse';\n    CommandIDs.collapseAllCmd = 'Collapsible_Headings:Collapse_All';\n    CommandIDs.expandAllCmd = 'Collapsible_Headings:Expand_All';\n    CommandIDs.copyToClipboard = 'notebook:copy-to-clipboard';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * The name of the factory that creates notebooks.\n */\nconst FACTORY = 'Notebook';\n/**\n * The excluded Export To ...\n * (returned from nbconvert's export list)\n */\nconst FORMAT_EXCLUDE = ['notebook', 'python', 'custom'];\n/**\n * Setting Id storing the customized toolbar definition.\n */\nconst PANEL_SETTINGS = '@jupyterlab/notebook-extension:panel';\n/**\n * The id to use on the style tag for the side by side margins.\n */\nconst SIDE_BY_SIDE_STYLE_ID = 'jp-NotebookExtension-sideBySideMargins';\n/**\n * The notebook widget tracker provider.\n */\nconst trackerPlugin = {\n    id: '@jupyterlab/notebook-extension:tracker',\n    provides: INotebookTracker,\n    requires: [INotebookWidgetFactory, ITranslator],\n    optional: [\n        ICommandPalette,\n        IFileBrowserFactory,\n        ILauncher,\n        ILayoutRestorer,\n        IMainMenu,\n        ISettingRegistry,\n        ISessionContextDialogs\n    ],\n    activate: activateNotebookHandler,\n    autoStart: true\n};\n/**\n * The notebook cell factory provider.\n */\nconst factory = {\n    id: '@jupyterlab/notebook-extension:factory',\n    provides: NotebookPanel.IContentFactory,\n    requires: [IEditorServices],\n    autoStart: true,\n    activate: (app, editorServices) => {\n        const editorFactory = editorServices.factoryService.newInlineEditor;\n        return new NotebookPanel.ContentFactory({ editorFactory });\n    }\n};\n/**\n * The notebook tools extension.\n */\nconst tools = {\n    activate: activateNotebookTools,\n    provides: INotebookTools,\n    id: '@jupyterlab/notebook-extension:tools',\n    autoStart: true,\n    requires: [INotebookTracker, IEditorServices, IStateDB, ITranslator],\n    optional: [IPropertyInspectorProvider]\n};\n/**\n * A plugin providing a CommandEdit status item.\n */\nexport const commandEditItem = {\n    id: '@jupyterlab/notebook-extension:mode-status',\n    autoStart: true,\n    requires: [INotebookTracker, ITranslator],\n    optional: [IStatusBar],\n    activate: (app, tracker, translator, statusBar) => {\n        if (!statusBar) {\n            // Automatically disable if statusbar missing\n            return;\n        }\n        const { shell } = app;\n        const item = new CommandEditStatus(translator);\n        // Keep the status item up-to-date with the current notebook.\n        tracker.currentChanged.connect(() => {\n            const current = tracker.currentWidget;\n            item.model.notebook = current && current.content;\n        });\n        statusBar.registerStatusItem('@jupyterlab/notebook-extension:mode-status', {\n            item,\n            align: 'right',\n            rank: 4,\n            isActive: () => !!shell.currentWidget &&\n                !!tracker.currentWidget &&\n                shell.currentWidget === tracker.currentWidget\n        });\n    }\n};\n/**\n * A plugin that provides a execution indicator item to the status bar.\n */\nexport const executionIndicator = {\n    id: '@jupyterlab/notebook-extension:execution-indicator',\n    autoStart: true,\n    requires: [INotebookTracker, ILabShell, ITranslator],\n    optional: [IStatusBar, ISettingRegistry],\n    activate: (app, notebookTracker, labShell, translator, statusBar, settingRegistry) => {\n        let statusbarItem;\n        let labShellCurrentChanged;\n        let statusBarDisposable;\n        const updateSettings = (settings) => {\n            var _a, _b;\n            let { showOnToolBar, showProgress } = settings;\n            if (!showOnToolBar) {\n                // Status bar mode, only one `ExecutionIndicator` is needed.\n                if (!statusBar) {\n                    // Automatically disable if statusbar missing\n                    return;\n                }\n                if (!(statusbarItem === null || statusbarItem === void 0 ? void 0 : statusbarItem.model)) {\n                    statusbarItem = new ExecutionIndicator(translator);\n                    labShellCurrentChanged = (_, change) => {\n                        const { newValue } = change;\n                        if (newValue && notebookTracker.has(newValue)) {\n                            const panel = newValue;\n                            statusbarItem.model.attachNotebook({\n                                content: panel.content,\n                                context: panel.sessionContext\n                            });\n                        }\n                    };\n                    statusBarDisposable = statusBar.registerStatusItem('@jupyterlab/notebook-extension:execution-indicator', {\n                        item: statusbarItem,\n                        align: 'left',\n                        rank: 3,\n                        isActive: () => {\n                            const current = labShell.currentWidget;\n                            return !!current && notebookTracker.has(current);\n                        }\n                    });\n                    statusbarItem.model.attachNotebook({\n                        content: (_a = notebookTracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content,\n                        context: (_b = notebookTracker.currentWidget) === null || _b === void 0 ? void 0 : _b.sessionContext\n                    });\n                    labShell.currentChanged.connect(labShellCurrentChanged);\n                    statusbarItem.disposed.connect(() => {\n                        labShell.currentChanged.disconnect(labShellCurrentChanged);\n                    });\n                }\n                statusbarItem.model.displayOption = {\n                    showOnToolBar,\n                    showProgress\n                };\n            }\n            else {\n                //Remove old indicator widget on status bar\n                if (statusBarDisposable) {\n                    labShell.currentChanged.disconnect(labShellCurrentChanged);\n                    statusBarDisposable.dispose();\n                }\n            }\n        };\n        if (settingRegistry) {\n            // Indicator is default in tool bar, user needs to specify its\n            // position in settings in order to have indicator on status bar.\n            const loadSettings = settingRegistry.load(trackerPlugin.id);\n            Promise.all([loadSettings, app.restored])\n                .then(([settings]) => {\n                updateSettings(ExecutionIndicator.getSettingValue(settings));\n                settings.changed.connect(sender => updateSettings(ExecutionIndicator.getSettingValue(sender)));\n            })\n                .catch((reason) => {\n                console.error(reason.message);\n            });\n        }\n    }\n};\n/**\n * A plugin providing export commands in the main menu and command palette\n */\nexport const exportPlugin = {\n    id: '@jupyterlab/notebook-extension:export',\n    autoStart: true,\n    requires: [ITranslator, INotebookTracker],\n    optional: [IMainMenu, ICommandPalette],\n    activate: (app, translator, tracker, mainMenu, palette) => {\n        var _a;\n        const trans = translator.load('jupyterlab');\n        const { commands, shell } = app;\n        const services = app.serviceManager;\n        const isEnabled = () => {\n            return Private.isEnabled(shell, tracker);\n        };\n        commands.addCommand(CommandIDs.exportToFormat, {\n            label: args => {\n                const formatLabel = args['label'];\n                return args['isPalette']\n                    ? trans.__('Save and Export Notebook: %1', formatLabel)\n                    : formatLabel;\n            },\n            execute: args => {\n                const current = getCurrent(tracker, shell, args);\n                if (!current) {\n                    return;\n                }\n                const url = PageConfig.getNBConvertURL({\n                    format: args['format'],\n                    download: true,\n                    path: current.context.path\n                });\n                const { context } = current;\n                if (context.model.dirty && !context.model.readOnly) {\n                    return context.save().then(() => {\n                        window.open(url, '_blank', 'noopener');\n                    });\n                }\n                return new Promise(resolve => {\n                    window.open(url, '_blank', 'noopener');\n                    resolve(undefined);\n                });\n            },\n            isEnabled\n        });\n        // Add a notebook group to the File menu.\n        let exportTo;\n        if (mainMenu) {\n            exportTo = (_a = mainMenu.fileMenu.items.find(item => {\n                var _a;\n                return item.type === 'submenu' &&\n                    ((_a = item.submenu) === null || _a === void 0 ? void 0 : _a.id) === 'jp-mainmenu-file-notebookexport';\n            })) === null || _a === void 0 ? void 0 : _a.submenu;\n        }\n        void services.nbconvert.getExportFormats().then(response => {\n            if (response) {\n                const formatLabels = Private.getFormatLabels(translator);\n                // Convert export list to palette and menu items.\n                const formatList = Object.keys(response);\n                formatList.forEach(function (key) {\n                    const capCaseKey = trans.__(key[0].toUpperCase() + key.substr(1));\n                    const labelStr = formatLabels[key] ? formatLabels[key] : capCaseKey;\n                    let args = {\n                        format: key,\n                        label: labelStr,\n                        isPalette: false\n                    };\n                    if (FORMAT_EXCLUDE.indexOf(key) === -1) {\n                        if (exportTo) {\n                            exportTo.addItem({\n                                command: CommandIDs.exportToFormat,\n                                args: args\n                            });\n                        }\n                        if (palette) {\n                            args = {\n                                format: key,\n                                label: labelStr,\n                                isPalette: true\n                            };\n                            const category = trans.__('Notebook Operations');\n                            palette.addItem({\n                                command: CommandIDs.exportToFormat,\n                                category,\n                                args\n                            });\n                        }\n                    }\n                });\n            }\n        });\n    }\n};\n/**\n * A plugin that adds a notebook trust status item to the status bar.\n */\nexport const notebookTrustItem = {\n    id: '@jupyterlab/notebook-extension:trust-status',\n    autoStart: true,\n    requires: [INotebookTracker, ITranslator],\n    optional: [IStatusBar],\n    activate: (app, tracker, tranlator, statusBar) => {\n        if (!statusBar) {\n            // Automatically disable if statusbar missing\n            return;\n        }\n        const { shell } = app;\n        const item = new NotebookTrustStatus(tranlator);\n        // Keep the status item up-to-date with the current notebook.\n        tracker.currentChanged.connect(() => {\n            const current = tracker.currentWidget;\n            item.model.notebook = current && current.content;\n        });\n        statusBar.registerStatusItem('@jupyterlab/notebook-extension:trust-status', {\n            item,\n            align: 'right',\n            rank: 3,\n            isActive: () => !!shell.currentWidget &&\n                !!tracker.currentWidget &&\n                shell.currentWidget === tracker.currentWidget\n        });\n    }\n};\n/**\n * The notebook widget factory provider.\n */\nconst widgetFactoryPlugin = {\n    id: '@jupyterlab/notebook-extension:widget-factory',\n    provides: INotebookWidgetFactory,\n    requires: [\n        NotebookPanel.IContentFactory,\n        IEditorServices,\n        IRenderMimeRegistry,\n        ISessionContextDialogs,\n        IToolbarWidgetRegistry,\n        ITranslator\n    ],\n    optional: [ISettingRegistry],\n    activate: activateWidgetFactory,\n    autoStart: true\n};\n/**\n * The cloned output provider.\n */\nconst clonedOutputsPlugin = {\n    id: '@jupyterlab/notebook-extension:cloned-outputs',\n    requires: [IDocumentManager, INotebookTracker, ITranslator],\n    optional: [ILayoutRestorer],\n    activate: activateClonedOutputs,\n    autoStart: true\n};\n/**\n * A plugin for code consoles functionalities.\n */\nconst codeConsolePlugin = {\n    id: '@jupyterlab/notebook-extension:code-console',\n    requires: [INotebookTracker, ITranslator],\n    activate: activateCodeConsole,\n    autoStart: true\n};\n/**\n * A plugin to copy CodeCell outputs.\n */\nconst copyOutputPlugin = {\n    id: '@jupyterlab/notebook-extensions:copy-output',\n    activate: activateCopyOutput,\n    requires: [ITranslator, INotebookTracker],\n    autoStart: true\n};\n/**\n * Export the plugins as default.\n */\nconst plugins = [\n    factory,\n    trackerPlugin,\n    executionIndicator,\n    exportPlugin,\n    tools,\n    commandEditItem,\n    notebookTrustItem,\n    widgetFactoryPlugin,\n    logNotebookOutput,\n    clonedOutputsPlugin,\n    codeConsolePlugin,\n    copyOutputPlugin\n];\nexport default plugins;\n/**\n * Activate the notebook tools extension.\n */\nfunction activateNotebookTools(app, tracker, editorServices, state, translator, inspectorProvider) {\n    const trans = translator.load('jupyterlab');\n    const id = 'notebook-tools';\n    const notebookTools = new NotebookTools({ tracker, translator });\n    const activeCellTool = new NotebookTools.ActiveCellTool();\n    const slideShow = NotebookTools.createSlideShowSelector(translator);\n    const editorFactory = editorServices.factoryService.newInlineEditor;\n    const cellMetadataEditor = new NotebookTools.CellMetadataEditorTool({\n        editorFactory,\n        collapsed: false,\n        translator\n    });\n    const notebookMetadataEditor = new NotebookTools.NotebookMetadataEditorTool({\n        editorFactory,\n        translator\n    });\n    const services = app.serviceManager;\n    // Create message hook for triggers to save to the database.\n    const hook = (sender, message) => {\n        switch (message.type) {\n            case 'activate-request':\n                void state.save(id, { open: true });\n                break;\n            case 'after-hide':\n            case 'close-request':\n                void state.remove(id);\n                break;\n            default:\n                break;\n        }\n        return true;\n    };\n    const optionsMap = {};\n    optionsMap.None = null;\n    void services.nbconvert.getExportFormats().then(response => {\n        if (response) {\n            /**\n             * The excluded Cell Inspector Raw NbConvert Formats\n             * (returned from nbconvert's export list)\n             */\n            const rawFormatExclude = [\n                'pdf',\n                'slides',\n                'script',\n                'notebook',\n                'custom'\n            ];\n            let optionValueArray = [\n                [trans.__('PDF'), 'pdf'],\n                [trans.__('Slides'), 'slides'],\n                [trans.__('Script'), 'script'],\n                [trans.__('Notebook'), 'notebook'],\n                [trans.__('Custom'), 'custom']\n            ];\n            // convert exportList to palette and menu items\n            const formatList = Object.keys(response);\n            const formatLabels = Private.getFormatLabels(translator);\n            formatList.forEach(function (key) {\n                if (rawFormatExclude.indexOf(key) === -1) {\n                    const altOption = trans.__(key[0].toUpperCase() + key.substr(1));\n                    const option = formatLabels[key] ? formatLabels[key] : altOption;\n                    const mimeTypeValue = response[key].output_mimetype;\n                    optionValueArray.push([option, mimeTypeValue]);\n                }\n            });\n            const nbConvert = NotebookTools.createNBConvertSelector(optionValueArray, translator);\n            notebookTools.addItem({ tool: nbConvert, section: 'common', rank: 3 });\n        }\n    });\n    notebookTools.title.icon = buildIcon;\n    notebookTools.title.caption = trans.__('Notebook Tools');\n    notebookTools.id = id;\n    notebookTools.addItem({ tool: activeCellTool, section: 'common', rank: 1 });\n    notebookTools.addItem({ tool: slideShow, section: 'common', rank: 2 });\n    notebookTools.addItem({\n        tool: cellMetadataEditor,\n        section: 'advanced',\n        rank: 1\n    });\n    notebookTools.addItem({\n        tool: notebookMetadataEditor,\n        section: 'advanced',\n        rank: 2\n    });\n    MessageLoop.installMessageHook(notebookTools, hook);\n    if (inspectorProvider) {\n        tracker.widgetAdded.connect((sender, panel) => {\n            const inspector = inspectorProvider.register(panel);\n            inspector.render(notebookTools);\n        });\n    }\n    return notebookTools;\n}\n/**\n * Activate the notebook widget factory.\n */\nfunction activateWidgetFactory(app, contentFactory, editorServices, rendermime, sessionContextDialogs, toolbarRegistry, translator, settingRegistry) {\n    const preferKernelOption = PageConfig.getOption('notebookStartsKernel');\n    // If the option is not set, assume `true`\n    const preferKernelValue = preferKernelOption === '' || preferKernelOption.toLowerCase() === 'true';\n    const { commands } = app;\n    let toolbarFactory;\n    // Register notebook toolbar widgets\n    toolbarRegistry.registerFactory(FACTORY, 'save', panel => DocToolbarItems.createSaveButton(commands, panel.context.fileChanged));\n    toolbarRegistry.registerFactory(FACTORY, 'cellType', panel => ToolbarItems.createCellTypeItem(panel, translator));\n    toolbarRegistry.registerFactory(FACTORY, 'kernelName', panel => Toolbar.createKernelNameItem(panel.sessionContext, sessionContextDialogs, translator));\n    toolbarRegistry.registerFactory(FACTORY, 'executionProgress', panel => {\n        return ExecutionIndicator.createExecutionIndicatorItem(panel, translator, settingRegistry === null || settingRegistry === void 0 ? void 0 : settingRegistry.load(trackerPlugin.id));\n    });\n    if (settingRegistry) {\n        // Create the factory\n        toolbarFactory = createToolbarFactory(toolbarRegistry, settingRegistry, FACTORY, PANEL_SETTINGS, translator);\n    }\n    const factory = new NotebookWidgetFactory({\n        name: FACTORY,\n        fileTypes: ['notebook'],\n        modelName: 'notebook',\n        defaultFor: ['notebook'],\n        preferKernel: preferKernelValue,\n        canStartKernel: true,\n        rendermime,\n        contentFactory,\n        editorConfig: StaticNotebook.defaultEditorConfig,\n        notebookConfig: StaticNotebook.defaultNotebookConfig,\n        mimeTypeService: editorServices.mimeTypeService,\n        sessionDialogs: sessionContextDialogs,\n        toolbarFactory,\n        translator: translator\n    });\n    app.docRegistry.addWidgetFactory(factory);\n    return factory;\n}\n/**\n * Activate the plugin to create and track cloned outputs.\n */\nfunction activateClonedOutputs(app, docManager, notebookTracker, translator, restorer) {\n    const trans = translator.load('jupyterlab');\n    const clonedOutputs = new WidgetTracker({\n        namespace: 'cloned-outputs'\n    });\n    if (restorer) {\n        void restorer.restore(clonedOutputs, {\n            command: CommandIDs.createOutputView,\n            args: widget => ({\n                path: widget.content.path,\n                index: widget.content.index\n            }),\n            name: widget => `${widget.content.path}:${widget.content.index}`,\n            when: notebookTracker.restored // After the notebook widgets (but not contents).\n        });\n    }\n    const { commands, shell } = app;\n    const isEnabledAndSingleSelected = () => {\n        return Private.isEnabledAndSingleSelected(shell, notebookTracker);\n    };\n    commands.addCommand(CommandIDs.createOutputView, {\n        label: trans.__('Create New View for Output'),\n        execute: async (args) => {\n            var _a;\n            let cell;\n            let current;\n            // If we are given a notebook path and cell index, then\n            // use that, otherwise use the current active cell.\n            const path = args.path;\n            let index = args.index;\n            if (path && index !== undefined && index !== null) {\n                current = docManager.findWidget(path, FACTORY);\n                if (!current) {\n                    return;\n                }\n            }\n            else {\n                current = notebookTracker.currentWidget;\n                if (!current) {\n                    return;\n                }\n                cell = current.content.activeCell;\n                index = current.content.activeCellIndex;\n            }\n            // Create a MainAreaWidget\n            const content = new Private.ClonedOutputArea({\n                notebook: current,\n                cell,\n                index,\n                translator\n            });\n            const widget = new MainAreaWidget({ content });\n            current.context.addSibling(widget, {\n                ref: current.id,\n                mode: 'split-bottom'\n            });\n            const updateCloned = () => {\n                void clonedOutputs.save(widget);\n            };\n            current.context.pathChanged.connect(updateCloned);\n            (_a = current.context.model) === null || _a === void 0 ? void 0 : _a.cells.changed.connect(updateCloned);\n            // Add the cloned output to the output widget tracker.\n            void clonedOutputs.add(widget);\n            // Remove the output view if the parent notebook is closed.\n            current.content.disposed.connect(() => {\n                var _a;\n                current.context.pathChanged.disconnect(updateCloned);\n                (_a = current.context.model) === null || _a === void 0 ? void 0 : _a.cells.changed.disconnect(updateCloned);\n                widget.dispose();\n            });\n        },\n        isEnabled: isEnabledAndSingleSelected\n    });\n}\n/**\n * Activate the plugin to add code console functionalities\n */\nfunction activateCodeConsole(app, tracker, translator) {\n    const trans = translator.load('jupyterlab');\n    const { commands, shell } = app;\n    const isEnabled = () => Private.isEnabled(shell, tracker);\n    commands.addCommand(CommandIDs.createConsole, {\n        label: trans.__('New Console for Notebook'),\n        execute: args => {\n            const current = tracker.currentWidget;\n            if (!current) {\n                return;\n            }\n            return Private.createConsole(commands, current, args['activate']);\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.runInConsole, {\n        label: trans.__('Run Selected Text or Current Line in Console'),\n        execute: async (args) => {\n            var _a, _b;\n            // Default to not activating the notebook (thereby putting the notebook\n            // into command mode)\n            const current = tracker.currentWidget;\n            if (!current) {\n                return;\n            }\n            const { context, content } = current;\n            const cell = content.activeCell;\n            const metadata = cell === null || cell === void 0 ? void 0 : cell.model.metadata.toJSON();\n            const path = context.path;\n            // ignore action in non-code cell\n            if (!cell || cell.model.type !== 'code') {\n                return;\n            }\n            let code;\n            const editor = cell.editor;\n            const selection = editor.getSelection();\n            const { start, end } = selection;\n            const selected = start.column !== end.column || start.line !== end.line;\n            if (selected) {\n                // Get the selected code from the editor.\n                const start = editor.getOffsetAt(selection.start);\n                const end = editor.getOffsetAt(selection.end);\n                code = editor.model.value.text.substring(start, end);\n            }\n            else {\n                // no selection, find the complete statement around the current line\n                const cursor = editor.getCursorPosition();\n                const srcLines = editor.model.value.text.split('\\n');\n                let curLine = selection.start.line;\n                while (curLine < editor.lineCount &&\n                    !srcLines[curLine].replace(/\\s/g, '').length) {\n                    curLine += 1;\n                }\n                // if curLine > 0, we first do a search from beginning\n                let fromFirst = curLine > 0;\n                let firstLine = 0;\n                let lastLine = firstLine + 1;\n                // eslint-disable-next-line\n                while (true) {\n                    code = srcLines.slice(firstLine, lastLine).join('\\n');\n                    const reply = await ((_b = (_a = current.context.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel) === null || _b === void 0 ? void 0 : _b.requestIsComplete({\n                        // ipython needs an empty line at the end to correctly identify completeness of indented code\n                        code: code + '\\n\\n'\n                    }));\n                    if ((reply === null || reply === void 0 ? void 0 : reply.content.status) === 'complete') {\n                        if (curLine < lastLine) {\n                            // we find a block of complete statement containing the current line, great!\n                            while (lastLine < editor.lineCount &&\n                                !srcLines[lastLine].replace(/\\s/g, '').length) {\n                                lastLine += 1;\n                            }\n                            editor.setCursorPosition({\n                                line: lastLine,\n                                column: cursor.column\n                            });\n                            break;\n                        }\n                        else {\n                            // discard the complete statement before the current line and continue\n                            firstLine = lastLine;\n                            lastLine = firstLine + 1;\n                        }\n                    }\n                    else if (lastLine < editor.lineCount) {\n                        // if incomplete and there are more lines, add the line and check again\n                        lastLine += 1;\n                    }\n                    else if (fromFirst) {\n                        // we search from the first line and failed, we search again from current line\n                        firstLine = curLine;\n                        lastLine = curLine + 1;\n                        fromFirst = false;\n                    }\n                    else {\n                        // if we have searched both from first line and from current line and we\n                        // cannot find anything, we submit the current line.\n                        code = srcLines[curLine];\n                        while (curLine + 1 < editor.lineCount &&\n                            !srcLines[curLine + 1].replace(/\\s/g, '').length) {\n                            curLine += 1;\n                        }\n                        editor.setCursorPosition({\n                            line: curLine + 1,\n                            column: cursor.column\n                        });\n                        break;\n                    }\n                }\n            }\n            if (!code) {\n                return;\n            }\n            await commands.execute('console:open', {\n                activate: false,\n                insertMode: 'split-bottom',\n                path\n            });\n            await commands.execute('console:inject', {\n                activate: false,\n                code,\n                path,\n                metadata\n            });\n        },\n        isEnabled\n    });\n}\n/**\n * Activate the output copying extension\n */\nfunction activateCopyOutput(app, translator, tracker) {\n    const trans = translator.load('jupyterlab');\n    /**\n     * Copy the contents of an HTMLElement to the system clipboard\n     */\n    function copyElement(e) {\n        const sel = window.getSelection();\n        if (sel == null) {\n            return;\n        }\n        // Save the current selection.\n        const savedRanges = [];\n        for (let i = 0; i < sel.rangeCount; ++i) {\n            savedRanges[i] = sel.getRangeAt(i).cloneRange();\n        }\n        const range = document.createRange();\n        range.selectNodeContents(e);\n        sel.removeAllRanges();\n        sel.addRange(range);\n        document.execCommand('copy');\n        // Restore the saved selection.\n        sel.removeAllRanges();\n        savedRanges.forEach(r => sel.addRange(r));\n    }\n    app.commands.addCommand(CommandIDs.copyToClipboard, {\n        label: trans.__('Copy Output to Clipboard'),\n        execute: args => {\n            var _a;\n            const cell = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content.activeCell;\n            if (cell == null) {\n                return;\n            }\n            const output = cell.outputArea.outputTracker.currentWidget;\n            if (output == null) {\n                return;\n            }\n            const outputAreaAreas = output.node.getElementsByClassName('jp-OutputArea-output');\n            if (outputAreaAreas.length > 0) {\n                const area = outputAreaAreas[0];\n                copyElement(area);\n            }\n        }\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.copyToClipboard,\n        selector: '.jp-OutputArea-child',\n        rank: 0\n    });\n}\n/**\n * Activate the notebook handler extension.\n */\nfunction activateNotebookHandler(app, factory, translator, palette, browserFactory, launcher, restorer, mainMenu, settingRegistry, sessionDialogs) {\n    const trans = translator.load('jupyterlab');\n    const services = app.serviceManager;\n    const { commands } = app;\n    const tracker = new NotebookTracker({ namespace: 'notebook' });\n    // Fetch settings if possible.\n    const fetchSettings = settingRegistry\n        ? settingRegistry.load(trackerPlugin.id)\n        : Promise.reject(new Error(`No setting registry for ${trackerPlugin.id}`));\n    fetchSettings\n        .then(settings => {\n        updateConfig(settings);\n        settings.changed.connect(() => {\n            updateConfig(settings);\n        });\n        commands.addCommand(CommandIDs.autoClosingBrackets, {\n            execute: args => {\n                var _a;\n                const codeConfig = settings.get('codeCellConfig')\n                    .composite;\n                const markdownConfig = settings.get('markdownCellConfig')\n                    .composite;\n                const rawConfig = settings.get('rawCellConfig')\n                    .composite;\n                const anyToggled = codeConfig.autoClosingBrackets ||\n                    markdownConfig.autoClosingBrackets ||\n                    rawConfig.autoClosingBrackets;\n                const toggled = !!((_a = args['force']) !== null && _a !== void 0 ? _a : !anyToggled);\n                [\n                    codeConfig.autoClosingBrackets,\n                    markdownConfig.autoClosingBrackets,\n                    rawConfig.autoClosingBrackets\n                ] = [toggled, toggled, toggled];\n                void settings.set('codeCellConfig', codeConfig);\n                void settings.set('markdownCellConfig', markdownConfig);\n                void settings.set('rawCellConfig', rawConfig);\n            },\n            label: trans.__('Auto Close Brackets for All Notebook Cell Types'),\n            isToggled: () => ['codeCellConfig', 'markdownCellConfig', 'rawCellConfig'].some(x => settings.get(x).composite.autoClosingBrackets)\n        });\n    })\n        .catch((reason) => {\n        console.warn(reason.message);\n        updateTracker({\n            editorConfig: factory.editorConfig,\n            notebookConfig: factory.notebookConfig,\n            kernelShutdown: factory.shutdownOnClose\n        });\n    });\n    // Handle state restoration.\n    if (restorer) {\n        void restorer.restore(tracker, {\n            command: 'docmanager:open',\n            args: panel => ({ path: panel.context.path, factory: FACTORY }),\n            name: panel => panel.context.path,\n            when: services.ready\n        });\n    }\n    const registry = app.docRegistry;\n    const modelFactory = new NotebookModelFactory({\n        disableDocumentWideUndoRedo: factory.notebookConfig.disableDocumentWideUndoRedo\n    });\n    registry.addModelFactory(modelFactory);\n    addCommands(app, tracker, translator, sessionDialogs);\n    if (palette) {\n        populatePalette(palette, translator);\n    }\n    let id = 0; // The ID counter for notebook panels.\n    const ft = app.docRegistry.getFileType('notebook');\n    factory.widgetCreated.connect((sender, widget) => {\n        var _a, _b;\n        // If the notebook panel does not have an ID, assign it one.\n        widget.id = widget.id || `notebook-${++id}`;\n        // Set up the title icon\n        widget.title.icon = ft === null || ft === void 0 ? void 0 : ft.icon;\n        widget.title.iconClass = (_a = ft === null || ft === void 0 ? void 0 : ft.iconClass) !== null && _a !== void 0 ? _a : '';\n        widget.title.iconLabel = (_b = ft === null || ft === void 0 ? void 0 : ft.iconLabel) !== null && _b !== void 0 ? _b : '';\n        // Notify the widget tracker if restore data needs to update.\n        widget.context.pathChanged.connect(() => {\n            void tracker.save(widget);\n        });\n        // Add the notebook panel to the tracker.\n        void tracker.add(widget);\n    });\n    /**\n     * Update the settings of the current tracker.\n     */\n    function updateTracker(options) {\n        tracker.forEach(widget => {\n            widget.setConfig(options);\n        });\n    }\n    /**\n     * Update the setting values.\n     */\n    function updateConfig(settings) {\n        const code = Object.assign(Object.assign({}, StaticNotebook.defaultEditorConfig.code), settings.get('codeCellConfig').composite);\n        const markdown = Object.assign(Object.assign({}, StaticNotebook.defaultEditorConfig.markdown), settings.get('markdownCellConfig').composite);\n        const raw = Object.assign(Object.assign({}, StaticNotebook.defaultEditorConfig.raw), settings.get('rawCellConfig').composite);\n        factory.editorConfig = { code, markdown, raw };\n        factory.notebookConfig = {\n            scrollPastEnd: settings.get('scrollPastEnd').composite,\n            defaultCell: settings.get('defaultCell').composite,\n            recordTiming: settings.get('recordTiming').composite,\n            numberCellsToRenderDirectly: settings.get('numberCellsToRenderDirectly')\n                .composite,\n            remainingTimeBeforeRescheduling: settings.get('remainingTimeBeforeRescheduling').composite,\n            renderCellOnIdle: settings.get('renderCellOnIdle').composite,\n            observedTopMargin: settings.get('observedTopMargin').composite,\n            observedBottomMargin: settings.get('observedBottomMargin')\n                .composite,\n            maxNumberOutputs: settings.get('maxNumberOutputs').composite,\n            showEditorForReadOnlyMarkdown: settings.get('showEditorForReadOnlyMarkdown').composite,\n            disableDocumentWideUndoRedo: settings.get('experimentalDisableDocumentWideUndoRedo').composite,\n            renderingLayout: settings.get('renderingLayout').composite,\n            sideBySideLeftMarginOverride: settings.get('sideBySideLeftMarginOverride')\n                .composite,\n            sideBySideRightMarginOverride: settings.get('sideBySideRightMarginOverride').composite\n        };\n        const sideBySideMarginStyle = `.jp-mod-sideBySide.jp-Notebook .jp-Notebook-cell { \n      margin-left: ${factory.notebookConfig.sideBySideLeftMarginOverride} !important;\n      margin-right: ${factory.notebookConfig.sideBySideRightMarginOverride} !important;`;\n        const sideBySideMarginTag = document.getElementById(SIDE_BY_SIDE_STYLE_ID);\n        if (sideBySideMarginTag) {\n            sideBySideMarginTag.innerText = sideBySideMarginStyle;\n        }\n        else {\n            document.head.insertAdjacentHTML('beforeend', `<style id=\"${SIDE_BY_SIDE_STYLE_ID}\">${sideBySideMarginStyle}}</style>`);\n        }\n        factory.shutdownOnClose = settings.get('kernelShutdown')\n            .composite;\n        modelFactory.disableDocumentWideUndoRedo = settings.get('experimentalDisableDocumentWideUndoRedo').composite;\n        updateTracker({\n            editorConfig: factory.editorConfig,\n            notebookConfig: factory.notebookConfig,\n            kernelShutdown: factory.shutdownOnClose\n        });\n    }\n    // Add main menu notebook menu.\n    if (mainMenu) {\n        populateMenus(app, mainMenu, tracker, translator, sessionDialogs);\n    }\n    // Utility function to create a new notebook.\n    const createNew = (cwd, kernelName) => {\n        return commands\n            .execute('docmanager:new-untitled', { path: cwd, type: 'notebook' })\n            .then(model => {\n            if (model != undefined) {\n                return commands.execute('docmanager:open', {\n                    path: model.path,\n                    factory: FACTORY,\n                    kernel: { name: kernelName }\n                });\n            }\n        });\n    };\n    // Add a command for creating a new notebook.\n    commands.addCommand(CommandIDs.createNew, {\n        label: args => {\n            var _a, _b, _c;\n            const kernelName = args['kernelName'] || '';\n            if (args['isLauncher'] && args['kernelName'] && services.kernelspecs) {\n                return ((_c = (_b = (_a = services.kernelspecs.specs) === null || _a === void 0 ? void 0 : _a.kernelspecs[kernelName]) === null || _b === void 0 ? void 0 : _b.display_name) !== null && _c !== void 0 ? _c : '');\n            }\n            if (args['isPalette'] || args['isContextMenu']) {\n                return trans.__('New Notebook');\n            }\n            return trans.__('Notebook');\n        },\n        caption: trans.__('Create a new notebook'),\n        icon: args => (args['isPalette'] ? undefined : notebookIcon),\n        execute: args => {\n            const cwd = args['cwd'] ||\n                (browserFactory ? browserFactory.defaultBrowser.model.path : '');\n            const kernelName = args['kernelName'] || '';\n            return createNew(cwd, kernelName);\n        }\n    });\n    // Add a launcher item if the launcher is available.\n    if (launcher) {\n        void services.ready.then(() => {\n            let disposables = null;\n            const onSpecsChanged = () => {\n                if (disposables) {\n                    disposables.dispose();\n                    disposables = null;\n                }\n                const specs = services.kernelspecs.specs;\n                if (!specs) {\n                    return;\n                }\n                disposables = new DisposableSet();\n                for (const name in specs.kernelspecs) {\n                    const rank = name === specs.default ? 0 : Infinity;\n                    const spec = specs.kernelspecs[name];\n                    let kernelIconUrl = spec.resources['logo-64x64'];\n                    disposables.add(launcher.add({\n                        command: CommandIDs.createNew,\n                        args: { isLauncher: true, kernelName: name },\n                        category: trans.__('Notebook'),\n                        rank,\n                        kernelIconUrl,\n                        metadata: {\n                            kernel: JSONExt.deepCopy(spec.metadata || {})\n                        }\n                    }));\n                }\n            };\n            onSpecsChanged();\n            services.kernelspecs.specsChanged.connect(onSpecsChanged);\n        });\n    }\n    return tracker;\n}\n// Get the current widget and activate unless the args specify otherwise.\nfunction getCurrent(tracker, shell, args) {\n    const widget = tracker.currentWidget;\n    const activate = args['activate'] !== false;\n    if (activate && widget) {\n        shell.activateById(widget.id);\n    }\n    return widget;\n}\n/**\n * Add the notebook commands to the application's command registry.\n */\nfunction addCommands(app, tracker, translator, sessionDialogs) {\n    const trans = translator.load('jupyterlab');\n    const { commands, shell } = app;\n    sessionDialogs = sessionDialogs !== null && sessionDialogs !== void 0 ? sessionDialogs : sessionContextDialogs;\n    const isEnabled = () => {\n        return Private.isEnabled(shell, tracker);\n    };\n    const isEnabledAndSingleSelected = () => {\n        return Private.isEnabledAndSingleSelected(shell, tracker);\n    };\n    const refreshCellCollapsed = (notebook) => {\n        var _a, _b;\n        for (const cell of notebook.widgets) {\n            if (cell instanceof MarkdownCell && cell.headingCollapsed) {\n                NotebookActions.setHeadingCollapse(cell, true, notebook);\n            }\n            if (cell.model.id === ((_b = (_a = notebook.activeCell) === null || _a === void 0 ? void 0 : _a.model) === null || _b === void 0 ? void 0 : _b.id)) {\n                NotebookActions.expandParent(cell, notebook);\n            }\n        }\n    };\n    const isEnabledAndHeadingSelected = () => {\n        return Private.isEnabledAndHeadingSelected(shell, tracker);\n    };\n    // Set up signal handler to keep the collapse state consistent\n    tracker.currentChanged.connect((sender, panel) => {\n        var _a, _b;\n        if (!((_b = (_a = panel === null || panel === void 0 ? void 0 : panel.content) === null || _a === void 0 ? void 0 : _a.model) === null || _b === void 0 ? void 0 : _b.cells)) {\n            return;\n        }\n        panel.content.model.cells.changed.connect((list, args) => {\n            // Might be overkill to refresh this every time, but\n            // it helps to keep the collapse state consistent.\n            refreshCellCollapsed(panel.content);\n        });\n        panel.content.activeCellChanged.connect((notebook, cell) => {\n            NotebookActions.expandParent(cell, notebook);\n        });\n    });\n    commands.addCommand(CommandIDs.runAndAdvance, {\n        label: trans.__('Run Selected Cells'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                const { context, content } = current;\n                return NotebookActions.runAndAdvance(content, context.sessionContext);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.run, {\n        label: trans.__(\"Run Selected Cells and Don't Advance\"),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                const { context, content } = current;\n                return NotebookActions.run(content, context.sessionContext);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.runAndInsert, {\n        label: trans.__('Run Selected Cells and Insert Below'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                const { context, content } = current;\n                return NotebookActions.runAndInsert(content, context.sessionContext);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.runAll, {\n        label: trans.__('Run All Cells'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                const { context, content } = current;\n                return NotebookActions.runAll(content, context.sessionContext);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.runAllAbove, {\n        label: trans.__('Run All Above Selected Cell'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                const { context, content } = current;\n                return NotebookActions.runAllAbove(content, context.sessionContext);\n            }\n        },\n        isEnabled: () => {\n            // Can't run above if there are multiple cells selected,\n            // or if we are at the top of the notebook.\n            return (isEnabledAndSingleSelected() &&\n                tracker.currentWidget.content.activeCellIndex !== 0);\n        }\n    });\n    commands.addCommand(CommandIDs.runAllBelow, {\n        label: trans.__('Run Selected Cell and All Below'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                const { context, content } = current;\n                return NotebookActions.runAllBelow(content, context.sessionContext);\n            }\n        },\n        isEnabled: () => {\n            // Can't run below if there are multiple cells selected,\n            // or if we are at the bottom of the notebook.\n            return (isEnabledAndSingleSelected() &&\n                tracker.currentWidget.content.activeCellIndex !==\n                    tracker.currentWidget.content.widgets.length - 1);\n        }\n    });\n    commands.addCommand(CommandIDs.renderAllMarkdown, {\n        label: trans.__('Render All Markdown Cells'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                const { context, content } = current;\n                return NotebookActions.renderAllMarkdown(content, context.sessionContext);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.restart, {\n        label: trans.__('Restart Kernel…'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return sessionDialogs.restart(current.sessionContext, translator);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.closeAndShutdown, {\n        label: trans.__('Close and Shut Down'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (!current) {\n                return;\n            }\n            const fileName = current.title.label;\n            return showDialog({\n                title: trans.__('Shut down the notebook?'),\n                body: trans.__('Are you sure you want to close \"%1\"?', fileName),\n                buttons: [Dialog.cancelButton(), Dialog.warnButton()]\n            }).then(result => {\n                if (result.button.accept) {\n                    return current.context.sessionContext.shutdown().then(() => {\n                        current.dispose();\n                    });\n                }\n            });\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.trust, {\n        label: () => trans.__('Trust Notebook'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                const { context, content } = current;\n                return NotebookActions.trust(content).then(() => context.save());\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.restartClear, {\n        label: trans.__('Restart Kernel and Clear All Outputs…'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                const { content, sessionContext } = current;\n                return sessionDialogs.restart(sessionContext, translator).then(() => {\n                    NotebookActions.clearAllOutputs(content);\n                });\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.restartAndRunToSelected, {\n        label: trans.__('Restart Kernel and Run up to Selected Cell…'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                const { context, content } = current;\n                return sessionDialogs\n                    .restart(current.sessionContext, translator)\n                    .then(restarted => {\n                    if (restarted) {\n                        void NotebookActions.runAllAbove(content, context.sessionContext).then(executed => {\n                            if (executed || content.activeCellIndex === 0) {\n                                void NotebookActions.run(content, context.sessionContext);\n                            }\n                        });\n                    }\n                });\n            }\n        },\n        isEnabled: isEnabledAndSingleSelected\n    });\n    commands.addCommand(CommandIDs.restartRunAll, {\n        label: trans.__('Restart Kernel and Run All Cells…'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                const { context, content, sessionContext } = current;\n                return sessionDialogs\n                    .restart(sessionContext, translator)\n                    .then(restarted => {\n                    if (restarted) {\n                        void NotebookActions.runAll(content, context.sessionContext);\n                    }\n                    return restarted;\n                });\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.clearAllOutputs, {\n        label: trans.__('Clear All Outputs'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.clearAllOutputs(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.clearOutputs, {\n        label: trans.__('Clear Outputs'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.clearOutputs(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.interrupt, {\n        label: trans.__('Interrupt Kernel'),\n        execute: args => {\n            var _a;\n            const current = getCurrent(tracker, shell, args);\n            if (!current) {\n                return;\n            }\n            const kernel = (_a = current.context.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel;\n            if (kernel) {\n                return kernel.interrupt();\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.toCode, {\n        label: trans.__('Change to Code Cell Type'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.changeCellType(current.content, 'code');\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.toMarkdown, {\n        label: trans.__('Change to Markdown Cell Type'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.changeCellType(current.content, 'markdown');\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.toRaw, {\n        label: trans.__('Change to Raw Cell Type'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.changeCellType(current.content, 'raw');\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.cut, {\n        label: trans.__('Cut Cells'),\n        caption: trans.__('Cut the selected cells'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.cut(current.content);\n            }\n        },\n        icon: args => (args.toolbar ? cutIcon : undefined),\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.copy, {\n        label: trans.__('Copy Cells'),\n        caption: trans.__('Copy the selected cells'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.copy(current.content);\n            }\n        },\n        icon: args => (args.toolbar ? copyIcon : ''),\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.pasteBelow, {\n        label: trans.__('Paste Cells Below'),\n        caption: trans.__('Paste cells from the clipboard'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.paste(current.content, 'below');\n            }\n        },\n        icon: args => (args.toolbar ? pasteIcon : undefined),\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.pasteAbove, {\n        label: trans.__('Paste Cells Above'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.paste(current.content, 'above');\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.duplicateBelow, {\n        label: trans.__('Duplicate Cells Below'),\n        caption: trans.__('Copy the selected cells and paste them below the selection'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                NotebookActions.duplicate(current.content, 'belowSelected');\n            }\n        },\n        icon: args => (args.toolbar ? duplicateIcon : ''),\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.pasteAndReplace, {\n        label: trans.__('Paste Cells and Replace'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.paste(current.content, 'replace');\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.deleteCell, {\n        label: trans.__('Delete Cells'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.deleteCells(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.split, {\n        label: trans.__('Split Cell'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.splitCell(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.merge, {\n        label: trans.__('Merge Selected Cells'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.mergeCells(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.mergeAbove, {\n        label: trans.__('Merge Cell Above'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.mergeCells(current.content, true);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.mergeBelow, {\n        label: trans.__('Merge Cell Below'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.mergeCells(current.content, false);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.insertAbove, {\n        label: trans.__('Insert Cell Above'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.insertAbove(current.content);\n            }\n        },\n        icon: args => (args.toolbar ? addAboveIcon : undefined),\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.insertBelow, {\n        label: trans.__('Insert Cell Below'),\n        caption: trans.__('Insert a cell below'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.insertBelow(current.content);\n            }\n        },\n        icon: args => (args.toolbar ? addBelowIcon : undefined),\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.selectAbove, {\n        label: trans.__('Select Cell Above'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.selectAbove(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.selectBelow, {\n        label: trans.__('Select Cell Below'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.selectBelow(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.extendAbove, {\n        label: trans.__('Extend Selection Above'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.extendSelectionAbove(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.extendTop, {\n        label: trans.__('Extend Selection to Top'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.extendSelectionAbove(current.content, true);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.extendBelow, {\n        label: trans.__('Extend Selection Below'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.extendSelectionBelow(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.extendBottom, {\n        label: trans.__('Extend Selection to Bottom'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.extendSelectionBelow(current.content, true);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.selectAll, {\n        label: trans.__('Select All Cells'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.selectAll(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.deselectAll, {\n        label: trans.__('Deselect All Cells'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.deselectAll(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.moveUp, {\n        label: trans.__('Move Cells Up'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.moveUp(current.content);\n            }\n        },\n        isEnabled,\n        icon: args => (args.toolbar ? moveUpIcon : undefined)\n    });\n    commands.addCommand(CommandIDs.moveDown, {\n        label: trans.__('Move Cells Down'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.moveDown(current.content);\n            }\n        },\n        isEnabled,\n        icon: args => (args.toolbar ? moveDownIcon : undefined)\n    });\n    commands.addCommand(CommandIDs.toggleAllLines, {\n        label: trans.__('Toggle All Line Numbers'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.toggleAllLineNumbers(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.commandMode, {\n        label: trans.__('Enter Command Mode'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                current.content.mode = 'command';\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.editMode, {\n        label: trans.__('Enter Edit Mode'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                current.content.mode = 'edit';\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.undoCellAction, {\n        label: trans.__('Undo Cell Operation'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.undo(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.redoCellAction, {\n        label: trans.__('Redo Cell Operation'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.redo(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.changeKernel, {\n        label: trans.__('Change Kernel…'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return sessionDialogs.selectKernel(current.context.sessionContext, translator);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.reconnectToKernel, {\n        label: trans.__('Reconnect To Kernel'),\n        execute: args => {\n            var _a;\n            const current = getCurrent(tracker, shell, args);\n            if (!current) {\n                return;\n            }\n            const kernel = (_a = current.context.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel;\n            if (kernel) {\n                return kernel.reconnect();\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.markdown1, {\n        label: trans.__('Change to Heading 1'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.setMarkdownHeader(current.content, 1);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.markdown2, {\n        label: trans.__('Change to Heading 2'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.setMarkdownHeader(current.content, 2);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.markdown3, {\n        label: trans.__('Change to Heading 3'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.setMarkdownHeader(current.content, 3);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.markdown4, {\n        label: trans.__('Change to Heading 4'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.setMarkdownHeader(current.content, 4);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.markdown5, {\n        label: trans.__('Change to Heading 5'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.setMarkdownHeader(current.content, 5);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.markdown6, {\n        label: trans.__('Change to Heading 6'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.setMarkdownHeader(current.content, 6);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.hideCode, {\n        label: trans.__('Collapse Selected Code'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.hideCode(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.showCode, {\n        label: trans.__('Expand Selected Code'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.showCode(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.hideAllCode, {\n        label: trans.__('Collapse All Code'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.hideAllCode(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.showAllCode, {\n        label: trans.__('Expand All Code'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.showAllCode(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.hideOutput, {\n        label: trans.__('Collapse Selected Outputs'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.hideOutput(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.showOutput, {\n        label: trans.__('Expand Selected Outputs'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.showOutput(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.hideAllOutputs, {\n        label: trans.__('Collapse All Outputs'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.hideAllOutputs(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.toggleRenderSideBySideCurrentNotebook, {\n        label: trans.__('Render Side-by-Side'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                if (current.content.renderingLayout === 'side-by-side') {\n                    return NotebookActions.renderDefault(current.content);\n                }\n                return NotebookActions.renderSideBySide(current.content);\n            }\n        },\n        isEnabled,\n        isToggled: args => {\n            const current = getCurrent(tracker, shell, Object.assign(Object.assign({}, args), { activate: false }));\n            if (current) {\n                return current.content.renderingLayout === 'side-by-side';\n            }\n            else {\n                return false;\n            }\n        }\n    });\n    commands.addCommand(CommandIDs.setSideBySideRatio, {\n        label: trans.__('Set side-by-side ratio'),\n        execute: args => {\n            InputDialog.getNumber({\n                title: trans.__('Width of the output in side-by-side mode'),\n                value: 1\n            })\n                .then(result => {\n                if (result.value) {\n                    document.documentElement.style.setProperty('--jp-side-by-side-output-size', `${result.value}fr`);\n                }\n            })\n                .catch(console.error);\n        }\n    });\n    commands.addCommand(CommandIDs.showAllOutputs, {\n        label: trans.__('Expand All Outputs'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.showAllOutputs(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.enableOutputScrolling, {\n        label: trans.__('Enable Scrolling for Outputs'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.enableOutputScrolling(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.disableOutputScrolling, {\n        label: trans.__('Disable Scrolling for Outputs'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.disableOutputScrolling(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.selectLastRunCell, {\n        label: trans.__('Select current running or last run cell'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.selectLastRunCell(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.replaceSelection, {\n        label: trans.__('Replace Selection in Notebook Cell'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            const text = args['text'] || '';\n            if (current) {\n                return NotebookActions.replaceSelection(current.content, text);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.toggleCollapseCmd, {\n        label: 'Toggle Collapse Notebook Heading',\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.toggleCurrentHeadingCollapse(current.content);\n            }\n        },\n        isEnabled: isEnabledAndHeadingSelected\n    });\n    commands.addCommand(CommandIDs.collapseAllCmd, {\n        label: 'Collapse All Cells',\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.collapseAll(current.content);\n            }\n        }\n    });\n    commands.addCommand(CommandIDs.expandAllCmd, {\n        label: 'Expand All Headings',\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.expandAllHeadings(current.content);\n            }\n        }\n    });\n}\n/**\n * Populate the application's command palette with notebook commands.\n */\nfunction populatePalette(palette, translator) {\n    const trans = translator.load('jupyterlab');\n    let category = trans.__('Notebook Operations');\n    [\n        CommandIDs.interrupt,\n        CommandIDs.restart,\n        CommandIDs.restartClear,\n        CommandIDs.restartRunAll,\n        CommandIDs.runAll,\n        CommandIDs.renderAllMarkdown,\n        CommandIDs.runAllAbove,\n        CommandIDs.runAllBelow,\n        CommandIDs.restartAndRunToSelected,\n        CommandIDs.selectAll,\n        CommandIDs.deselectAll,\n        CommandIDs.clearAllOutputs,\n        CommandIDs.toggleAllLines,\n        CommandIDs.editMode,\n        CommandIDs.commandMode,\n        CommandIDs.changeKernel,\n        CommandIDs.reconnectToKernel,\n        CommandIDs.createConsole,\n        CommandIDs.closeAndShutdown,\n        CommandIDs.trust,\n        CommandIDs.toggleCollapseCmd,\n        CommandIDs.collapseAllCmd,\n        CommandIDs.expandAllCmd\n    ].forEach(command => {\n        palette.addItem({ command, category });\n    });\n    palette.addItem({\n        command: CommandIDs.createNew,\n        category,\n        args: { isPalette: true }\n    });\n    category = trans.__('Notebook Cell Operations');\n    [\n        CommandIDs.run,\n        CommandIDs.runAndAdvance,\n        CommandIDs.runAndInsert,\n        CommandIDs.runInConsole,\n        CommandIDs.clearOutputs,\n        CommandIDs.toCode,\n        CommandIDs.toMarkdown,\n        CommandIDs.toRaw,\n        CommandIDs.cut,\n        CommandIDs.copy,\n        CommandIDs.pasteBelow,\n        CommandIDs.pasteAbove,\n        CommandIDs.pasteAndReplace,\n        CommandIDs.deleteCell,\n        CommandIDs.split,\n        CommandIDs.merge,\n        CommandIDs.mergeAbove,\n        CommandIDs.mergeBelow,\n        CommandIDs.insertAbove,\n        CommandIDs.insertBelow,\n        CommandIDs.selectAbove,\n        CommandIDs.selectBelow,\n        CommandIDs.extendAbove,\n        CommandIDs.extendTop,\n        CommandIDs.extendBelow,\n        CommandIDs.extendBottom,\n        CommandIDs.moveDown,\n        CommandIDs.moveUp,\n        CommandIDs.undoCellAction,\n        CommandIDs.redoCellAction,\n        CommandIDs.markdown1,\n        CommandIDs.markdown2,\n        CommandIDs.markdown3,\n        CommandIDs.markdown4,\n        CommandIDs.markdown5,\n        CommandIDs.markdown6,\n        CommandIDs.hideCode,\n        CommandIDs.showCode,\n        CommandIDs.hideAllCode,\n        CommandIDs.showAllCode,\n        CommandIDs.hideOutput,\n        CommandIDs.showOutput,\n        CommandIDs.hideAllOutputs,\n        CommandIDs.showAllOutputs,\n        CommandIDs.toggleRenderSideBySideCurrentNotebook,\n        CommandIDs.setSideBySideRatio,\n        CommandIDs.enableOutputScrolling,\n        CommandIDs.disableOutputScrolling\n    ].forEach(command => {\n        palette.addItem({ command, category });\n    });\n}\n/**\n * Populates the application menus for the notebook.\n */\nfunction populateMenus(app, mainMenu, tracker, translator, sessionDialogs) {\n    const trans = translator.load('jupyterlab');\n    const { commands } = app;\n    sessionDialogs = sessionDialogs || sessionContextDialogs;\n    // Add undo/redo hooks to the edit menu.\n    mainMenu.editMenu.undoers.add({\n        tracker,\n        undo: widget => {\n            var _a;\n            (_a = widget.content.activeCell) === null || _a === void 0 ? void 0 : _a.editor.undo();\n        },\n        redo: widget => {\n            var _a;\n            (_a = widget.content.activeCell) === null || _a === void 0 ? void 0 : _a.editor.redo();\n        }\n    });\n    // Add a clearer to the edit menu\n    mainMenu.editMenu.clearers.add({\n        tracker,\n        clearCurrentLabel: (n) => trans.__('Clear Output'),\n        clearAllLabel: (n) => {\n            return trans.__('Clear All Outputs');\n        },\n        clearCurrent: (current) => {\n            return NotebookActions.clearOutputs(current.content);\n        },\n        clearAll: (current) => {\n            return NotebookActions.clearAllOutputs(current.content);\n        }\n    });\n    // Add a close and shutdown command to the file menu.\n    mainMenu.fileMenu.closeAndCleaners.add({\n        tracker,\n        closeAndCleanupLabel: (n) => trans.__('Close and Shutdown Notebook'),\n        closeAndCleanup: (current) => {\n            const fileName = current.title.label;\n            return showDialog({\n                title: trans.__('Shut down the Notebook?'),\n                body: trans.__('Are you sure you want to close \"%1\"?', fileName),\n                buttons: [Dialog.cancelButton(), Dialog.warnButton()]\n            }).then(result => {\n                if (result.button.accept) {\n                    return current.context.sessionContext.shutdown().then(() => {\n                        current.dispose();\n                    });\n                }\n            });\n        }\n    });\n    // Add a kernel user to the Kernel menu\n    mainMenu.kernelMenu.kernelUsers.add({\n        tracker,\n        interruptKernel: current => {\n            var _a;\n            const kernel = (_a = current.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel;\n            if (kernel) {\n                return kernel.interrupt();\n            }\n            return Promise.resolve(void 0);\n        },\n        reconnectToKernel: current => {\n            var _a;\n            const kernel = (_a = current.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel;\n            if (kernel) {\n                return kernel.reconnect();\n            }\n            return Promise.resolve(void 0);\n        },\n        restartKernelAndClearLabel: (n) => trans.__('Restart Kernel and Clear All Outputs…'),\n        restartKernel: current => sessionDialogs.restart(current.sessionContext, translator),\n        restartKernelAndClear: current => {\n            return sessionDialogs\n                .restart(current.sessionContext, translator)\n                .then(restarted => {\n                if (restarted) {\n                    NotebookActions.clearAllOutputs(current.content);\n                }\n                return restarted;\n            });\n        },\n        changeKernel: current => sessionDialogs.selectKernel(current.sessionContext, translator),\n        shutdownKernel: current => current.sessionContext.shutdown()\n    });\n    // Add a console creator the the Kernel menu\n    mainMenu.fileMenu.consoleCreators.add({\n        tracker,\n        createConsoleLabel: (n) => trans.__('New Console for Notebook'),\n        createConsole: current => Private.createConsole(commands, current, true)\n    });\n    // Add an IEditorViewer to the application view menu\n    mainMenu.viewMenu.editorViewers.add({\n        tracker,\n        toggleLineNumbers: widget => {\n            NotebookActions.toggleAllLineNumbers(widget.content);\n        },\n        lineNumbersToggled: widget => {\n            const config = widget.content.editorConfig;\n            return !!(config.code.lineNumbers &&\n                config.markdown.lineNumbers &&\n                config.raw.lineNumbers);\n        }\n    });\n    // Add an ICodeRunner to the application run menu\n    mainMenu.runMenu.codeRunners.add({\n        tracker,\n        runLabel: (n) => trans.__('Run Selected Cells'),\n        runCaption: (n) => trans.__('Run the selected cells and advance'),\n        runAllLabel: (n) => trans.__('Run All Cells'),\n        runAllCaption: (n) => trans.__('Run the all notebook cells'),\n        restartAndRunAllLabel: (n) => trans.__('Restart Kernel and Run All Cells…'),\n        restartAndRunAllCaption: (n) => trans.__('Restart the kernel, then re-run the whole notebook'),\n        run: current => {\n            const { context, content } = current;\n            return NotebookActions.runAndAdvance(content, context.sessionContext).then(() => void 0);\n        },\n        runAll: current => {\n            const { context, content } = current;\n            return NotebookActions.runAll(content, context.sessionContext).then(() => void 0);\n        },\n        restartAndRunAll: current => {\n            const { context, content } = current;\n            return sessionDialogs\n                .restart(context.sessionContext, translator)\n                .then(restarted => {\n                if (restarted) {\n                    void NotebookActions.runAll(content, context.sessionContext);\n                }\n                return restarted;\n            });\n        }\n    });\n    // Add kernel information to the application help menu.\n    mainMenu.helpMenu.kernelUsers.add({\n        tracker,\n        getKernel: current => { var _a; return (_a = current.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel; }\n    });\n}\n/**\n * A namespace for module private functionality.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Create a console connected with a notebook kernel\n     *\n     * @param commands Commands registry\n     * @param widget Notebook panel\n     * @param activate Should the console be activated\n     */\n    function createConsole(commands, widget, activate) {\n        const options = {\n            path: widget.context.path,\n            preferredLanguage: widget.context.model.defaultKernelLanguage,\n            activate: activate,\n            ref: widget.id,\n            insertMode: 'split-bottom'\n        };\n        return commands.execute('console:create', options);\n    }\n    Private.createConsole = createConsole;\n    /**\n     * Whether there is an active notebook.\n     */\n    function isEnabled(shell, tracker) {\n        return (tracker.currentWidget !== null &&\n            tracker.currentWidget === shell.currentWidget);\n    }\n    Private.isEnabled = isEnabled;\n    /**\n     * Whether there is an notebook active, with a single selected cell.\n     */\n    function isEnabledAndSingleSelected(shell, tracker) {\n        if (!Private.isEnabled(shell, tracker)) {\n            return false;\n        }\n        const { content } = tracker.currentWidget;\n        const index = content.activeCellIndex;\n        // If there are selections that are not the active cell,\n        // this command is confusing, so disable it.\n        for (let i = 0; i < content.widgets.length; ++i) {\n            if (content.isSelected(content.widgets[i]) && i !== index) {\n                return false;\n            }\n        }\n        return true;\n    }\n    Private.isEnabledAndSingleSelected = isEnabledAndSingleSelected;\n    /**\n     * Whether there is an notebook active, with a single selected cell.\n     */\n    function isEnabledAndHeadingSelected(shell, tracker) {\n        if (!Private.isEnabled(shell, tracker)) {\n            return false;\n        }\n        const { content } = tracker.currentWidget;\n        const index = content.activeCellIndex;\n        if (!(content.activeCell instanceof MarkdownCell)) {\n            return false;\n        }\n        // If there are selections that are not the active cell,\n        // this command is confusing, so disable it.\n        for (let i = 0; i < content.widgets.length; ++i) {\n            if (content.isSelected(content.widgets[i]) && i !== index) {\n                return false;\n            }\n        }\n        return true;\n    }\n    Private.isEnabledAndHeadingSelected = isEnabledAndHeadingSelected;\n    /**\n     * The default Export To ... formats and their human readable labels.\n     */\n    function getFormatLabels(translator) {\n        translator = translator || nullTranslator;\n        const trans = translator.load('jupyterlab');\n        return {\n            html: trans.__('HTML'),\n            latex: trans.__('LaTeX'),\n            markdown: trans.__('Markdown'),\n            pdf: trans.__('PDF'),\n            rst: trans.__('ReStructured Text'),\n            script: trans.__('Executable Script'),\n            slides: trans.__('Reveal.js Slides')\n        };\n    }\n    Private.getFormatLabels = getFormatLabels;\n    /**\n     * A widget hosting a cloned output area.\n     */\n    class ClonedOutputArea extends Panel {\n        constructor(options) {\n            super();\n            this._cell = null;\n            const trans = (options.translator || nullTranslator).load('jupyterlab');\n            this._notebook = options.notebook;\n            this._index = options.index !== undefined ? options.index : -1;\n            this._cell = options.cell || null;\n            this.id = `LinkedOutputView-${UUID.uuid4()}`;\n            this.title.label = 'Output View';\n            this.title.icon = notebookIcon;\n            this.title.caption = this._notebook.title.label\n                ? trans.__('For Notebook: %1', this._notebook.title.label)\n                : trans.__('For Notebook:');\n            this.addClass('jp-LinkedOutputView');\n            // Wait for the notebook to be loaded before\n            // cloning the output area.\n            void this._notebook.context.ready.then(() => {\n                if (!this._cell) {\n                    this._cell = this._notebook.content.widgets[this._index];\n                }\n                if (!this._cell || this._cell.model.type !== 'code') {\n                    this.dispose();\n                    return;\n                }\n                const clone = this._cell.cloneOutputArea();\n                this.addWidget(clone);\n            });\n        }\n        /**\n         * The index of the cell in the notebook.\n         */\n        get index() {\n            return this._cell\n                ? ArrayExt.findFirstIndex(this._notebook.content.widgets, c => c === this._cell)\n                : this._index;\n        }\n        /**\n         * The path of the notebook for the cloned output area.\n         */\n        get path() {\n            return this._notebook.context.path;\n        }\n    }\n    Private.ClonedOutputArea = ClonedOutputArea;\n})(Private || (Private = {}));\n//# sourceMappingURL=index.js.map"],"names":["logNotebookOutput","activate","app","nbtracker","loggerRegistry","registerNB","nb","logOutput","msg","levelNormal","levelError","KernelMessage","logger","getLogger","context","path","rendermime","content","data","Object","assign","output_type","header","msg_type","level","name","log","type","sessionContext","iopubMessage","connect","_","unhandledMessage","forEach","widgetAdded","id","requires","INotebookTracker","optional","ILoggerRegistry","autoStart","CommandIDs","createNew","interrupt","restart","restartClear","restartAndRunToSelected","restartRunAll","reconnectToKernel","changeKernel","createConsole","createOutputView","clearAllOutputs","closeAndShutdown","trust","exportToFormat","run","runAndAdvance","runAndInsert","runInConsole","runAll","runAllAbove","runAllBelow","renderAllMarkdown","toCode","toMarkdown","toRaw","cut","copy","pasteAbove","pasteBelow","duplicateBelow","pasteAndReplace","moveUp","moveDown","clearOutputs","deleteCell","insertAbove","insertBelow","selectAbove","selectBelow","extendAbove","extendTop","extendBelow","extendBottom","selectAll","deselectAll","editMode","merge","mergeAbove","mergeBelow","split","commandMode","toggleAllLines","undoCellAction","redoCellAction","markdown1","markdown2","markdown3","markdown4","markdown5","markdown6","hideCode","showCode","hideAllCode","showAllCode","hideOutput","showOutput","hideAllOutputs","showAllOutputs","toggleRenderSideBySideCurrentNotebook","setSideBySideRatio","enableOutputScrolling","disableOutputScrolling","selectLastRunCell","replaceSelection","autoClosingBrackets","toggleCollapseCmd","collapseAllCmd","expandAllCmd","copyToClipboard","FACTORY","FORMAT_EXCLUDE","SIDE_BY_SIDE_STYLE_ID","trackerPlugin","provides","INotebookWidgetFactory","ITranslator","ICommandPalette","IFileBrowserFactory","ILauncher","ILayoutRestorer","IMainMenu","ISettingRegistry","ISessionContextDialogs","factory","translator","palette","browserFactory","launcher","restorer","mainMenu","settingRegistry","sessionDialogs","trans","load","services","serviceManager","commands","tracker","NotebookTracker","namespace","Promise","reject","Error","then","settings","updateConfig","changed","addCommand","execute","args","_a","codeConfig","get","composite","markdownConfig","rawConfig","anyToggled","toggled","set","label","__","isToggled","some","x","catch","reason","console","warn","message","updateTracker","editorConfig","notebookConfig","kernelShutdown","shutdownOnClose","restore","command","panel","when","ready","registry","docRegistry","modelFactory","NotebookModelFactory","disableDocumentWideUndoRedo","addModelFactory","shell","sessionContextDialogs","isEnabled","Private","isEnabledAndSingleSelected","currentChanged","sender","_b","model","cells","list","notebook","cell","widgets","MarkdownCell","headingCollapsed","NotebookActions","activeCell","refreshCellCollapsed","activeCellChanged","current","getCurrent","currentWidget","activeCellIndex","length","fileName","title","showDialog","body","buttons","Dialog","result","button","accept","shutdown","dispose","save","restarted","executed","kernel","session","caption","icon","toolbar","cutIcon","undefined","copyIcon","pasteIcon","duplicateIcon","addAboveIcon","addBelowIcon","moveUpIcon","moveDownIcon","mode","selectKernel","reconnect","renderingLayout","InputDialog","value","document","documentElement","style","setProperty","error","text","isEnabledAndHeadingSelected","addCommands","category","addItem","isPalette","populatePalette","ft","getFileType","options","widget","setConfig","code","StaticNotebook","markdown","raw","scrollPastEnd","defaultCell","recordTiming","numberCellsToRenderDirectly","remainingTimeBeforeRescheduling","renderCellOnIdle","observedTopMargin","observedBottomMargin","maxNumberOutputs","showEditorForReadOnlyMarkdown","sideBySideLeftMarginOverride","sideBySideRightMarginOverride","sideBySideMarginStyle","sideBySideMarginTag","getElementById","innerText","head","insertAdjacentHTML","widgetCreated","iconClass","iconLabel","pathChanged","add","editMenu","undoers","undo","editor","redo","clearers","clearCurrentLabel","n","clearAllLabel","clearCurrent","clearAll","fileMenu","closeAndCleaners","closeAndCleanupLabel","closeAndCleanup","kernelMenu","kernelUsers","interruptKernel","resolve","restartKernelAndClearLabel","restartKernel","restartKernelAndClear","shutdownKernel","consoleCreators","createConsoleLabel","viewMenu","editorViewers","toggleLineNumbers","lineNumbersToggled","config","lineNumbers","runMenu","codeRunners","runLabel","runCaption","runAllLabel","runAllCaption","restartAndRunAllLabel","restartAndRunAllCaption","restartAndRunAll","helpMenu","getKernel","populateMenus","_c","kernelName","kernelspecs","specs","display_name","notebookIcon","cwd","defaultBrowser","disposables","onSpecsChanged","DisposableSet","rank","default","Infinity","spec","kernelIconUrl","resources","isLauncher","metadata","JSONExt","specsChanged","NotebookPanel","IEditorServices","editorServices","editorFactory","factoryService","newInlineEditor","tools","state","inspectorProvider","notebookTools","NotebookTools","activeCellTool","slideShow","cellMetadataEditor","collapsed","notebookMetadataEditor","nbconvert","getExportFormats","response","rawFormatExclude","optionValueArray","formatList","keys","formatLabels","getFormatLabels","key","indexOf","altOption","toUpperCase","substr","option","mimeTypeValue","output_mimetype","push","nbConvert","tool","section","buildIcon","MessageLoop","open","remove","register","render","INotebookTools","IStateDB","IPropertyInspectorProvider","commandEditItem","IStatusBar","statusBar","item","CommandEditStatus","registerStatusItem","align","isActive","executionIndicator","ILabShell","notebookTracker","labShell","statusbarItem","labShellCurrentChanged","statusBarDisposable","updateSettings","showOnToolBar","showProgress","disconnect","ExecutionIndicator","change","newValue","has","attachNotebook","disposed","displayOption","loadSettings","all","restored","exportPlugin","exportTo","formatLabel","url","PageConfig","format","download","dirty","readOnly","window","items","find","submenu","capCaseKey","labelStr","notebookTrustItem","tranlator","NotebookTrustStatus","widgetFactoryPlugin","IRenderMimeRegistry","IToolbarWidgetRegistry","contentFactory","toolbarRegistry","preferKernelOption","preferKernelValue","toLowerCase","toolbarFactory","registerFactory","fileChanged","ToolbarItems","Toolbar","createToolbarFactory","NotebookWidgetFactory","fileTypes","modelName","defaultFor","preferKernel","canStartKernel","mimeTypeService","addWidgetFactory","clonedOutputsPlugin","IDocumentManager","docManager","clonedOutputs","WidgetTracker","index","async","findWidget","ClonedOutputArea","MainAreaWidget","addSibling","ref","updateCloned","codeConsolePlugin","toJSON","selection","getSelection","start","end","column","line","getOffsetAt","substring","cursor","getCursorPosition","srcLines","curLine","lineCount","replace","fromFirst","firstLine","lastLine","slice","join","reply","requestIsComplete","status","setCursorPosition","insertMode","copyOutputPlugin","output","outputArea","outputTracker","outputAreaAreas","node","getElementsByClassName","e","sel","savedRanges","i","rangeCount","getRangeAt","cloneRange","range","createRange","selectNodeContents","removeAllRanges","addRange","execCommand","r","copyElement","contextMenu","selector","activateById","preferredLanguage","defaultKernelLanguage","isSelected","nullTranslator","html","latex","pdf","rst","script","slides","Panel","constructor","super","this","_cell","_notebook","_index","UUID","addClass","clone","cloneOutputArea","addWidget","ArrayExt","c"],"sourceRoot":""}
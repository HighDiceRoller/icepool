{"version":3,"file":"3079.a5fdfba.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/marked/lib/marked.esm.js"],"sourcesContent":["/**\n * marked - a markdown parser\n * Copyright (c) 2011-2022, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\nfunction getDefaults() {\n  return {\n    baseUrl: null,\n    breaks: false,\n    extensions: null,\n    gfm: true,\n    headerIds: true,\n    headerPrefix: '',\n    highlight: null,\n    langPrefix: 'language-',\n    mangle: true,\n    pedantic: false,\n    renderer: null,\n    sanitize: false,\n    sanitizer: null,\n    silent: false,\n    smartLists: false,\n    smartypants: false,\n    tokenizer: null,\n    walkTokens: null,\n    xhtml: false\n  };\n}\n\nlet defaults = getDefaults();\n\nfunction changeDefaults(newDefaults) {\n  defaults = newDefaults;\n}\n\n/**\n * Helpers\n */\nconst escapeTest = /[&<>\"']/;\nconst escapeReplace = /[&<>\"']/g;\nconst escapeTestNoEncode = /[<>\"']|&(?!#?\\w+;)/;\nconst escapeReplaceNoEncode = /[<>\"']|&(?!#?\\w+;)/g;\nconst escapeReplacements = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;'\n};\nconst getEscapeReplacement = (ch) => escapeReplacements[ch];\nfunction escape(html, encode) {\n  if (encode) {\n    if (escapeTest.test(html)) {\n      return html.replace(escapeReplace, getEscapeReplacement);\n    }\n  } else {\n    if (escapeTestNoEncode.test(html)) {\n      return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n    }\n  }\n\n  return html;\n}\n\nconst unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\n\nfunction unescape(html) {\n  // explicitly match decimal, hex, and named HTML entities\n  return html.replace(unescapeTest, (_, n) => {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x'\n        ? String.fromCharCode(parseInt(n.substring(2), 16))\n        : String.fromCharCode(+n.substring(1));\n    }\n    return '';\n  });\n}\n\nconst caret = /(^|[^\\[])\\^/g;\nfunction edit(regex, opt) {\n  regex = regex.source || regex;\n  opt = opt || '';\n  const obj = {\n    replace: (name, val) => {\n      val = val.source || val;\n      val = val.replace(caret, '$1');\n      regex = regex.replace(name, val);\n      return obj;\n    },\n    getRegex: () => {\n      return new RegExp(regex, opt);\n    }\n  };\n  return obj;\n}\n\nconst nonWordAndColonTest = /[^\\w:]/g;\nconst originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;\nfunction cleanUrl(sanitize, base, href) {\n  if (sanitize) {\n    let prot;\n    try {\n      prot = decodeURIComponent(unescape(href))\n        .replace(nonWordAndColonTest, '')\n        .toLowerCase();\n    } catch (e) {\n      return null;\n    }\n    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {\n      return null;\n    }\n  }\n  if (base && !originIndependentUrl.test(href)) {\n    href = resolveUrl(base, href);\n  }\n  try {\n    href = encodeURI(href).replace(/%25/g, '%');\n  } catch (e) {\n    return null;\n  }\n  return href;\n}\n\nconst baseUrls = {};\nconst justDomain = /^[^:]+:\\/*[^/]*$/;\nconst protocol = /^([^:]+:)[\\s\\S]*$/;\nconst domain = /^([^:]+:\\/*[^/]*)[\\s\\S]*$/;\n\nfunction resolveUrl(base, href) {\n  if (!baseUrls[' ' + base]) {\n    // we can ignore everything in base after the last slash of its path component,\n    // but we might need to add _that_\n    // https://tools.ietf.org/html/rfc3986#section-3\n    if (justDomain.test(base)) {\n      baseUrls[' ' + base] = base + '/';\n    } else {\n      baseUrls[' ' + base] = rtrim(base, '/', true);\n    }\n  }\n  base = baseUrls[' ' + base];\n  const relativeBase = base.indexOf(':') === -1;\n\n  if (href.substring(0, 2) === '//') {\n    if (relativeBase) {\n      return href;\n    }\n    return base.replace(protocol, '$1') + href;\n  } else if (href.charAt(0) === '/') {\n    if (relativeBase) {\n      return href;\n    }\n    return base.replace(domain, '$1') + href;\n  } else {\n    return base + href;\n  }\n}\n\nconst noopTest = { exec: function noopTest() {} };\n\nfunction merge(obj) {\n  let i = 1,\n    target,\n    key;\n\n  for (; i < arguments.length; i++) {\n    target = arguments[i];\n    for (key in target) {\n      if (Object.prototype.hasOwnProperty.call(target, key)) {\n        obj[key] = target[key];\n      }\n    }\n  }\n\n  return obj;\n}\n\nfunction splitCells(tableRow, count) {\n  // ensure that every cell-delimiting pipe has a space\n  // before it to distinguish it from an escaped pipe\n  const row = tableRow.replace(/\\|/g, (match, offset, str) => {\n      let escaped = false,\n        curr = offset;\n      while (--curr >= 0 && str[curr] === '\\\\') escaped = !escaped;\n      if (escaped) {\n        // odd number of slashes means | is escaped\n        // so we leave it alone\n        return '|';\n      } else {\n        // add space before unescaped |\n        return ' |';\n      }\n    }),\n    cells = row.split(/ \\|/);\n  let i = 0;\n\n  // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n  if (!cells[0].trim()) { cells.shift(); }\n  if (cells.length > 0 && !cells[cells.length - 1].trim()) { cells.pop(); }\n\n  if (cells.length > count) {\n    cells.splice(count);\n  } else {\n    while (cells.length < count) cells.push('');\n  }\n\n  for (; i < cells.length; i++) {\n    // leading or trailing whitespace is ignored per the gfm spec\n    cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n  }\n  return cells;\n}\n\n// Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n// /c*$/ is vulnerable to REDOS.\n// invert: Remove suffix of non-c chars instead. Default falsey.\nfunction rtrim(str, c, invert) {\n  const l = str.length;\n  if (l === 0) {\n    return '';\n  }\n\n  // Length of suffix matching the invert condition.\n  let suffLen = 0;\n\n  // Step left until we fail to match the invert condition.\n  while (suffLen < l) {\n    const currChar = str.charAt(l - suffLen - 1);\n    if (currChar === c && !invert) {\n      suffLen++;\n    } else if (currChar !== c && invert) {\n      suffLen++;\n    } else {\n      break;\n    }\n  }\n\n  return str.substr(0, l - suffLen);\n}\n\nfunction findClosingBracket(str, b) {\n  if (str.indexOf(b[1]) === -1) {\n    return -1;\n  }\n  const l = str.length;\n  let level = 0,\n    i = 0;\n  for (; i < l; i++) {\n    if (str[i] === '\\\\') {\n      i++;\n    } else if (str[i] === b[0]) {\n      level++;\n    } else if (str[i] === b[1]) {\n      level--;\n      if (level < 0) {\n        return i;\n      }\n    }\n  }\n  return -1;\n}\n\nfunction checkSanitizeDeprecation(opt) {\n  if (opt && opt.sanitize && !opt.silent) {\n    console.warn('marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options');\n  }\n}\n\n// copied from https://stackoverflow.com/a/5450113/806777\nfunction repeatString(pattern, count) {\n  if (count < 1) {\n    return '';\n  }\n  let result = '';\n  while (count > 1) {\n    if (count & 1) {\n      result += pattern;\n    }\n    count >>= 1;\n    pattern += pattern;\n  }\n  return result + pattern;\n}\n\nfunction outputLink(cap, link, raw, lexer) {\n  const href = link.href;\n  const title = link.title ? escape(link.title) : null;\n  const text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n\n  if (cap[0].charAt(0) !== '!') {\n    lexer.state.inLink = true;\n    const token = {\n      type: 'link',\n      raw,\n      href,\n      title,\n      text,\n      tokens: lexer.inlineTokens(text, [])\n    };\n    lexer.state.inLink = false;\n    return token;\n  } else {\n    return {\n      type: 'image',\n      raw,\n      href,\n      title,\n      text: escape(text)\n    };\n  }\n}\n\nfunction indentCodeCompensation(raw, text) {\n  const matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n\n  if (matchIndentToCode === null) {\n    return text;\n  }\n\n  const indentToCode = matchIndentToCode[1];\n\n  return text\n    .split('\\n')\n    .map(node => {\n      const matchIndentInNode = node.match(/^\\s+/);\n      if (matchIndentInNode === null) {\n        return node;\n      }\n\n      const [indentInNode] = matchIndentInNode;\n\n      if (indentInNode.length >= indentToCode.length) {\n        return node.slice(indentToCode.length);\n      }\n\n      return node;\n    })\n    .join('\\n');\n}\n\n/**\n * Tokenizer\n */\nclass Tokenizer {\n  constructor(options) {\n    this.options = options || defaults;\n  }\n\n  space(src) {\n    const cap = this.rules.block.newline.exec(src);\n    if (cap && cap[0].length > 0) {\n      return {\n        type: 'space',\n        raw: cap[0]\n      };\n    }\n  }\n\n  code(src) {\n    const cap = this.rules.block.code.exec(src);\n    if (cap) {\n      const text = cap[0].replace(/^ {1,4}/gm, '');\n      return {\n        type: 'code',\n        raw: cap[0],\n        codeBlockStyle: 'indented',\n        text: !this.options.pedantic\n          ? rtrim(text, '\\n')\n          : text\n      };\n    }\n  }\n\n  fences(src) {\n    const cap = this.rules.block.fences.exec(src);\n    if (cap) {\n      const raw = cap[0];\n      const text = indentCodeCompensation(raw, cap[3] || '');\n\n      return {\n        type: 'code',\n        raw,\n        lang: cap[2] ? cap[2].trim() : cap[2],\n        text\n      };\n    }\n  }\n\n  heading(src) {\n    const cap = this.rules.block.heading.exec(src);\n    if (cap) {\n      let text = cap[2].trim();\n\n      // remove trailing #s\n      if (/#$/.test(text)) {\n        const trimmed = rtrim(text, '#');\n        if (this.options.pedantic) {\n          text = trimmed.trim();\n        } else if (!trimmed || / $/.test(trimmed)) {\n          // CommonMark requires space before trailing #s\n          text = trimmed.trim();\n        }\n      }\n\n      const token = {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[1].length,\n        text: text,\n        tokens: []\n      };\n      this.lexer.inline(token.text, token.tokens);\n      return token;\n    }\n  }\n\n  hr(src) {\n    const cap = this.rules.block.hr.exec(src);\n    if (cap) {\n      return {\n        type: 'hr',\n        raw: cap[0]\n      };\n    }\n  }\n\n  blockquote(src) {\n    const cap = this.rules.block.blockquote.exec(src);\n    if (cap) {\n      const text = cap[0].replace(/^ *> ?/gm, '');\n\n      return {\n        type: 'blockquote',\n        raw: cap[0],\n        tokens: this.lexer.blockTokens(text, []),\n        text\n      };\n    }\n  }\n\n  list(src) {\n    let cap = this.rules.block.list.exec(src);\n    if (cap) {\n      let raw, istask, ischecked, indent, i, blankLine, endsWithBlankLine,\n        line, nextLine, rawLine, itemContents, endEarly;\n\n      let bull = cap[1].trim();\n      const isordered = bull.length > 1;\n\n      const list = {\n        type: 'list',\n        raw: '',\n        ordered: isordered,\n        start: isordered ? +bull.slice(0, -1) : '',\n        loose: false,\n        items: []\n      };\n\n      bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n\n      if (this.options.pedantic) {\n        bull = isordered ? bull : '[*+-]';\n      }\n\n      // Get next list item\n      const itemRegex = new RegExp(`^( {0,3}${bull})((?: [^\\\\n]*)?(?:\\\\n|$))`);\n\n      // Check if current bullet point can start a new List Item\n      while (src) {\n        endEarly = false;\n        if (!(cap = itemRegex.exec(src))) {\n          break;\n        }\n\n        if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n          break;\n        }\n\n        raw = cap[0];\n        src = src.substring(raw.length);\n\n        line = cap[2].split('\\n', 1)[0];\n        nextLine = src.split('\\n', 1)[0];\n\n        if (this.options.pedantic) {\n          indent = 2;\n          itemContents = line.trimLeft();\n        } else {\n          indent = cap[2].search(/[^ ]/); // Find first non-space char\n          indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n          itemContents = line.slice(indent);\n          indent += cap[1].length;\n        }\n\n        blankLine = false;\n\n        if (!line && /^ *$/.test(nextLine)) { // Items begin with at most one blank line\n          raw += nextLine + '\\n';\n          src = src.substring(nextLine.length + 1);\n          endEarly = true;\n        }\n\n        if (!endEarly) {\n          const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])`);\n\n          // Check if following lines should be included in List Item\n          while (src) {\n            rawLine = src.split('\\n', 1)[0];\n            line = rawLine;\n\n            // Re-align to follow commonmark nesting rules\n            if (this.options.pedantic) {\n              line = line.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n            }\n\n            // End list item if found start of new bullet\n            if (nextBulletRegex.test(line)) {\n              break;\n            }\n\n            if (line.search(/[^ ]/) >= indent || !line.trim()) { // Dedent if possible\n              itemContents += '\\n' + line.slice(indent);\n            } else if (!blankLine) { // Until blank line, item doesn't need indentation\n              itemContents += '\\n' + line;\n            } else { // Otherwise, improper indentation ends this item\n              break;\n            }\n\n            if (!blankLine && !line.trim()) { // Check if current line is blank\n              blankLine = true;\n            }\n\n            raw += rawLine + '\\n';\n            src = src.substring(rawLine.length + 1);\n          }\n        }\n\n        if (!list.loose) {\n          // If the previous item ended with a blank line, the list is loose\n          if (endsWithBlankLine) {\n            list.loose = true;\n          } else if (/\\n *\\n *$/.test(raw)) {\n            endsWithBlankLine = true;\n          }\n        }\n\n        // Check for task list items\n        if (this.options.gfm) {\n          istask = /^\\[[ xX]\\] /.exec(itemContents);\n          if (istask) {\n            ischecked = istask[0] !== '[ ] ';\n            itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n          }\n        }\n\n        list.items.push({\n          type: 'list_item',\n          raw: raw,\n          task: !!istask,\n          checked: ischecked,\n          loose: false,\n          text: itemContents\n        });\n\n        list.raw += raw;\n      }\n\n      // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n      list.items[list.items.length - 1].raw = raw.trimRight();\n      list.items[list.items.length - 1].text = itemContents.trimRight();\n      list.raw = list.raw.trimRight();\n\n      const l = list.items.length;\n\n      // Item child tokens handled here at end because we needed to have the final item to trim it first\n      for (i = 0; i < l; i++) {\n        this.lexer.state.top = false;\n        list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n        const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n        const hasMultipleLineBreaks = spacers.every(t => {\n          const chars = t.raw.split('');\n          let lineBreaks = 0;\n          for (const char of chars) {\n            if (char === '\\n') {\n              lineBreaks += 1;\n            }\n            if (lineBreaks > 1) {\n              return true;\n            }\n          }\n\n          return false;\n        });\n\n        if (!list.loose && spacers.length && hasMultipleLineBreaks) {\n          // Having a single line break doesn't mean a list is loose. A single line break is terminating the last list item\n          list.loose = true;\n          list.items[i].loose = true;\n        }\n      }\n\n      return list;\n    }\n  }\n\n  html(src) {\n    const cap = this.rules.block.html.exec(src);\n    if (cap) {\n      const token = {\n        type: 'html',\n        raw: cap[0],\n        pre: !this.options.sanitizer\n          && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),\n        text: cap[0]\n      };\n      if (this.options.sanitize) {\n        token.type = 'paragraph';\n        token.text = this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]);\n        token.tokens = [];\n        this.lexer.inline(token.text, token.tokens);\n      }\n      return token;\n    }\n  }\n\n  def(src) {\n    const cap = this.rules.block.def.exec(src);\n    if (cap) {\n      if (cap[3]) cap[3] = cap[3].substring(1, cap[3].length - 1);\n      const tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n      return {\n        type: 'def',\n        tag,\n        raw: cap[0],\n        href: cap[2],\n        title: cap[3]\n      };\n    }\n  }\n\n  table(src) {\n    const cap = this.rules.block.table.exec(src);\n    if (cap) {\n      const item = {\n        type: 'table',\n        header: splitCells(cap[1]).map(c => { return { text: c }; }),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        rows: cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : []\n      };\n\n      if (item.header.length === item.align.length) {\n        item.raw = cap[0];\n\n        let l = item.align.length;\n        let i, j, k, row;\n        for (i = 0; i < l; i++) {\n          if (/^ *-+: *$/.test(item.align[i])) {\n            item.align[i] = 'right';\n          } else if (/^ *:-+: *$/.test(item.align[i])) {\n            item.align[i] = 'center';\n          } else if (/^ *:-+ *$/.test(item.align[i])) {\n            item.align[i] = 'left';\n          } else {\n            item.align[i] = null;\n          }\n        }\n\n        l = item.rows.length;\n        for (i = 0; i < l; i++) {\n          item.rows[i] = splitCells(item.rows[i], item.header.length).map(c => { return { text: c }; });\n        }\n\n        // parse child tokens inside headers and cells\n\n        // header child tokens\n        l = item.header.length;\n        for (j = 0; j < l; j++) {\n          item.header[j].tokens = [];\n          this.lexer.inlineTokens(item.header[j].text, item.header[j].tokens);\n        }\n\n        // cell child tokens\n        l = item.rows.length;\n        for (j = 0; j < l; j++) {\n          row = item.rows[j];\n          for (k = 0; k < row.length; k++) {\n            row[k].tokens = [];\n            this.lexer.inlineTokens(row[k].text, row[k].tokens);\n          }\n        }\n\n        return item;\n      }\n    }\n  }\n\n  lheading(src) {\n    const cap = this.rules.block.lheading.exec(src);\n    if (cap) {\n      const token = {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[2].charAt(0) === '=' ? 1 : 2,\n        text: cap[1],\n        tokens: []\n      };\n      this.lexer.inline(token.text, token.tokens);\n      return token;\n    }\n  }\n\n  paragraph(src) {\n    const cap = this.rules.block.paragraph.exec(src);\n    if (cap) {\n      const token = {\n        type: 'paragraph',\n        raw: cap[0],\n        text: cap[1].charAt(cap[1].length - 1) === '\\n'\n          ? cap[1].slice(0, -1)\n          : cap[1],\n        tokens: []\n      };\n      this.lexer.inline(token.text, token.tokens);\n      return token;\n    }\n  }\n\n  text(src) {\n    const cap = this.rules.block.text.exec(src);\n    if (cap) {\n      const token = {\n        type: 'text',\n        raw: cap[0],\n        text: cap[0],\n        tokens: []\n      };\n      this.lexer.inline(token.text, token.tokens);\n      return token;\n    }\n  }\n\n  escape(src) {\n    const cap = this.rules.inline.escape.exec(src);\n    if (cap) {\n      return {\n        type: 'escape',\n        raw: cap[0],\n        text: escape(cap[1])\n      };\n    }\n  }\n\n  tag(src) {\n    const cap = this.rules.inline.tag.exec(src);\n    if (cap) {\n      if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n        this.lexer.state.inLink = true;\n      } else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n        this.lexer.state.inLink = false;\n      }\n      if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = true;\n      } else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = false;\n      }\n\n      return {\n        type: this.options.sanitize\n          ? 'text'\n          : 'html',\n        raw: cap[0],\n        inLink: this.lexer.state.inLink,\n        inRawBlock: this.lexer.state.inRawBlock,\n        text: this.options.sanitize\n          ? (this.options.sanitizer\n            ? this.options.sanitizer(cap[0])\n            : escape(cap[0]))\n          : cap[0]\n      };\n    }\n  }\n\n  link(src) {\n    const cap = this.rules.inline.link.exec(src);\n    if (cap) {\n      const trimmedUrl = cap[2].trim();\n      if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n        // commonmark requires matching angle brackets\n        if (!(/>$/.test(trimmedUrl))) {\n          return;\n        }\n\n        // ending angle bracket cannot be escaped\n        const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n        if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n          return;\n        }\n      } else {\n        // find closing parenthesis\n        const lastParenIndex = findClosingBracket(cap[2], '()');\n        if (lastParenIndex > -1) {\n          const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n          const linkLen = start + cap[1].length + lastParenIndex;\n          cap[2] = cap[2].substring(0, lastParenIndex);\n          cap[0] = cap[0].substring(0, linkLen).trim();\n          cap[3] = '';\n        }\n      }\n      let href = cap[2];\n      let title = '';\n      if (this.options.pedantic) {\n        // split pedantic href and title\n        const link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n\n        if (link) {\n          href = link[1];\n          title = link[3];\n        }\n      } else {\n        title = cap[3] ? cap[3].slice(1, -1) : '';\n      }\n\n      href = href.trim();\n      if (/^</.test(href)) {\n        if (this.options.pedantic && !(/>$/.test(trimmedUrl))) {\n          // pedantic allows starting angle bracket without ending angle bracket\n          href = href.slice(1);\n        } else {\n          href = href.slice(1, -1);\n        }\n      }\n      return outputLink(cap, {\n        href: href ? href.replace(this.rules.inline._escapes, '$1') : href,\n        title: title ? title.replace(this.rules.inline._escapes, '$1') : title\n      }, cap[0], this.lexer);\n    }\n  }\n\n  reflink(src, links) {\n    let cap;\n    if ((cap = this.rules.inline.reflink.exec(src))\n        || (cap = this.rules.inline.nolink.exec(src))) {\n      let link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n      link = links[link.toLowerCase()];\n      if (!link || !link.href) {\n        const text = cap[0].charAt(0);\n        return {\n          type: 'text',\n          raw: text,\n          text\n        };\n      }\n      return outputLink(cap, link, cap[0], this.lexer);\n    }\n  }\n\n  emStrong(src, maskedSrc, prevChar = '') {\n    let match = this.rules.inline.emStrong.lDelim.exec(src);\n    if (!match) return;\n\n    // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n    if (match[3] && prevChar.match(/[\\p{L}\\p{N}]/u)) return;\n\n    const nextChar = match[1] || match[2] || '';\n\n    if (!nextChar || (nextChar && (prevChar === '' || this.rules.inline.punctuation.exec(prevChar)))) {\n      const lLength = match[0].length - 1;\n      let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n\n      const endReg = match[0][0] === '*' ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;\n      endReg.lastIndex = 0;\n\n      // Clip maskedSrc to same section of string as src (move to lexer?)\n      maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n\n      while ((match = endReg.exec(maskedSrc)) != null) {\n        rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n\n        if (!rDelim) continue; // skip single * in __abc*abc__\n\n        rLength = rDelim.length;\n\n        if (match[3] || match[4]) { // found another Left Delim\n          delimTotal += rLength;\n          continue;\n        } else if (match[5] || match[6]) { // either Left or Right Delim\n          if (lLength % 3 && !((lLength + rLength) % 3)) {\n            midDelimTotal += rLength;\n            continue; // CommonMark Emphasis Rules 9-10\n          }\n        }\n\n        delimTotal -= rLength;\n\n        if (delimTotal > 0) continue; // Haven't found enough closing delimiters\n\n        // Remove extra characters. *a*** -> *a*\n        rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n\n        // Create `em` if smallest delimiter has odd char count. *a***\n        if (Math.min(lLength, rLength) % 2) {\n          const text = src.slice(1, lLength + match.index + rLength);\n          return {\n            type: 'em',\n            raw: src.slice(0, lLength + match.index + rLength + 1),\n            text,\n            tokens: this.lexer.inlineTokens(text, [])\n          };\n        }\n\n        // Create 'strong' if smallest delimiter has even char count. **a***\n        const text = src.slice(2, lLength + match.index + rLength - 1);\n        return {\n          type: 'strong',\n          raw: src.slice(0, lLength + match.index + rLength + 1),\n          text,\n          tokens: this.lexer.inlineTokens(text, [])\n        };\n      }\n    }\n  }\n\n  codespan(src) {\n    const cap = this.rules.inline.code.exec(src);\n    if (cap) {\n      let text = cap[2].replace(/\\n/g, ' ');\n      const hasNonSpaceChars = /[^ ]/.test(text);\n      const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n      if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n        text = text.substring(1, text.length - 1);\n      }\n      text = escape(text, true);\n      return {\n        type: 'codespan',\n        raw: cap[0],\n        text\n      };\n    }\n  }\n\n  br(src) {\n    const cap = this.rules.inline.br.exec(src);\n    if (cap) {\n      return {\n        type: 'br',\n        raw: cap[0]\n      };\n    }\n  }\n\n  del(src) {\n    const cap = this.rules.inline.del.exec(src);\n    if (cap) {\n      return {\n        type: 'del',\n        raw: cap[0],\n        text: cap[2],\n        tokens: this.lexer.inlineTokens(cap[2], [])\n      };\n    }\n  }\n\n  autolink(src, mangle) {\n    const cap = this.rules.inline.autolink.exec(src);\n    if (cap) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = escape(this.options.mangle ? mangle(cap[1]) : cap[1]);\n        href = 'mailto:' + text;\n      } else {\n        text = escape(cap[1]);\n        href = text;\n      }\n\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text\n          }\n        ]\n      };\n    }\n  }\n\n  url(src, mangle) {\n    let cap;\n    if (cap = this.rules.inline.url.exec(src)) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = escape(this.options.mangle ? mangle(cap[0]) : cap[0]);\n        href = 'mailto:' + text;\n      } else {\n        // do extended autolink path validation\n        let prevCapZero;\n        do {\n          prevCapZero = cap[0];\n          cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];\n        } while (prevCapZero !== cap[0]);\n        text = escape(cap[0]);\n        if (cap[1] === 'www.') {\n          href = 'http://' + text;\n        } else {\n          href = text;\n        }\n      }\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text\n          }\n        ]\n      };\n    }\n  }\n\n  inlineText(src, smartypants) {\n    const cap = this.rules.inline.text.exec(src);\n    if (cap) {\n      let text;\n      if (this.lexer.state.inRawBlock) {\n        text = this.options.sanitize ? (this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0])) : cap[0];\n      } else {\n        text = escape(this.options.smartypants ? smartypants(cap[0]) : cap[0]);\n      }\n      return {\n        type: 'text',\n        raw: cap[0],\n        text\n      };\n    }\n  }\n}\n\n/**\n * Block-Level Grammar\n */\nconst block = {\n  newline: /^(?: *(?:\\n|$))+/,\n  code: /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/,\n  fences: /^ {0,3}(`{3,}(?=[^`\\n]*\\n)|~{3,})([^\\n]*)\\n(?:|([\\s\\S]*?)\\n)(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/,\n  hr: /^ {0,3}((?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$)/,\n  heading: /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/,\n  blockquote: /^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,\n  list: /^( {0,3}bull)( [^\\n]+?)?(?:\\n|$)/,\n  html: '^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (6)\n    + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) open tag\n    + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) closing tag\n    + ')',\n  def: /^ {0,3}\\[(label)\\]: *(?:\\n *)?<?([^\\s>]+)>?(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/,\n  table: noopTest,\n  lheading: /^([^\\n]+)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  // regex template, placeholders will be replaced according to different paragraph\n  // interruption rules of commonmark and the original markdown spec:\n  _paragraph: /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/,\n  text: /^[^\\n]+/\n};\n\nblock._label = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nblock._title = /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/;\nblock.def = edit(block.def)\n  .replace('label', block._label)\n  .replace('title', block._title)\n  .getRegex();\n\nblock.bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nblock.listItemStart = edit(/^( *)(bull) */)\n  .replace('bull', block.bullet)\n  .getRegex();\n\nblock.list = edit(block.list)\n  .replace(/bull/g, block.bullet)\n  .replace('hr', '\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))')\n  .replace('def', '\\\\n+(?=' + block.def.source + ')')\n  .getRegex();\n\nblock._tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n  + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n  + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n  + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n  + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr'\n  + '|track|ul';\nblock._comment = /<!--(?!-?>)[\\s\\S]*?(?:-->|$)/;\nblock.html = edit(block.html, 'i')\n  .replace('comment', block._comment)\n  .replace('tag', block._tag)\n  .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n  .getRegex();\n\nblock.paragraph = edit(block._paragraph)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n  .replace('|table', '')\n  .replace('blockquote', ' {0,3}>')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n\nblock.blockquote = edit(block.blockquote)\n  .replace('paragraph', block.paragraph)\n  .getRegex();\n\n/**\n * Normal Block Grammar\n */\n\nblock.normal = merge({}, block);\n\n/**\n * GFM Block Grammar\n */\n\nblock.gfm = merge({}, block.normal, {\n  table: '^ *([^\\\\n ].*\\\\|.*)\\\\n' // Header\n    + ' {0,3}(?:\\\\| *)?(:?-+:? *(?:\\\\| *:?-+:? *)*)(?:\\\\| *)?' // Align\n    + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)' // Cells\n});\n\nblock.gfm.table = edit(block.gfm.table)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('blockquote', ' {0,3}>')\n  .replace('code', ' {4}[^\\\\n]')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // tables can be interrupted by type (6) html blocks\n  .getRegex();\n\nblock.gfm.paragraph = edit(block._paragraph)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n  .replace('table', block.gfm.table) // interrupt paragraphs with table\n  .replace('blockquote', ' {0,3}>')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\n\nblock.pedantic = merge({}, block.normal, {\n  html: edit(\n    '^ *(?:comment *(?:\\\\n|\\\\s*$)'\n    + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n    + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n    .replace('comment', block._comment)\n    .replace(/tag/g, '(?!(?:'\n      + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n      + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n      + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n    .getRegex(),\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n  heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n  fences: noopTest, // fences not supported\n  paragraph: edit(block.normal._paragraph)\n    .replace('hr', block.hr)\n    .replace('heading', ' *#{1,6} *[^\\n]')\n    .replace('lheading', block.lheading)\n    .replace('blockquote', ' {0,3}>')\n    .replace('|fences', '')\n    .replace('|list', '')\n    .replace('|html', '')\n    .getRegex()\n});\n\n/**\n * Inline-Level Grammar\n */\nconst inline = {\n  escape: /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,\n  autolink: /^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,\n  url: noopTest,\n  tag: '^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>', // CDATA section\n  link: /^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/,\n  reflink: /^!?\\[(label)\\]\\[(ref)\\]/,\n  nolink: /^!?\\[(ref)\\](?:\\[\\])?/,\n  reflinkSearch: 'reflink|nolink(?!\\\\()',\n  emStrong: {\n    lDelim: /^(?:\\*+(?:([punct_])|[^\\s*]))|^_+(?:([punct*])|([^\\s_]))/,\n    //        (1) and (2) can only be a Right Delimiter. (3) and (4) can only be Left.  (5) and (6) can be either Left or Right.\n    //        () Skip orphan delim inside strong    (1) #***                (2) a***#, a***                   (3) #***a, ***a                 (4) ***#              (5) #***#                 (6) a***a\n    rDelimAst: /^[^_*]*?\\_\\_[^_*]*?\\*[^_*]*?(?=\\_\\_)|[punct_](\\*+)(?=[\\s]|$)|[^punct*_\\s](\\*+)(?=[punct_\\s]|$)|[punct_\\s](\\*+)(?=[^punct*_\\s])|[\\s](\\*+)(?=[punct_])|[punct_](\\*+)(?=[punct_])|[^punct*_\\s](\\*+)(?=[^punct*_\\s])/,\n    rDelimUnd: /^[^_*]*?\\*\\*[^_*]*?\\_[^_*]*?(?=\\*\\*)|[punct*](\\_+)(?=[\\s]|$)|[^punct*_\\s](\\_+)(?=[punct*\\s]|$)|[punct*\\s](\\_+)(?=[^punct*_\\s])|[\\s](\\_+)(?=[punct*])|[punct*](\\_+)(?=[punct*])/ // ^- Not allowed for _\n  },\n  code: /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/,\n  br: /^( {2,}|\\\\)\\n(?!\\s*$)/,\n  del: noopTest,\n  text: /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/,\n  punctuation: /^([\\spunctuation])/\n};\n\n// list of punctuation marks from CommonMark spec\n// without * and _ to handle the different emphasis markers * and _\ninline._punctuation = '!\"#$%&\\'()+\\\\-.,/:;<=>?@\\\\[\\\\]`^{|}~';\ninline.punctuation = edit(inline.punctuation).replace(/punctuation/g, inline._punctuation).getRegex();\n\n// sequences em should skip over [title](link), `code`, <html>\ninline.blockSkip = /\\[[^\\]]*?\\]\\([^\\)]*?\\)|`[^`]*?`|<[^>]*?>/g;\ninline.escapedEmSt = /\\\\\\*|\\\\_/g;\n\ninline._comment = edit(block._comment).replace('(?:-->|$)', '-->').getRegex();\n\ninline.emStrong.lDelim = edit(inline.emStrong.lDelim)\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline.emStrong.rDelimAst = edit(inline.emStrong.rDelimAst, 'g')\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline.emStrong.rDelimUnd = edit(inline.emStrong.rDelimUnd, 'g')\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline._escapes = /\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/g;\n\ninline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;\ninline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;\ninline.autolink = edit(inline.autolink)\n  .replace('scheme', inline._scheme)\n  .replace('email', inline._email)\n  .getRegex();\n\ninline._attribute = /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/;\n\ninline.tag = edit(inline.tag)\n  .replace('comment', inline._comment)\n  .replace('attribute', inline._attribute)\n  .getRegex();\n\ninline._label = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\ninline._href = /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/;\ninline._title = /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/;\n\ninline.link = edit(inline.link)\n  .replace('label', inline._label)\n  .replace('href', inline._href)\n  .replace('title', inline._title)\n  .getRegex();\n\ninline.reflink = edit(inline.reflink)\n  .replace('label', inline._label)\n  .replace('ref', block._label)\n  .getRegex();\n\ninline.nolink = edit(inline.nolink)\n  .replace('ref', block._label)\n  .getRegex();\n\ninline.reflinkSearch = edit(inline.reflinkSearch, 'g')\n  .replace('reflink', inline.reflink)\n  .replace('nolink', inline.nolink)\n  .getRegex();\n\n/**\n * Normal Inline Grammar\n */\n\ninline.normal = merge({}, inline);\n\n/**\n * Pedantic Inline Grammar\n */\n\ninline.pedantic = merge({}, inline.normal, {\n  strong: {\n    start: /^__|\\*\\*/,\n    middle: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n    endAst: /\\*\\*(?!\\*)/g,\n    endUnd: /__(?!_)/g\n  },\n  em: {\n    start: /^_|\\*/,\n    middle: /^()\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)|^_(?=\\S)([\\s\\S]*?\\S)_(?!_)/,\n    endAst: /\\*(?!\\*)/g,\n    endUnd: /_(?!_)/g\n  },\n  link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n    .replace('label', inline._label)\n    .getRegex(),\n  reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n    .replace('label', inline._label)\n    .getRegex()\n});\n\n/**\n * GFM Inline Grammar\n */\n\ninline.gfm = merge({}, inline.normal, {\n  escape: edit(inline.escape).replace('])', '~|])').getRegex(),\n  _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,\n  url: /^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/,\n  _backpedal: /(?:[^?!.,:;*_~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,\n  del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n  text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n});\n\ninline.gfm.url = edit(inline.gfm.url, 'i')\n  .replace('email', inline.gfm._extended_email)\n  .getRegex();\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\ninline.breaks = merge({}, inline.gfm, {\n  br: edit(inline.br).replace('{2,}', '*').getRegex(),\n  text: edit(inline.gfm.text)\n    .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n    .replace(/\\{2,\\}/g, '*')\n    .getRegex()\n});\n\n/**\n * smartypants text replacement\n */\nfunction smartypants(text) {\n  return text\n    // em-dashes\n    .replace(/---/g, '\\u2014')\n    // en-dashes\n    .replace(/--/g, '\\u2013')\n    // opening singles\n    .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018')\n    // closing singles & apostrophes\n    .replace(/'/g, '\\u2019')\n    // opening doubles\n    .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c')\n    // closing doubles\n    .replace(/\"/g, '\\u201d')\n    // ellipses\n    .replace(/\\.{3}/g, '\\u2026');\n}\n\n/**\n * mangle email addresses\n */\nfunction mangle(text) {\n  let out = '',\n    i,\n    ch;\n\n  const l = text.length;\n  for (i = 0; i < l; i++) {\n    ch = text.charCodeAt(i);\n    if (Math.random() > 0.5) {\n      ch = 'x' + ch.toString(16);\n    }\n    out += '&#' + ch + ';';\n  }\n\n  return out;\n}\n\n/**\n * Block Lexer\n */\nclass Lexer {\n  constructor(options) {\n    this.tokens = [];\n    this.tokens.links = Object.create(null);\n    this.options = options || defaults;\n    this.options.tokenizer = this.options.tokenizer || new Tokenizer();\n    this.tokenizer = this.options.tokenizer;\n    this.tokenizer.options = this.options;\n    this.tokenizer.lexer = this;\n    this.inlineQueue = [];\n    this.state = {\n      inLink: false,\n      inRawBlock: false,\n      top: true\n    };\n\n    const rules = {\n      block: block.normal,\n      inline: inline.normal\n    };\n\n    if (this.options.pedantic) {\n      rules.block = block.pedantic;\n      rules.inline = inline.pedantic;\n    } else if (this.options.gfm) {\n      rules.block = block.gfm;\n      if (this.options.breaks) {\n        rules.inline = inline.breaks;\n      } else {\n        rules.inline = inline.gfm;\n      }\n    }\n    this.tokenizer.rules = rules;\n  }\n\n  /**\n   * Expose Rules\n   */\n  static get rules() {\n    return {\n      block,\n      inline\n    };\n  }\n\n  /**\n   * Static Lex Method\n   */\n  static lex(src, options) {\n    const lexer = new Lexer(options);\n    return lexer.lex(src);\n  }\n\n  /**\n   * Static Lex Inline Method\n   */\n  static lexInline(src, options) {\n    const lexer = new Lexer(options);\n    return lexer.inlineTokens(src);\n  }\n\n  /**\n   * Preprocessing\n   */\n  lex(src) {\n    src = src\n      .replace(/\\r\\n|\\r/g, '\\n')\n      .replace(/\\t/g, '    ');\n\n    this.blockTokens(src, this.tokens);\n\n    let next;\n    while (next = this.inlineQueue.shift()) {\n      this.inlineTokens(next.src, next.tokens);\n    }\n\n    return this.tokens;\n  }\n\n  /**\n   * Lexing\n   */\n  blockTokens(src, tokens = []) {\n    if (this.options.pedantic) {\n      src = src.replace(/^ +$/gm, '');\n    }\n    let token, lastToken, cutSrc, lastParagraphClipped;\n\n    while (src) {\n      if (this.options.extensions\n        && this.options.extensions.block\n        && this.options.extensions.block.some((extTokenizer) => {\n          if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return true;\n          }\n          return false;\n        })) {\n        continue;\n      }\n\n      // newline\n      if (token = this.tokenizer.space(src)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.length === 1 && tokens.length > 0) {\n          // if there's a single \\n as a spacer, it's terminating the last line,\n          // so move it there so that we don't get unecessary paragraph tags\n          tokens[tokens.length - 1].raw += '\\n';\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.code(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        // An indented code block cannot interrupt a paragraph.\n        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // fences\n      if (token = this.tokenizer.fences(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // heading\n      if (token = this.tokenizer.heading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // hr\n      if (token = this.tokenizer.hr(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // blockquote\n      if (token = this.tokenizer.blockquote(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // list\n      if (token = this.tokenizer.list(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // html\n      if (token = this.tokenizer.html(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // def\n      if (token = this.tokenizer.def(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.raw;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else if (!this.tokens.links[token.tag]) {\n          this.tokens.links[token.tag] = {\n            href: token.href,\n            title: token.title\n          };\n        }\n        continue;\n      }\n\n      // table (gfm)\n      if (token = this.tokenizer.table(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // lheading\n      if (token = this.tokenizer.lheading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // top-level paragraph\n      // prevent paragraph consuming extensions by clipping 'src' to extension start\n      cutSrc = src;\n      if (this.options.extensions && this.options.extensions.startBlock) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startBlock.forEach(function(getStartIndex) {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) { startIndex = Math.min(startIndex, tempStart); }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n        lastToken = tokens[tokens.length - 1];\n        if (lastParagraphClipped && lastToken.type === 'paragraph') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        lastParagraphClipped = (cutSrc.length !== src.length);\n        src = src.substring(token.raw.length);\n        continue;\n      }\n\n      // text\n      if (token = this.tokenizer.text(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && lastToken.type === 'text') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    this.state.top = true;\n    return tokens;\n  }\n\n  inline(src, tokens) {\n    this.inlineQueue.push({ src, tokens });\n  }\n\n  /**\n   * Lexing/Compiling\n   */\n  inlineTokens(src, tokens = []) {\n    let token, lastToken, cutSrc;\n\n    // String with links masked to avoid interference with em and strong\n    let maskedSrc = src;\n    let match;\n    let keepPrevChar, prevChar;\n\n    // Mask out reflinks\n    if (this.tokens.links) {\n      const links = Object.keys(this.tokens.links);\n      if (links.length > 0) {\n        while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n          if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n          }\n        }\n      }\n    }\n    // Mask out other blocks\n    while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n    }\n\n    // Mask out escaped em & strong delimiters\n    while ((match = this.tokenizer.rules.inline.escapedEmSt.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.escapedEmSt.lastIndex);\n    }\n\n    while (src) {\n      if (!keepPrevChar) {\n        prevChar = '';\n      }\n      keepPrevChar = false;\n\n      // extensions\n      if (this.options.extensions\n        && this.options.extensions.inline\n        && this.options.extensions.inline.some((extTokenizer) => {\n          if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return true;\n          }\n          return false;\n        })) {\n        continue;\n      }\n\n      // escape\n      if (token = this.tokenizer.escape(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // tag\n      if (token = this.tokenizer.tag(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // link\n      if (token = this.tokenizer.link(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // reflink, nolink\n      if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // em & strong\n      if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.codespan(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // br\n      if (token = this.tokenizer.br(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // del (gfm)\n      if (token = this.tokenizer.del(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // autolink\n      if (token = this.tokenizer.autolink(src, mangle)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // url (gfm)\n      if (!this.state.inLink && (token = this.tokenizer.url(src, mangle))) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // text\n      // prevent inlineText consuming extensions by clipping 'src' to extension start\n      cutSrc = src;\n      if (this.options.extensions && this.options.extensions.startInline) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startInline.forEach(function(getStartIndex) {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) { startIndex = Math.min(startIndex, tempStart); }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (token = this.tokenizer.inlineText(cutSrc, smartypants)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n          prevChar = token.raw.slice(-1);\n        }\n        keepPrevChar = true;\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    return tokens;\n  }\n}\n\n/**\n * Renderer\n */\nclass Renderer {\n  constructor(options) {\n    this.options = options || defaults;\n  }\n\n  code(code, infostring, escaped) {\n    const lang = (infostring || '').match(/\\S*/)[0];\n    if (this.options.highlight) {\n      const out = this.options.highlight(code, lang);\n      if (out != null && out !== code) {\n        escaped = true;\n        code = out;\n      }\n    }\n\n    code = code.replace(/\\n$/, '') + '\\n';\n\n    if (!lang) {\n      return '<pre><code>'\n        + (escaped ? code : escape(code, true))\n        + '</code></pre>\\n';\n    }\n\n    return '<pre><code class=\"'\n      + this.options.langPrefix\n      + escape(lang, true)\n      + '\">'\n      + (escaped ? code : escape(code, true))\n      + '</code></pre>\\n';\n  }\n\n  blockquote(quote) {\n    return '<blockquote>\\n' + quote + '</blockquote>\\n';\n  }\n\n  html(html) {\n    return html;\n  }\n\n  heading(text, level, raw, slugger) {\n    if (this.options.headerIds) {\n      return '<h'\n        + level\n        + ' id=\"'\n        + this.options.headerPrefix\n        + slugger.slug(raw)\n        + '\">'\n        + text\n        + '</h'\n        + level\n        + '>\\n';\n    }\n    // ignore IDs\n    return '<h' + level + '>' + text + '</h' + level + '>\\n';\n  }\n\n  hr() {\n    return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\n  }\n\n  list(body, ordered, start) {\n    const type = ordered ? 'ol' : 'ul',\n      startatt = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n    return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n  }\n\n  listitem(text) {\n    return '<li>' + text + '</li>\\n';\n  }\n\n  checkbox(checked) {\n    return '<input '\n      + (checked ? 'checked=\"\" ' : '')\n      + 'disabled=\"\" type=\"checkbox\"'\n      + (this.options.xhtml ? ' /' : '')\n      + '> ';\n  }\n\n  paragraph(text) {\n    return '<p>' + text + '</p>\\n';\n  }\n\n  table(header, body) {\n    if (body) body = '<tbody>' + body + '</tbody>';\n\n    return '<table>\\n'\n      + '<thead>\\n'\n      + header\n      + '</thead>\\n'\n      + body\n      + '</table>\\n';\n  }\n\n  tablerow(content) {\n    return '<tr>\\n' + content + '</tr>\\n';\n  }\n\n  tablecell(content, flags) {\n    const type = flags.header ? 'th' : 'td';\n    const tag = flags.align\n      ? '<' + type + ' align=\"' + flags.align + '\">'\n      : '<' + type + '>';\n    return tag + content + '</' + type + '>\\n';\n  }\n\n  // span level renderer\n  strong(text) {\n    return '<strong>' + text + '</strong>';\n  }\n\n  em(text) {\n    return '<em>' + text + '</em>';\n  }\n\n  codespan(text) {\n    return '<code>' + text + '</code>';\n  }\n\n  br() {\n    return this.options.xhtml ? '<br/>' : '<br>';\n  }\n\n  del(text) {\n    return '<del>' + text + '</del>';\n  }\n\n  link(href, title, text) {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n    if (href === null) {\n      return text;\n    }\n    let out = '<a href=\"' + escape(href) + '\"';\n    if (title) {\n      out += ' title=\"' + title + '\"';\n    }\n    out += '>' + text + '</a>';\n    return out;\n  }\n\n  image(href, title, text) {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n    if (href === null) {\n      return text;\n    }\n\n    let out = '<img src=\"' + href + '\" alt=\"' + text + '\"';\n    if (title) {\n      out += ' title=\"' + title + '\"';\n    }\n    out += this.options.xhtml ? '/>' : '>';\n    return out;\n  }\n\n  text(text) {\n    return text;\n  }\n}\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\nclass TextRenderer {\n  // no need for block level renderers\n  strong(text) {\n    return text;\n  }\n\n  em(text) {\n    return text;\n  }\n\n  codespan(text) {\n    return text;\n  }\n\n  del(text) {\n    return text;\n  }\n\n  html(text) {\n    return text;\n  }\n\n  text(text) {\n    return text;\n  }\n\n  link(href, title, text) {\n    return '' + text;\n  }\n\n  image(href, title, text) {\n    return '' + text;\n  }\n\n  br() {\n    return '';\n  }\n}\n\n/**\n * Slugger generates header id\n */\nclass Slugger {\n  constructor() {\n    this.seen = {};\n  }\n\n  serialize(value) {\n    return value\n      .toLowerCase()\n      .trim()\n      // remove html tags\n      .replace(/<[!\\/a-z].*?>/ig, '')\n      // remove unwanted chars\n      .replace(/[\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&()*+,./:;<=>?@[\\]^`{|}~]/g, '')\n      .replace(/\\s/g, '-');\n  }\n\n  /**\n   * Finds the next safe (unique) slug to use\n   */\n  getNextSafeSlug(originalSlug, isDryRun) {\n    let slug = originalSlug;\n    let occurenceAccumulator = 0;\n    if (this.seen.hasOwnProperty(slug)) {\n      occurenceAccumulator = this.seen[originalSlug];\n      do {\n        occurenceAccumulator++;\n        slug = originalSlug + '-' + occurenceAccumulator;\n      } while (this.seen.hasOwnProperty(slug));\n    }\n    if (!isDryRun) {\n      this.seen[originalSlug] = occurenceAccumulator;\n      this.seen[slug] = 0;\n    }\n    return slug;\n  }\n\n  /**\n   * Convert string to unique id\n   * @param {object} options\n   * @param {boolean} options.dryrun Generates the next unique slug without updating the internal accumulator.\n   */\n  slug(value, options = {}) {\n    const slug = this.serialize(value);\n    return this.getNextSafeSlug(slug, options.dryrun);\n  }\n}\n\n/**\n * Parsing & Compiling\n */\nclass Parser {\n  constructor(options) {\n    this.options = options || defaults;\n    this.options.renderer = this.options.renderer || new Renderer();\n    this.renderer = this.options.renderer;\n    this.renderer.options = this.options;\n    this.textRenderer = new TextRenderer();\n    this.slugger = new Slugger();\n  }\n\n  /**\n   * Static Parse Method\n   */\n  static parse(tokens, options) {\n    const parser = new Parser(options);\n    return parser.parse(tokens);\n  }\n\n  /**\n   * Static Parse Inline Method\n   */\n  static parseInline(tokens, options) {\n    const parser = new Parser(options);\n    return parser.parseInline(tokens);\n  }\n\n  /**\n   * Parse Loop\n   */\n  parse(tokens, top = true) {\n    let out = '',\n      i,\n      j,\n      k,\n      l2,\n      l3,\n      row,\n      cell,\n      header,\n      body,\n      token,\n      ordered,\n      start,\n      loose,\n      itemBody,\n      item,\n      checked,\n      task,\n      checkbox,\n      ret;\n\n    const l = tokens.length;\n    for (i = 0; i < l; i++) {\n      token = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n        if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(token.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      switch (token.type) {\n        case 'space': {\n          continue;\n        }\n        case 'hr': {\n          out += this.renderer.hr();\n          continue;\n        }\n        case 'heading': {\n          out += this.renderer.heading(\n            this.parseInline(token.tokens),\n            token.depth,\n            unescape(this.parseInline(token.tokens, this.textRenderer)),\n            this.slugger);\n          continue;\n        }\n        case 'code': {\n          out += this.renderer.code(token.text,\n            token.lang,\n            token.escaped);\n          continue;\n        }\n        case 'table': {\n          header = '';\n\n          // header\n          cell = '';\n          l2 = token.header.length;\n          for (j = 0; j < l2; j++) {\n            cell += this.renderer.tablecell(\n              this.parseInline(token.header[j].tokens),\n              { header: true, align: token.align[j] }\n            );\n          }\n          header += this.renderer.tablerow(cell);\n\n          body = '';\n          l2 = token.rows.length;\n          for (j = 0; j < l2; j++) {\n            row = token.rows[j];\n\n            cell = '';\n            l3 = row.length;\n            for (k = 0; k < l3; k++) {\n              cell += this.renderer.tablecell(\n                this.parseInline(row[k].tokens),\n                { header: false, align: token.align[k] }\n              );\n            }\n\n            body += this.renderer.tablerow(cell);\n          }\n          out += this.renderer.table(header, body);\n          continue;\n        }\n        case 'blockquote': {\n          body = this.parse(token.tokens);\n          out += this.renderer.blockquote(body);\n          continue;\n        }\n        case 'list': {\n          ordered = token.ordered;\n          start = token.start;\n          loose = token.loose;\n          l2 = token.items.length;\n\n          body = '';\n          for (j = 0; j < l2; j++) {\n            item = token.items[j];\n            checked = item.checked;\n            task = item.task;\n\n            itemBody = '';\n            if (item.task) {\n              checkbox = this.renderer.checkbox(checked);\n              if (loose) {\n                if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                  item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                  if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                    item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                  }\n                } else {\n                  item.tokens.unshift({\n                    type: 'text',\n                    text: checkbox\n                  });\n                }\n              } else {\n                itemBody += checkbox;\n              }\n            }\n\n            itemBody += this.parse(item.tokens, loose);\n            body += this.renderer.listitem(itemBody, task, checked);\n          }\n\n          out += this.renderer.list(body, ordered, start);\n          continue;\n        }\n        case 'html': {\n          // TODO parse inline content if parameter markdown=1\n          out += this.renderer.html(token.text);\n          continue;\n        }\n        case 'paragraph': {\n          out += this.renderer.paragraph(this.parseInline(token.tokens));\n          continue;\n        }\n        case 'text': {\n          body = token.tokens ? this.parseInline(token.tokens) : token.text;\n          while (i + 1 < l && tokens[i + 1].type === 'text') {\n            token = tokens[++i];\n            body += '\\n' + (token.tokens ? this.parseInline(token.tokens) : token.text);\n          }\n          out += top ? this.renderer.paragraph(body) : body;\n          continue;\n        }\n\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return;\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n\n    return out;\n  }\n\n  /**\n   * Parse Inline Tokens\n   */\n  parseInline(tokens, renderer) {\n    renderer = renderer || this.renderer;\n    let out = '',\n      i,\n      token,\n      ret;\n\n    const l = tokens.length;\n    for (i = 0; i < l; i++) {\n      token = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n        if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(token.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      switch (token.type) {\n        case 'escape': {\n          out += renderer.text(token.text);\n          break;\n        }\n        case 'html': {\n          out += renderer.html(token.text);\n          break;\n        }\n        case 'link': {\n          out += renderer.link(token.href, token.title, this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'image': {\n          out += renderer.image(token.href, token.title, token.text);\n          break;\n        }\n        case 'strong': {\n          out += renderer.strong(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'em': {\n          out += renderer.em(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'codespan': {\n          out += renderer.codespan(token.text);\n          break;\n        }\n        case 'br': {\n          out += renderer.br();\n          break;\n        }\n        case 'del': {\n          out += renderer.del(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'text': {\n          out += renderer.text(token.text);\n          break;\n        }\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return;\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n    return out;\n  }\n}\n\n/**\n * Marked\n */\nfunction marked(src, opt, callback) {\n  // throw error in case of non string input\n  if (typeof src === 'undefined' || src === null) {\n    throw new Error('marked(): input parameter is undefined or null');\n  }\n  if (typeof src !== 'string') {\n    throw new Error('marked(): input parameter is of type '\n      + Object.prototype.toString.call(src) + ', string expected');\n  }\n\n  if (typeof opt === 'function') {\n    callback = opt;\n    opt = null;\n  }\n\n  opt = merge({}, marked.defaults, opt || {});\n  checkSanitizeDeprecation(opt);\n\n  if (callback) {\n    const highlight = opt.highlight;\n    let tokens;\n\n    try {\n      tokens = Lexer.lex(src, opt);\n    } catch (e) {\n      return callback(e);\n    }\n\n    const done = function(err) {\n      let out;\n\n      if (!err) {\n        try {\n          if (opt.walkTokens) {\n            marked.walkTokens(tokens, opt.walkTokens);\n          }\n          out = Parser.parse(tokens, opt);\n        } catch (e) {\n          err = e;\n        }\n      }\n\n      opt.highlight = highlight;\n\n      return err\n        ? callback(err)\n        : callback(null, out);\n    };\n\n    if (!highlight || highlight.length < 3) {\n      return done();\n    }\n\n    delete opt.highlight;\n\n    if (!tokens.length) return done();\n\n    let pending = 0;\n    marked.walkTokens(tokens, function(token) {\n      if (token.type === 'code') {\n        pending++;\n        setTimeout(() => {\n          highlight(token.text, token.lang, function(err, code) {\n            if (err) {\n              return done(err);\n            }\n            if (code != null && code !== token.text) {\n              token.text = code;\n              token.escaped = true;\n            }\n\n            pending--;\n            if (pending === 0) {\n              done();\n            }\n          });\n        }, 0);\n      }\n    });\n\n    if (pending === 0) {\n      done();\n    }\n\n    return;\n  }\n\n  try {\n    const tokens = Lexer.lex(src, opt);\n    if (opt.walkTokens) {\n      marked.walkTokens(tokens, opt.walkTokens);\n    }\n    return Parser.parse(tokens, opt);\n  } catch (e) {\n    e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n    if (opt.silent) {\n      return '<p>An error occurred:</p><pre>'\n        + escape(e.message + '', true)\n        + '</pre>';\n    }\n    throw e;\n  }\n}\n\n/**\n * Options\n */\n\nmarked.options =\nmarked.setOptions = function(opt) {\n  merge(marked.defaults, opt);\n  changeDefaults(marked.defaults);\n  return marked;\n};\n\nmarked.getDefaults = getDefaults;\n\nmarked.defaults = defaults;\n\n/**\n * Use Extension\n */\n\nmarked.use = function(...args) {\n  const opts = merge({}, ...args);\n  const extensions = marked.defaults.extensions || { renderers: {}, childTokens: {} };\n  let hasExtensions;\n\n  args.forEach((pack) => {\n    // ==-- Parse \"addon\" extensions --== //\n    if (pack.extensions) {\n      hasExtensions = true;\n      pack.extensions.forEach((ext) => {\n        if (!ext.name) {\n          throw new Error('extension name required');\n        }\n        if (ext.renderer) { // Renderer extensions\n          const prevRenderer = extensions.renderers ? extensions.renderers[ext.name] : null;\n          if (prevRenderer) {\n            // Replace extension with func to run new extension but fall back if false\n            extensions.renderers[ext.name] = function(...args) {\n              let ret = ext.renderer.apply(this, args);\n              if (ret === false) {\n                ret = prevRenderer.apply(this, args);\n              }\n              return ret;\n            };\n          } else {\n            extensions.renderers[ext.name] = ext.renderer;\n          }\n        }\n        if (ext.tokenizer) { // Tokenizer Extensions\n          if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n            throw new Error(\"extension level must be 'block' or 'inline'\");\n          }\n          if (extensions[ext.level]) {\n            extensions[ext.level].unshift(ext.tokenizer);\n          } else {\n            extensions[ext.level] = [ext.tokenizer];\n          }\n          if (ext.start) { // Function to check for start of token\n            if (ext.level === 'block') {\n              if (extensions.startBlock) {\n                extensions.startBlock.push(ext.start);\n              } else {\n                extensions.startBlock = [ext.start];\n              }\n            } else if (ext.level === 'inline') {\n              if (extensions.startInline) {\n                extensions.startInline.push(ext.start);\n              } else {\n                extensions.startInline = [ext.start];\n              }\n            }\n          }\n        }\n        if (ext.childTokens) { // Child tokens to be visited by walkTokens\n          extensions.childTokens[ext.name] = ext.childTokens;\n        }\n      });\n    }\n\n    // ==-- Parse \"overwrite\" extensions --== //\n    if (pack.renderer) {\n      const renderer = marked.defaults.renderer || new Renderer();\n      for (const prop in pack.renderer) {\n        const prevRenderer = renderer[prop];\n        // Replace renderer with func to run extension, but fall back if false\n        renderer[prop] = (...args) => {\n          let ret = pack.renderer[prop].apply(renderer, args);\n          if (ret === false) {\n            ret = prevRenderer.apply(renderer, args);\n          }\n          return ret;\n        };\n      }\n      opts.renderer = renderer;\n    }\n    if (pack.tokenizer) {\n      const tokenizer = marked.defaults.tokenizer || new Tokenizer();\n      for (const prop in pack.tokenizer) {\n        const prevTokenizer = tokenizer[prop];\n        // Replace tokenizer with func to run extension, but fall back if false\n        tokenizer[prop] = (...args) => {\n          let ret = pack.tokenizer[prop].apply(tokenizer, args);\n          if (ret === false) {\n            ret = prevTokenizer.apply(tokenizer, args);\n          }\n          return ret;\n        };\n      }\n      opts.tokenizer = tokenizer;\n    }\n\n    // ==-- Parse WalkTokens extensions --== //\n    if (pack.walkTokens) {\n      const walkTokens = marked.defaults.walkTokens;\n      opts.walkTokens = function(token) {\n        pack.walkTokens.call(this, token);\n        if (walkTokens) {\n          walkTokens.call(this, token);\n        }\n      };\n    }\n\n    if (hasExtensions) {\n      opts.extensions = extensions;\n    }\n\n    marked.setOptions(opts);\n  });\n};\n\n/**\n * Run callback for every token\n */\n\nmarked.walkTokens = function(tokens, callback) {\n  for (const token of tokens) {\n    callback.call(marked, token);\n    switch (token.type) {\n      case 'table': {\n        for (const cell of token.header) {\n          marked.walkTokens(cell.tokens, callback);\n        }\n        for (const row of token.rows) {\n          for (const cell of row) {\n            marked.walkTokens(cell.tokens, callback);\n          }\n        }\n        break;\n      }\n      case 'list': {\n        marked.walkTokens(token.items, callback);\n        break;\n      }\n      default: {\n        if (marked.defaults.extensions && marked.defaults.extensions.childTokens && marked.defaults.extensions.childTokens[token.type]) { // Walk any extensions\n          marked.defaults.extensions.childTokens[token.type].forEach(function(childTokens) {\n            marked.walkTokens(token[childTokens], callback);\n          });\n        } else if (token.tokens) {\n          marked.walkTokens(token.tokens, callback);\n        }\n      }\n    }\n  }\n};\n\n/**\n * Parse Inline\n */\nmarked.parseInline = function(src, opt) {\n  // throw error in case of non string input\n  if (typeof src === 'undefined' || src === null) {\n    throw new Error('marked.parseInline(): input parameter is undefined or null');\n  }\n  if (typeof src !== 'string') {\n    throw new Error('marked.parseInline(): input parameter is of type '\n      + Object.prototype.toString.call(src) + ', string expected');\n  }\n\n  opt = merge({}, marked.defaults, opt || {});\n  checkSanitizeDeprecation(opt);\n\n  try {\n    const tokens = Lexer.lexInline(src, opt);\n    if (opt.walkTokens) {\n      marked.walkTokens(tokens, opt.walkTokens);\n    }\n    return Parser.parseInline(tokens, opt);\n  } catch (e) {\n    e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n    if (opt.silent) {\n      return '<p>An error occurred:</p><pre>'\n        + escape(e.message + '', true)\n        + '</pre>';\n    }\n    throw e;\n  }\n};\n\n/**\n * Expose\n */\nmarked.Parser = Parser;\nmarked.parser = Parser.parse;\nmarked.Renderer = Renderer;\nmarked.TextRenderer = TextRenderer;\nmarked.Lexer = Lexer;\nmarked.lexer = Lexer.lex;\nmarked.Tokenizer = Tokenizer;\nmarked.Slugger = Slugger;\nmarked.parse = marked;\n\nconst options = marked.options;\nconst setOptions = marked.setOptions;\nconst use = marked.use;\nconst walkTokens = marked.walkTokens;\nconst parseInline = marked.parseInline;\nconst parse = marked;\nconst parser = Parser.parse;\nconst lexer = Lexer.lex;\n\nexport { Lexer, Parser, Renderer, Slugger, TextRenderer, Tokenizer, defaults, getDefaults, lexer, marked, options, parse, parseInline, parser, setOptions, use, walkTokens };\n"],"names":["defaults","baseUrl","breaks","extensions","gfm","headerIds","headerPrefix","highlight","langPrefix","mangle","pedantic","renderer","sanitize","sanitizer","silent","smartLists","smartypants","tokenizer","walkTokens","xhtml","escapeTest","escapeReplace","escapeTestNoEncode","escapeReplaceNoEncode","escapeReplacements","getEscapeReplacement","ch","escape","html","encode","test","replace","unescapeTest","unescape","_","n","toLowerCase","charAt","String","fromCharCode","parseInt","substring","caret","edit","regex","opt","source","obj","name","val","getRegex","RegExp","nonWordAndColonTest","originIndependentUrl","cleanUrl","base","href","prot","decodeURIComponent","e","indexOf","baseUrls","justDomain","rtrim","relativeBase","protocol","domain","resolveUrl","encodeURI","noopTest","exec","merge","target","key","i","arguments","length","Object","prototype","hasOwnProperty","call","splitCells","tableRow","count","cells","match","offset","str","escaped","curr","split","trim","shift","pop","splice","push","c","invert","l","suffLen","currChar","substr","checkSanitizeDeprecation","console","warn","repeatString","pattern","result","outputLink","cap","link","raw","lexer","title","text","state","inLink","token","type","tokens","inlineTokens","Tokenizer","constructor","options","this","space","src","rules","block","newline","code","codeBlockStyle","fences","matchIndentToCode","indentToCode","map","node","matchIndentInNode","indentInNode","slice","join","indentCodeCompensation","lang","heading","trimmed","depth","inline","hr","blockquote","blockTokens","list","istask","ischecked","indent","blankLine","endsWithBlankLine","line","nextLine","rawLine","itemContents","endEarly","bull","isordered","ordered","start","loose","items","itemRegex","trimLeft","search","nextBulletRegex","Math","min","task","checked","trimRight","top","spacers","filter","t","hasMultipleLineBreaks","every","chars","lineBreaks","char","pre","def","tag","table","item","header","align","rows","j","k","row","lheading","paragraph","inRawBlock","trimmedUrl","rtrimSlash","lastParenIndex","b","level","findClosingBracket","linkLen","_escapes","reflink","links","nolink","emStrong","maskedSrc","prevChar","lDelim","nextChar","punctuation","lLength","rDelim","rLength","delimTotal","midDelimTotal","endReg","rDelimAst","rDelimUnd","lastIndex","index","codespan","hasNonSpaceChars","hasSpaceCharsOnBothEnds","br","del","autolink","url","prevCapZero","_backpedal","inlineText","_paragraph","_label","_title","bullet","listItemStart","_tag","_comment","normal","reflinkSearch","out","charCodeAt","random","toString","_punctuation","blockSkip","escapedEmSt","_scheme","_email","_attribute","_href","strong","middle","endAst","endUnd","em","_extended_email","Lexer","create","inlineQueue","static","lex","next","lastToken","cutSrc","lastParagraphClipped","some","extTokenizer","startBlock","startIndex","Infinity","tempSrc","tempStart","forEach","getStartIndex","errMsg","error","Error","keepPrevChar","keys","includes","lastIndexOf","startInline","Renderer","infostring","quote","slugger","slug","body","listitem","checkbox","tablerow","content","tablecell","flags","image","TextRenderer","Slugger","seen","serialize","value","getNextSafeSlug","originalSlug","isDryRun","occurenceAccumulator","dryrun","Parser","textRenderer","parse","parseInline","l2","l3","cell","itemBody","ret","renderers","parser","unshift","marked","callback","done","err","pending","setTimeout","message","setOptions","newDefaults","getDefaults","use","args","opts","childTokens","hasExtensions","pack","ext","prevRenderer","apply","prop","prevTokenizer","lexInline"],"sourceRoot":""}
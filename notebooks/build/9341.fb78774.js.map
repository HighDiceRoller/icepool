{"version":3,"file":"9341.fb78774.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/filebrowser/lib/crumbs.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/filebrowser/lib/listing.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/filebrowser/lib/browser.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/filebrowser/lib/model.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/filebrowser/lib/opendialog.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/filebrowser/lib/tokens.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/filebrowser/lib/upload.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/filebrowser/lib/uploadstatus.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { DOMUtils, showErrorMessage } from '@jupyterlab/apputils';\nimport { PageConfig, PathExt } from '@jupyterlab/coreutils';\nimport { renameFile } from '@jupyterlab/docmanager';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { ellipsesIcon, homeIcon as preferredIcon, folderIcon as rootIcon } from '@jupyterlab/ui-components';\nimport { ArrayExt } from '@lumino/algorithm';\nimport { ElementExt } from '@lumino/domutils';\nimport { Widget } from '@lumino/widgets';\n/**\n * The class name added to the breadcrumb node.\n */\nconst BREADCRUMB_CLASS = 'jp-BreadCrumbs';\n/**\n * The class name for the breadcrumbs home node\n */\nconst BREADCRUMB_ROOT_CLASS = 'jp-BreadCrumbs-home';\n/**\n * The class name for the breadcrumbs preferred node\n */\nconst BREADCRUMB_PREFERRED_CLASS = 'jp-BreadCrumbs-preferred';\n/**\n * The class name added to the breadcrumb node.\n */\nconst BREADCRUMB_ITEM_CLASS = 'jp-BreadCrumbs-item';\n/**\n * Bread crumb paths.\n */\nconst BREAD_CRUMB_PATHS = ['/', '../../', '../', ''];\n/**\n * The mime type for a contents drag object.\n */\nconst CONTENTS_MIME = 'application/x-jupyter-icontents';\n/**\n * The class name added to drop targets.\n */\nconst DROP_TARGET_CLASS = 'jp-mod-dropTarget';\n/**\n * A class which hosts folder breadcrumbs.\n */\nexport class BreadCrumbs extends Widget {\n    /**\n     * Construct a new file browser crumb widget.\n     *\n     * @param model - The file browser view model.\n     */\n    constructor(options) {\n        super();\n        this.translator = options.translator || nullTranslator;\n        this._trans = this.translator.load('jupyterlab');\n        this._model = options.model;\n        this.addClass(BREADCRUMB_CLASS);\n        this._crumbs = Private.createCrumbs();\n        this._crumbSeps = Private.createCrumbSeparators();\n        this._hasPreferred =\n            PageConfig.getOption('preferredPath') !== '/' ? true : false;\n        if (this._hasPreferred) {\n            this.node.appendChild(this._crumbs[Private.Crumb.Preferred]);\n        }\n        this.node.appendChild(this._crumbs[Private.Crumb.Home]);\n        this._model.refreshed.connect(this.update, this);\n    }\n    /**\n     * Handle the DOM events for the bread crumbs.\n     *\n     * @param event - The DOM event sent to the widget.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the panel's DOM node. It should\n     * not be called directly by user code.\n     */\n    handleEvent(event) {\n        switch (event.type) {\n            case 'click':\n                this._evtClick(event);\n                break;\n            case 'lm-dragenter':\n                this._evtDragEnter(event);\n                break;\n            case 'lm-dragleave':\n                this._evtDragLeave(event);\n                break;\n            case 'lm-dragover':\n                this._evtDragOver(event);\n                break;\n            case 'lm-drop':\n                this._evtDrop(event);\n                break;\n            default:\n                return;\n        }\n    }\n    /**\n     * A message handler invoked on an `'after-attach'` message.\n     */\n    onAfterAttach(msg) {\n        super.onAfterAttach(msg);\n        this.update();\n        const node = this.node;\n        node.addEventListener('click', this);\n        node.addEventListener('lm-dragenter', this);\n        node.addEventListener('lm-dragleave', this);\n        node.addEventListener('lm-dragover', this);\n        node.addEventListener('lm-drop', this);\n    }\n    /**\n     * A message handler invoked on a `'before-detach'` message.\n     */\n    onBeforeDetach(msg) {\n        super.onBeforeDetach(msg);\n        const node = this.node;\n        node.removeEventListener('click', this);\n        node.removeEventListener('lm-dragenter', this);\n        node.removeEventListener('lm-dragleave', this);\n        node.removeEventListener('lm-dragover', this);\n        node.removeEventListener('lm-drop', this);\n    }\n    /**\n     * A handler invoked on an `'update-request'` message.\n     */\n    onUpdateRequest(msg) {\n        // Update the breadcrumb list.\n        const contents = this._model.manager.services.contents;\n        const localPath = contents.localPath(this._model.path);\n        Private.updateCrumbs(this._crumbs, this._crumbSeps, localPath, this._hasPreferred);\n    }\n    /**\n     * Handle the `'click'` event for the widget.\n     */\n    _evtClick(event) {\n        // Do nothing if it's not a left mouse press.\n        if (event.button !== 0) {\n            return;\n        }\n        // Find a valid click target.\n        let node = event.target;\n        while (node && node !== this.node) {\n            if (node.classList.contains(BREADCRUMB_PREFERRED_CLASS)) {\n                this._model\n                    .cd(PageConfig.getOption('preferredPath'))\n                    .catch(error => showErrorMessage(this._trans.__('Open Error'), error));\n                // Stop the event propagation.\n                event.preventDefault();\n                event.stopPropagation();\n                return;\n            }\n            if (node.classList.contains(BREADCRUMB_ITEM_CLASS) ||\n                node.classList.contains(BREADCRUMB_ROOT_CLASS)) {\n                const index = ArrayExt.findFirstIndex(this._crumbs, value => value === node);\n                this._model\n                    .cd(BREAD_CRUMB_PATHS[index])\n                    .catch(error => showErrorMessage(this._trans.__('Open Error'), error));\n                // Stop the event propagation.\n                event.preventDefault();\n                event.stopPropagation();\n                return;\n            }\n            node = node.parentElement;\n        }\n    }\n    /**\n     * Handle the `'lm-dragenter'` event for the widget.\n     */\n    _evtDragEnter(event) {\n        if (event.mimeData.hasData(CONTENTS_MIME)) {\n            const index = ArrayExt.findFirstIndex(this._crumbs, node => ElementExt.hitTest(node, event.clientX, event.clientY));\n            if (index !== -1) {\n                if (index !== Private.Crumb.Current) {\n                    this._crumbs[index].classList.add(DROP_TARGET_CLASS);\n                    event.preventDefault();\n                    event.stopPropagation();\n                }\n            }\n        }\n    }\n    /**\n     * Handle the `'lm-dragleave'` event for the widget.\n     */\n    _evtDragLeave(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        const dropTarget = DOMUtils.findElement(this.node, DROP_TARGET_CLASS);\n        if (dropTarget) {\n            dropTarget.classList.remove(DROP_TARGET_CLASS);\n        }\n    }\n    /**\n     * Handle the `'lm-dragover'` event for the widget.\n     */\n    _evtDragOver(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        event.dropAction = event.proposedAction;\n        const dropTarget = DOMUtils.findElement(this.node, DROP_TARGET_CLASS);\n        if (dropTarget) {\n            dropTarget.classList.remove(DROP_TARGET_CLASS);\n        }\n        const index = ArrayExt.findFirstIndex(this._crumbs, node => ElementExt.hitTest(node, event.clientX, event.clientY));\n        if (index !== -1) {\n            this._crumbs[index].classList.add(DROP_TARGET_CLASS);\n        }\n    }\n    /**\n     * Handle the `'lm-drop'` event for the widget.\n     */\n    _evtDrop(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        if (event.proposedAction === 'none') {\n            event.dropAction = 'none';\n            return;\n        }\n        if (!event.mimeData.hasData(CONTENTS_MIME)) {\n            return;\n        }\n        event.dropAction = event.proposedAction;\n        let target = event.target;\n        while (target && target.parentElement) {\n            if (target.classList.contains(DROP_TARGET_CLASS)) {\n                target.classList.remove(DROP_TARGET_CLASS);\n                break;\n            }\n            target = target.parentElement;\n        }\n        // Get the path based on the target node.\n        const index = ArrayExt.findFirstIndex(this._crumbs, node => node === target);\n        if (index === -1) {\n            return;\n        }\n        const model = this._model;\n        const path = PathExt.resolve(model.path, BREAD_CRUMB_PATHS[index]);\n        const manager = model.manager;\n        // Move all of the items.\n        const promises = [];\n        const oldPaths = event.mimeData.getData(CONTENTS_MIME);\n        for (const oldPath of oldPaths) {\n            const localOldPath = manager.services.contents.localPath(oldPath);\n            const name = PathExt.basename(localOldPath);\n            const newPath = PathExt.join(path, name);\n            promises.push(renameFile(manager, oldPath, newPath));\n        }\n        void Promise.all(promises).catch(err => {\n            return showErrorMessage(this._trans.__('Move Error'), err);\n        });\n    }\n}\n/**\n * The namespace for the crumbs private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Breadcrumb item list enum.\n     */\n    let Crumb;\n    (function (Crumb) {\n        Crumb[Crumb[\"Home\"] = 0] = \"Home\";\n        Crumb[Crumb[\"Ellipsis\"] = 1] = \"Ellipsis\";\n        Crumb[Crumb[\"Parent\"] = 2] = \"Parent\";\n        Crumb[Crumb[\"Current\"] = 3] = \"Current\";\n        Crumb[Crumb[\"Preferred\"] = 4] = \"Preferred\";\n    })(Crumb = Private.Crumb || (Private.Crumb = {}));\n    /**\n     * Populate the breadcrumb node.\n     */\n    function updateCrumbs(breadcrumbs, separators, path, hasPreferred) {\n        const node = breadcrumbs[0].parentNode;\n        // Remove all but the root or preferred node.\n        const firstChild = node.firstChild;\n        while (firstChild && firstChild.nextSibling) {\n            node.removeChild(firstChild.nextSibling);\n        }\n        if (hasPreferred) {\n            node.appendChild(breadcrumbs[Crumb.Home]);\n            node.appendChild(separators[0]);\n        }\n        else {\n            node.appendChild(separators[0]);\n        }\n        const parts = path.split('/');\n        if (parts.length > 2) {\n            node.appendChild(breadcrumbs[Crumb.Ellipsis]);\n            const grandParent = parts.slice(0, parts.length - 2).join('/');\n            breadcrumbs[Crumb.Ellipsis].title = grandParent;\n            node.appendChild(separators[1]);\n        }\n        if (path) {\n            if (parts.length >= 2) {\n                breadcrumbs[Crumb.Parent].textContent = parts[parts.length - 2];\n                node.appendChild(breadcrumbs[Crumb.Parent]);\n                const parent = parts.slice(0, parts.length - 1).join('/');\n                breadcrumbs[Crumb.Parent].title = parent;\n                node.appendChild(separators[2]);\n            }\n            breadcrumbs[Crumb.Current].textContent = parts[parts.length - 1];\n            node.appendChild(breadcrumbs[Crumb.Current]);\n            breadcrumbs[Crumb.Current].title = path;\n            node.appendChild(separators[3]);\n        }\n    }\n    Private.updateCrumbs = updateCrumbs;\n    /**\n     * Create the breadcrumb nodes.\n     */\n    function createCrumbs() {\n        const home = rootIcon.element({\n            className: BREADCRUMB_ROOT_CLASS,\n            tag: 'span',\n            title: PageConfig.getOption('serverRoot') || 'Jupyter Server Root',\n            stylesheet: 'breadCrumb'\n        });\n        const ellipsis = ellipsesIcon.element({\n            className: BREADCRUMB_ITEM_CLASS,\n            tag: 'span',\n            stylesheet: 'breadCrumb'\n        });\n        const parent = document.createElement('span');\n        parent.className = BREADCRUMB_ITEM_CLASS;\n        const current = document.createElement('span');\n        current.className = BREADCRUMB_ITEM_CLASS;\n        const preferred = preferredIcon.element({\n            className: BREADCRUMB_PREFERRED_CLASS,\n            tag: 'span',\n            title: PageConfig.getOption('preferredPath') || 'Jupyter Preferred Path',\n            stylesheet: 'breadCrumb'\n        });\n        return [home, ellipsis, parent, current, preferred];\n    }\n    Private.createCrumbs = createCrumbs;\n    /**\n     * Create the breadcrumb separator nodes.\n     */\n    function createCrumbSeparators() {\n        const items = [];\n        // The maximum number of directories that will be shown in the crumbs\n        const MAX_DIRECTORIES = 2;\n        // Make separators for after each directory, one at the beginning, and one\n        // after a possible ellipsis.\n        for (let i = 0; i < MAX_DIRECTORIES + 2; i++) {\n            const item = document.createElement('span');\n            item.textContent = '/';\n            items.push(item);\n        }\n        return items;\n    }\n    Private.createCrumbSeparators = createCrumbSeparators;\n})(Private || (Private = {}));\n//# sourceMappingURL=crumbs.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Dialog, DOMUtils, showDialog, showErrorMessage } from '@jupyterlab/apputils';\nimport { PathExt, Time } from '@jupyterlab/coreutils';\nimport { isValidFileName, renameFile } from '@jupyterlab/docmanager';\nimport { DocumentRegistry } from '@jupyterlab/docregistry';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { caretDownIcon, caretUpIcon, classes, LabIcon } from '@jupyterlab/ui-components';\nimport { ArrayExt, ArrayIterator, each, filter, find, StringExt, toArray } from '@lumino/algorithm';\nimport { MimeData, PromiseDelegate } from '@lumino/coreutils';\nimport { ElementExt } from '@lumino/domutils';\nimport { Drag } from '@lumino/dragdrop';\nimport { MessageLoop } from '@lumino/messaging';\nimport { Signal } from '@lumino/signaling';\nimport { h, VirtualDOM } from '@lumino/virtualdom';\nimport { Widget } from '@lumino/widgets';\n/**\n * The class name added to DirListing widget.\n */\nconst DIR_LISTING_CLASS = 'jp-DirListing';\n/**\n * The class name added to a dir listing header node.\n */\nconst HEADER_CLASS = 'jp-DirListing-header';\n/**\n * The class name added to a dir listing list header cell.\n */\nconst HEADER_ITEM_CLASS = 'jp-DirListing-headerItem';\n/**\n * The class name added to a header cell text node.\n */\nconst HEADER_ITEM_TEXT_CLASS = 'jp-DirListing-headerItemText';\n/**\n * The class name added to a header cell icon node.\n */\nconst HEADER_ITEM_ICON_CLASS = 'jp-DirListing-headerItemIcon';\n/**\n * The class name added to the dir listing content node.\n */\nconst CONTENT_CLASS = 'jp-DirListing-content';\n/**\n * The class name added to dir listing content item.\n */\nconst ITEM_CLASS = 'jp-DirListing-item';\n/**\n * The class name added to the listing item text cell.\n */\nconst ITEM_TEXT_CLASS = 'jp-DirListing-itemText';\n/**\n * The class name added to the listing item icon cell.\n */\nconst ITEM_ICON_CLASS = 'jp-DirListing-itemIcon';\n/**\n * The class name added to the listing item modified cell.\n */\nconst ITEM_MODIFIED_CLASS = 'jp-DirListing-itemModified';\n/**\n * The class name added to the dir listing editor node.\n */\nconst EDITOR_CLASS = 'jp-DirListing-editor';\n/**\n * The class name added to the name column header cell.\n */\nconst NAME_ID_CLASS = 'jp-id-name';\n/**\n * The class name added to the modified column header cell.\n */\nconst MODIFIED_ID_CLASS = 'jp-id-modified';\n/**\n * The class name added to the narrow column header cell.\n */\nconst NARROW_ID_CLASS = 'jp-id-narrow';\n/**\n * The class name added to the modified column header cell and modified item cell when hidden.\n */\nconst MODIFIED_COLUMN_HIDDEN = 'jp-LastModified-hidden';\n/**\n * The mime type for a contents drag object.\n */\nconst CONTENTS_MIME = 'application/x-jupyter-icontents';\n/**\n * The mime type for a rich contents drag object.\n */\nconst CONTENTS_MIME_RICH = 'application/x-jupyter-icontentsrich';\n/**\n * The class name added to drop targets.\n */\nconst DROP_TARGET_CLASS = 'jp-mod-dropTarget';\n/**\n * The class name added to selected rows.\n */\nconst SELECTED_CLASS = 'jp-mod-selected';\n/**\n * The class name added to drag state icons to add space between the icon and the file name\n */\nconst DRAG_ICON_CLASS = 'jp-DragIcon';\n/**\n * The class name added to the widget when there are items on the clipboard.\n */\nconst CLIPBOARD_CLASS = 'jp-mod-clipboard';\n/**\n * The class name added to cut rows.\n */\nconst CUT_CLASS = 'jp-mod-cut';\n/**\n * The class name added when there are more than one selected rows.\n */\nconst MULTI_SELECTED_CLASS = 'jp-mod-multiSelected';\n/**\n * The class name added to indicate running notebook.\n */\nconst RUNNING_CLASS = 'jp-mod-running';\n/**\n * The class name added for a descending sort.\n */\nconst DESCENDING_CLASS = 'jp-mod-descending';\n/**\n * The maximum duration between two key presses when selecting files by prefix.\n */\nconst PREFIX_APPEND_DURATION = 1000;\n/**\n * The threshold in pixels to start a drag event.\n */\nconst DRAG_THRESHOLD = 5;\n/**\n * A boolean indicating whether the platform is Mac.\n */\nconst IS_MAC = !!navigator.platform.match(/Mac/i);\n/**\n * The factory MIME type supported by lumino dock panels.\n */\nconst FACTORY_MIME = 'application/vnd.lumino.widget-factory';\n/**\n * A widget which hosts a file list area.\n */\nexport class DirListing extends Widget {\n    /**\n     * Construct a new file browser directory listing widget.\n     *\n     * @param model - The file browser view model.\n     */\n    constructor(options) {\n        super({\n            node: (options.renderer || DirListing.defaultRenderer).createNode()\n        });\n        this._items = [];\n        this._sortedItems = [];\n        this._sortState = {\n            direction: 'ascending',\n            key: 'name'\n        };\n        this._onItemOpened = new Signal(this);\n        this._drag = null;\n        this._dragData = null;\n        this._selectTimer = -1;\n        this._isCut = false;\n        this._prevPath = '';\n        this._clipboard = [];\n        this._softSelection = '';\n        this.selection = Object.create(null);\n        this._searchPrefix = '';\n        this._searchPrefixTimer = -1;\n        this._inRename = false;\n        this._isDirty = false;\n        this._hiddenColumns = new Set();\n        this.addClass(DIR_LISTING_CLASS);\n        this.translator = options.translator || nullTranslator;\n        this._trans = this.translator.load('jupyterlab');\n        this._model = options.model;\n        this._model.fileChanged.connect(this._onFileChanged, this);\n        this._model.refreshed.connect(this._onModelRefreshed, this);\n        this._model.pathChanged.connect(this._onPathChanged, this);\n        this._editNode = document.createElement('input');\n        this._editNode.className = EDITOR_CLASS;\n        this._manager = this._model.manager;\n        this._renderer = options.renderer || DirListing.defaultRenderer;\n        const headerNode = DOMUtils.findElement(this.node, HEADER_CLASS);\n        this._renderer.populateHeaderNode(headerNode, this.translator, this._hiddenColumns);\n        this._manager.activateRequested.connect(this._onActivateRequested, this);\n    }\n    /**\n     * Dispose of the resources held by the directory listing.\n     */\n    dispose() {\n        this._items.length = 0;\n        this._sortedItems.length = 0;\n        this._clipboard.length = 0;\n        super.dispose();\n    }\n    /**\n     * Get the model used by the listing.\n     */\n    get model() {\n        return this._model;\n    }\n    /**\n     * Get the dir listing header node.\n     *\n     * #### Notes\n     * This is the node which holds the header cells.\n     *\n     * Modifying this node directly can lead to undefined behavior.\n     */\n    get headerNode() {\n        return DOMUtils.findElement(this.node, HEADER_CLASS);\n    }\n    /**\n     * Get the dir listing content node.\n     *\n     * #### Notes\n     * This is the node which holds the item nodes.\n     *\n     * Modifying this node directly can lead to undefined behavior.\n     */\n    get contentNode() {\n        return DOMUtils.findElement(this.node, CONTENT_CLASS);\n    }\n    /**\n     * The renderer instance used by the directory listing.\n     */\n    get renderer() {\n        return this._renderer;\n    }\n    /**\n     * The current sort state.\n     */\n    get sortState() {\n        return this._sortState;\n    }\n    /**\n     * A signal fired when an item is opened.\n     */\n    get onItemOpened() {\n        return this._onItemOpened;\n    }\n    /**\n     * Create an iterator over the listing's selected items.\n     *\n     * @returns A new iterator over the listing's selected items.\n     */\n    selectedItems() {\n        const items = this._sortedItems;\n        return filter(items, item => this.selection[item.path]);\n    }\n    /**\n     * Create an iterator over the listing's sorted items.\n     *\n     * @returns A new iterator over the listing's sorted items.\n     */\n    sortedItems() {\n        return new ArrayIterator(this._sortedItems);\n    }\n    /**\n     * Sort the items using a sort condition.\n     */\n    sort(state) {\n        this._sortedItems = Private.sort(this.model.items(), state);\n        this._sortState = state;\n        this.update();\n    }\n    /**\n     * Rename the first currently selected item.\n     *\n     * @returns A promise that resolves with the new name of the item.\n     */\n    rename() {\n        return this._doRename();\n    }\n    /**\n     * Cut the selected items.\n     */\n    cut() {\n        this._isCut = true;\n        this._copy();\n        this.update();\n    }\n    /**\n     * Copy the selected items.\n     */\n    copy() {\n        this._copy();\n    }\n    /**\n     * Paste the items from the clipboard.\n     *\n     * @returns A promise that resolves when the operation is complete.\n     */\n    paste() {\n        if (!this._clipboard.length) {\n            this._isCut = false;\n            return Promise.resolve(undefined);\n        }\n        const basePath = this._model.path;\n        const promises = [];\n        each(this._clipboard, path => {\n            if (this._isCut) {\n                const parts = path.split('/');\n                const name = parts[parts.length - 1];\n                const newPath = PathExt.join(basePath, name);\n                promises.push(this._model.manager.rename(path, newPath));\n            }\n            else {\n                promises.push(this._model.manager.copy(path, basePath));\n            }\n        });\n        // Remove any cut modifiers.\n        each(this._items, item => {\n            item.classList.remove(CUT_CLASS);\n        });\n        this._clipboard.length = 0;\n        this._isCut = false;\n        this.removeClass(CLIPBOARD_CLASS);\n        return Promise.all(promises)\n            .then(() => {\n            return undefined;\n        })\n            .catch(error => {\n            void showErrorMessage(this._trans._p('showErrorMessage', 'Paste Error'), error);\n        });\n    }\n    /**\n     * Delete the currently selected item(s).\n     *\n     * @returns A promise that resolves when the operation is complete.\n     */\n    async delete() {\n        const items = this._sortedItems.filter(item => this.selection[item.path]);\n        if (!items.length) {\n            return;\n        }\n        const message = items.length === 1\n            ? this._trans.__('Are you sure you want to permanently delete: %1?', items[0].name)\n            : this._trans._n('Are you sure you want to permanently delete the %1 selected item?', 'Are you sure you want to permanently delete the %1 selected items?', items.length);\n        const result = await showDialog({\n            title: this._trans.__('Delete'),\n            body: message,\n            buttons: [\n                Dialog.cancelButton({ label: this._trans.__('Cancel') }),\n                Dialog.warnButton({ label: this._trans.__('Delete') })\n            ],\n            // By default focus on \"Cancel\" to protect from accidental deletion\n            // (\"delete\" and \"Enter\" are next to each other on many keyboards).\n            defaultButton: 0\n        });\n        if (!this.isDisposed && result.button.accept) {\n            await this._delete(items.map(item => item.path));\n        }\n    }\n    /**\n     * Duplicate the currently selected item(s).\n     *\n     * @returns A promise that resolves when the operation is complete.\n     */\n    duplicate() {\n        const basePath = this._model.path;\n        const promises = [];\n        each(this.selectedItems(), item => {\n            if (item.type !== 'directory') {\n                promises.push(this._model.manager.copy(item.path, basePath));\n            }\n        });\n        return Promise.all(promises)\n            .then(() => {\n            return undefined;\n        })\n            .catch(error => {\n            void showErrorMessage(this._trans._p('showErrorMessage', 'Duplicate file'), error);\n        });\n    }\n    /**\n     * Download the currently selected item(s).\n     */\n    async download() {\n        await Promise.all(toArray(this.selectedItems())\n            .filter(item => item.type !== 'directory')\n            .map(item => this._model.download(item.path)));\n    }\n    /**\n     * Shut down kernels on the applicable currently selected items.\n     *\n     * @returns A promise that resolves when the operation is complete.\n     */\n    shutdownKernels() {\n        const model = this._model;\n        const items = this._sortedItems;\n        const paths = items.map(item => item.path);\n        const promises = toArray(this._model.sessions())\n            .filter(session => {\n            const index = ArrayExt.firstIndexOf(paths, session.path);\n            return this.selection[items[index].path];\n        })\n            .map(session => model.manager.services.sessions.shutdown(session.id));\n        return Promise.all(promises)\n            .then(() => {\n            return undefined;\n        })\n            .catch(error => {\n            void showErrorMessage(this._trans._p('showErrorMessage', 'Shut down kernel'), error);\n        });\n    }\n    /**\n     * Select next item.\n     *\n     * @param keepExisting - Whether to keep the current selection and add to it.\n     */\n    selectNext(keepExisting = false) {\n        let index = -1;\n        const selected = Object.keys(this.selection);\n        const items = this._sortedItems;\n        if (selected.length === 1 || keepExisting) {\n            // Select the next item.\n            const path = selected[selected.length - 1];\n            index = ArrayExt.findFirstIndex(items, value => value.path === path);\n            index += 1;\n            if (index === this._items.length) {\n                index = 0;\n            }\n        }\n        else if (selected.length === 0) {\n            // Select the first item.\n            index = 0;\n        }\n        else {\n            // Select the last selected item.\n            const path = selected[selected.length - 1];\n            index = ArrayExt.findFirstIndex(items, value => value.path === path);\n        }\n        if (index !== -1) {\n            this._selectItem(index, keepExisting);\n            ElementExt.scrollIntoViewIfNeeded(this.contentNode, this._items[index]);\n        }\n    }\n    /**\n     * Select previous item.\n     *\n     * @param keepExisting - Whether to keep the current selection and add to it.\n     */\n    selectPrevious(keepExisting = false) {\n        let index = -1;\n        const selected = Object.keys(this.selection);\n        const items = this._sortedItems;\n        if (selected.length === 1 || keepExisting) {\n            // Select the previous item.\n            const path = selected[0];\n            index = ArrayExt.findFirstIndex(items, value => value.path === path);\n            index -= 1;\n            if (index === -1) {\n                index = this._items.length - 1;\n            }\n        }\n        else if (selected.length === 0) {\n            // Select the last item.\n            index = this._items.length - 1;\n        }\n        else {\n            // Select the first selected item.\n            const path = selected[0];\n            index = ArrayExt.findFirstIndex(items, value => value.path === path);\n        }\n        if (index !== -1) {\n            this._selectItem(index, keepExisting);\n            ElementExt.scrollIntoViewIfNeeded(this.contentNode, this._items[index]);\n        }\n    }\n    /**\n     * Select the first item that starts with prefix being typed.\n     */\n    selectByPrefix() {\n        const prefix = this._searchPrefix.toLowerCase();\n        const items = this._sortedItems;\n        const index = ArrayExt.findFirstIndex(items, value => {\n            return value.name.toLowerCase().substr(0, prefix.length) === prefix;\n        });\n        if (index !== -1) {\n            this._selectItem(index, false);\n            ElementExt.scrollIntoViewIfNeeded(this.contentNode, this._items[index]);\n        }\n    }\n    /**\n     * Get whether an item is selected by name.\n     *\n     * @param name - The name of of the item.\n     *\n     * @returns Whether the item is selected.\n     */\n    isSelected(name) {\n        const items = this._sortedItems;\n        return (toArray(filter(items, item => item.name === name && this.selection[item.path])).length !== 0);\n    }\n    /**\n     * Find a model given a click.\n     *\n     * @param event - The mouse event.\n     *\n     * @returns The model for the selected file.\n     */\n    modelForClick(event) {\n        const items = this._sortedItems;\n        const index = Private.hitTestNodes(this._items, event);\n        if (index !== -1) {\n            return items[index];\n        }\n        return undefined;\n    }\n    /**\n     * Clear the selected items.\n     */\n    clearSelectedItems() {\n        this.selection = Object.create(null);\n    }\n    /**\n     * Select an item by name.\n     *\n     * @param name - The name of the item to select.\n     * @param focus - Whether to move focus the selected item.\n     *\n     * @returns A promise that resolves when the name is selected.\n     */\n    async selectItemByName(name, focus = false) {\n        // Make sure the file is available.\n        await this.model.refresh();\n        if (this.isDisposed) {\n            throw new Error('File browser is disposed.');\n        }\n        const items = this._sortedItems;\n        const index = ArrayExt.findFirstIndex(items, value => value.name === name);\n        if (index === -1) {\n            throw new Error('Item does not exist.');\n        }\n        this._selectItem(index, false, focus);\n        MessageLoop.sendMessage(this, Widget.Msg.UpdateRequest);\n        ElementExt.scrollIntoViewIfNeeded(this.contentNode, this._items[index]);\n    }\n    /**\n     * Handle the DOM events for the directory listing.\n     *\n     * @param event - The DOM event sent to the widget.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the panel's DOM node. It should\n     * not be called directly by user code.\n     */\n    handleEvent(event) {\n        switch (event.type) {\n            case 'mousedown':\n                this._evtMousedown(event);\n                break;\n            case 'mouseup':\n                this._evtMouseup(event);\n                break;\n            case 'mousemove':\n                this._evtMousemove(event);\n                break;\n            case 'keydown':\n                this.evtKeydown(event);\n                break;\n            case 'click':\n                this._evtClick(event);\n                break;\n            case 'dblclick':\n                this.evtDblClick(event);\n                break;\n            case 'dragenter':\n            case 'dragover':\n                this.addClass('jp-mod-native-drop');\n                event.preventDefault();\n                break;\n            case 'dragleave':\n            case 'dragend':\n                this.removeClass('jp-mod-native-drop');\n                break;\n            case 'drop':\n                this.removeClass('jp-mod-native-drop');\n                this.evtNativeDrop(event);\n                break;\n            case 'scroll':\n                this._evtScroll(event);\n                break;\n            case 'lm-dragenter':\n                this.evtDragEnter(event);\n                break;\n            case 'lm-dragleave':\n                this.evtDragLeave(event);\n                break;\n            case 'lm-dragover':\n                this.evtDragOver(event);\n                break;\n            case 'lm-drop':\n                this.evtDrop(event);\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * A message handler invoked on an `'after-attach'` message.\n     */\n    onAfterAttach(msg) {\n        super.onAfterAttach(msg);\n        const node = this.node;\n        const content = DOMUtils.findElement(node, CONTENT_CLASS);\n        node.addEventListener('mousedown', this);\n        node.addEventListener('keydown', this);\n        node.addEventListener('click', this);\n        node.addEventListener('dblclick', this);\n        content.addEventListener('dragenter', this);\n        content.addEventListener('dragover', this);\n        content.addEventListener('dragleave', this);\n        content.addEventListener('dragend', this);\n        content.addEventListener('drop', this);\n        content.addEventListener('scroll', this);\n        content.addEventListener('lm-dragenter', this);\n        content.addEventListener('lm-dragleave', this);\n        content.addEventListener('lm-dragover', this);\n        content.addEventListener('lm-drop', this);\n    }\n    /**\n     * A message handler invoked on a `'before-detach'` message.\n     */\n    onBeforeDetach(msg) {\n        super.onBeforeDetach(msg);\n        const node = this.node;\n        const content = DOMUtils.findElement(node, CONTENT_CLASS);\n        node.removeEventListener('mousedown', this);\n        node.removeEventListener('keydown', this);\n        node.removeEventListener('click', this);\n        node.removeEventListener('dblclick', this);\n        content.removeEventListener('scroll', this);\n        content.removeEventListener('dragover', this);\n        content.removeEventListener('dragover', this);\n        content.removeEventListener('dragleave', this);\n        content.removeEventListener('dragend', this);\n        content.removeEventListener('drop', this);\n        content.removeEventListener('lm-dragenter', this);\n        content.removeEventListener('lm-dragleave', this);\n        content.removeEventListener('lm-dragover', this);\n        content.removeEventListener('lm-drop', this);\n        document.removeEventListener('mousemove', this, true);\n        document.removeEventListener('mouseup', this, true);\n    }\n    /**\n     * A message handler invoked on an `'after-show'` message.\n     */\n    onAfterShow(msg) {\n        if (this._isDirty) {\n            // Update the sorted items.\n            this.sort(this.sortState);\n            this.update();\n        }\n    }\n    /**\n     * A handler invoked on an `'update-request'` message.\n     */\n    onUpdateRequest(msg) {\n        this._isDirty = false;\n        // Fetch common variables.\n        const items = this._sortedItems;\n        const nodes = this._items;\n        const content = DOMUtils.findElement(this.node, CONTENT_CLASS);\n        const renderer = this._renderer;\n        this.removeClass(MULTI_SELECTED_CLASS);\n        this.removeClass(SELECTED_CLASS);\n        // Remove any excess item nodes.\n        while (nodes.length > items.length) {\n            content.removeChild(nodes.pop());\n        }\n        // Add any missing item nodes.\n        while (nodes.length < items.length) {\n            const node = renderer.createItemNode(this._hiddenColumns);\n            node.classList.add(ITEM_CLASS);\n            nodes.push(node);\n            content.appendChild(node);\n        }\n        // Remove extra classes from the nodes.\n        nodes.forEach(item => {\n            item.classList.remove(SELECTED_CLASS);\n            item.classList.remove(RUNNING_CLASS);\n            item.classList.remove(CUT_CLASS);\n        });\n        // Add extra classes to item nodes based on widget state.\n        items.forEach((item, i) => {\n            const node = nodes[i];\n            const ft = this._manager.registry.getFileTypeForModel(item);\n            renderer.updateItemNode(node, item, ft, this.translator, this._hiddenColumns);\n            if (this.selection[item.path]) {\n                node.classList.add(SELECTED_CLASS);\n                if (this._isCut && this._model.path === this._prevPath) {\n                    node.classList.add(CUT_CLASS);\n                }\n            }\n            // add metadata to the node\n            node.setAttribute('data-isdir', item.type === 'directory' ? 'true' : 'false');\n        });\n        // Handle the selectors on the widget node.\n        const selected = Object.keys(this.selection).length;\n        if (selected) {\n            this.addClass(SELECTED_CLASS);\n            if (selected > 1) {\n                this.addClass(MULTI_SELECTED_CLASS);\n            }\n        }\n        // Handle file session statuses.\n        const paths = items.map(item => item.path);\n        each(this._model.sessions(), session => {\n            var _a;\n            const index = ArrayExt.firstIndexOf(paths, session.path);\n            const node = nodes[index];\n            // Node may have been filtered out.\n            if (node) {\n                let name = (_a = session.kernel) === null || _a === void 0 ? void 0 : _a.name;\n                const specs = this._model.specs;\n                node.classList.add(RUNNING_CLASS);\n                if (specs && name) {\n                    const spec = specs.kernelspecs[name];\n                    name = spec ? spec.display_name : 'unknown'; // FIXME-TRANS: Is this localizable?\n                }\n                node.title = this._trans.__('%1\\nKernel: %2', node.title, name);\n            }\n        });\n        this._prevPath = this._model.path;\n    }\n    onResize(msg) {\n        const { width } = msg.width === -1 ? this.node.getBoundingClientRect() : msg;\n        this.toggleClass('jp-DirListing-narrow', width < 250);\n    }\n    setColumnVisibility(name, visible) {\n        if (visible) {\n            this._hiddenColumns.delete(name);\n        }\n        else {\n            this._hiddenColumns.add(name);\n        }\n        this.headerNode.innerHTML = '';\n        this._renderer.populateHeaderNode(this.headerNode, this.translator, this._hiddenColumns);\n    }\n    /**\n     * Handle the `'click'` event for the widget.\n     */\n    _evtClick(event) {\n        const target = event.target;\n        const header = this.headerNode;\n        if (header.contains(target)) {\n            const state = this.renderer.handleHeaderClick(header, event);\n            if (state) {\n                this.sort(state);\n            }\n            return;\n        }\n    }\n    /**\n     * Handle the `'scroll'` event for the widget.\n     */\n    _evtScroll(event) {\n        this.headerNode.scrollLeft = this.contentNode.scrollLeft;\n    }\n    /**\n     * Handle the `'mousedown'` event for the widget.\n     */\n    _evtMousedown(event) {\n        // Bail if clicking within the edit node\n        if (event.target === this._editNode) {\n            return;\n        }\n        // Blur the edit node if necessary.\n        if (this._editNode.parentNode) {\n            if (this._editNode !== event.target) {\n                this._editNode.focus();\n                this._editNode.blur();\n                clearTimeout(this._selectTimer);\n            }\n            else {\n                return;\n            }\n        }\n        let index = Private.hitTestNodes(this._items, event);\n        if (index === -1) {\n            return;\n        }\n        this.handleFileSelect(event);\n        if (event.button !== 0) {\n            clearTimeout(this._selectTimer);\n        }\n        // Check for clearing a context menu.\n        const newContext = (IS_MAC && event.ctrlKey) || event.button === 2;\n        if (newContext) {\n            return;\n        }\n        // Left mouse press for drag start.\n        if (event.button === 0) {\n            this._dragData = {\n                pressX: event.clientX,\n                pressY: event.clientY,\n                index: index\n            };\n            document.addEventListener('mouseup', this, true);\n            document.addEventListener('mousemove', this, true);\n        }\n    }\n    /**\n     * Handle the `'mouseup'` event for the widget.\n     */\n    _evtMouseup(event) {\n        // Handle any soft selection from the previous mouse down.\n        if (this._softSelection) {\n            const altered = event.metaKey || event.shiftKey || event.ctrlKey;\n            // See if we need to clear the other selection.\n            if (!altered && event.button === 0) {\n                this.clearSelectedItems();\n                this.selection[this._softSelection] = true;\n                this.update();\n            }\n            this._softSelection = '';\n        }\n        // Re-focus the selected file. This is needed because nodes corresponding\n        // to files selected in mousedown handler will not retain the focus\n        // as mousedown event is always followed by a blur/focus event.\n        if (event.button === 0) {\n            this._focusSelectedFile();\n        }\n        // Remove the drag listeners if necessary.\n        if (event.button !== 0 || !this._drag) {\n            document.removeEventListener('mousemove', this, true);\n            document.removeEventListener('mouseup', this, true);\n            return;\n        }\n        event.preventDefault();\n        event.stopPropagation();\n    }\n    /**\n     * Handle the `'mousemove'` event for the widget.\n     */\n    _evtMousemove(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        // Bail if we are the one dragging.\n        if (this._drag || !this._dragData) {\n            return;\n        }\n        // Check for a drag initialization.\n        const data = this._dragData;\n        const dx = Math.abs(event.clientX - data.pressX);\n        const dy = Math.abs(event.clientY - data.pressY);\n        if (dx < DRAG_THRESHOLD && dy < DRAG_THRESHOLD) {\n            return;\n        }\n        this._startDrag(data.index, event.clientX, event.clientY);\n    }\n    /**\n     * Handle the opening of an item.\n     */\n    handleOpen(item) {\n        this._onItemOpened.emit(item);\n        if (item.type === 'directory') {\n            const localPath = this._manager.services.contents.localPath(item.path);\n            this._model\n                .cd(`/${localPath}`)\n                .catch(error => showErrorMessage(this._trans._p('showErrorMessage', 'Open directory'), error));\n        }\n        else {\n            const path = item.path;\n            this._manager.openOrReveal(path);\n        }\n    }\n    /**\n     * Handle the `'keydown'` event for the widget.\n     */\n    evtKeydown(event) {\n        switch (event.keyCode) {\n            case 13: {\n                // Enter\n                // Do nothing if any modifier keys are pressed.\n                if (event.ctrlKey || event.shiftKey || event.altKey || event.metaKey) {\n                    return;\n                }\n                event.preventDefault();\n                event.stopPropagation();\n                const selected = Object.keys(this.selection);\n                const path = selected[0];\n                const items = this._sortedItems;\n                const i = ArrayExt.findFirstIndex(items, value => value.path === path);\n                if (i === -1) {\n                    return;\n                }\n                const item = this._sortedItems[i];\n                this.handleOpen(item);\n                break;\n            }\n            case 38: // Up arrow\n                this.selectPrevious(event.shiftKey);\n                event.stopPropagation();\n                event.preventDefault();\n                break;\n            case 40: // Down arrow\n                this.selectNext(event.shiftKey);\n                event.stopPropagation();\n                event.preventDefault();\n                break;\n            default:\n                break;\n        }\n        // Detects printable characters typed by the user.\n        // Not all browsers support .key, but it discharges us from reconstructing\n        // characters from key codes.\n        if (!this._inRename && event.key !== undefined && event.key.length === 1) {\n            if (event.ctrlKey || event.shiftKey || event.altKey || event.metaKey) {\n                return;\n            }\n            this._searchPrefix += event.key;\n            clearTimeout(this._searchPrefixTimer);\n            this._searchPrefixTimer = window.setTimeout(() => {\n                this._searchPrefix = '';\n            }, PREFIX_APPEND_DURATION);\n            this.selectByPrefix();\n            event.stopPropagation();\n            event.preventDefault();\n        }\n    }\n    /**\n     * Handle the `'dblclick'` event for the widget.\n     */\n    evtDblClick(event) {\n        // Do nothing if it's not a left mouse press.\n        if (event.button !== 0) {\n            return;\n        }\n        // Do nothing if any modifier keys are pressed.\n        if (event.ctrlKey || event.shiftKey || event.altKey || event.metaKey) {\n            return;\n        }\n        // Stop the event propagation.\n        event.preventDefault();\n        event.stopPropagation();\n        clearTimeout(this._selectTimer);\n        this._editNode.blur();\n        // Find a valid double click target.\n        const target = event.target;\n        const i = ArrayExt.findFirstIndex(this._items, node => node.contains(target));\n        if (i === -1) {\n            return;\n        }\n        const item = this._sortedItems[i];\n        this.handleOpen(item);\n    }\n    /**\n     * Handle the `drop` event for the widget.\n     */\n    evtNativeDrop(event) {\n        var _a, _b, _c;\n        const files = (_a = event.dataTransfer) === null || _a === void 0 ? void 0 : _a.files;\n        if (!files || files.length === 0) {\n            return;\n        }\n        const length = (_b = event.dataTransfer) === null || _b === void 0 ? void 0 : _b.items.length;\n        if (!length) {\n            return;\n        }\n        for (let i = 0; i < length; i++) {\n            let entry = (_c = event.dataTransfer) === null || _c === void 0 ? void 0 : _c.items[i].webkitGetAsEntry();\n            if (entry.isDirectory) {\n                console.log('currently not supporting drag + drop for folders');\n                void showDialog({\n                    title: this._trans.__('Error Uploading Folder'),\n                    body: this._trans.__('Drag and Drop is currently not supported for folders'),\n                    buttons: [Dialog.cancelButton({ label: this._trans.__('Close') })]\n                });\n            }\n        }\n        event.preventDefault();\n        for (let i = 0; i < files.length; i++) {\n            void this._model.upload(files[i]);\n        }\n    }\n    /**\n     * Handle the `'lm-dragenter'` event for the widget.\n     */\n    evtDragEnter(event) {\n        if (event.mimeData.hasData(CONTENTS_MIME)) {\n            const index = Private.hitTestNodes(this._items, event);\n            if (index === -1) {\n                return;\n            }\n            const item = this._sortedItems[index];\n            if (item.type !== 'directory' || this.selection[item.path]) {\n                return;\n            }\n            const target = event.target;\n            target.classList.add(DROP_TARGET_CLASS);\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n    /**\n     * Handle the `'lm-dragleave'` event for the widget.\n     */\n    evtDragLeave(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        const dropTarget = DOMUtils.findElement(this.node, DROP_TARGET_CLASS);\n        if (dropTarget) {\n            dropTarget.classList.remove(DROP_TARGET_CLASS);\n        }\n    }\n    /**\n     * Handle the `'lm-dragover'` event for the widget.\n     */\n    evtDragOver(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        event.dropAction = event.proposedAction;\n        const dropTarget = DOMUtils.findElement(this.node, DROP_TARGET_CLASS);\n        if (dropTarget) {\n            dropTarget.classList.remove(DROP_TARGET_CLASS);\n        }\n        const index = Private.hitTestNodes(this._items, event);\n        this._items[index].classList.add(DROP_TARGET_CLASS);\n    }\n    /**\n     * Handle the `'lm-drop'` event for the widget.\n     */\n    evtDrop(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        clearTimeout(this._selectTimer);\n        if (event.proposedAction === 'none') {\n            event.dropAction = 'none';\n            return;\n        }\n        if (!event.mimeData.hasData(CONTENTS_MIME)) {\n            return;\n        }\n        let target = event.target;\n        while (target && target.parentElement) {\n            if (target.classList.contains(DROP_TARGET_CLASS)) {\n                target.classList.remove(DROP_TARGET_CLASS);\n                break;\n            }\n            target = target.parentElement;\n        }\n        // Get the path based on the target node.\n        const index = ArrayExt.firstIndexOf(this._items, target);\n        const items = this._sortedItems;\n        let basePath = this._model.path;\n        if (items[index].type === 'directory') {\n            basePath = PathExt.join(basePath, items[index].name);\n        }\n        const manager = this._manager;\n        // Handle the items.\n        const promises = [];\n        const paths = event.mimeData.getData(CONTENTS_MIME);\n        if (event.ctrlKey && event.proposedAction === 'move') {\n            event.dropAction = 'copy';\n        }\n        else {\n            event.dropAction = event.proposedAction;\n        }\n        for (const path of paths) {\n            const localPath = manager.services.contents.localPath(path);\n            const name = PathExt.basename(localPath);\n            const newPath = PathExt.join(basePath, name);\n            // Skip files that are not moving.\n            if (newPath === path) {\n                continue;\n            }\n            if (event.dropAction === 'copy') {\n                promises.push(manager.copy(path, basePath));\n            }\n            else {\n                promises.push(renameFile(manager, path, newPath));\n            }\n        }\n        Promise.all(promises).catch(error => {\n            void showErrorMessage(this._trans._p('showErrorMessage', 'Error while copying/moving files'), error);\n        });\n    }\n    /**\n     * Start a drag event.\n     */\n    _startDrag(index, clientX, clientY) {\n        let selectedPaths = Object.keys(this.selection);\n        const source = this._items[index];\n        const items = this._sortedItems;\n        let selectedItems;\n        let item;\n        // If the source node is not selected, use just that node.\n        if (!source.classList.contains(SELECTED_CLASS)) {\n            item = items[index];\n            selectedPaths = [item.path];\n            selectedItems = [item];\n        }\n        else {\n            const path = selectedPaths[0];\n            item = find(items, value => value.path === path);\n            selectedItems = toArray(this.selectedItems());\n        }\n        if (!item) {\n            return;\n        }\n        // Create the drag image.\n        const ft = this._manager.registry.getFileTypeForModel(item);\n        const dragImage = this.renderer.createDragImage(source, selectedPaths.length, this._trans, ft);\n        // Set up the drag event.\n        this._drag = new Drag({\n            dragImage,\n            mimeData: new MimeData(),\n            supportedActions: 'move',\n            proposedAction: 'move'\n        });\n        this._drag.mimeData.setData(CONTENTS_MIME, selectedPaths);\n        // Add thunks for getting mime data content.\n        // We thunk the content so we don't try to make a network call\n        // when it's not needed. E.g. just moving files around\n        // in a filebrowser\n        const services = this.model.manager.services;\n        for (const item of selectedItems) {\n            this._drag.mimeData.setData(CONTENTS_MIME_RICH, {\n                model: item,\n                withContent: async () => {\n                    return await services.contents.get(item.path);\n                }\n            });\n        }\n        if (item && item.type !== 'directory') {\n            const otherPaths = selectedPaths.slice(1).reverse();\n            this._drag.mimeData.setData(FACTORY_MIME, () => {\n                if (!item) {\n                    return;\n                }\n                const path = item.path;\n                let widget = this._manager.findWidget(path);\n                if (!widget) {\n                    widget = this._manager.open(item.path);\n                }\n                if (otherPaths.length) {\n                    const firstWidgetPlaced = new PromiseDelegate();\n                    void firstWidgetPlaced.promise.then(() => {\n                        let prevWidget = widget;\n                        otherPaths.forEach(path => {\n                            const options = {\n                                ref: prevWidget === null || prevWidget === void 0 ? void 0 : prevWidget.id,\n                                mode: 'tab-after'\n                            };\n                            prevWidget = this._manager.openOrReveal(path, void 0, void 0, options);\n                            this._manager.openOrReveal(item.path);\n                        });\n                    });\n                    firstWidgetPlaced.resolve(void 0);\n                }\n                return widget;\n            });\n        }\n        // Start the drag and remove the mousemove and mouseup listeners.\n        document.removeEventListener('mousemove', this, true);\n        document.removeEventListener('mouseup', this, true);\n        clearTimeout(this._selectTimer);\n        void this._drag.start(clientX, clientY).then(action => {\n            this._drag = null;\n            clearTimeout(this._selectTimer);\n        });\n    }\n    /**\n     * Handle selection on a file node.\n     */\n    handleFileSelect(event) {\n        // Fetch common variables.\n        const items = this._sortedItems;\n        const index = Private.hitTestNodes(this._items, event);\n        clearTimeout(this._selectTimer);\n        if (index === -1) {\n            return;\n        }\n        // Clear any existing soft selection.\n        this._softSelection = '';\n        const path = items[index].path;\n        const selected = Object.keys(this.selection);\n        // Handle toggling.\n        if ((IS_MAC && event.metaKey) || (!IS_MAC && event.ctrlKey)) {\n            if (this.selection[path]) {\n                delete this.selection[path];\n            }\n            else {\n                this.selection[path] = true;\n            }\n            // Handle multiple select.\n        }\n        else if (event.shiftKey) {\n            this._handleMultiSelect(selected, index);\n            // Handle a 'soft' selection\n        }\n        else if (path in this.selection && selected.length > 1) {\n            this._softSelection = path;\n            // Default to selecting the only the item.\n        }\n        else {\n            // Select only the given item.\n            return this._selectItem(index, false);\n        }\n        this.update();\n    }\n    /**\n     * (Re-)focus on the selected file.\n     *\n     * If index is not given, it will be inferred from the current selection;\n     * providing index saves on the iteration time.\n     */\n    _focusSelectedFile(index) {\n        if (typeof index === 'undefined') {\n            const selected = Object.keys(this.selection);\n            if (selected.length > 1) {\n                // Multiselect - do not focus on any single file\n                return;\n            }\n            index = ArrayExt.findFirstIndex(this._sortedItems, value => value.path === selected[0]);\n        }\n        if (index === -1) {\n            return;\n        }\n        // Focus on text to make shortcuts works\n        const node = this._items[index];\n        const text = DOMUtils.findElement(node, ITEM_TEXT_CLASS);\n        if (text) {\n            text.focus();\n        }\n    }\n    /**\n     * Handle a multiple select on a file item node.\n     */\n    _handleMultiSelect(selected, index) {\n        // Find the \"nearest selected\".\n        const items = this._sortedItems;\n        let nearestIndex = -1;\n        for (let i = 0; i < this._items.length; i++) {\n            if (i === index) {\n                continue;\n            }\n            const path = items[i].path;\n            if (selected.indexOf(path) !== -1) {\n                if (nearestIndex === -1) {\n                    nearestIndex = i;\n                }\n                else {\n                    if (Math.abs(index - i) < Math.abs(nearestIndex - i)) {\n                        nearestIndex = i;\n                    }\n                }\n            }\n        }\n        // Default to the first element (and fill down).\n        if (nearestIndex === -1) {\n            nearestIndex = 0;\n        }\n        // Select the rows between the current and the nearest selected.\n        for (let i = 0; i < this._items.length; i++) {\n            if ((nearestIndex >= i && index <= i) ||\n                (nearestIndex <= i && index >= i)) {\n                this.selection[items[i].path] = true;\n            }\n        }\n    }\n    /**\n     * Copy the selected items, and optionally cut as well.\n     */\n    _copy() {\n        this._clipboard.length = 0;\n        each(this.selectedItems(), item => {\n            this._clipboard.push(item.path);\n        });\n    }\n    /**\n     * Delete the files with the given paths.\n     */\n    async _delete(paths) {\n        await Promise.all(paths.map(path => this._model.manager.deleteFile(path).catch(err => {\n            void showErrorMessage(this._trans._p('showErrorMessage', 'Delete Failed'), err);\n        })));\n    }\n    /**\n     * Allow the user to rename item on a given row.\n     */\n    _doRename() {\n        this._inRename = true;\n        const items = this._sortedItems;\n        const path = Object.keys(this.selection)[0];\n        const index = ArrayExt.findFirstIndex(items, value => value.path === path);\n        const row = this._items[index];\n        const item = items[index];\n        const nameNode = this.renderer.getNameNode(row);\n        const original = item.name;\n        this._editNode.value = original;\n        this._selectItem(index, false);\n        return Private.doRename(nameNode, this._editNode, original).then(newName => {\n            this.node.focus();\n            if (!newName || newName === original) {\n                this._inRename = false;\n                return original;\n            }\n            if (!isValidFileName(newName)) {\n                void showErrorMessage(this._trans.__('Rename Error'), Error(this._trans._p('showErrorMessage', '\"%1\" is not a valid name for a file. Names must have nonzero length, and cannot include \"/\", \"\\\\\", or \":\"', newName)));\n                this._inRename = false;\n                return original;\n            }\n            if (this.isDisposed) {\n                this._inRename = false;\n                throw new Error('File browser is disposed.');\n            }\n            const manager = this._manager;\n            const oldPath = PathExt.join(this._model.path, original);\n            const newPath = PathExt.join(this._model.path, newName);\n            const promise = renameFile(manager, oldPath, newPath);\n            return promise\n                .catch(error => {\n                if (error !== 'File not renamed') {\n                    void showErrorMessage(this._trans._p('showErrorMessage', 'Rename Error'), error);\n                }\n                this._inRename = false;\n                return original;\n            })\n                .then(() => {\n                if (this.isDisposed) {\n                    this._inRename = false;\n                    throw new Error('File browser is disposed.');\n                }\n                if (this._inRename) {\n                    // No need to catch because `newName` will always exit.\n                    void this.selectItemByName(newName);\n                }\n                this._inRename = false;\n                return newName;\n            });\n        });\n    }\n    /**\n     * Select a given item.\n     */\n    _selectItem(index, keepExisting, focus = true) {\n        // Selected the given row(s)\n        const items = this._sortedItems;\n        if (!keepExisting) {\n            this.clearSelectedItems();\n        }\n        const path = items[index].path;\n        this.selection[path] = true;\n        if (!keepExisting && focus) {\n            this._focusSelectedFile(index);\n        }\n        this.update();\n    }\n    /**\n     * Handle the `refreshed` signal from the model.\n     */\n    _onModelRefreshed() {\n        // Update the selection.\n        const existing = Object.keys(this.selection);\n        this.clearSelectedItems();\n        each(this._model.items(), item => {\n            const path = item.path;\n            if (existing.indexOf(path) !== -1) {\n                this.selection[path] = true;\n            }\n        });\n        if (this.isVisible) {\n            // Update the sorted items.\n            this.sort(this.sortState);\n        }\n        else {\n            this._isDirty = true;\n        }\n    }\n    /**\n     * Handle a `pathChanged` signal from the model.\n     */\n    _onPathChanged() {\n        // Reset the selection.\n        this.clearSelectedItems();\n        // Update the sorted items.\n        this.sort(this.sortState);\n    }\n    /**\n     * Handle a `fileChanged` signal from the model.\n     */\n    _onFileChanged(sender, args) {\n        const newValue = args.newValue;\n        if (!newValue) {\n            return;\n        }\n        const name = newValue.name;\n        if (args.type !== 'new' || !name) {\n            return;\n        }\n        void this.selectItemByName(name).catch(() => {\n            /* Ignore if file does not exist. */\n        });\n    }\n    /**\n     * Handle an `activateRequested` signal from the manager.\n     */\n    _onActivateRequested(sender, args) {\n        const dirname = PathExt.dirname(args);\n        if (dirname !== this._model.path) {\n            return;\n        }\n        const basename = PathExt.basename(args);\n        this.selectItemByName(basename).catch(() => {\n            /* Ignore if file does not exist. */\n        });\n    }\n}\n/**\n * The namespace for the `DirListing` class statics.\n */\n(function (DirListing) {\n    /**\n     * The default implementation of an `IRenderer`.\n     */\n    class Renderer {\n        /**\n         * Create the DOM node for a dir listing.\n         */\n        createNode() {\n            const node = document.createElement('div');\n            const header = document.createElement('div');\n            const content = document.createElement('ul');\n            content.className = CONTENT_CLASS;\n            header.className = HEADER_CLASS;\n            node.appendChild(header);\n            node.appendChild(content);\n            node.tabIndex = 0;\n            return node;\n        }\n        /**\n         * Populate and empty header node for a dir listing.\n         *\n         * @param node - The header node to populate.\n         */\n        populateHeaderNode(node, translator, hiddenColumns) {\n            var _a;\n            translator = translator || nullTranslator;\n            const trans = translator.load('jupyterlab');\n            const name = this.createHeaderItemNode(trans.__('Name'));\n            const narrow = document.createElement('div');\n            const modified = this.createHeaderItemNode(trans.__('Last Modified'));\n            name.classList.add(NAME_ID_CLASS);\n            name.classList.add(SELECTED_CLASS);\n            modified.classList.add(MODIFIED_ID_CLASS);\n            narrow.classList.add(NARROW_ID_CLASS);\n            narrow.textContent = '...';\n            node.appendChild(name);\n            node.appendChild(narrow);\n            node.appendChild(modified);\n            if ((_a = hiddenColumns === null || hiddenColumns === void 0 ? void 0 : hiddenColumns.has) === null || _a === void 0 ? void 0 : _a.call(hiddenColumns, 'last_modified')) {\n                modified.classList.add(MODIFIED_COLUMN_HIDDEN);\n            }\n            else {\n                modified.classList.remove(MODIFIED_COLUMN_HIDDEN);\n            }\n            // set the initial caret icon\n            Private.updateCaret(DOMUtils.findElement(name, HEADER_ITEM_ICON_CLASS), 'right', 'up');\n        }\n        /**\n         * Handle a header click.\n         *\n         * @param node - A node populated by [[populateHeaderNode]].\n         *\n         * @param event - A click event on the node.\n         *\n         * @returns The sort state of the header after the click event.\n         */\n        handleHeaderClick(node, event) {\n            const name = DOMUtils.findElement(node, NAME_ID_CLASS);\n            const modified = DOMUtils.findElement(node, MODIFIED_ID_CLASS);\n            const state = { direction: 'ascending', key: 'name' };\n            const target = event.target;\n            if (name.contains(target)) {\n                const modifiedIcon = DOMUtils.findElement(modified, HEADER_ITEM_ICON_CLASS);\n                const nameIcon = DOMUtils.findElement(name, HEADER_ITEM_ICON_CLASS);\n                if (name.classList.contains(SELECTED_CLASS)) {\n                    if (!name.classList.contains(DESCENDING_CLASS)) {\n                        state.direction = 'descending';\n                        name.classList.add(DESCENDING_CLASS);\n                        Private.updateCaret(nameIcon, 'right', 'down');\n                    }\n                    else {\n                        name.classList.remove(DESCENDING_CLASS);\n                        Private.updateCaret(nameIcon, 'right', 'up');\n                    }\n                }\n                else {\n                    name.classList.remove(DESCENDING_CLASS);\n                    Private.updateCaret(nameIcon, 'right', 'up');\n                }\n                name.classList.add(SELECTED_CLASS);\n                modified.classList.remove(SELECTED_CLASS);\n                modified.classList.remove(DESCENDING_CLASS);\n                Private.updateCaret(modifiedIcon, 'left');\n                return state;\n            }\n            if (modified.contains(target)) {\n                const modifiedIcon = DOMUtils.findElement(modified, HEADER_ITEM_ICON_CLASS);\n                const nameIcon = DOMUtils.findElement(name, HEADER_ITEM_ICON_CLASS);\n                state.key = 'last_modified';\n                if (modified.classList.contains(SELECTED_CLASS)) {\n                    if (!modified.classList.contains(DESCENDING_CLASS)) {\n                        state.direction = 'descending';\n                        modified.classList.add(DESCENDING_CLASS);\n                        Private.updateCaret(modifiedIcon, 'left', 'down');\n                    }\n                    else {\n                        modified.classList.remove(DESCENDING_CLASS);\n                        Private.updateCaret(modifiedIcon, 'left', 'up');\n                    }\n                }\n                else {\n                    modified.classList.remove(DESCENDING_CLASS);\n                    Private.updateCaret(modifiedIcon, 'left', 'up');\n                }\n                modified.classList.add(SELECTED_CLASS);\n                name.classList.remove(SELECTED_CLASS);\n                name.classList.remove(DESCENDING_CLASS);\n                Private.updateCaret(nameIcon, 'right');\n                return state;\n            }\n            return state;\n        }\n        /**\n         * Create a new item node for a dir listing.\n         *\n         * @returns A new DOM node to use as a content item.\n         */\n        createItemNode(hiddenColumns) {\n            var _a;\n            const node = document.createElement('li');\n            const icon = document.createElement('span');\n            const text = document.createElement('span');\n            const modified = document.createElement('span');\n            icon.className = ITEM_ICON_CLASS;\n            text.className = ITEM_TEXT_CLASS;\n            modified.className = ITEM_MODIFIED_CLASS;\n            node.appendChild(icon);\n            node.appendChild(text);\n            node.appendChild(modified);\n            // Make the text note focusable so that it receives keyboard events;\n            // text node was specifically chosen to receive shortcuts because\n            // text element gets substituted with input area during file name edits\n            // which conveniently deactivate irrelevant shortcuts.\n            text.tabIndex = 0;\n            if ((_a = hiddenColumns === null || hiddenColumns === void 0 ? void 0 : hiddenColumns.has) === null || _a === void 0 ? void 0 : _a.call(hiddenColumns, 'last_modified')) {\n                modified.classList.add(MODIFIED_COLUMN_HIDDEN);\n            }\n            else {\n                modified.classList.remove(MODIFIED_COLUMN_HIDDEN);\n            }\n            return node;\n        }\n        /**\n         * Update an item node to reflect the current state of a model.\n         *\n         * @param node - A node created by [[createItemNode]].\n         *\n         * @param model - The model object to use for the item state.\n         *\n         * @param fileType - The file type of the item, if applicable.\n         *\n         */\n        updateItemNode(node, model, fileType, translator, hiddenColumns) {\n            var _a;\n            translator = translator || nullTranslator;\n            fileType =\n                fileType || DocumentRegistry.getDefaultTextFileType(translator);\n            const { icon, iconClass, name } = fileType;\n            translator = translator || nullTranslator;\n            const trans = translator.load('jupyterlab');\n            const iconContainer = DOMUtils.findElement(node, ITEM_ICON_CLASS);\n            const text = DOMUtils.findElement(node, ITEM_TEXT_CLASS);\n            const modified = DOMUtils.findElement(node, ITEM_MODIFIED_CLASS);\n            if ((_a = hiddenColumns === null || hiddenColumns === void 0 ? void 0 : hiddenColumns.has) === null || _a === void 0 ? void 0 : _a.call(hiddenColumns, 'last_modified')) {\n                modified.classList.add(MODIFIED_COLUMN_HIDDEN);\n            }\n            else {\n                modified.classList.remove(MODIFIED_COLUMN_HIDDEN);\n            }\n            // render the file item's icon\n            LabIcon.resolveElement({\n                icon,\n                iconClass: classes(iconClass, 'jp-Icon'),\n                container: iconContainer,\n                className: ITEM_ICON_CLASS,\n                stylesheet: 'listing'\n            });\n            let hoverText = trans.__('Name: %1', model.name);\n            // add file size to pop up if its available\n            if (model.size !== null && model.size !== undefined) {\n                hoverText += trans.__('\\nSize: %1', Private.formatFileSize(model.size, 1, 1024));\n            }\n            if (model.path) {\n                const dirname = PathExt.dirname(model.path);\n                if (dirname) {\n                    hoverText += trans.__('\\nPath: %1', dirname.substr(0, 50));\n                    if (dirname.length > 50) {\n                        hoverText += '...';\n                    }\n                }\n            }\n            if (model.created) {\n                hoverText += trans.__('\\nCreated: %1', Time.format(new Date(model.created), 'YYYY-MM-DD HH:mm:ss'));\n            }\n            if (model.last_modified) {\n                hoverText += trans.__('\\nModified: %1', Time.format(new Date(model.last_modified), 'YYYY-MM-DD HH:mm:ss'));\n            }\n            hoverText += trans.__('\\nWritable: %1', model.writable);\n            node.title = hoverText;\n            node.setAttribute('data-file-type', name);\n            if (model.name.startsWith('.')) {\n                node.setAttribute('data-is-dot', 'true');\n            }\n            else {\n                node.removeAttribute('data-is-dot');\n            }\n            // If an item is being edited currently, its text node is unavailable.\n            if (text) {\n                const indices = !model.indices ? [] : model.indices;\n                let highlightedName = StringExt.highlight(model.name, indices, h.mark);\n                VirtualDOM.render(h.span(highlightedName), text);\n            }\n            let modText = '';\n            let modTitle = '';\n            if (model.last_modified) {\n                modText = Time.formatHuman(new Date(model.last_modified));\n                modTitle = Time.format(new Date(model.last_modified), 'lll');\n            }\n            modified.textContent = modText;\n            modified.title = modTitle;\n        }\n        /**\n         * Get the node containing the file name.\n         *\n         * @param node - A node created by [[createItemNode]].\n         *\n         * @returns The node containing the file name.\n         */\n        getNameNode(node) {\n            return DOMUtils.findElement(node, ITEM_TEXT_CLASS);\n        }\n        /**\n         * Create a drag image for an item.\n         *\n         * @param node - A node created by [[createItemNode]].\n         *\n         * @param count - The number of items being dragged.\n         *\n         * @param fileType - The file type of the item, if applicable.\n         *\n         * @returns An element to use as the drag image.\n         */\n        createDragImage(node, count, trans, fileType) {\n            const dragImage = node.cloneNode(true);\n            const modified = DOMUtils.findElement(dragImage, ITEM_MODIFIED_CLASS);\n            const icon = DOMUtils.findElement(dragImage, ITEM_ICON_CLASS);\n            dragImage.removeChild(modified);\n            if (!fileType) {\n                icon.textContent = '';\n                icon.className = '';\n            }\n            else {\n                icon.textContent = fileType.iconLabel || '';\n                icon.className = fileType.iconClass || '';\n            }\n            icon.classList.add(DRAG_ICON_CLASS);\n            if (count > 1) {\n                const nameNode = DOMUtils.findElement(dragImage, ITEM_TEXT_CLASS);\n                nameNode.textContent = trans._n('%1 Item', '%1 Items', count);\n            }\n            return dragImage;\n        }\n        /**\n         * Create a node for a header item.\n         */\n        createHeaderItemNode(label) {\n            const node = document.createElement('div');\n            const text = document.createElement('span');\n            const icon = document.createElement('span');\n            node.className = HEADER_ITEM_CLASS;\n            text.className = HEADER_ITEM_TEXT_CLASS;\n            icon.className = HEADER_ITEM_ICON_CLASS;\n            text.textContent = label;\n            node.appendChild(text);\n            node.appendChild(icon);\n            return node;\n        }\n    }\n    DirListing.Renderer = Renderer;\n    /**\n     * The default `IRenderer` instance.\n     */\n    DirListing.defaultRenderer = new Renderer();\n})(DirListing || (DirListing = {}));\n/**\n * The namespace for the listing private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Handle editing text on a node.\n     *\n     * @returns Boolean indicating whether the name changed.\n     */\n    function doRename(text, edit, original) {\n        const parent = text.parentElement;\n        parent.replaceChild(edit, text);\n        edit.focus();\n        const index = edit.value.lastIndexOf('.');\n        if (index === -1) {\n            edit.setSelectionRange(0, edit.value.length);\n        }\n        else {\n            edit.setSelectionRange(0, index);\n        }\n        return new Promise((resolve, reject) => {\n            edit.onblur = () => {\n                parent.replaceChild(text, edit);\n                resolve(edit.value);\n            };\n            edit.onkeydown = (event) => {\n                switch (event.keyCode) {\n                    case 13: // Enter\n                        event.stopPropagation();\n                        event.preventDefault();\n                        edit.blur();\n                        break;\n                    case 27: // Escape\n                        event.stopPropagation();\n                        event.preventDefault();\n                        edit.value = original;\n                        edit.blur();\n                        break;\n                    case 38: // Up arrow\n                        event.stopPropagation();\n                        event.preventDefault();\n                        if (edit.selectionStart !== edit.selectionEnd) {\n                            edit.selectionStart = edit.selectionEnd = 0;\n                        }\n                        break;\n                    case 40: // Down arrow\n                        event.stopPropagation();\n                        event.preventDefault();\n                        if (edit.selectionStart !== edit.selectionEnd) {\n                            edit.selectionStart = edit.selectionEnd = edit.value.length;\n                        }\n                        break;\n                    default:\n                        break;\n                }\n            };\n        });\n    }\n    Private.doRename = doRename;\n    /**\n     * Sort a list of items by sort state as a new array.\n     */\n    function sort(items, state) {\n        const copy = toArray(items);\n        const reverse = state.direction === 'descending' ? 1 : -1;\n        if (state.key === 'last_modified') {\n            // Sort by last modified (grouping directories first)\n            copy.sort((a, b) => {\n                const t1 = a.type === 'directory' ? 0 : 1;\n                const t2 = b.type === 'directory' ? 0 : 1;\n                const valA = new Date(a.last_modified).getTime();\n                const valB = new Date(b.last_modified).getTime();\n                return t1 - t2 || (valA - valB) * reverse;\n            });\n        }\n        else {\n            // Sort by name (grouping directories first)\n            copy.sort((a, b) => {\n                const t1 = a.type === 'directory' ? 0 : 1;\n                const t2 = b.type === 'directory' ? 0 : 1;\n                return t1 - t2 || b.name.localeCompare(a.name) * reverse;\n            });\n        }\n        return copy;\n    }\n    Private.sort = sort;\n    /**\n     * Get the index of the node at a client position, or `-1`.\n     */\n    function hitTestNodes(nodes, event) {\n        return ArrayExt.findFirstIndex(nodes, node => ElementExt.hitTest(node, event.clientX, event.clientY) ||\n            event.target === node);\n    }\n    Private.hitTestNodes = hitTestNodes;\n    /**\n     * Format bytes to human readable string.\n     */\n    function formatFileSize(bytes, decimalPoint, k) {\n        // https://www.codexworld.com/how-to/convert-file-size-bytes-kb-mb-gb-javascript/\n        if (bytes === 0) {\n            return '0 Bytes';\n        }\n        const dm = decimalPoint || 2;\n        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n        const i = Math.floor(Math.log(bytes) / Math.log(k));\n        if (i >= 0 && i < sizes.length) {\n            return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n        }\n        else {\n            return String(bytes);\n        }\n    }\n    Private.formatFileSize = formatFileSize;\n    /**\n     * Update an inline svg caret icon in a node.\n     */\n    function updateCaret(container, float, state) {\n        if (state) {\n            (state === 'down' ? caretDownIcon : caretUpIcon).element({\n                container,\n                tag: 'span',\n                stylesheet: 'listingHeaderItem',\n                float\n            });\n        }\n        else {\n            LabIcon.remove(container);\n            container.className = HEADER_ITEM_ICON_CLASS;\n        }\n    }\n    Private.updateCaret = updateCaret;\n})(Private || (Private = {}));\n//# sourceMappingURL=listing.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { FilenameSearcher, showErrorMessage, Toolbar } from '@jupyterlab/apputils';\nimport { ServerConnection } from '@jupyterlab/services';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { PanelLayout, Widget } from '@lumino/widgets';\nimport { BreadCrumbs } from './crumbs';\nimport { DirListing } from './listing';\n/**\n * The class name added to file browsers.\n */\nconst FILE_BROWSER_CLASS = 'jp-FileBrowser';\n/**\n * The class name added to the filebrowser crumbs node.\n */\nconst CRUMBS_CLASS = 'jp-FileBrowser-crumbs';\n/**\n * The class name added to the filebrowser filterbox node.\n */\nconst FILTERBOX_CLASS = 'jp-FileBrowser-filterBox';\n/**\n * The class name added to the filebrowser toolbar node.\n */\nconst TOOLBAR_CLASS = 'jp-FileBrowser-toolbar';\n/**\n * The class name added to the filebrowser listing node.\n */\nconst LISTING_CLASS = 'jp-FileBrowser-listing';\n/**\n * A widget which hosts a file browser.\n *\n * The widget uses the Jupyter Contents API to retrieve contents,\n * and presents itself as a flat list of files and directories with\n * breadcrumbs.\n */\nexport class FileBrowser extends Widget {\n    /**\n     * Construct a new file browser.\n     *\n     * @param options - The file browser options.\n     */\n    constructor(options) {\n        super();\n        this._showLastModifiedColumn = true;\n        this._useFuzzyFilter = true;\n        this._showHiddenFiles = false;\n        this.addClass(FILE_BROWSER_CLASS);\n        this.id = options.id;\n        const model = (this.model = options.model);\n        const renderer = options.renderer;\n        const translator = this.translator;\n        model.connectionFailure.connect(this._onConnectionFailure, this);\n        this.translator = options.translator || nullTranslator;\n        this._manager = model.manager;\n        this._trans = this.translator.load('jupyterlab');\n        this.crumbs = new BreadCrumbs({ model, translator });\n        this.toolbar = new Toolbar();\n        // a11y\n        this.toolbar.node.setAttribute('role', 'navigation');\n        this.toolbar.node.setAttribute('aria-label', this._trans.__('file browser'));\n        this._directoryPending = false;\n        this.listing = this.createDirListing({\n            model,\n            renderer,\n            translator: this.translator\n        });\n        this._filenameSearcher = FilenameSearcher({\n            updateFilter: (filterFn) => {\n                this.listing.model.setFilter(value => {\n                    return filterFn(value.name.toLowerCase());\n                });\n            },\n            useFuzzyFilter: this._useFuzzyFilter,\n            placeholder: this._trans.__('Filter files by name')\n        });\n        this.crumbs.addClass(CRUMBS_CLASS);\n        this.toolbar.addClass(TOOLBAR_CLASS);\n        this._filenameSearcher.addClass(FILTERBOX_CLASS);\n        this.listing.addClass(LISTING_CLASS);\n        this.layout = new PanelLayout();\n        this.layout.addWidget(this.toolbar);\n        this.layout.addWidget(this._filenameSearcher);\n        this.layout.addWidget(this.crumbs);\n        this.layout.addWidget(this.listing);\n        if (options.restore !== false) {\n            void model.restore(this.id);\n        }\n    }\n    /**\n     * Whether to show active file in file browser\n     */\n    get navigateToCurrentDirectory() {\n        return this._navigateToCurrentDirectory;\n    }\n    set navigateToCurrentDirectory(value) {\n        this._navigateToCurrentDirectory = value;\n    }\n    /**\n     * Whether to show the last modified column\n     */\n    get showLastModifiedColumn() {\n        return this._showLastModifiedColumn;\n    }\n    set showLastModifiedColumn(value) {\n        if (this.listing.setColumnVisibility) {\n            this.listing.setColumnVisibility('last_modified', value);\n            this._showLastModifiedColumn = value;\n        }\n        else {\n            console.warn('Listing does not support toggling column visibility');\n        }\n    }\n    /**\n     * Whether to use fuzzy filtering on file names.\n     */\n    set useFuzzyFilter(value) {\n        this._useFuzzyFilter = value;\n        this._filenameSearcher = FilenameSearcher({\n            updateFilter: (filterFn) => {\n                this.listing.model.setFilter(value => {\n                    return filterFn(value.name.toLowerCase());\n                });\n            },\n            useFuzzyFilter: this._useFuzzyFilter,\n            placeholder: this._trans.__('Filter files by name'),\n            forceRefresh: true\n        });\n        this._filenameSearcher.addClass(FILTERBOX_CLASS);\n        this.layout.removeWidget(this._filenameSearcher);\n        this.layout.removeWidget(this.crumbs);\n        this.layout.removeWidget(this.listing);\n        this.layout.addWidget(this._filenameSearcher);\n        this.layout.addWidget(this.crumbs);\n        this.layout.addWidget(this.listing);\n    }\n    /**\n     * Whether to show hidden files\n     */\n    get showHiddenFiles() {\n        return this._showHiddenFiles;\n    }\n    set showHiddenFiles(value) {\n        this.model.showHiddenFiles(value);\n        this._showHiddenFiles = value;\n    }\n    /**\n     * Create an iterator over the listing's selected items.\n     *\n     * @returns A new iterator over the listing's selected items.\n     */\n    selectedItems() {\n        return this.listing.selectedItems();\n    }\n    /**\n     * Select an item by name.\n     *\n     * @param name - The name of the item to select.\n     */\n    async selectItemByName(name) {\n        await this.listing.selectItemByName(name);\n    }\n    clearSelectedItems() {\n        this.listing.clearSelectedItems();\n    }\n    /**\n     * Rename the first currently selected item.\n     *\n     * @returns A promise that resolves with the new name of the item.\n     */\n    rename() {\n        return this.listing.rename();\n    }\n    /**\n     * Cut the selected items.\n     */\n    cut() {\n        this.listing.cut();\n    }\n    /**\n     * Copy the selected items.\n     */\n    copy() {\n        this.listing.copy();\n    }\n    /**\n     * Paste the items from the clipboard.\n     *\n     * @returns A promise that resolves when the operation is complete.\n     */\n    paste() {\n        return this.listing.paste();\n    }\n    /**\n     * Create a new directory\n     */\n    createNewDirectory() {\n        if (this._directoryPending === true) {\n            return;\n        }\n        this._directoryPending = true;\n        // TODO: We should provide a hook into when the\n        // directory is done being created. This probably\n        // means storing a pendingDirectory promise and\n        // returning that if there is already a directory\n        // request.\n        void this._manager\n            .newUntitled({\n            path: this.model.path,\n            type: 'directory'\n        })\n            .then(async (model) => {\n            await this.listing.selectItemByName(model.name);\n            await this.rename();\n            this._directoryPending = false;\n        })\n            .catch(err => {\n            void showErrorMessage(this._trans.__('Error'), err);\n            this._directoryPending = false;\n        });\n    }\n    /**\n     * Create a new file\n     */\n    createNewFile(options) {\n        if (this._filePending === true) {\n            return;\n        }\n        this._filePending = true;\n        // TODO: We should provide a hook into when the\n        // file is done being created. This probably\n        // means storing a pendingFile promise and\n        // returning that if there is already a file\n        // request.\n        void this._manager\n            .newUntitled({\n            path: this.model.path,\n            type: 'file',\n            ext: options.ext\n        })\n            .then(async (model) => {\n            await this.listing.selectItemByName(model.name);\n            await this.rename();\n            this._filePending = false;\n        })\n            .catch(err => {\n            void showErrorMessage(this._trans.__('Error'), err);\n            this._filePending = false;\n        });\n    }\n    /**\n     * Delete the currently selected item(s).\n     *\n     * @returns A promise that resolves when the operation is complete.\n     */\n    delete() {\n        return this.listing.delete();\n    }\n    /**\n     * Duplicate the currently selected item(s).\n     *\n     * @returns A promise that resolves when the operation is complete.\n     */\n    duplicate() {\n        return this.listing.duplicate();\n    }\n    /**\n     * Download the currently selected item(s).\n     */\n    download() {\n        return this.listing.download();\n    }\n    /**\n     * Shut down kernels on the applicable currently selected items.\n     *\n     * @returns A promise that resolves when the operation is complete.\n     */\n    shutdownKernels() {\n        return this.listing.shutdownKernels();\n    }\n    /**\n     * Select next item.\n     */\n    selectNext() {\n        this.listing.selectNext();\n    }\n    /**\n     * Select previous item.\n     */\n    selectPrevious() {\n        this.listing.selectPrevious();\n    }\n    /**\n     * Find a model given a click.\n     *\n     * @param event - The mouse event.\n     *\n     * @returns The model for the selected file.\n     */\n    modelForClick(event) {\n        return this.listing.modelForClick(event);\n    }\n    /**\n     * Create the underlying DirListing instance.\n     *\n     * @param options - The DirListing constructor options.\n     *\n     * @returns The created DirListing instance.\n     */\n    createDirListing(options) {\n        return new DirListing(options);\n    }\n    /**\n     * Handle a connection lost signal from the model.\n     */\n    _onConnectionFailure(sender, args) {\n        if (args instanceof ServerConnection.ResponseError &&\n            args.response.status === 404) {\n            const title = this._trans.__('Directory not found');\n            args.message = this._trans.__('Directory not found: \"%1\"', this.model.path);\n            void showErrorMessage(title, args);\n        }\n    }\n}\n//# sourceMappingURL=browser.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Dialog, showDialog } from '@jupyterlab/apputils';\nimport { PageConfig, PathExt } from '@jupyterlab/coreutils';\nimport { shouldOverwrite } from '@jupyterlab/docmanager';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { ArrayExt, ArrayIterator, each, filter, find } from '@lumino/algorithm';\nimport { PromiseDelegate } from '@lumino/coreutils';\nimport { Poll } from '@lumino/polling';\nimport { Signal } from '@lumino/signaling';\n/**\n * The default duration of the auto-refresh in ms\n */\nconst DEFAULT_REFRESH_INTERVAL = 10000;\n/**\n * The maximum upload size (in bytes) for notebook version < 5.1.0\n */\nexport const LARGE_FILE_SIZE = 15 * 1024 * 1024;\n/**\n * The size (in bytes) of the biggest chunk we should upload at once.\n */\nexport const CHUNK_SIZE = 1024 * 1024;\n/**\n * An implementation of a file browser model.\n *\n * #### Notes\n * All paths parameters without a leading `'/'` are interpreted as relative to\n * the current directory.  Supports `'../'` syntax.\n */\nexport class FileBrowserModel {\n    /**\n     * Construct a new file browser model.\n     */\n    constructor(options) {\n        var _a;\n        this._connectionFailure = new Signal(this);\n        this._fileChanged = new Signal(this);\n        this._items = [];\n        this._key = '';\n        this._pathChanged = new Signal(this);\n        this._paths = new Set();\n        this._pending = null;\n        this._pendingPath = null;\n        this._refreshed = new Signal(this);\n        this._sessions = [];\n        this._state = null;\n        this._isDisposed = false;\n        this._restored = new PromiseDelegate();\n        this._uploads = [];\n        this._uploadChanged = new Signal(this);\n        this.manager = options.manager;\n        this.translator = options.translator || nullTranslator;\n        this._trans = this.translator.load('jupyterlab');\n        this._driveName = options.driveName || '';\n        this._model = {\n            path: this.rootPath,\n            name: PathExt.basename(this.rootPath),\n            type: 'directory',\n            content: undefined,\n            writable: false,\n            created: 'unknown',\n            last_modified: 'unknown',\n            mimetype: 'text/plain',\n            format: 'text'\n        };\n        this._state = options.state || null;\n        const refreshInterval = options.refreshInterval || DEFAULT_REFRESH_INTERVAL;\n        const { services } = options.manager;\n        services.contents.fileChanged.connect(this.onFileChanged, this);\n        services.sessions.runningChanged.connect(this.onRunningChanged, this);\n        this._unloadEventListener = (e) => {\n            if (this._uploads.length > 0) {\n                const confirmationMessage = this._trans.__('Files still uploading');\n                e.returnValue = confirmationMessage;\n                return confirmationMessage;\n            }\n        };\n        window.addEventListener('beforeunload', this._unloadEventListener);\n        this._poll = new Poll({\n            auto: (_a = options.auto) !== null && _a !== void 0 ? _a : true,\n            name: '@jupyterlab/filebrowser:Model',\n            factory: () => this.cd('.'),\n            frequency: {\n                interval: refreshInterval,\n                backoff: true,\n                max: 300 * 1000\n            },\n            standby: 'when-hidden'\n        });\n    }\n    /**\n     * A signal emitted when the file browser model loses connection.\n     */\n    get connectionFailure() {\n        return this._connectionFailure;\n    }\n    /**\n     * The drive name that gets prepended to the path.\n     */\n    get driveName() {\n        return this._driveName;\n    }\n    /**\n     * A promise that resolves when the model is first restored.\n     */\n    get restored() {\n        return this._restored.promise;\n    }\n    /**\n     * Get the file path changed signal.\n     */\n    get fileChanged() {\n        return this._fileChanged;\n    }\n    /**\n     * Get the current path.\n     */\n    get path() {\n        return this._model ? this._model.path : '';\n    }\n    /**\n     * Get the root path\n     */\n    get rootPath() {\n        return this._driveName ? this._driveName + ':' : '';\n    }\n    /**\n     * A signal emitted when the path changes.\n     */\n    get pathChanged() {\n        return this._pathChanged;\n    }\n    /**\n     * A signal emitted when the directory listing is refreshed.\n     */\n    get refreshed() {\n        return this._refreshed;\n    }\n    /**\n     * Get the kernel spec models.\n     */\n    get specs() {\n        return this.manager.services.kernelspecs.specs;\n    }\n    /**\n     * Get whether the model is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * A signal emitted when an upload progresses.\n     */\n    get uploadChanged() {\n        return this._uploadChanged;\n    }\n    /**\n     * Create an iterator over the status of all in progress uploads.\n     */\n    uploads() {\n        return new ArrayIterator(this._uploads);\n    }\n    /**\n     * Dispose of the resources held by the model.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        window.removeEventListener('beforeunload', this._unloadEventListener);\n        this._isDisposed = true;\n        this._poll.dispose();\n        this._sessions.length = 0;\n        this._items.length = 0;\n        Signal.clearData(this);\n    }\n    /**\n     * Create an iterator over the model's items.\n     *\n     * @returns A new iterator over the model's items.\n     */\n    items() {\n        return new ArrayIterator(this._items);\n    }\n    /**\n     * Create an iterator over the active sessions in the directory.\n     *\n     * @returns A new iterator over the model's active sessions.\n     */\n    sessions() {\n        return new ArrayIterator(this._sessions);\n    }\n    /**\n     * Force a refresh of the directory contents.\n     */\n    async refresh() {\n        await this._poll.refresh();\n        await this._poll.tick;\n        this._refreshed.emit(void 0);\n    }\n    /**\n     * Change directory.\n     *\n     * @param path - The path to the file or directory.\n     *\n     * @returns A promise with the contents of the directory.\n     */\n    async cd(newValue = '.') {\n        if (newValue !== '.') {\n            newValue = this.manager.services.contents.resolvePath(this._model.path, newValue);\n        }\n        else {\n            newValue = this._pendingPath || this._model.path;\n        }\n        if (this._pending) {\n            // Collapse requests to the same directory.\n            if (newValue === this._pendingPath) {\n                return this._pending;\n            }\n            // Otherwise wait for the pending request to complete before continuing.\n            await this._pending;\n        }\n        const oldValue = this.path;\n        const options = { content: true };\n        this._pendingPath = newValue;\n        if (oldValue !== newValue) {\n            this._sessions.length = 0;\n        }\n        const services = this.manager.services;\n        this._pending = services.contents\n            .get(newValue, options)\n            .then(contents => {\n            if (this.isDisposed) {\n                return;\n            }\n            this.handleContents(contents);\n            this._pendingPath = null;\n            this._pending = null;\n            if (oldValue !== newValue) {\n                // If there is a state database and a unique key, save the new path.\n                // We don't need to wait on the save to continue.\n                if (this._state && this._key) {\n                    void this._state.save(this._key, { path: newValue });\n                }\n                this._pathChanged.emit({\n                    name: 'path',\n                    oldValue,\n                    newValue\n                });\n            }\n            this.onRunningChanged(services.sessions, services.sessions.running());\n            this._refreshed.emit(void 0);\n        })\n            .catch(error => {\n            this._pendingPath = null;\n            this._pending = null;\n            if (error.response &&\n                error.response.status === 404 &&\n                newValue !== '/') {\n                error.message = this._trans.__('Directory not found: \"%1\"', this._model.path);\n                console.error(error);\n                this._connectionFailure.emit(error);\n                return this.cd('/');\n            }\n            else {\n                this._connectionFailure.emit(error);\n            }\n        });\n        return this._pending;\n    }\n    /**\n     * Download a file.\n     *\n     * @param path - The path of the file to be downloaded.\n     *\n     * @returns A promise which resolves when the file has begun\n     *   downloading.\n     */\n    async download(path) {\n        const url = await this.manager.services.contents.getDownloadUrl(path);\n        const element = document.createElement('a');\n        element.href = url;\n        element.download = '';\n        document.body.appendChild(element);\n        element.click();\n        document.body.removeChild(element);\n        return void 0;\n    }\n    /**\n     * Restore the state of the file browser.\n     *\n     * @param id - The unique ID that is used to construct a state database key.\n     *\n     * @param populate - If `false`, the restoration ID will be set but the file\n     * browser state will not be fetched from the state database.\n     *\n     * @returns A promise when restoration is complete.\n     *\n     * #### Notes\n     * This function will only restore the model *once*. If it is called multiple\n     * times, all subsequent invocations are no-ops.\n     */\n    async restore(id, populate = true) {\n        const { manager } = this;\n        const key = `file-browser-${id}:cwd`;\n        const state = this._state;\n        const restored = !!this._key;\n        if (restored) {\n            return;\n        }\n        // Set the file browser key for state database fetch/save.\n        this._key = key;\n        if (!populate || !state) {\n            this._restored.resolve(undefined);\n            return;\n        }\n        await manager.services.ready;\n        try {\n            const value = await state.fetch(key);\n            if (!value) {\n                this._restored.resolve(undefined);\n                return;\n            }\n            const path = value['path'];\n            // need to return to root path if preferred dir is set\n            if (path) {\n                await this.cd('/');\n            }\n            const localPath = manager.services.contents.localPath(path);\n            await manager.services.contents.get(path);\n            await this.cd(localPath);\n        }\n        catch (error) {\n            await state.remove(key);\n        }\n        this._restored.resolve(undefined);\n    }\n    /**\n     * Upload a `File` object.\n     *\n     * @param file - The `File` object to upload.\n     *\n     * @returns A promise containing the new file contents model.\n     *\n     * #### Notes\n     * On Notebook version < 5.1.0, this will fail to upload files that are too\n     * big to be sent in one request to the server. On newer versions, or on\n     * Jupyter Server, it will ask for confirmation then upload the file in 1 MB\n     * chunks.\n     */\n    async upload(file) {\n        // We do not support Jupyter Notebook version less than 4, and Jupyter\n        // Server advertises itself as version 1 and supports chunked\n        // uploading. We assume any version less than 4.0.0 to be Jupyter Server\n        // instead of Jupyter Notebook.\n        const serverVersion = PageConfig.getNotebookVersion();\n        const supportsChunked = serverVersion < [4, 0, 0] /* Jupyter Server */ ||\n            serverVersion >= [5, 1, 0]; /* Jupyter Notebook >= 5.1.0 */\n        const largeFile = file.size > LARGE_FILE_SIZE;\n        if (largeFile && !supportsChunked) {\n            const msg = this._trans.__('Cannot upload file (>%1 MB). %2', LARGE_FILE_SIZE / (1024 * 1024), file.name);\n            console.warn(msg);\n            throw msg;\n        }\n        const err = 'File not uploaded';\n        if (largeFile && !(await this._shouldUploadLarge(file))) {\n            throw 'Cancelled large file upload';\n        }\n        await this._uploadCheckDisposed();\n        await this.refresh();\n        await this._uploadCheckDisposed();\n        if (find(this._items, i => i.name === file.name) &&\n            !(await shouldOverwrite(file.name))) {\n            throw err;\n        }\n        await this._uploadCheckDisposed();\n        const chunkedUpload = supportsChunked && file.size > CHUNK_SIZE;\n        return await this._upload(file, chunkedUpload);\n    }\n    async _shouldUploadLarge(file) {\n        const { button } = await showDialog({\n            title: this._trans.__('Large file size warning'),\n            body: this._trans.__('The file size is %1 MB. Do you still want to upload it?', Math.round(file.size / (1024 * 1024))),\n            buttons: [\n                Dialog.cancelButton({ label: this._trans.__('Cancel') }),\n                Dialog.warnButton({ label: this._trans.__('Upload') })\n            ]\n        });\n        return button.accept;\n    }\n    /**\n     * Perform the actual upload.\n     */\n    async _upload(file, chunked) {\n        // Gather the file model parameters.\n        let path = this._model.path;\n        path = path ? path + '/' + file.name : file.name;\n        const name = file.name;\n        const type = 'file';\n        const format = 'base64';\n        const uploadInner = async (blob, chunk) => {\n            await this._uploadCheckDisposed();\n            const reader = new FileReader();\n            reader.readAsDataURL(blob);\n            await new Promise((resolve, reject) => {\n                reader.onload = resolve;\n                reader.onerror = event => reject(`Failed to upload \"${file.name}\":` + event);\n            });\n            await this._uploadCheckDisposed();\n            // remove header https://stackoverflow.com/a/24289420/907060\n            const content = reader.result.split(',')[1];\n            const model = {\n                type,\n                format,\n                name,\n                chunk,\n                content\n            };\n            return await this.manager.services.contents.save(path, model);\n        };\n        if (!chunked) {\n            try {\n                return await uploadInner(file);\n            }\n            catch (err) {\n                ArrayExt.removeFirstWhere(this._uploads, uploadIndex => {\n                    return file.name === uploadIndex.path;\n                });\n                throw err;\n            }\n        }\n        let finalModel;\n        let upload = { path, progress: 0 };\n        this._uploadChanged.emit({\n            name: 'start',\n            newValue: upload,\n            oldValue: null\n        });\n        for (let start = 0; !finalModel; start += CHUNK_SIZE) {\n            const end = start + CHUNK_SIZE;\n            const lastChunk = end >= file.size;\n            const chunk = lastChunk ? -1 : end / CHUNK_SIZE;\n            const newUpload = { path, progress: start / file.size };\n            this._uploads.splice(this._uploads.indexOf(upload));\n            this._uploads.push(newUpload);\n            this._uploadChanged.emit({\n                name: 'update',\n                newValue: newUpload,\n                oldValue: upload\n            });\n            upload = newUpload;\n            let currentModel;\n            try {\n                currentModel = await uploadInner(file.slice(start, end), chunk);\n            }\n            catch (err) {\n                ArrayExt.removeFirstWhere(this._uploads, uploadIndex => {\n                    return file.name === uploadIndex.path;\n                });\n                this._uploadChanged.emit({\n                    name: 'failure',\n                    newValue: upload,\n                    oldValue: null\n                });\n                throw err;\n            }\n            if (lastChunk) {\n                finalModel = currentModel;\n            }\n        }\n        this._uploads.splice(this._uploads.indexOf(upload));\n        this._uploadChanged.emit({\n            name: 'finish',\n            newValue: null,\n            oldValue: upload\n        });\n        return finalModel;\n    }\n    _uploadCheckDisposed() {\n        if (this.isDisposed) {\n            return Promise.reject('Filemanager disposed. File upload canceled');\n        }\n        return Promise.resolve();\n    }\n    /**\n     * Handle an updated contents model.\n     */\n    handleContents(contents) {\n        // Update our internal data.\n        this._model = {\n            name: contents.name,\n            path: contents.path,\n            type: contents.type,\n            content: undefined,\n            writable: contents.writable,\n            created: contents.created,\n            last_modified: contents.last_modified,\n            mimetype: contents.mimetype,\n            format: contents.format\n        };\n        this._items = contents.content;\n        this._paths.clear();\n        contents.content.forEach((model) => {\n            this._paths.add(model.path);\n        });\n    }\n    /**\n     * Handle a change to the running sessions.\n     */\n    onRunningChanged(sender, models) {\n        this._populateSessions(models);\n        this._refreshed.emit(void 0);\n    }\n    /**\n     * Handle a change on the contents manager.\n     */\n    onFileChanged(sender, change) {\n        const path = this._model.path;\n        const { sessions } = this.manager.services;\n        const { oldValue, newValue } = change;\n        const value = oldValue && oldValue.path && PathExt.dirname(oldValue.path) === path\n            ? oldValue\n            : newValue && newValue.path && PathExt.dirname(newValue.path) === path\n                ? newValue\n                : undefined;\n        // If either the old value or the new value is in the current path, update.\n        if (value) {\n            void this._poll.refresh();\n            this._populateSessions(sessions.running());\n            this._fileChanged.emit(change);\n            return;\n        }\n    }\n    /**\n     * Populate the model's sessions collection.\n     */\n    _populateSessions(models) {\n        this._sessions.length = 0;\n        each(models, model => {\n            if (this._paths.has(model.path)) {\n                this._sessions.push(model);\n            }\n        });\n    }\n}\n/**\n * File browser model where hidden files inclusion can be toggled on/off.\n */\nexport class TogglableHiddenFileBrowserModel extends FileBrowserModel {\n    constructor(options) {\n        super(options);\n        this._includeHiddenFiles = options.includeHiddenFiles || false;\n    }\n    /**\n     * Create an iterator over the model's items filtering hidden files out if necessary.\n     *\n     * @returns A new iterator over the model's items.\n     */\n    items() {\n        return this._includeHiddenFiles\n            ? super.items()\n            : filter(super.items(), value => !value.name.startsWith('.'));\n    }\n    /**\n     * Set the inclusion of hidden files. Triggers a model refresh.\n     */\n    showHiddenFiles(value) {\n        this._includeHiddenFiles = value;\n        void this.refresh();\n    }\n}\n/**\n * File browser model with optional filter on element.\n */\nexport class FilterFileBrowserModel extends TogglableHiddenFileBrowserModel {\n    constructor(options) {\n        super(options);\n        this._filter = options.filter ? options.filter : model => true;\n    }\n    /**\n     * Create an iterator over the filtered model's items.\n     *\n     * @returns A new iterator over the model's items.\n     */\n    items() {\n        return filter(super.items(), (value, index) => {\n            if (value.type === 'directory') {\n                return true;\n            }\n            else {\n                return this._filter(value);\n            }\n        });\n    }\n    setFilter(filter) {\n        this._filter = filter;\n        void this.refresh();\n    }\n}\n//# sourceMappingURL=model.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Dialog, setToolbar, ToolbarButton } from '@jupyterlab/apputils';\nimport { PathExt } from '@jupyterlab/coreutils';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { newFolderIcon, refreshIcon } from '@jupyterlab/ui-components';\nimport { toArray } from '@lumino/algorithm';\nimport { PanelLayout, Widget } from '@lumino/widgets';\nimport { FileBrowser } from './browser';\nimport { FilterFileBrowserModel } from './model';\n/**\n * The class name added to open file dialog\n */\nconst OPEN_DIALOG_CLASS = 'jp-Open-Dialog';\n/**\n * Namespace for file dialog\n */\nexport var FileDialog;\n(function (FileDialog) {\n    /**\n     * Create and show a open files dialog.\n     *\n     * Note: if nothing is selected when `getValue` will return the browser\n     * model current path.\n     *\n     * @param options - The dialog setup options.\n     *\n     * @returns A promise that resolves with whether the dialog was accepted.\n     */\n    function getOpenFiles(options) {\n        const translator = options.translator || nullTranslator;\n        const trans = translator.load('jupyterlab');\n        const dialogOptions = {\n            title: options.title,\n            buttons: [\n                Dialog.cancelButton({ label: trans.__('Cancel') }),\n                Dialog.okButton({\n                    label: trans.__('Select')\n                })\n            ],\n            focusNodeSelector: options.focusNodeSelector,\n            host: options.host,\n            renderer: options.renderer,\n            body: new OpenDialog(options.manager, options.filter, translator)\n        };\n        const dialog = new Dialog(dialogOptions);\n        return dialog.launch();\n    }\n    FileDialog.getOpenFiles = getOpenFiles;\n    /**\n     * Create and show a open directory dialog.\n     *\n     * Note: if nothing is selected when `getValue` will return the browser\n     * model current path.\n     *\n     * @param options - The dialog setup options.\n     *\n     * @returns A promise that resolves with whether the dialog was accepted.\n     */\n    function getExistingDirectory(options) {\n        return getOpenFiles(Object.assign(Object.assign({}, options), { filter: model => false }));\n    }\n    FileDialog.getExistingDirectory = getExistingDirectory;\n})(FileDialog || (FileDialog = {}));\n/**\n * Open dialog widget\n */\nclass OpenDialog extends Widget {\n    constructor(manager, filter, translator) {\n        super();\n        translator = translator !== null && translator !== void 0 ? translator : nullTranslator;\n        const trans = translator.load('jupyterlab');\n        this.addClass(OPEN_DIALOG_CLASS);\n        this._browser = Private.createFilteredFileBrowser('filtered-file-browser-dialog', manager, filter, {}, translator);\n        // Add toolbar items\n        setToolbar(this._browser, (browser) => [\n            {\n                name: 'new-folder',\n                widget: new ToolbarButton({\n                    icon: newFolderIcon,\n                    onClick: () => {\n                        browser.createNewDirectory();\n                    },\n                    tooltip: trans.__('New Folder')\n                })\n            },\n            {\n                name: 'refresher',\n                widget: new ToolbarButton({\n                    icon: refreshIcon,\n                    onClick: () => {\n                        browser.model.refresh().catch(reason => {\n                            console.error('Failed to refresh file browser in open dialog.', reason);\n                        });\n                    },\n                    tooltip: trans.__('Refresh File List')\n                })\n            }\n        ]);\n        // Build the sub widgets\n        const layout = new PanelLayout();\n        layout.addWidget(this._browser);\n        // Set Widget content\n        this.layout = layout;\n    }\n    /**\n     * Get the selected items.\n     */\n    getValue() {\n        const selection = toArray(this._browser.selectedItems());\n        if (selection.length === 0) {\n            // Return current path\n            return [\n                {\n                    path: this._browser.model.path,\n                    name: PathExt.basename(this._browser.model.path),\n                    type: 'directory',\n                    content: undefined,\n                    writable: false,\n                    created: 'unknown',\n                    last_modified: 'unknown',\n                    mimetype: 'text/plain',\n                    format: 'text'\n                }\n            ];\n        }\n        else {\n            return selection;\n        }\n    }\n}\nvar Private;\n(function (Private) {\n    /**\n     * Create a new file browser instance.\n     *\n     * @param id - The widget/DOM id of the file browser.\n     *\n     * @param manager - A document manager instance.\n     *\n     * @param filter - function to filter file browser item.\n     *\n     * @param options - The optional file browser configuration object.\n     *\n     * #### Notes\n     * The ID parameter is used to set the widget ID. It is also used as part of\n     * the unique key necessary to store the file browser's restoration data in\n     * the state database if that functionality is enabled.\n     *\n     * If, after the file browser has been generated by the factory, the ID of the\n     * resulting widget is changed by client code, the restoration functionality\n     * will not be disrupted as long as there are no ID collisions, i.e., as long\n     * as the initial ID passed into the factory is used for only one file browser\n     * instance.\n     */\n    Private.createFilteredFileBrowser = (id, manager, filter, options = {}, translator) => {\n        translator = translator || nullTranslator;\n        const model = new FilterFileBrowserModel({\n            manager,\n            filter,\n            translator,\n            driveName: options.driveName,\n            refreshInterval: options.refreshInterval\n        });\n        const widget = new FileBrowser({\n            id,\n            model,\n            translator\n        });\n        return widget;\n    };\n})(Private || (Private = {}));\n//# sourceMappingURL=opendialog.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Token } from '@lumino/coreutils';\n/* tslint:disable */\n/**\n * The path tracker token.\n */\nexport const IFileBrowserFactory = new Token('@jupyterlab/filebrowser:IFileBrowserFactory');\n/**\n * The token that indicates the default file browser commands are loaded.\n */\nexport const IFileBrowserCommands = new Token('@jupyterlab/filebrowser:IFileBrowserCommands');\n//# sourceMappingURL=tokens.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { showErrorMessage, ToolbarButton } from '@jupyterlab/apputils';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { fileUploadIcon } from '@jupyterlab/ui-components';\n/**\n * A widget which provides an upload button.\n */\nexport class Uploader extends ToolbarButton {\n    /**\n     * Construct a new file browser buttons widget.\n     */\n    constructor(options) {\n        super({\n            icon: fileUploadIcon,\n            onClick: () => {\n                this._input.click();\n            },\n            tooltip: Private.translateToolTip(options.translator)\n        });\n        /**\n         * The 'change' handler for the input field.\n         */\n        this._onInputChanged = () => {\n            const files = Array.prototype.slice.call(this._input.files);\n            const pending = files.map(file => this.fileBrowserModel.upload(file));\n            void Promise.all(pending).catch(error => {\n                void showErrorMessage(this._trans._p('showErrorMessage', 'Upload Error'), error);\n            });\n        };\n        /**\n         * The 'click' handler for the input field.\n         */\n        this._onInputClicked = () => {\n            // In order to allow repeated uploads of the same file (with delete in between),\n            // we need to clear the input value to trigger a change event.\n            this._input.value = '';\n        };\n        this._input = Private.createUploadInput();\n        this.fileBrowserModel = options.model;\n        this.translator = options.translator || nullTranslator;\n        this._trans = this.translator.load('jupyterlab');\n        this._input.onclick = this._onInputClicked;\n        this._input.onchange = this._onInputChanged;\n        this.addClass('jp-id-upload');\n    }\n}\n/**\n * The namespace for module private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Create the upload input node for a file buttons widget.\n     */\n    function createUploadInput() {\n        const input = document.createElement('input');\n        input.type = 'file';\n        input.multiple = true;\n        return input;\n    }\n    Private.createUploadInput = createUploadInput;\n    /**\n     * Translate upload tooltip.\n     */\n    function translateToolTip(translator) {\n        translator = translator || nullTranslator;\n        const trans = translator.load('jupyterlab');\n        return trans.__('Upload Files');\n    }\n    Private.translateToolTip = translateToolTip;\n})(Private || (Private = {}));\n//# sourceMappingURL=upload.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n//\nimport { VDomModel, VDomRenderer } from '@jupyterlab/apputils';\nimport { GroupItem, ProgressBar, TextItem } from '@jupyterlab/statusbar';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { ArrayExt } from '@lumino/algorithm';\nimport React from 'react';\n/**\n * Half-spacing between items in the overall status item.\n */\nconst HALF_SPACING = 4;\n/**\n * A pure function component for a FileUpload status item.\n *\n * @param props: the props for the component.\n *\n * @returns a tsx component for the file upload status.\n */\nfunction FileUploadComponent(props) {\n    const translator = props.translator || nullTranslator;\n    const trans = translator.load('jupyterlab');\n    return (React.createElement(GroupItem, { spacing: HALF_SPACING },\n        React.createElement(TextItem, { source: trans.__('Uploading…') }),\n        React.createElement(ProgressBar, { percentage: props.upload })));\n}\n/**\n * The time for which to show the \"Complete!\" message after uploading.\n */\nconst UPLOAD_COMPLETE_MESSAGE_MILLIS = 2000;\n/**\n * Status bar item to display file upload progress.\n */\nexport class FileUploadStatus extends VDomRenderer {\n    /**\n     * Construct a new FileUpload status item.\n     */\n    constructor(opts) {\n        super(new FileUploadStatus.Model(opts.tracker.currentWidget && opts.tracker.currentWidget.model));\n        this._onBrowserChange = (tracker, browser) => {\n            if (browser === null) {\n                this.model.browserModel = null;\n            }\n            else {\n                this.model.browserModel = browser.model;\n            }\n        };\n        this.translator = opts.translator || nullTranslator;\n        this._trans = this.translator.load('jupyterlab');\n        this._tracker = opts.tracker;\n        this._tracker.currentChanged.connect(this._onBrowserChange);\n    }\n    /**\n     * Render the FileUpload status.\n     */\n    render() {\n        const uploadPaths = this.model.items;\n        if (uploadPaths.length > 0) {\n            const item = this.model.items[0];\n            if (item.complete) {\n                return React.createElement(TextItem, { source: this._trans.__('Complete!') });\n            }\n            else {\n                return (React.createElement(FileUploadComponent, { upload: this.model.items[0].progress, translator: this.translator }));\n            }\n        }\n        else {\n            return React.createElement(FileUploadComponent, { upload: 100, translator: this.translator });\n        }\n    }\n    dispose() {\n        super.dispose();\n        this._tracker.currentChanged.disconnect(this._onBrowserChange);\n    }\n}\n/**\n * A namespace for FileUpload class statics.\n */\n(function (FileUploadStatus) {\n    /**\n     * The VDomModel for the FileUpload renderer.\n     */\n    class Model extends VDomModel {\n        /**\n         * Construct a new model.\n         */\n        constructor(browserModel) {\n            super();\n            /**\n             * Handle an uploadChanged event in the filebrowser model.\n             */\n            this._uploadChanged = (browse, uploads) => {\n                if (uploads.name === 'start') {\n                    this._items.push({\n                        path: uploads.newValue.path,\n                        progress: uploads.newValue.progress * 100,\n                        complete: false\n                    });\n                }\n                else if (uploads.name === 'update') {\n                    const idx = ArrayExt.findFirstIndex(this._items, val => val.path === uploads.oldValue.path);\n                    if (idx !== -1) {\n                        this._items[idx].progress = uploads.newValue.progress * 100;\n                    }\n                }\n                else if (uploads.name === 'finish') {\n                    const idx = ArrayExt.findFirstIndex(this._items, val => val.path === uploads.oldValue.path);\n                    if (idx !== -1) {\n                        this._items[idx].complete = true;\n                        setTimeout(() => {\n                            ArrayExt.removeAt(this._items, idx);\n                            this.stateChanged.emit(void 0);\n                        }, UPLOAD_COMPLETE_MESSAGE_MILLIS);\n                    }\n                }\n                else if (uploads.name === 'failure') {\n                    ArrayExt.removeFirstWhere(this._items, val => val.path === uploads.newValue.path);\n                }\n                this.stateChanged.emit(void 0);\n            };\n            this._items = [];\n            this._browserModel = null;\n            this.browserModel = browserModel;\n        }\n        /**\n         * The currently uploading items.\n         */\n        get items() {\n            return this._items;\n        }\n        /**\n         * The current file browser model.\n         */\n        get browserModel() {\n            return this._browserModel;\n        }\n        set browserModel(browserModel) {\n            const oldBrowserModel = this._browserModel;\n            if (oldBrowserModel) {\n                oldBrowserModel.uploadChanged.disconnect(this._uploadChanged);\n            }\n            this._browserModel = browserModel;\n            this._items = [];\n            if (this._browserModel !== null) {\n                this._browserModel.uploadChanged.connect(this._uploadChanged);\n            }\n            this.stateChanged.emit(void 0);\n        }\n    }\n    FileUploadStatus.Model = Model;\n})(FileUploadStatus || (FileUploadStatus = {}));\n//# sourceMappingURL=uploadstatus.js.map"],"names":["BREADCRUMB_ROOT_CLASS","BREADCRUMB_PREFERRED_CLASS","BREADCRUMB_ITEM_CLASS","BREAD_CRUMB_PATHS","CONTENTS_MIME","DROP_TARGET_CLASS","BreadCrumbs","Widget","constructor","options","super","this","translator","nullTranslator","_trans","load","_model","model","addClass","_crumbs","Private","createCrumbs","_crumbSeps","createCrumbSeparators","_hasPreferred","PageConfig","node","appendChild","Crumb","Preferred","Home","refreshed","connect","update","handleEvent","event","type","_evtClick","_evtDragEnter","_evtDragLeave","_evtDragOver","_evtDrop","onAfterAttach","msg","addEventListener","onBeforeDetach","removeEventListener","onUpdateRequest","localPath","manager","services","contents","path","updateCrumbs","button","target","classList","contains","cd","catch","error","showErrorMessage","__","preventDefault","stopPropagation","index","ArrayExt","value","parentElement","mimeData","hasData","ElementExt","clientX","clientY","Current","add","dropTarget","DOMUtils","remove","dropAction","proposedAction","PathExt","promises","oldPaths","getData","oldPath","localOldPath","name","newPath","push","renameFile","Promise","all","err","breadcrumbs","separators","hasPreferred","parentNode","firstChild","nextSibling","removeChild","parts","split","length","Ellipsis","grandParent","slice","join","title","Parent","textContent","parent","home","className","tag","stylesheet","ellipsis","ellipsesIcon","document","createElement","current","items","i","MAX_DIRECTORIES","item","HEADER_CLASS","HEADER_ITEM_ICON_CLASS","CONTENT_CLASS","ITEM_TEXT_CLASS","ITEM_ICON_CLASS","ITEM_MODIFIED_CLASS","NAME_ID_CLASS","MODIFIED_ID_CLASS","MODIFIED_COLUMN_HIDDEN","SELECTED_CLASS","CUT_CLASS","MULTI_SELECTED_CLASS","RUNNING_CLASS","DESCENDING_CLASS","IS_MAC","navigator","platform","match","DirListing","renderer","defaultRenderer","createNode","_items","_sortedItems","_sortState","direction","key","_onItemOpened","Signal","_drag","_dragData","_selectTimer","_isCut","_prevPath","_clipboard","_softSelection","selection","Object","create","_searchPrefix","_searchPrefixTimer","_inRename","_isDirty","_hiddenColumns","Set","fileChanged","_onFileChanged","_onModelRefreshed","pathChanged","_onPathChanged","_editNode","_manager","_renderer","headerNode","populateHeaderNode","activateRequested","_onActivateRequested","dispose","contentNode","sortState","onItemOpened","selectedItems","filter","sortedItems","ArrayIterator","sort","state","rename","_doRename","cut","_copy","copy","paste","resolve","undefined","basePath","each","removeClass","then","_p","async","message","_n","result","showDialog","body","buttons","Dialog","label","defaultButton","isDisposed","accept","_delete","map","duplicate","toArray","download","shutdownKernels","paths","sessions","session","shutdown","id","selectNext","keepExisting","selected","keys","_selectItem","selectPrevious","selectByPrefix","prefix","toLowerCase","substr","isSelected","modelForClick","hitTestNodes","clearSelectedItems","focus","refresh","Error","MessageLoop","_evtMousedown","_evtMouseup","_evtMousemove","evtKeydown","evtDblClick","evtNativeDrop","_evtScroll","evtDragEnter","evtDragLeave","evtDragOver","evtDrop","content","onAfterShow","nodes","pop","createItemNode","forEach","ft","registry","getFileTypeForModel","updateItemNode","setAttribute","_a","kernel","specs","spec","kernelspecs","display_name","onResize","width","getBoundingClientRect","toggleClass","setColumnVisibility","visible","delete","innerHTML","header","handleHeaderClick","scrollLeft","blur","clearTimeout","handleFileSelect","ctrlKey","pressX","pressY","metaKey","shiftKey","_focusSelectedFile","data","dx","Math","abs","dy","_startDrag","handleOpen","emit","openOrReveal","keyCode","altKey","window","setTimeout","_b","_c","files","dataTransfer","webkitGetAsEntry","isDirectory","console","log","upload","selectedPaths","source","find","dragImage","createDragImage","Drag","MimeData","supportedActions","setData","withContent","get","otherPaths","reverse","widget","findWidget","open","firstWidgetPlaced","PromiseDelegate","promise","prevWidget","ref","mode","start","action","_handleMultiSelect","text","nearestIndex","indexOf","deleteFile","row","nameNode","getNameNode","original","doRename","newName","isValidFileName","selectItemByName","existing","isVisible","sender","args","newValue","basename","Renderer","tabIndex","hiddenColumns","trans","createHeaderItemNode","narrow","modified","has","call","updateCaret","modifiedIcon","nameIcon","icon","fileType","DocumentRegistry","iconClass","iconContainer","LabIcon","classes","container","hoverText","size","formatFileSize","dirname","created","Time","Date","last_modified","writable","startsWith","removeAttribute","indices","highlightedName","StringExt","h","VirtualDOM","modText","modTitle","count","cloneNode","iconLabel","edit","replaceChild","lastIndexOf","setSelectionRange","reject","onblur","onkeydown","selectionStart","selectionEnd","a","b","t1","t2","valA","getTime","valB","localeCompare","bytes","decimalPoint","k","dm","sizes","floor","parseFloat","pow","toFixed","String","float","caretDownIcon","caretUpIcon","element","FILTERBOX_CLASS","FileBrowser","_showLastModifiedColumn","_useFuzzyFilter","_showHiddenFiles","connectionFailure","_onConnectionFailure","crumbs","toolbar","Toolbar","_directoryPending","listing","createDirListing","_filenameSearcher","FilenameSearcher","updateFilter","filterFn","setFilter","useFuzzyFilter","placeholder","layout","PanelLayout","addWidget","restore","navigateToCurrentDirectory","_navigateToCurrentDirectory","showLastModifiedColumn","warn","forceRefresh","removeWidget","showHiddenFiles","createNewDirectory","newUntitled","createNewFile","_filePending","ext","ServerConnection","response","status","LARGE_FILE_SIZE","CHUNK_SIZE","FileBrowserModel","_connectionFailure","_fileChanged","_key","_pathChanged","_paths","_pending","_pendingPath","_refreshed","_sessions","_state","_isDisposed","_restored","_uploads","_uploadChanged","_driveName","driveName","rootPath","mimetype","format","refreshInterval","onFileChanged","runningChanged","onRunningChanged","_unloadEventListener","e","confirmationMessage","returnValue","_poll","Poll","auto","factory","frequency","interval","backoff","max","standby","restored","uploadChanged","uploads","tick","resolvePath","oldValue","handleContents","save","running","url","getDownloadUrl","href","click","populate","ready","fetch","file","serverVersion","supportsChunked","largeFile","_shouldUploadLarge","_uploadCheckDisposed","shouldOverwrite","chunkedUpload","_upload","round","chunked","uploadInner","blob","chunk","reader","FileReader","readAsDataURL","onload","onerror","uploadIndex","finalModel","progress","end","lastChunk","newUpload","currentModel","splice","clear","models","_populateSessions","change","TogglableHiddenFileBrowserModel","_includeHiddenFiles","includeHiddenFiles","FilterFileBrowserModel","_filter","FileDialog","getOpenFiles","dialogOptions","focusNodeSelector","host","OpenDialog","launch","getExistingDirectory","assign","_browser","createFilteredFileBrowser","setToolbar","browser","ToolbarButton","newFolderIcon","onClick","tooltip","refreshIcon","reason","getValue","IFileBrowserFactory","Token","IFileBrowserCommands","Uploader","fileUploadIcon","_input","translateToolTip","_onInputChanged","pending","Array","prototype","fileBrowserModel","_onInputClicked","createUploadInput","onclick","onchange","input","multiple","FileUploadComponent","props","GroupItem","spacing","TextItem","ProgressBar","percentage","FileUploadStatus","VDomRenderer","opts","Model","tracker","currentWidget","_onBrowserChange","browserModel","_tracker","currentChanged","render","complete","disconnect","VDomModel","browse","idx","val","stateChanged","_browserModel","oldBrowserModel"],"sourceRoot":""}
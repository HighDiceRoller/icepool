{"version":3,"file":"3353.2f91edb.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/application-extension/lib/pluginmanager.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/application-extension/lib/index.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { JupyterLab, } from '@jupyterlab/application';\nimport { ICommandPalette, MainAreaWidget, WidgetTracker } from '@jupyterlab/apputils';\nimport { IPluginManager, PluginListModel, Plugins, } from '@jupyterlab/pluginmanager';\nimport { ITranslator, nullTranslator } from '@jupyterlab/translation';\nimport { extensionIcon } from '@jupyterlab/ui-components';\n/**\n * The command IDs used by the plugin manager plugin.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.open = 'plugin-manager:open';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * Custom PluginModel for use in JupyterLite\n */\nexport class LitePluginListModel extends PluginListModel {\n    /**\n     * Create a new PluginListModel.\n     */\n    constructor(options) {\n        super(options);\n        this._availablePlugins = options.pluginData.availablePlugins.map((plugin) => {\n            let tokenLabel = plugin.provides ? plugin.provides.name.split(':')[1] : undefined;\n            if (plugin.provides && !tokenLabel) {\n                tokenLabel = plugin.provides.name;\n            }\n            return {\n                ...plugin,\n                tokenLabel,\n                // keep all plugins locked and enabled for now until there is\n                // a way to enable/disable plugins in JupyterLite\n                locked: true,\n                enabled: true,\n            };\n        });\n    }\n    get available() {\n        return this._availablePlugins;\n    }\n    async refresh() {\n        // no-op\n    }\n    async enable(entry) {\n        // no-op\n    }\n    async disable(entry) {\n        // no-op\n    }\n}\n/**\n * A plugin for managing status of other plugins.\n */\nexport const pluginManagerPlugin = {\n    id: '@jupyterlite/application-extension:plugin-manager',\n    description: 'Plugin manager viewer',\n    autoStart: true,\n    optional: [ITranslator, ICommandPalette],\n    provides: IPluginManager,\n    activate: (app, translator, palette) => {\n        if (!(app instanceof JupyterLab)) {\n            // only activate in JupyterLab\n            // TODO: require JupyterLab.IInfo instead when the upstream PR is merged and released?\n            // https://github.com/jupyterlab/jupyterlab/pull/17367\n            return {\n                open: async () => {\n                    // eslint-disable-next-line no-console\n                    console.info('Plugin manager viewer is only available in JupyterLab');\n                },\n            };\n        }\n        const { commands, serviceManager, shell } = app;\n        translator = translator !== null && translator !== void 0 ? translator : nullTranslator;\n        const trans = translator.load('jupyterlab');\n        const category = trans.__('Plugin Manager');\n        const widgetLabel = trans.__('Advanced Plugin Manager');\n        const namespace = 'plugin-manager';\n        const tracker = new WidgetTracker({\n            namespace: namespace,\n        });\n        const availablePlugins = app.info.availablePlugins;\n        function createWidget(args) {\n            const model = new LitePluginListModel({\n                ...args,\n                pluginData: {\n                    availablePlugins,\n                },\n                serverSettings: serviceManager.serverSettings,\n                extraLockedPlugins: [pluginManagerPlugin.id],\n                translator: translator !== null && translator !== void 0 ? translator : nullTranslator,\n            });\n            const content = new Plugins({\n                model,\n                translator: translator !== null && translator !== void 0 ? translator : nullTranslator,\n            });\n            content.title.label = widgetLabel;\n            content.title.icon = extensionIcon;\n            content.title.caption = trans.__('Plugin Manager');\n            const main = new MainAreaWidget({ content, reveal: model.ready });\n            return main;\n        }\n        commands.addCommand(CommandIDs.open, {\n            label: widgetLabel,\n            execute: (args) => {\n                const main = createWidget(args);\n                shell.add(main, 'main', { type: 'Plugins' });\n                // add to tracker so it can be restored, and update when choices change\n                void tracker.add(main);\n                main.content.model.trackerDataChanged.connect(() => {\n                    void tracker.save(main);\n                });\n                return main;\n            },\n        });\n        if (palette) {\n            palette.addItem({ command: CommandIDs.open, category });\n        }\n        return {\n            open: () => {\n                return app.commands.execute(CommandIDs.open);\n            },\n        };\n    },\n};\n//# sourceMappingURL=pluginmanager.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { ILabShell, IRouter, } from '@jupyterlab/application';\nimport { Clipboard, Dialog, ICommandPalette, ILicensesClient, showDialog, } from '@jupyterlab/apputils';\nimport { PageConfig, URLExt } from '@jupyterlab/coreutils';\nimport { IDocumentManager, IDocumentWidgetOpener } from '@jupyterlab/docmanager';\nimport { IFileBrowserFactory } from '@jupyterlab/filebrowser';\nimport { DocumentConnectionManager, ILSPDocumentConnectionManager, IWidgetLSPAdapterTracker, LanguageServerManager, } from '@jupyterlab/lsp';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { ITranslator, ITranslatorConnector } from '@jupyterlab/translation';\nimport { downloadIcon, linkIcon } from '@jupyterlab/ui-components';\nimport { BroadcastChannelWrapper, IBroadcastChannelWrapper, } from '@jupyterlite/contents';\nimport { LiteLicensesClient } from '@jupyterlite/licenses';\nimport { IServiceWorkerManager, ServiceWorkerManager } from '@jupyterlite/server';\nimport { LiteTranslatorConnector } from '@jupyterlite/translation';\nimport { liteIcon, liteWordmark } from '@jupyterlite/ui-components';\nimport { filter } from '@lumino/algorithm';\nimport { Widget } from '@lumino/widgets';\nimport React from 'react';\nimport { pluginManagerPlugin } from './pluginmanager';\n/**\n * A regular expression to match path to notebooks, documents and consoles\n */\nconst URL_PATTERN = new RegExp('/(lab|tree|notebooks|edit|consoles)\\\\/?');\n/**\n * The JupyterLab document manager plugin id.\n */\nconst JUPYTERLAB_DOCMANAGER_PLUGIN_ID = '@jupyterlab/docmanager-extension:plugin';\n/**\n * The command IDs used by the application extension.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.about = 'application:about';\n    CommandIDs.docmanagerDownload = 'docmanager:download';\n    CommandIDs.filebrowserDownload = 'filebrowser:download';\n    CommandIDs.copyShareableLink = 'filebrowser:share-main';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * The name of the translation bundle for internationalized strings.\n */\nconst I18N_BUNDLE = 'jupyterlite';\n/**\n * Add a command to show an About dialog.\n */\nconst about = {\n    id: '@jupyterlite/application-extension:about',\n    autoStart: true,\n    requires: [ITranslator],\n    optional: [ICommandPalette, IMainMenu],\n    activate: (app, translator, palette, menu) => {\n        const { commands } = app;\n        const trans = translator.load(I18N_BUNDLE);\n        const category = trans.__('Help');\n        commands.addCommand(CommandIDs.about, {\n            label: trans.__('About %1', app.name),\n            execute: () => {\n                const versionNumber = trans.__('Version %1', app.version);\n                const versionInfo = (React.createElement(\"span\", { className: \"jp-About-version-info\" },\n                    React.createElement(\"span\", { className: \"jp-About-version\" }, versionNumber)));\n                const title = (React.createElement(\"span\", { className: \"jp-About-header\" },\n                    React.createElement(\"div\", { className: \"jp-About-header-info\" },\n                        React.createElement(liteWordmark.react, { height: \"auto\", width: \"196px\" }),\n                        versionInfo)));\n                // Create the body of the about dialog\n                const jupyterliteURL = 'https://github.com/jupyterlite/jupyterlite';\n                const contributorsURL = 'https://github.com/jupyterlite/jupyterlite/graphs/contributors';\n                const externalLinks = (React.createElement(\"span\", { className: \"jp-About-externalLinks\" },\n                    React.createElement(\"a\", { href: contributorsURL, target: \"_blank\", rel: \"noopener noreferrer\", className: \"jp-Button-flat\" }, trans.__('CONTRIBUTOR LIST')),\n                    React.createElement(\"a\", { href: jupyterliteURL, target: \"_blank\", rel: \"noopener noreferrer\", className: \"jp-Button-flat\" }, trans.__('JUPYTERLITE ON GITHUB'))));\n                const copyright = (React.createElement(\"span\", { className: \"jp-About-copyright\" }, trans.__('© 2021-2022 JupyterLite Contributors')));\n                const body = (React.createElement(\"div\", { className: \"jp-About-body\" },\n                    externalLinks,\n                    copyright));\n                return showDialog({\n                    title,\n                    body,\n                    buttons: [\n                        Dialog.createButton({\n                            label: trans.__('Dismiss'),\n                            className: 'jp-About-button jp-mod-reject jp-mod-styled',\n                        }),\n                    ],\n                });\n            },\n        });\n        if (palette) {\n            palette.addItem({ command: CommandIDs.about, category });\n        }\n        if (menu) {\n            menu.helpMenu.addGroup([{ command: CommandIDs.about }], 0);\n        }\n    },\n};\n/**\n * A plugin providing download commands in the file menu and command palette.\n */\nconst downloadPlugin = {\n    id: '@jupyterlite/application-extension:download',\n    autoStart: true,\n    requires: [ITranslator, IDocumentManager],\n    optional: [ICommandPalette, IFileBrowserFactory],\n    activate: (app, translator, docManager, palette, factory) => {\n        const trans = translator.load(I18N_BUNDLE);\n        const { commands, serviceManager, shell } = app;\n        const { contents } = serviceManager;\n        const isEnabled = () => {\n            const { currentWidget } = shell;\n            return !!(currentWidget && docManager.contextForWidget(currentWidget));\n        };\n        const downloadContent = async (contentPath, fileName) => {\n            var _a, _b, _c;\n            const model = await contents.get(contentPath, { content: true });\n            const element = document.createElement('a');\n            if (model.type === 'notebook' ||\n                model.format === 'json' ||\n                model.mimetype === 'text/json') {\n                const mime = (_a = model.mimetype) !== null && _a !== void 0 ? _a : 'text/json';\n                const content = JSON.stringify(model.content, null, 2);\n                element.href = `data:${mime};charset=utf-8,${encodeURIComponent(content)}`;\n            }\n            else if (model.format === 'text' || model.mimetype === 'text/plain') {\n                const mime = (_b = model.mimetype) !== null && _b !== void 0 ? _b : 'text/plain';\n                element.href = `data:${mime};charset=utf-8,${encodeURIComponent(model.content)}`;\n            }\n            else if (model.format === 'base64' ||\n                model.mimetype === 'application/octet-stream') {\n                const mime = (_c = model.mimetype) !== null && _c !== void 0 ? _c : 'application/octet-stream';\n                element.href = `data:${mime};base64,${model.content}`;\n            }\n            else {\n                throw new Error(`Content whose mimetype is \"${model.mimetype}\" cannot be downloaded`);\n            }\n            element.download = fileName;\n            document.body.appendChild(element);\n            element.click();\n            document.body.removeChild(element);\n        };\n        commands.addCommand(CommandIDs.docmanagerDownload, {\n            label: trans.__('Download'),\n            caption: trans.__('Download the file to your computer'),\n            isEnabled,\n            execute: async () => {\n                // Checks that shell.currentWidget is valid:\n                const current = shell.currentWidget;\n                if (!isEnabled() || !current) {\n                    return;\n                }\n                const context = docManager.contextForWidget(current);\n                if (!context) {\n                    return showDialog({\n                        title: trans.__('Cannot Download'),\n                        body: trans.__('No context found for current widget!'),\n                        buttons: [Dialog.okButton({ label: trans.__('OK') })],\n                    });\n                }\n                await context.save();\n                try {\n                    await downloadContent(context.path, context.path);\n                }\n                catch (e) {\n                    return showDialog({\n                        title: trans.__('Cannot Download'),\n                        body: JSON.stringify(e),\n                        buttons: [Dialog.okButton({ label: trans.__('OK') })],\n                    });\n                }\n            },\n        });\n        const category = trans.__('File Operations');\n        if (palette) {\n            palette.addItem({ command: CommandIDs.docmanagerDownload, category });\n        }\n        if (factory) {\n            const { tracker } = factory;\n            commands.addCommand(CommandIDs.filebrowserDownload, {\n                execute: async () => {\n                    const widget = tracker.currentWidget;\n                    if (!widget) {\n                        return;\n                    }\n                    const selected = Array.from(widget.selectedItems());\n                    selected.forEach(async (item) => {\n                        if (item.type !== 'directory') {\n                            try {\n                                await downloadContent(item.path, item.name);\n                            }\n                            catch (e) {\n                                return showDialog({\n                                    title: trans.__('Cannot Download'),\n                                    body: JSON.stringify(e),\n                                    buttons: [Dialog.okButton({ label: trans.__('OK') })],\n                                });\n                            }\n                        }\n                    });\n                },\n                icon: downloadIcon.bindprops({ stylesheet: 'menuItem' }),\n                label: trans.__('Download'),\n            });\n        }\n    },\n};\n/**\n * A plugin for handling communication with the Emscpriten file system.\n */\nconst emscriptenFileSystemPlugin = {\n    id: '@jupyterlite/application-extension:emscripten-filesystem',\n    autoStart: true,\n    optional: [IServiceWorkerManager],\n    provides: IBroadcastChannelWrapper,\n    activate: (app, serviceWorkerRegistrationWrapper) => {\n        const { contents } = app.serviceManager;\n        const broadcaster = new BroadcastChannelWrapper({ contents });\n        const what = 'Kernel filesystem and JupyterLite contents';\n        function logStatus(msg, err) {\n            if (err) {\n                console.warn(err);\n            }\n            if (msg) {\n                console.warn(msg);\n            }\n            if (err || msg) {\n                console.warn(`${what} will NOT be synced`);\n            }\n            else {\n                // eslint-disable-next-line no-console\n                console.info(`${what} will be synced`);\n            }\n        }\n        if (!serviceWorkerRegistrationWrapper) {\n            logStatus('JupyterLite ServiceWorker not available');\n        }\n        else {\n            serviceWorkerRegistrationWrapper.ready\n                .then(() => {\n                broadcaster.enable();\n                logStatus();\n            })\n                .catch((err) => {\n                logStatus('JupyterLite ServiceWorker failed to become available', err);\n            });\n        }\n        return broadcaster;\n    },\n};\n/**\n * The client for fetching licenses data.\n */\nconst licensesClient = {\n    id: '@jupyterlite/application-extension:licenses-client',\n    autoStart: true,\n    provides: ILicensesClient,\n    activate: (app) => {\n        return new LiteLicensesClient();\n    },\n};\n/**\n * The main application icon.\n */\nconst liteLogo = {\n    id: '@jupyterlite/application-extension:logo',\n    // marking as optional to not throw errors in Notebook\n    optional: [ILabShell],\n    autoStart: true,\n    activate: (app, labShell) => {\n        if (!labShell) {\n            return;\n        }\n        const logo = new Widget();\n        liteIcon.element({\n            container: logo.node,\n            elementPosition: 'center',\n            margin: '2px 2px 2px 8px',\n            height: 'auto',\n            width: '16px',\n        });\n        logo.id = 'jp-MainLogo';\n        labShell.add(logo, 'top', { rank: 0 });\n    },\n};\n/**\n * A plugin to provide the language server connection manager\n *\n * Currently does nothing until LSP is supported in JupyterLite\n */\nconst lspConnectionManager = {\n    id: '@jupyterlite/application-extension:lsp-connection-manager',\n    autoStart: true,\n    requires: [IWidgetLSPAdapterTracker],\n    provides: ILSPDocumentConnectionManager,\n    activate: (app, tracker) => {\n        const languageServerManager = new (class extends LanguageServerManager {\n            async fetchSessions() {\n                // no-op\n            }\n        })({\n            settings: app.serviceManager.serverSettings,\n        });\n        const connectionManager = new DocumentConnectionManager({\n            languageServerManager,\n            adapterTracker: tracker,\n        });\n        return connectionManager;\n    },\n};\n/**\n * A plugin to trigger a refresh of the commands when the shell layout changes.\n */\nconst notifyCommands = {\n    id: '@jupyterlite/application-extension:notify-commands',\n    autoStart: true,\n    optional: [ILabShell],\n    activate: (app, labShell) => {\n        if (labShell) {\n            labShell.layoutModified.connect(() => {\n                app.commands.notifyCommandChanged();\n            });\n        }\n    },\n};\n/**\n * A custom opener plugin to pass the path to documents as\n * query string parameters.\n */\nconst opener = {\n    id: '@jupyterlite/application-extension:opener',\n    autoStart: true,\n    requires: [IRouter, IDocumentManager],\n    optional: [ILabShell, ISettingRegistry],\n    activate: (app, router, docManager, labShell, settingRegistry) => {\n        const { commands, docRegistry } = app;\n        const command = 'router:tree';\n        commands.addCommand(command, {\n            execute: (args) => {\n                var _a;\n                const parsed = args;\n                // use request to do the matching\n                const { request, search } = parsed;\n                const matches = (_a = request.match(URL_PATTERN)) !== null && _a !== void 0 ? _a : [];\n                if (!matches) {\n                    return;\n                }\n                const urlParams = new URLSearchParams(search);\n                const paths = urlParams.getAll('path');\n                if (paths.length === 0) {\n                    return;\n                }\n                const files = paths.map((path) => decodeURIComponent(path));\n                app.started.then(async () => {\n                    var _a;\n                    const page = PageConfig.getOption('notebookPage');\n                    const [file] = files;\n                    if (page === 'tree') {\n                        let appUrl = '/edit';\n                        // check if the file is a notebook\n                        const defaultFactory = docRegistry.defaultWidgetFactory(file);\n                        if (defaultFactory.name === 'Notebook') {\n                            appUrl = '/notebooks';\n                        }\n                        const baseUrl = PageConfig.getBaseUrl();\n                        const url = new URL(URLExt.join(baseUrl, appUrl, 'index.html'));\n                        url.searchParams.append('path', file);\n                        // redirect to the proper page\n                        window.location.href = url.toString();\n                        return;\n                    }\n                    else if (page === 'consoles') {\n                        commands.execute('console:create', { path: file });\n                        return;\n                    }\n                    else if (page === 'notebooks' || page === 'edit') {\n                        let defaultFactory = docRegistry.defaultWidgetFactory(file).name;\n                        // Explicitly get the default viewers from the settings because\n                        // JupyterLab might not have had the time to load the settings yet (race condition)\n                        // Relevant code: https://github.com/jupyterlab/jupyterlab/blob/d56ff811f39b3c10c6d8b6eb27a94624b753eb53/packages/docmanager-extension/src/index.tsx#L265-L293\n                        if (settingRegistry) {\n                            const settings = await settingRegistry.load(JUPYTERLAB_DOCMANAGER_PLUGIN_ID);\n                            const defaultViewers = settings.get('defaultViewers').composite;\n                            // get the file types for the path\n                            const types = docRegistry.getFileTypesForPath(file);\n                            // for each file type, check if there is a default viewer and if it\n                            // is available in the docRegistry. If it is the case, use it as the\n                            // default factory\n                            types.forEach((ft) => {\n                                if (defaultViewers[ft.name] !== undefined &&\n                                    docRegistry.getWidgetFactory(defaultViewers[ft.name])) {\n                                    defaultFactory = defaultViewers[ft.name];\n                                }\n                            });\n                        }\n                        const factory = (_a = urlParams.get('factory')) !== null && _a !== void 0 ? _a : defaultFactory;\n                        docManager.open(file, factory, undefined, {\n                            ref: '_noref',\n                        });\n                    }\n                    else {\n                        // open all files in the lab interface\n                        files.forEach((file) => docManager.open(file));\n                        const url = new URL(URLExt.join(PageConfig.getBaseUrl(), request));\n                        // only remove the path (to keep extra parameters like the RTC room)\n                        url.searchParams.delete('path');\n                        const { pathname, search } = url;\n                        router.navigate(`${pathname}${search}`, { skipRouting: true });\n                        if (labShell) {\n                            // open the folder where the files are located on startup\n                            const showInBrowser = () => {\n                                commands.execute('docmanager:show-in-file-browser');\n                                labShell.currentChanged.disconnect(showInBrowser);\n                            };\n                            labShell.currentChanged.connect(showInBrowser);\n                        }\n                    }\n                });\n            },\n        });\n        router.register({ command, pattern: URL_PATTERN });\n    },\n};\n/**\n * A plugin installing the service worker.\n */\nconst serviceWorkerPlugin = {\n    id: '@jupyterlite/application-extension:service-worker',\n    autoStart: true,\n    provides: IServiceWorkerManager,\n    activate: (app) => {\n        return new ServiceWorkerManager();\n    },\n};\n/**\n * A plugin to patch the session context path so it includes the drive name.\n * TODO: investigate a better way for the kernel to be aware of the drive it is\n * associated with.\n */\nconst sessionContextPatch = {\n    id: '@jupyterlite/application-extension:session-context-patch',\n    autoStart: true,\n    requires: [IDocumentManager, IDocumentWidgetOpener],\n    activate: (app, docManager, widgetOpener) => {\n        const contents = app.serviceManager.contents;\n        widgetOpener.opened.connect((_, widget) => {\n            var _a;\n            const context = docManager.contextForWidget(widget);\n            const driveName = contents.driveName((_a = context === null || context === void 0 ? void 0 : context.path) !== null && _a !== void 0 ? _a : '');\n            if (driveName === '') {\n                // do nothing if this is the default drive\n                return;\n            }\n            const sessionContext = widget.context.sessionContext;\n            // Path the session context to include the drive name\n            // In JupyterLab 3 the path used to contain the drive name as prefix, which was\n            // also part of the /api/sessions requests. Which allowed for knowing the drive associated\n            // with a kernel.\n            // This was changed in JupyterLab 4 in https://github.com/jupyterlab/jupyterlab/pull/14519\n            // and is needed for the kernel to be aware of the drive it is associated with.\n            // This is a temporary fix until a better solution is found upstream in JupyterLab ideally.\n            // This also avoid having to patch the downstream kernels (e.g. xeus-python and pyodide)\n            sessionContext['_name'] = context === null || context === void 0 ? void 0 : context.path;\n            sessionContext['_path'] = context === null || context === void 0 ? void 0 : context.path;\n        });\n    },\n};\n/**\n * A custom plugin to share a link to a file.\n *\n * This url can be used to open a particular file in JupyterLab.\n * It also adds the corresponding room if RTC is enabled.\n *\n */\nconst shareFile = {\n    id: '@jupyterlite/application-extension:share-file',\n    requires: [IFileBrowserFactory, ITranslator],\n    autoStart: true,\n    activate: (app, factory, translator) => {\n        const trans = translator.load(I18N_BUNDLE);\n        const { commands, docRegistry } = app;\n        const { tracker } = factory;\n        commands.addCommand(CommandIDs.copyShareableLink, {\n            execute: () => {\n                const widget = tracker.currentWidget;\n                if (!widget) {\n                    return;\n                }\n                const baseUrl = PageConfig.getBaseUrl();\n                let appUrl = PageConfig.getOption('appUrl');\n                const models = Array.from(filter(widget.selectedItems(), (item) => item.type !== 'directory'));\n                if (!models.length) {\n                    return;\n                }\n                // In the notebook application:\n                // - only copy the first element\n                // - open /notebooks if it's a notebook, /edit otherwise\n                if (appUrl === '/tree') {\n                    const [model] = models;\n                    const defaultFactory = docRegistry.defaultWidgetFactory(model.path);\n                    if (defaultFactory.name === 'Notebook') {\n                        appUrl = '/notebooks';\n                    }\n                    else {\n                        appUrl = '/edit';\n                    }\n                }\n                const url = new URL(URLExt.join(baseUrl, appUrl, 'index.html'));\n                models.forEach((model) => {\n                    url.searchParams.append('path', model.path);\n                });\n                Clipboard.copyToSystem(url.href);\n            },\n            isVisible: () => !!tracker.currentWidget &&\n                Array.from(tracker.currentWidget.selectedItems()).length >= 1,\n            icon: linkIcon.bindprops({ stylesheet: 'menuItem' }),\n            label: trans.__('Copy Shareable Link'),\n        });\n    },\n};\n/**\n * The main translator connector plugin.\n */\nconst translatorConnector = {\n    id: '@jupyterlite/application-extension:translator-connector',\n    description: 'Provides the application translation connector.',\n    autoStart: true,\n    provides: ITranslatorConnector,\n    activate: (app) => {\n        return new LiteTranslatorConnector();\n    },\n};\nconst plugins = [\n    about,\n    downloadPlugin,\n    emscriptenFileSystemPlugin,\n    licensesClient,\n    liteLogo,\n    lspConnectionManager,\n    notifyCommands,\n    opener,\n    pluginManagerPlugin,\n    serviceWorkerPlugin,\n    sessionContextPatch,\n    shareFile,\n    translatorConnector,\n];\nexport default plugins;\n//# sourceMappingURL=index.js.map"],"names":["CommandIDs","open","LitePluginListModel","PluginListModel","constructor","options","super","this","_availablePlugins","pluginData","availablePlugins","map","plugin","tokenLabel","provides","name","split","undefined","locked","enabled","available","refresh","enable","entry","disable","pluginManagerPlugin","id","description","autoStart","optional","ITranslator","ICommandPalette","IPluginManager","activate","app","translator","palette","JupyterLab","async","console","info","commands","serviceManager","shell","trans","nullTranslator","load","category","__","widgetLabel","tracker","WidgetTracker","namespace","addCommand","label","execute","args","main","model","serverSettings","extraLockedPlugins","content","Plugins","title","icon","extensionIcon","caption","MainAreaWidget","reveal","ready","createWidget","add","type","trackerDataChanged","connect","save","addItem","command","URL_PATTERN","RegExp","about","docmanagerDownload","filebrowserDownload","copyShareableLink","I18N_BUNDLE","requires","IMainMenu","menu","versionNumber","version","versionInfo","className","liteWordmark","react","height","width","externalLinks","href","target","rel","copyright","body","showDialog","buttons","Dialog","createButton","helpMenu","addGroup","downloadPlugin","IDocumentManager","IFileBrowserFactory","docManager","factory","contents","isEnabled","currentWidget","contextForWidget","downloadContent","contentPath","fileName","_a","_b","_c","get","element","document","createElement","format","mimetype","mime","JSON","stringify","encodeURIComponent","Error","download","appendChild","click","removeChild","current","context","okButton","path","e","widget","Array","from","selectedItems","forEach","item","downloadIcon","bindprops","stylesheet","emscriptenFileSystemPlugin","IServiceWorkerManager","IBroadcastChannelWrapper","serviceWorkerRegistrationWrapper","broadcaster","BroadcastChannelWrapper","what","logStatus","msg","err","warn","then","catch","licensesClient","ILicensesClient","LiteLicensesClient","liteLogo","ILabShell","labShell","logo","Widget","liteIcon","container","node","elementPosition","margin","rank","lspConnectionManager","IWidgetLSPAdapterTracker","ILSPDocumentConnectionManager","languageServerManager","LanguageServerManager","fetchSessions","settings","DocumentConnectionManager","adapterTracker","notifyCommands","layoutModified","notifyCommandChanged","IRouter","ISettingRegistry","router","settingRegistry","docRegistry","parsed","request","search","match","urlParams","URLSearchParams","paths","getAll","length","files","decodeURIComponent","started","page","PageConfig","getOption","file","appUrl","defaultWidgetFactory","baseUrl","getBaseUrl","url","URL","URLExt","join","searchParams","append","window","location","toString","defaultFactory","defaultViewers","composite","getFileTypesForPath","ft","getWidgetFactory","ref","delete","pathname","navigate","skipRouting","showInBrowser","currentChanged","disconnect","register","pattern","serviceWorkerPlugin","ServiceWorkerManager","sessionContextPatch","IDocumentWidgetOpener","widgetOpener","opened","_","driveName","sessionContext","shareFile","models","filter","Clipboard","copyToSystem","isVisible","linkIcon","translatorConnector","ITranslatorConnector","LiteTranslatorConnector"],"sourceRoot":""}